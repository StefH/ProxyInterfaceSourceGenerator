//----------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by https://github.com/StefH/ProxyInterfaceSourceGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//----------------------------------------------------------------------------------------

#nullable enable
using System;
using AutoMapper;

namespace ProxyInterfaceSourceGeneratorTests.Source
{
    public class PersonProxy : IPerson
    {
        public ProxyInterfaceSourceGeneratorTests.Source.Person _Instance { get; }

        public string Name { get => _Instance.Name; set => _Instance.Name = value; }

        public string? StringNullable { get => _Instance.StringNullable; set => _Instance.StringNullable = value; }

        public long? NullableLong { get => _Instance.NullableLong; }

        public object @object { get => _Instance.@object; set => _Instance.@object = value; }



        public void Void()
        {
            _Instance.Void();
        }

        public string HelloWorld(string name)
        {
            string name_ = name;
            var result_37309470 = _Instance.HelloWorld(name_);
            return result_37309470;
        }

        public void WithParams(params string[] values)
        {
            string[] values_ = values;
            _Instance.WithParams(values_);
        }

        public string Add(string s, string @string)
        {
            string s_ = s;
            string @string_ = @string;
            var result_37309470 = _Instance.Add(s_, @string_);
            return result_37309470;
        }

        public int DefaultValue(int x = 100)
        {
            int x_ = x;
            var result_24216618 = _Instance.DefaultValue(x_);
            return result_24216618;
        }

        public void In_Out_Ref1(in int a, out int b, ref int c)
        {
            int a_ = a;
            int b_;
            int c_ = c;
            _Instance.In_Out_Ref1(in a_, out b_, ref c_);
            b = b_;
        }

        public bool Generic2<T1, T2>(int x, T1 t1, T2 t2) where T1 : struct where T2 : class, new()
        {
            int x_ = x;
            T1 t1_ = t1;
            T2 t2_ = t2;
            var result_60333940 = _Instance.Generic2<T1, T2>(x_, t1_, t2_);
            return result_60333940;
        }

        public System.Threading.Tasks.Task Method1Async()
        {
            var result_2292327 = _Instance.Method1Async();
            return result_2292327;
        }

        public System.Threading.Tasks.Task<int> Method2Async()
        {
            var result_1229624901 = _Instance.Method2Async();
            return result_1229624901;
        }

        public System.Threading.Tasks.Task<string?> Method3Async()
        {
            var result_1242717753 = _Instance.Method3Async();
            return result_1242717753;
        }





        public PersonProxy(ProxyInterfaceSourceGeneratorTests.Source.Person instance)
        {
            _Instance = instance;


        }


        public bool IsAlive { get; set; }
    }
}
#nullable disable