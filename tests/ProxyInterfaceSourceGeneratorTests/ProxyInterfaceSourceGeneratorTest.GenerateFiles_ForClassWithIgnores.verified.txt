[
  {
    HintName: ProxyInterfaceGenerator.Extra.g.cs,
    Source:
//----------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by https://github.com/StefH/ProxyInterfaceSourceGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//----------------------------------------------------------------------------------------

#nullable enable
using System;
using System.Reflection;

namespace ProxyInterfaceGenerator
{
    
    internal static class Reflection
    {
        internal static void SetBackingField<T>(T instance, string propertyName, object? value)
        {
            var type = typeof(T);
            var backingField = type.GetField($"<{propertyName}>k__BackingField", BindingFlags.Instance | BindingFlags.NonPublic);
            backingField?.SetValue(instance, value);
        }
    }

    
    [AttributeUsage(AttributeTargets.Interface)]
    internal sealed class ProxyAttribute : Attribute
    {
        public Type Type { get; }
        public bool ProxyBaseClasses { get; }
        public ProxyClassAccessibility Accessibility { get; }
        public string[]? MembersToIgnore { get; }

        public ProxyAttribute(Type type) : this(type, false, ProxyClassAccessibility.Public)
        {
        }

        public ProxyAttribute(Type type, bool proxyBaseClasses) : this(type, proxyBaseClasses, ProxyClassAccessibility.Public)
        {
        }

        public ProxyAttribute(Type type, ProxyClassAccessibility accessibility) : this(type, false, accessibility)
        {
        }

        public ProxyAttribute(Type type, ProxyClassAccessibility accessibility, string[]? membersToIgnore) : this(type, false, accessibility, membersToIgnore)
        {
        }

        public ProxyAttribute(Type type, bool proxyBaseClasses, ProxyClassAccessibility accessibility) : this(type, proxyBaseClasses, accessibility, null)
        {
        }

        public ProxyAttribute(Type type, string[]? membersToIgnore) : this(type, false, ProxyClassAccessibility.Public, null)
        {
        }

        public ProxyAttribute(Type type, bool proxyBaseClasses, ProxyClassAccessibility accessibility, string[]? membersToIgnore)
        {
            Type = type;
            ProxyBaseClasses = proxyBaseClasses;
            Accessibility = accessibility;
            MembersToIgnore = membersToIgnore;
        }
    }

    
    [AttributeUsage(AttributeTargets.Interface)]
    internal sealed class ProxyAttribute<T> : Attribute where T : class
    {
        public Type Type { get; }
        public bool ProxyBaseClasses { get; }
        public ProxyClassAccessibility Accessibility { get; }
        public string[]? MembersToIgnore { get; }

        public ProxyAttribute() : this(false, ProxyClassAccessibility.Public)
        {
        }

        public ProxyAttribute(bool proxyBaseClasses) : this(proxyBaseClasses, ProxyClassAccessibility.Public)
        {
        }

        public ProxyAttribute(ProxyClassAccessibility accessibility) : this(false, accessibility)
        {
        }

        public ProxyAttribute(ProxyClassAccessibility accessibility, string[]? membersToIgnore) : this(false, accessibility, membersToIgnore)
        {
        }

        public ProxyAttribute(bool proxyBaseClasses, ProxyClassAccessibility accessibility) : this(proxyBaseClasses, accessibility, null)
        {
        }

        public ProxyAttribute(string[]? membersToIgnore) : this(false, ProxyClassAccessibility.Public, null)
        {
        }

        public ProxyAttribute(bool proxyBaseClasses, ProxyClassAccessibility accessibility, string[]? membersToIgnore)
        {
            Type = typeof(T);
            ProxyBaseClasses = proxyBaseClasses;
            Accessibility = accessibility;
            MembersToIgnore = membersToIgnore;
        }
    }

    [Flags]
    internal enum ProxyClassAccessibility
    {
        Public = 0,

        Internal = 1
    }
}
#nullable restore
  },
  {
    HintName: ProxyInterfaceSourceGeneratorTests.Source.IFoo2.g.cs,
    Source:
//----------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by https://github.com/StefH/ProxyInterfaceSourceGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//----------------------------------------------------------------------------------------

#nullable enable
using System;

namespace ProxyInterfaceSourceGeneratorTests.Source
{
    public partial interface IFoo2
    {
        global::ProxyInterfaceSourceGeneratorTests.Source.Foo2 _Instance { get; }

        global::ProxyInterfaceSourceGeneratorTests.Source.IFoo2[] Foos { get; set; }

        global::ProxyInterfaceSourceGeneratorTests.Source.IFoo2[] DoSomethingAndGetAnArrayOfFoos();

        int Weird2();
    }
}
#nullable restore
  },
  {
    HintName: ProxyInterfaceSourceGeneratorTests.Source.Foo2Proxy.g.cs,
    Source:
//----------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by https://github.com/StefH/ProxyInterfaceSourceGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//----------------------------------------------------------------------------------------

#nullable enable
using System;

namespace ProxyInterfaceSourceGeneratorTests.Source
{
    public partial class Foo2Proxy : global::ProxyInterfaceSourceGeneratorTests.Source.IFoo2
    {
        static Foo2Proxy()
        {
            Mapster.TypeAdapterConfig<global::ProxyInterfaceSourceGeneratorTests.Source.Foo2, global::ProxyInterfaceSourceGeneratorTests.Source.IFoo2>.NewConfig().ConstructUsing(instance1325374861 => new global::ProxyInterfaceSourceGeneratorTests.Source.Foo2Proxy(instance1325374861));
            Mapster.TypeAdapterConfig<global::ProxyInterfaceSourceGeneratorTests.Source.IFoo2, global::ProxyInterfaceSourceGeneratorTests.Source.Foo2>.NewConfig().MapWith(proxy1325374861 => proxy1325374861._Instance);

        }

        private static global::ProxyInterfaceSourceGeneratorTests.Source.IFoo2[] MapToInterface(global::ProxyInterfaceSourceGeneratorTests.Source.Foo2[] value)
        {
            return Mapster.TypeAdapter.Adapt<global::ProxyInterfaceSourceGeneratorTests.Source.IFoo2[]>(value);
        }

        private static global::ProxyInterfaceSourceGeneratorTests.Source.Foo2[] MapToInstance(global::ProxyInterfaceSourceGeneratorTests.Source.IFoo2[] value)
        {
            return Mapster.TypeAdapter.Adapt<global::ProxyInterfaceSourceGeneratorTests.Source.Foo2[]>(value);
        }

        private static global::ProxyInterfaceSourceGeneratorTests.Source.IFoo2 MapToInterface(global::ProxyInterfaceSourceGeneratorTests.Source.Foo2 value)
        {
            return new global::ProxyInterfaceSourceGeneratorTests.Source.Foo2Proxy(value);
        }

        private static global::ProxyInterfaceSourceGeneratorTests.Source.Foo2 MapToInstance(global::ProxyInterfaceSourceGeneratorTests.Source.IFoo2 value)
        {
            return value._Instance;
        }



        public global::ProxyInterfaceSourceGeneratorTests.Source.Foo2 _Instance { get; }
        
        public global::ProxyInterfaceSourceGeneratorTests.Source.IFoo2[] Foos { get => MapToInterface(_Instance.Foos); set => _Instance.Foos = MapToInstance(value); }

        public global::ProxyInterfaceSourceGeneratorTests.Source.IFoo2[] DoSomethingAndGetAnArrayOfFoos()
        {
            var result_1603865878 = _Instance.DoSomethingAndGetAnArrayOfFoos();
            return MapToInterface(result_1603865878);
        }

        public int Weird2()
        {
            var result__1602200929 = _Instance.Weird2();
            return result__1602200929;
        }


        public Foo2Proxy(global::ProxyInterfaceSourceGeneratorTests.Source.Foo2 instance)
        {
            _Instance = instance;
            
        }
    }
}
#nullable restore
  }
]