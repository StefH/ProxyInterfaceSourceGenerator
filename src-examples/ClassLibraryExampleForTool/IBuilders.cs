// <auto-generated/>
// This file contains interface declarations for all Builder classes in the Microsoft Graph SDK using https://github.com/StefH/ProxyInterfaceSourceGenerator.
// Do not modify this file manually. It is generated by Generate-IBuilders.ps1 script.
// Generated on: 2025-07-23 11:57:38

// using ProxyInterfaceGenerator;

namespace Microsoft.Graph.Admin
{
    [Proxy(typeof(AdminRequestBuilder), true)]
    public partial interface IAdminRequestBuilder;
}

namespace Microsoft.Graph.Admin.Edge
{
    [Proxy(typeof(EdgeRequestBuilder), true)]
    public partial interface IEdgeRequestBuilder;
}

namespace Microsoft.Graph.Admin.Edge.InternetExplorerMode
{
    [Proxy(typeof(InternetExplorerModeRequestBuilder), true)]
    public partial interface IInternetExplorerModeRequestBuilder;
}

namespace Microsoft.Graph.Admin.Edge.InternetExplorerMode.SiteLists
{
    [Proxy(typeof(SiteListsRequestBuilder), true)]
    public partial interface ISiteListsRequestBuilder;
}

namespace Microsoft.Graph.Admin.Edge.InternetExplorerMode.SiteLists.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Admin.Edge.InternetExplorerMode.SiteLists.Item
{
    [Proxy(typeof(BrowserSiteListItemRequestBuilder), true)]
    public partial interface IBrowserSiteListItemRequestBuilder;
}

namespace Microsoft.Graph.Admin.Edge.InternetExplorerMode.SiteLists.Item.Publish
{
    [Proxy(typeof(PublishRequestBuilder), true)]
    public partial interface IPublishRequestBuilder;
}

namespace Microsoft.Graph.Admin.Edge.InternetExplorerMode.SiteLists.Item.SharedCookies
{
    [Proxy(typeof(SharedCookiesRequestBuilder), true)]
    public partial interface ISharedCookiesRequestBuilder;
}

namespace Microsoft.Graph.Admin.Edge.InternetExplorerMode.SiteLists.Item.SharedCookies.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Admin.Edge.InternetExplorerMode.SiteLists.Item.SharedCookies.Item
{
    [Proxy(typeof(BrowserSharedCookieItemRequestBuilder), true)]
    public partial interface IBrowserSharedCookieItemRequestBuilder;
}

namespace Microsoft.Graph.Admin.Edge.InternetExplorerMode.SiteLists.Item.Sites
{
    [Proxy(typeof(SitesRequestBuilder), true)]
    public partial interface ISitesRequestBuilder;
}

namespace Microsoft.Graph.Admin.Edge.InternetExplorerMode.SiteLists.Item.Sites.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Admin.Edge.InternetExplorerMode.SiteLists.Item.Sites.Item
{
    [Proxy(typeof(BrowserSiteItemRequestBuilder), true)]
    public partial interface IBrowserSiteItemRequestBuilder;
}

namespace Microsoft.Graph.Admin.Microsoft365Apps
{
    [Proxy(typeof(Microsoft365AppsRequestBuilder), true)]
    public partial interface IMicrosoft365AppsRequestBuilder;
}

namespace Microsoft.Graph.Admin.Microsoft365Apps.InstallationOptions
{
    [Proxy(typeof(InstallationOptionsRequestBuilder), true)]
    public partial interface IInstallationOptionsRequestBuilder;
}

namespace Microsoft.Graph.Admin.People
{
    [Proxy(typeof(PeopleRequestBuilder), true)]
    public partial interface IPeopleRequestBuilder;
}

namespace Microsoft.Graph.Admin.People.ItemInsights
{
    [Proxy(typeof(ItemInsightsRequestBuilder), true)]
    public partial interface IItemInsightsRequestBuilder;
}

namespace Microsoft.Graph.Admin.People.ProfileCardProperties
{
    [Proxy(typeof(ProfileCardPropertiesRequestBuilder), true)]
    public partial interface IProfileCardPropertiesRequestBuilder;
}

namespace Microsoft.Graph.Admin.People.ProfileCardProperties.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Admin.People.ProfileCardProperties.Item
{
    [Proxy(typeof(ProfileCardPropertyItemRequestBuilder), true)]
    public partial interface IProfileCardPropertyItemRequestBuilder;
}

namespace Microsoft.Graph.Admin.People.Pronouns
{
    [Proxy(typeof(PronounsRequestBuilder), true)]
    public partial interface IPronounsRequestBuilder;
}

namespace Microsoft.Graph.Admin.ReportSettings
{
    [Proxy(typeof(ReportSettingsRequestBuilder), true)]
    public partial interface IReportSettingsRequestBuilder;
}

namespace Microsoft.Graph.Admin.ServiceAnnouncement
{
    [Proxy(typeof(ServiceAnnouncementRequestBuilder), true)]
    public partial interface IServiceAnnouncementRequestBuilder;
}

namespace Microsoft.Graph.Admin.ServiceAnnouncement.HealthOverviews
{
    [Proxy(typeof(HealthOverviewsRequestBuilder), true)]
    public partial interface IHealthOverviewsRequestBuilder;
}

namespace Microsoft.Graph.Admin.ServiceAnnouncement.HealthOverviews.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Admin.ServiceAnnouncement.HealthOverviews.Item
{
    [Proxy(typeof(ServiceHealthItemRequestBuilder), true)]
    public partial interface IServiceHealthItemRequestBuilder;
}

namespace Microsoft.Graph.Admin.ServiceAnnouncement.HealthOverviews.Item.Issues
{
    [Proxy(typeof(IssuesRequestBuilder), true)]
    public partial interface IIssuesRequestBuilder;
}

namespace Microsoft.Graph.Admin.ServiceAnnouncement.HealthOverviews.Item.Issues.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Admin.ServiceAnnouncement.HealthOverviews.Item.Issues.Item
{
    [Proxy(typeof(ServiceHealthIssueItemRequestBuilder), true)]
    public partial interface IServiceHealthIssueItemRequestBuilder;
}

namespace Microsoft.Graph.Admin.ServiceAnnouncement.HealthOverviews.Item.Issues.Item.IncidentReport
{
    [Proxy(typeof(IncidentReportRequestBuilder), true)]
    public partial interface IIncidentReportRequestBuilder;
}

namespace Microsoft.Graph.Admin.ServiceAnnouncement.Issues
{
    [Proxy(typeof(IssuesRequestBuilder), true)]
    public partial interface IIssuesRequestBuilder;
}

namespace Microsoft.Graph.Admin.ServiceAnnouncement.Issues.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Admin.ServiceAnnouncement.Issues.Item
{
    [Proxy(typeof(ServiceHealthIssueItemRequestBuilder), true)]
    public partial interface IServiceHealthIssueItemRequestBuilder;
}

namespace Microsoft.Graph.Admin.ServiceAnnouncement.Issues.Item.IncidentReport
{
    [Proxy(typeof(IncidentReportRequestBuilder), true)]
    public partial interface IIncidentReportRequestBuilder;
}

namespace Microsoft.Graph.Admin.ServiceAnnouncement.Messages
{
    [Proxy(typeof(MessagesRequestBuilder), true)]
    public partial interface IMessagesRequestBuilder;
}

namespace Microsoft.Graph.Admin.ServiceAnnouncement.Messages.Archive
{
    [Proxy(typeof(ArchiveRequestBuilder), true)]
    public partial interface IArchiveRequestBuilder;
}

namespace Microsoft.Graph.Admin.ServiceAnnouncement.Messages.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Admin.ServiceAnnouncement.Messages.Favorite
{
    [Proxy(typeof(FavoriteRequestBuilder), true)]
    public partial interface IFavoriteRequestBuilder;
}

namespace Microsoft.Graph.Admin.ServiceAnnouncement.Messages.Item
{
    [Proxy(typeof(ServiceUpdateMessageItemRequestBuilder), true)]
    public partial interface IServiceUpdateMessageItemRequestBuilder;
}

namespace Microsoft.Graph.Admin.ServiceAnnouncement.Messages.Item.Attachments
{
    [Proxy(typeof(AttachmentsRequestBuilder), true)]
    public partial interface IAttachmentsRequestBuilder;
}

namespace Microsoft.Graph.Admin.ServiceAnnouncement.Messages.Item.Attachments.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Admin.ServiceAnnouncement.Messages.Item.Attachments.Item
{
    [Proxy(typeof(ServiceAnnouncementAttachmentItemRequestBuilder), true)]
    public partial interface IServiceAnnouncementAttachmentItemRequestBuilder;
}

namespace Microsoft.Graph.Admin.ServiceAnnouncement.Messages.Item.Attachments.Item.Content
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Admin.ServiceAnnouncement.Messages.Item.AttachmentsArchive
{
    [Proxy(typeof(AttachmentsArchiveRequestBuilder), true)]
    public partial interface IAttachmentsArchiveRequestBuilder;
}

namespace Microsoft.Graph.Admin.ServiceAnnouncement.Messages.MarkRead
{
    [Proxy(typeof(MarkReadRequestBuilder), true)]
    public partial interface IMarkReadRequestBuilder;
}

namespace Microsoft.Graph.Admin.ServiceAnnouncement.Messages.MarkUnread
{
    [Proxy(typeof(MarkUnreadRequestBuilder), true)]
    public partial interface IMarkUnreadRequestBuilder;
}

namespace Microsoft.Graph.Admin.ServiceAnnouncement.Messages.Unarchive
{
    [Proxy(typeof(UnarchiveRequestBuilder), true)]
    public partial interface IUnarchiveRequestBuilder;
}

namespace Microsoft.Graph.Admin.ServiceAnnouncement.Messages.Unfavorite
{
    [Proxy(typeof(UnfavoriteRequestBuilder), true)]
    public partial interface IUnfavoriteRequestBuilder;
}

namespace Microsoft.Graph.Admin.Sharepoint
{
    [Proxy(typeof(SharepointRequestBuilder), true)]
    public partial interface ISharepointRequestBuilder;
}

namespace Microsoft.Graph.Admin.Sharepoint.Settings
{
    [Proxy(typeof(SettingsRequestBuilder), true)]
    public partial interface ISettingsRequestBuilder;
}

namespace Microsoft.Graph.AgreementAcceptances
{
    [Proxy(typeof(AgreementAcceptancesRequestBuilder), true)]
    public partial interface IAgreementAcceptancesRequestBuilder;
}

namespace Microsoft.Graph.AgreementAcceptances.Item
{
    [Proxy(typeof(AgreementAcceptanceItemRequestBuilder), true)]
    public partial interface IAgreementAcceptanceItemRequestBuilder;
}

namespace Microsoft.Graph.Agreements
{
    [Proxy(typeof(AgreementsRequestBuilder), true)]
    public partial interface IAgreementsRequestBuilder;
}

namespace Microsoft.Graph.Agreements.Item
{
    [Proxy(typeof(AgreementItemRequestBuilder), true)]
    public partial interface IAgreementItemRequestBuilder;
}

namespace Microsoft.Graph.Agreements.Item.Acceptances
{
    [Proxy(typeof(AcceptancesRequestBuilder), true)]
    public partial interface IAcceptancesRequestBuilder;
}

namespace Microsoft.Graph.Agreements.Item.Acceptances.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Agreements.Item.Acceptances.Item
{
    [Proxy(typeof(AgreementAcceptanceItemRequestBuilder), true)]
    public partial interface IAgreementAcceptanceItemRequestBuilder;
}

namespace Microsoft.Graph.Agreements.Item.FileNamespace
{
    [Proxy(typeof(FileRequestBuilder), true)]
    public partial interface IFileRequestBuilder;
}

namespace Microsoft.Graph.Agreements.Item.FileNamespace.Localizations
{
    [Proxy(typeof(LocalizationsRequestBuilder), true)]
    public partial interface ILocalizationsRequestBuilder;
}

namespace Microsoft.Graph.Agreements.Item.FileNamespace.Localizations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Agreements.Item.FileNamespace.Localizations.Item
{
    [Proxy(typeof(AgreementFileLocalizationItemRequestBuilder), true)]
    public partial interface IAgreementFileLocalizationItemRequestBuilder;
}

namespace Microsoft.Graph.Agreements.Item.FileNamespace.Localizations.Item.Versions
{
    [Proxy(typeof(VersionsRequestBuilder), true)]
    public partial interface IVersionsRequestBuilder;
}

namespace Microsoft.Graph.Agreements.Item.FileNamespace.Localizations.Item.Versions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Agreements.Item.FileNamespace.Localizations.Item.Versions.Item
{
    [Proxy(typeof(AgreementFileVersionItemRequestBuilder), true)]
    public partial interface IAgreementFileVersionItemRequestBuilder;
}

namespace Microsoft.Graph.Agreements.Item.Files
{
    [Proxy(typeof(FilesRequestBuilder), true)]
    public partial interface IFilesRequestBuilder;
}

namespace Microsoft.Graph.Agreements.Item.Files.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Agreements.Item.Files.Item
{
    [Proxy(typeof(AgreementFileLocalizationItemRequestBuilder), true)]
    public partial interface IAgreementFileLocalizationItemRequestBuilder;
}

namespace Microsoft.Graph.Agreements.Item.Files.Item.Versions
{
    [Proxy(typeof(VersionsRequestBuilder), true)]
    public partial interface IVersionsRequestBuilder;
}

namespace Microsoft.Graph.Agreements.Item.Files.Item.Versions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Agreements.Item.Files.Item.Versions.Item
{
    [Proxy(typeof(AgreementFileVersionItemRequestBuilder), true)]
    public partial interface IAgreementFileVersionItemRequestBuilder;
}

namespace Microsoft.Graph.AppCatalogs
{
    [Proxy(typeof(AppCatalogsRequestBuilder), true)]
    public partial interface IAppCatalogsRequestBuilder;
}

namespace Microsoft.Graph.AppCatalogs.TeamsApps
{
    [Proxy(typeof(TeamsAppsRequestBuilder), true)]
    public partial interface ITeamsAppsRequestBuilder;
}

namespace Microsoft.Graph.AppCatalogs.TeamsApps.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.AppCatalogs.TeamsApps.Item
{
    [Proxy(typeof(TeamsAppItemRequestBuilder), true)]
    public partial interface ITeamsAppItemRequestBuilder;
}

namespace Microsoft.Graph.AppCatalogs.TeamsApps.Item.AppDefinitions
{
    [Proxy(typeof(AppDefinitionsRequestBuilder), true)]
    public partial interface IAppDefinitionsRequestBuilder;
}

namespace Microsoft.Graph.AppCatalogs.TeamsApps.Item.AppDefinitions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.AppCatalogs.TeamsApps.Item.AppDefinitions.Item
{
    [Proxy(typeof(TeamsAppDefinitionItemRequestBuilder), true)]
    public partial interface ITeamsAppDefinitionItemRequestBuilder;
}

namespace Microsoft.Graph.AppCatalogs.TeamsApps.Item.AppDefinitions.Item.Bot
{
    [Proxy(typeof(BotRequestBuilder), true)]
    public partial interface IBotRequestBuilder;
}

namespace Microsoft.Graph.Applications
{
    [Proxy(typeof(ApplicationsRequestBuilder), true)]
    public partial interface IApplicationsRequestBuilder;
}

namespace Microsoft.Graph.Applications.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Applications.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Applications.GetAvailableExtensionProperties
{
    [Proxy(typeof(GetAvailableExtensionPropertiesRequestBuilder), true)]
    public partial interface IGetAvailableExtensionPropertiesRequestBuilder;
}

namespace Microsoft.Graph.Applications.GetByIds
{
    [Proxy(typeof(GetByIdsRequestBuilder), true)]
    public partial interface IGetByIdsRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item
{
    [Proxy(typeof(ApplicationItemRequestBuilder), true)]
    public partial interface IApplicationItemRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.AddKey
{
    [Proxy(typeof(AddKeyRequestBuilder), true)]
    public partial interface IAddKeyRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.AddPassword
{
    [Proxy(typeof(AddPasswordRequestBuilder), true)]
    public partial interface IAddPasswordRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.AppManagementPolicies
{
    [Proxy(typeof(AppManagementPoliciesRequestBuilder), true)]
    public partial interface IAppManagementPoliciesRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.AppManagementPolicies.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.AppManagementPolicies.Item
{
    [Proxy(typeof(AppManagementPolicyItemRequestBuilder), true)]
    public partial interface IAppManagementPolicyItemRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.AppManagementPolicies.Item.Ref
{
    [Proxy(typeof(RefRequestBuilder), true)]
    public partial interface IRefRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.AppManagementPolicies.Ref
{
    [Proxy(typeof(RefRequestBuilder), true)]
    public partial interface IRefRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.CheckMemberGroups
{
    [Proxy(typeof(CheckMemberGroupsRequestBuilder), true)]
    public partial interface ICheckMemberGroupsRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.CheckMemberObjects
{
    [Proxy(typeof(CheckMemberObjectsRequestBuilder), true)]
    public partial interface ICheckMemberObjectsRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.CreatedOnBehalfOf
{
    [Proxy(typeof(CreatedOnBehalfOfRequestBuilder), true)]
    public partial interface ICreatedOnBehalfOfRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.ExtensionProperties
{
    [Proxy(typeof(ExtensionPropertiesRequestBuilder), true)]
    public partial interface IExtensionPropertiesRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.ExtensionProperties.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.ExtensionProperties.Item
{
    [Proxy(typeof(ExtensionPropertyItemRequestBuilder), true)]
    public partial interface IExtensionPropertyItemRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.FederatedIdentityCredentials
{
    [Proxy(typeof(FederatedIdentityCredentialsRequestBuilder), true)]
    public partial interface IFederatedIdentityCredentialsRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.FederatedIdentityCredentials.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.FederatedIdentityCredentials.Item
{
    [Proxy(typeof(FederatedIdentityCredentialItemRequestBuilder), true)]
    public partial interface IFederatedIdentityCredentialItemRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.FederatedIdentityCredentialsWithName
{
    [Proxy(typeof(FederatedIdentityCredentialsWithNameRequestBuilder), true)]
    public partial interface IFederatedIdentityCredentialsWithNameRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.GetMemberGroups
{
    [Proxy(typeof(GetMemberGroupsRequestBuilder), true)]
    public partial interface IGetMemberGroupsRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.GetMemberObjects
{
    [Proxy(typeof(GetMemberObjectsRequestBuilder), true)]
    public partial interface IGetMemberObjectsRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.HomeRealmDiscoveryPolicies
{
    [Proxy(typeof(HomeRealmDiscoveryPoliciesRequestBuilder), true)]
    public partial interface IHomeRealmDiscoveryPoliciesRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.HomeRealmDiscoveryPolicies.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.HomeRealmDiscoveryPolicies.Item
{
    [Proxy(typeof(HomeRealmDiscoveryPolicyItemRequestBuilder), true)]
    public partial interface IHomeRealmDiscoveryPolicyItemRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.Logo
{
    [Proxy(typeof(LogoRequestBuilder), true)]
    public partial interface ILogoRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.Owners
{
    [Proxy(typeof(OwnersRequestBuilder), true)]
    public partial interface IOwnersRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.Owners.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.Owners.GraphAppRoleAssignment
{
    [Proxy(typeof(GraphAppRoleAssignmentRequestBuilder), true)]
    public partial interface IGraphAppRoleAssignmentRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.Owners.GraphAppRoleAssignment.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.Owners.GraphEndpoint
{
    [Proxy(typeof(GraphEndpointRequestBuilder), true)]
    public partial interface IGraphEndpointRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.Owners.GraphEndpoint.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.Owners.GraphServicePrincipal
{
    [Proxy(typeof(GraphServicePrincipalRequestBuilder), true)]
    public partial interface IGraphServicePrincipalRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.Owners.GraphServicePrincipal.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.Owners.GraphUser
{
    [Proxy(typeof(GraphUserRequestBuilder), true)]
    public partial interface IGraphUserRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.Owners.GraphUser.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.Owners.Item
{
    [Proxy(typeof(DirectoryObjectItemRequestBuilder), true)]
    public partial interface IDirectoryObjectItemRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.Owners.Item.GraphAppRoleAssignment
{
    [Proxy(typeof(GraphAppRoleAssignmentRequestBuilder), true)]
    public partial interface IGraphAppRoleAssignmentRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.Owners.Item.GraphEndpoint
{
    [Proxy(typeof(GraphEndpointRequestBuilder), true)]
    public partial interface IGraphEndpointRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.Owners.Item.GraphServicePrincipal
{
    [Proxy(typeof(GraphServicePrincipalRequestBuilder), true)]
    public partial interface IGraphServicePrincipalRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.Owners.Item.GraphUser
{
    [Proxy(typeof(GraphUserRequestBuilder), true)]
    public partial interface IGraphUserRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.Owners.Item.Ref
{
    [Proxy(typeof(RefRequestBuilder), true)]
    public partial interface IRefRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.Owners.Ref
{
    [Proxy(typeof(RefRequestBuilder), true)]
    public partial interface IRefRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.RemoveKey
{
    [Proxy(typeof(RemoveKeyRequestBuilder), true)]
    public partial interface IRemoveKeyRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.RemovePassword
{
    [Proxy(typeof(RemovePasswordRequestBuilder), true)]
    public partial interface IRemovePasswordRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.Restore
{
    [Proxy(typeof(RestoreRequestBuilder), true)]
    public partial interface IRestoreRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.SetVerifiedPublisher
{
    [Proxy(typeof(SetVerifiedPublisherRequestBuilder), true)]
    public partial interface ISetVerifiedPublisherRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.Synchronization
{
    [Proxy(typeof(SynchronizationRequestBuilder), true)]
    public partial interface ISynchronizationRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.Synchronization.AcquireAccessToken
{
    [Proxy(typeof(AcquireAccessTokenRequestBuilder), true)]
    public partial interface IAcquireAccessTokenRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.Synchronization.Jobs
{
    [Proxy(typeof(JobsRequestBuilder), true)]
    public partial interface IJobsRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.Synchronization.Jobs.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.Synchronization.Jobs.Item
{
    [Proxy(typeof(SynchronizationJobItemRequestBuilder), true)]
    public partial interface ISynchronizationJobItemRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.Synchronization.Jobs.Item.BulkUpload
{
    [Proxy(typeof(BulkUploadRequestBuilder), true)]
    public partial interface IBulkUploadRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.Synchronization.Jobs.Item.BulkUpload.Value
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.Synchronization.Jobs.Item.Pause
{
    [Proxy(typeof(PauseRequestBuilder), true)]
    public partial interface IPauseRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.Synchronization.Jobs.Item.ProvisionOnDemand
{
    [Proxy(typeof(ProvisionOnDemandRequestBuilder), true)]
    public partial interface IProvisionOnDemandRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.Synchronization.Jobs.Item.Restart
{
    [Proxy(typeof(RestartRequestBuilder), true)]
    public partial interface IRestartRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.Synchronization.Jobs.Item.Schema
{
    [Proxy(typeof(SchemaRequestBuilder), true)]
    public partial interface ISchemaRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.Synchronization.Jobs.Item.Schema.Directories
{
    [Proxy(typeof(DirectoriesRequestBuilder), true)]
    public partial interface IDirectoriesRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.Synchronization.Jobs.Item.Schema.Directories.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.Synchronization.Jobs.Item.Schema.Directories.Item
{
    [Proxy(typeof(DirectoryDefinitionItemRequestBuilder), true)]
    public partial interface IDirectoryDefinitionItemRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.Synchronization.Jobs.Item.Schema.Directories.Item.Discover
{
    [Proxy(typeof(DiscoverRequestBuilder), true)]
    public partial interface IDiscoverRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.Synchronization.Jobs.Item.Schema.FilterOperators
{
    [Proxy(typeof(FilterOperatorsRequestBuilder), true)]
    public partial interface IFilterOperatorsRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.Synchronization.Jobs.Item.Schema.Functions
{
    [Proxy(typeof(FunctionsRequestBuilder), true)]
    public partial interface IFunctionsRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.Synchronization.Jobs.Item.Schema.ParseExpression
{
    [Proxy(typeof(ParseExpressionRequestBuilder), true)]
    public partial interface IParseExpressionRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.Synchronization.Jobs.Item.Start
{
    [Proxy(typeof(StartRequestBuilder), true)]
    public partial interface IStartRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.Synchronization.Jobs.Item.ValidateCredentials
{
    [Proxy(typeof(ValidateCredentialsRequestBuilder), true)]
    public partial interface IValidateCredentialsRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.Synchronization.Jobs.ValidateCredentials
{
    [Proxy(typeof(ValidateCredentialsRequestBuilder), true)]
    public partial interface IValidateCredentialsRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.Synchronization.Secrets
{
    [Proxy(typeof(SecretsRequestBuilder), true)]
    public partial interface ISecretsRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.Synchronization.Secrets.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.Synchronization.Templates
{
    [Proxy(typeof(TemplatesRequestBuilder), true)]
    public partial interface ITemplatesRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.Synchronization.Templates.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.Synchronization.Templates.Item
{
    [Proxy(typeof(SynchronizationTemplateItemRequestBuilder), true)]
    public partial interface ISynchronizationTemplateItemRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.Synchronization.Templates.Item.Schema
{
    [Proxy(typeof(SchemaRequestBuilder), true)]
    public partial interface ISchemaRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.Synchronization.Templates.Item.Schema.Directories
{
    [Proxy(typeof(DirectoriesRequestBuilder), true)]
    public partial interface IDirectoriesRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.Synchronization.Templates.Item.Schema.Directories.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.Synchronization.Templates.Item.Schema.Directories.Item
{
    [Proxy(typeof(DirectoryDefinitionItemRequestBuilder), true)]
    public partial interface IDirectoryDefinitionItemRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.Synchronization.Templates.Item.Schema.Directories.Item.Discover
{
    [Proxy(typeof(DiscoverRequestBuilder), true)]
    public partial interface IDiscoverRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.Synchronization.Templates.Item.Schema.FilterOperators
{
    [Proxy(typeof(FilterOperatorsRequestBuilder), true)]
    public partial interface IFilterOperatorsRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.Synchronization.Templates.Item.Schema.Functions
{
    [Proxy(typeof(FunctionsRequestBuilder), true)]
    public partial interface IFunctionsRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.Synchronization.Templates.Item.Schema.ParseExpression
{
    [Proxy(typeof(ParseExpressionRequestBuilder), true)]
    public partial interface IParseExpressionRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.TokenIssuancePolicies
{
    [Proxy(typeof(TokenIssuancePoliciesRequestBuilder), true)]
    public partial interface ITokenIssuancePoliciesRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.TokenIssuancePolicies.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.TokenIssuancePolicies.Item
{
    [Proxy(typeof(TokenIssuancePolicyItemRequestBuilder), true)]
    public partial interface ITokenIssuancePolicyItemRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.TokenIssuancePolicies.Item.Ref
{
    [Proxy(typeof(RefRequestBuilder), true)]
    public partial interface IRefRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.TokenIssuancePolicies.Ref
{
    [Proxy(typeof(RefRequestBuilder), true)]
    public partial interface IRefRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.TokenLifetimePolicies
{
    [Proxy(typeof(TokenLifetimePoliciesRequestBuilder), true)]
    public partial interface ITokenLifetimePoliciesRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.TokenLifetimePolicies.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.TokenLifetimePolicies.Item
{
    [Proxy(typeof(TokenLifetimePolicyItemRequestBuilder), true)]
    public partial interface ITokenLifetimePolicyItemRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.TokenLifetimePolicies.Item.Ref
{
    [Proxy(typeof(RefRequestBuilder), true)]
    public partial interface IRefRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.TokenLifetimePolicies.Ref
{
    [Proxy(typeof(RefRequestBuilder), true)]
    public partial interface IRefRequestBuilder;
}

namespace Microsoft.Graph.Applications.Item.UnsetVerifiedPublisher
{
    [Proxy(typeof(UnsetVerifiedPublisherRequestBuilder), true)]
    public partial interface IUnsetVerifiedPublisherRequestBuilder;
}

namespace Microsoft.Graph.Applications.ValidateProperties
{
    [Proxy(typeof(ValidatePropertiesRequestBuilder), true)]
    public partial interface IValidatePropertiesRequestBuilder;
}

namespace Microsoft.Graph.ApplicationsWithAppId
{
    [Proxy(typeof(ApplicationsWithAppIdRequestBuilder), true)]
    public partial interface IApplicationsWithAppIdRequestBuilder;
}

namespace Microsoft.Graph.ApplicationsWithUniqueName
{
    [Proxy(typeof(ApplicationsWithUniqueNameRequestBuilder), true)]
    public partial interface IApplicationsWithUniqueNameRequestBuilder;
}

namespace Microsoft.Graph.ApplicationTemplates
{
    [Proxy(typeof(ApplicationTemplatesRequestBuilder), true)]
    public partial interface IApplicationTemplatesRequestBuilder;
}

namespace Microsoft.Graph.ApplicationTemplates.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.ApplicationTemplates.Item
{
    [Proxy(typeof(ApplicationTemplateItemRequestBuilder), true)]
    public partial interface IApplicationTemplateItemRequestBuilder;
}

namespace Microsoft.Graph.ApplicationTemplates.Item.Instantiate
{
    [Proxy(typeof(InstantiateRequestBuilder), true)]
    public partial interface IInstantiateRequestBuilder;
}

namespace Microsoft.Graph.AuditLogs
{
    [Proxy(typeof(AuditLogsRequestBuilder), true)]
    public partial interface IAuditLogsRequestBuilder;
}

namespace Microsoft.Graph.AuditLogs.DirectoryAudits
{
    [Proxy(typeof(DirectoryAuditsRequestBuilder), true)]
    public partial interface IDirectoryAuditsRequestBuilder;
}

namespace Microsoft.Graph.AuditLogs.DirectoryAudits.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.AuditLogs.DirectoryAudits.Item
{
    [Proxy(typeof(DirectoryAuditItemRequestBuilder), true)]
    public partial interface IDirectoryAuditItemRequestBuilder;
}

namespace Microsoft.Graph.AuditLogs.Provisioning
{
    [Proxy(typeof(ProvisioningRequestBuilder), true)]
    public partial interface IProvisioningRequestBuilder;
}

namespace Microsoft.Graph.AuditLogs.Provisioning.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.AuditLogs.Provisioning.Item
{
    [Proxy(typeof(ProvisioningObjectSummaryItemRequestBuilder), true)]
    public partial interface IProvisioningObjectSummaryItemRequestBuilder;
}

namespace Microsoft.Graph.AuditLogs.SignIns
{
    [Proxy(typeof(SignInsRequestBuilder), true)]
    public partial interface ISignInsRequestBuilder;
}

namespace Microsoft.Graph.AuditLogs.SignIns.ConfirmCompromised
{
    [Proxy(typeof(ConfirmCompromisedRequestBuilder), true)]
    public partial interface IConfirmCompromisedRequestBuilder;
}

namespace Microsoft.Graph.AuditLogs.SignIns.ConfirmSafe
{
    [Proxy(typeof(ConfirmSafeRequestBuilder), true)]
    public partial interface IConfirmSafeRequestBuilder;
}

namespace Microsoft.Graph.AuditLogs.SignIns.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.AuditLogs.SignIns.Dismiss
{
    [Proxy(typeof(DismissRequestBuilder), true)]
    public partial interface IDismissRequestBuilder;
}

namespace Microsoft.Graph.AuditLogs.SignIns.Item
{
    [Proxy(typeof(SignInItemRequestBuilder), true)]
    public partial interface ISignInItemRequestBuilder;
}

namespace Microsoft.Graph.AuthenticationMethodConfigurations
{
    [Proxy(typeof(AuthenticationMethodConfigurationsRequestBuilder), true)]
    public partial interface IAuthenticationMethodConfigurationsRequestBuilder;
}

namespace Microsoft.Graph.AuthenticationMethodConfigurations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.AuthenticationMethodConfigurations.Item
{
    [Proxy(typeof(AuthenticationMethodConfigurationItemRequestBuilder), true)]
    public partial interface IAuthenticationMethodConfigurationItemRequestBuilder;
}

namespace Microsoft.Graph.AuthenticationMethodsPolicy
{
    [Proxy(typeof(AuthenticationMethodsPolicyRequestBuilder), true)]
    public partial interface IAuthenticationMethodsPolicyRequestBuilder;
}

namespace Microsoft.Graph.AuthenticationMethodsPolicy.AuthenticationMethodConfigurations
{
    [Proxy(typeof(AuthenticationMethodConfigurationsRequestBuilder), true)]
    public partial interface IAuthenticationMethodConfigurationsRequestBuilder;
}

namespace Microsoft.Graph.AuthenticationMethodsPolicy.AuthenticationMethodConfigurations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.AuthenticationMethodsPolicy.AuthenticationMethodConfigurations.Item
{
    [Proxy(typeof(AuthenticationMethodConfigurationItemRequestBuilder), true)]
    public partial interface IAuthenticationMethodConfigurationItemRequestBuilder;
}

namespace Microsoft.Graph.CertificateBasedAuthConfiguration
{
    [Proxy(typeof(CertificateBasedAuthConfigurationRequestBuilder), true)]
    public partial interface ICertificateBasedAuthConfigurationRequestBuilder;
}

namespace Microsoft.Graph.CertificateBasedAuthConfiguration.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.CertificateBasedAuthConfiguration.Item
{
    [Proxy(typeof(CertificateBasedAuthConfigurationItemRequestBuilder), true)]
    public partial interface ICertificateBasedAuthConfigurationItemRequestBuilder;
}

namespace Microsoft.Graph.Chats
{
    [Proxy(typeof(ChatsRequestBuilder), true)]
    public partial interface IChatsRequestBuilder;
}

namespace Microsoft.Graph.Chats.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Chats.GetAllMessages
{
    [Proxy(typeof(GetAllMessagesRequestBuilder), true)]
    public partial interface IGetAllMessagesRequestBuilder;
}

namespace Microsoft.Graph.Chats.GetAllRetainedMessages
{
    [Proxy(typeof(GetAllRetainedMessagesRequestBuilder), true)]
    public partial interface IGetAllRetainedMessagesRequestBuilder;
}

namespace Microsoft.Graph.Chats.Item
{
    [Proxy(typeof(ChatItemRequestBuilder), true)]
    public partial interface IChatItemRequestBuilder;
}

namespace Microsoft.Graph.Chats.Item.HideForUser
{
    [Proxy(typeof(HideForUserRequestBuilder), true)]
    public partial interface IHideForUserRequestBuilder;
}

namespace Microsoft.Graph.Chats.Item.InstalledApps
{
    [Proxy(typeof(InstalledAppsRequestBuilder), true)]
    public partial interface IInstalledAppsRequestBuilder;
}

namespace Microsoft.Graph.Chats.Item.InstalledApps.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Chats.Item.InstalledApps.Item
{
    [Proxy(typeof(TeamsAppInstallationItemRequestBuilder), true)]
    public partial interface ITeamsAppInstallationItemRequestBuilder;
}

namespace Microsoft.Graph.Chats.Item.InstalledApps.Item.TeamsApp
{
    [Proxy(typeof(TeamsAppRequestBuilder), true)]
    public partial interface ITeamsAppRequestBuilder;
}

namespace Microsoft.Graph.Chats.Item.InstalledApps.Item.TeamsAppDefinition
{
    [Proxy(typeof(TeamsAppDefinitionRequestBuilder), true)]
    public partial interface ITeamsAppDefinitionRequestBuilder;
}

namespace Microsoft.Graph.Chats.Item.InstalledApps.Item.Upgrade
{
    [Proxy(typeof(UpgradeRequestBuilder), true)]
    public partial interface IUpgradeRequestBuilder;
}

namespace Microsoft.Graph.Chats.Item.LastMessagePreview
{
    [Proxy(typeof(LastMessagePreviewRequestBuilder), true)]
    public partial interface ILastMessagePreviewRequestBuilder;
}

namespace Microsoft.Graph.Chats.Item.MarkChatReadForUser
{
    [Proxy(typeof(MarkChatReadForUserRequestBuilder), true)]
    public partial interface IMarkChatReadForUserRequestBuilder;
}

namespace Microsoft.Graph.Chats.Item.MarkChatUnreadForUser
{
    [Proxy(typeof(MarkChatUnreadForUserRequestBuilder), true)]
    public partial interface IMarkChatUnreadForUserRequestBuilder;
}

namespace Microsoft.Graph.Chats.Item.Members
{
    [Proxy(typeof(MembersRequestBuilder), true)]
    public partial interface IMembersRequestBuilder;
}

namespace Microsoft.Graph.Chats.Item.Members.Add
{
    [Proxy(typeof(AddRequestBuilder), true)]
    public partial interface IAddRequestBuilder;
}

namespace Microsoft.Graph.Chats.Item.Members.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Chats.Item.Members.Item
{
    [Proxy(typeof(ConversationMemberItemRequestBuilder), true)]
    public partial interface IConversationMemberItemRequestBuilder;
}

namespace Microsoft.Graph.Chats.Item.Members.Remove
{
    [Proxy(typeof(RemoveRequestBuilder), true)]
    public partial interface IRemoveRequestBuilder;
}

namespace Microsoft.Graph.Chats.Item.Messages
{
    [Proxy(typeof(MessagesRequestBuilder), true)]
    public partial interface IMessagesRequestBuilder;
}

namespace Microsoft.Graph.Chats.Item.Messages.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Chats.Item.Messages.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Chats.Item.Messages.Item
{
    [Proxy(typeof(ChatMessageItemRequestBuilder), true)]
    public partial interface IChatMessageItemRequestBuilder;
}

namespace Microsoft.Graph.Chats.Item.Messages.Item.HostedContents
{
    [Proxy(typeof(HostedContentsRequestBuilder), true)]
    public partial interface IHostedContentsRequestBuilder;
}

namespace Microsoft.Graph.Chats.Item.Messages.Item.HostedContents.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Chats.Item.Messages.Item.HostedContents.Item
{
    [Proxy(typeof(ChatMessageHostedContentItemRequestBuilder), true)]
    public partial interface IChatMessageHostedContentItemRequestBuilder;
}

namespace Microsoft.Graph.Chats.Item.Messages.Item.HostedContents.Item.Value
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Chats.Item.Messages.Item.Replies
{
    [Proxy(typeof(RepliesRequestBuilder), true)]
    public partial interface IRepliesRequestBuilder;
}

namespace Microsoft.Graph.Chats.Item.Messages.Item.Replies.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Chats.Item.Messages.Item.Replies.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Chats.Item.Messages.Item.Replies.Item
{
    [Proxy(typeof(ChatMessageItemRequestBuilder), true)]
    public partial interface IChatMessageItemRequestBuilder;
}

namespace Microsoft.Graph.Chats.Item.Messages.Item.Replies.Item.HostedContents
{
    [Proxy(typeof(HostedContentsRequestBuilder), true)]
    public partial interface IHostedContentsRequestBuilder;
}

namespace Microsoft.Graph.Chats.Item.Messages.Item.Replies.Item.HostedContents.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Chats.Item.Messages.Item.Replies.Item.HostedContents.Item
{
    [Proxy(typeof(ChatMessageHostedContentItemRequestBuilder), true)]
    public partial interface IChatMessageHostedContentItemRequestBuilder;
}

namespace Microsoft.Graph.Chats.Item.Messages.Item.Replies.Item.HostedContents.Item.Value
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Chats.Item.Messages.Item.Replies.Item.SetReaction
{
    [Proxy(typeof(SetReactionRequestBuilder), true)]
    public partial interface ISetReactionRequestBuilder;
}

namespace Microsoft.Graph.Chats.Item.Messages.Item.Replies.Item.SoftDelete
{
    [Proxy(typeof(SoftDeleteRequestBuilder), true)]
    public partial interface ISoftDeleteRequestBuilder;
}

namespace Microsoft.Graph.Chats.Item.Messages.Item.Replies.Item.UndoSoftDelete
{
    [Proxy(typeof(UndoSoftDeleteRequestBuilder), true)]
    public partial interface IUndoSoftDeleteRequestBuilder;
}

namespace Microsoft.Graph.Chats.Item.Messages.Item.Replies.Item.UnsetReaction
{
    [Proxy(typeof(UnsetReactionRequestBuilder), true)]
    public partial interface IUnsetReactionRequestBuilder;
}

namespace Microsoft.Graph.Chats.Item.Messages.Item.SetReaction
{
    [Proxy(typeof(SetReactionRequestBuilder), true)]
    public partial interface ISetReactionRequestBuilder;
}

namespace Microsoft.Graph.Chats.Item.Messages.Item.SoftDelete
{
    [Proxy(typeof(SoftDeleteRequestBuilder), true)]
    public partial interface ISoftDeleteRequestBuilder;
}

namespace Microsoft.Graph.Chats.Item.Messages.Item.UndoSoftDelete
{
    [Proxy(typeof(UndoSoftDeleteRequestBuilder), true)]
    public partial interface IUndoSoftDeleteRequestBuilder;
}

namespace Microsoft.Graph.Chats.Item.Messages.Item.UnsetReaction
{
    [Proxy(typeof(UnsetReactionRequestBuilder), true)]
    public partial interface IUnsetReactionRequestBuilder;
}

namespace Microsoft.Graph.Chats.Item.PermissionGrants
{
    [Proxy(typeof(PermissionGrantsRequestBuilder), true)]
    public partial interface IPermissionGrantsRequestBuilder;
}

namespace Microsoft.Graph.Chats.Item.PermissionGrants.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Chats.Item.PermissionGrants.Item
{
    [Proxy(typeof(ResourceSpecificPermissionGrantItemRequestBuilder), true)]
    public partial interface IResourceSpecificPermissionGrantItemRequestBuilder;
}

namespace Microsoft.Graph.Chats.Item.PinnedMessages
{
    [Proxy(typeof(PinnedMessagesRequestBuilder), true)]
    public partial interface IPinnedMessagesRequestBuilder;
}

namespace Microsoft.Graph.Chats.Item.PinnedMessages.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Chats.Item.PinnedMessages.Item
{
    [Proxy(typeof(PinnedChatMessageInfoItemRequestBuilder), true)]
    public partial interface IPinnedChatMessageInfoItemRequestBuilder;
}

namespace Microsoft.Graph.Chats.Item.PinnedMessages.Item.Message
{
    [Proxy(typeof(MessageRequestBuilder), true)]
    public partial interface IMessageRequestBuilder;
}

namespace Microsoft.Graph.Chats.Item.SendActivityNotification
{
    [Proxy(typeof(SendActivityNotificationRequestBuilder), true)]
    public partial interface ISendActivityNotificationRequestBuilder;
}

namespace Microsoft.Graph.Chats.Item.Tabs
{
    [Proxy(typeof(TabsRequestBuilder), true)]
    public partial interface ITabsRequestBuilder;
}

namespace Microsoft.Graph.Chats.Item.Tabs.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Chats.Item.Tabs.Item
{
    [Proxy(typeof(TeamsTabItemRequestBuilder), true)]
    public partial interface ITeamsTabItemRequestBuilder;
}

namespace Microsoft.Graph.Chats.Item.Tabs.Item.TeamsApp
{
    [Proxy(typeof(TeamsAppRequestBuilder), true)]
    public partial interface ITeamsAppRequestBuilder;
}

namespace Microsoft.Graph.Chats.Item.UnhideForUser
{
    [Proxy(typeof(UnhideForUserRequestBuilder), true)]
    public partial interface IUnhideForUserRequestBuilder;
}

namespace Microsoft.Graph.Communications
{
    [Proxy(typeof(CommunicationsRequestBuilder), true)]
    public partial interface ICommunicationsRequestBuilder;
}

namespace Microsoft.Graph.Communications.CallRecords
{
    [Proxy(typeof(CallRecordsRequestBuilder), true)]
    public partial interface ICallRecordsRequestBuilder;
}

namespace Microsoft.Graph.Communications.CallRecords.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Communications.CallRecords.Item
{
    [Proxy(typeof(CallRecordItemRequestBuilder), true)]
    public partial interface ICallRecordItemRequestBuilder;
}

namespace Microsoft.Graph.Communications.CallRecords.Item.Organizer_v2
{
    [Proxy(typeof(Organizer_v2RequestBuilder), true)]
    public partial interface IOrganizer_v2RequestBuilder;
}

namespace Microsoft.Graph.Communications.CallRecords.Item.Participants_v2
{
    [Proxy(typeof(Participants_v2RequestBuilder), true)]
    public partial interface IParticipants_v2RequestBuilder;
}

namespace Microsoft.Graph.Communications.CallRecords.Item.Participants_v2.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Communications.CallRecords.Item.Participants_v2.Item
{
    [Proxy(typeof(ParticipantItemRequestBuilder), true)]
    public partial interface IParticipantItemRequestBuilder;
}

namespace Microsoft.Graph.Communications.CallRecords.Item.Sessions
{
    [Proxy(typeof(SessionsRequestBuilder), true)]
    public partial interface ISessionsRequestBuilder;
}

namespace Microsoft.Graph.Communications.CallRecords.Item.Sessions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Communications.CallRecords.Item.Sessions.Item
{
    [Proxy(typeof(SessionItemRequestBuilder), true)]
    public partial interface ISessionItemRequestBuilder;
}

namespace Microsoft.Graph.Communications.CallRecords.Item.Sessions.Item.Segments
{
    [Proxy(typeof(SegmentsRequestBuilder), true)]
    public partial interface ISegmentsRequestBuilder;
}

namespace Microsoft.Graph.Communications.CallRecords.Item.Sessions.Item.Segments.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Communications.CallRecords.Item.Sessions.Item.Segments.Item
{
    [Proxy(typeof(SegmentItemRequestBuilder), true)]
    public partial interface ISegmentItemRequestBuilder;
}

namespace Microsoft.Graph.Communications.CallRecords.MicrosoftGraphCallRecordsGetDirectRoutingCallsWithFromDateTimeWithToDateTime
{
    [Proxy(typeof(MicrosoftGraphCallRecordsGetDirectRoutingCallsWithFromDateTimeWithToDateTimeRequestBuilder), true)]
    public partial interface IMicrosoftGraphCallRecordsGetDirectRoutingCallsWithFromDateTimeWithToDateTimeRequestBuilder;
}

namespace Microsoft.Graph.Communications.CallRecords.MicrosoftGraphCallRecordsGetPstnCallsWithFromDateTimeWithToDateTime
{
    [Proxy(typeof(MicrosoftGraphCallRecordsGetPstnCallsWithFromDateTimeWithToDateTimeRequestBuilder), true)]
    public partial interface IMicrosoftGraphCallRecordsGetPstnCallsWithFromDateTimeWithToDateTimeRequestBuilder;
}

namespace Microsoft.Graph.Communications.Calls
{
    [Proxy(typeof(CallsRequestBuilder), true)]
    public partial interface ICallsRequestBuilder;
}

namespace Microsoft.Graph.Communications.Calls.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Communications.Calls.Item
{
    [Proxy(typeof(CallItemRequestBuilder), true)]
    public partial interface ICallItemRequestBuilder;
}

namespace Microsoft.Graph.Communications.Calls.Item.AddLargeGalleryView
{
    [Proxy(typeof(AddLargeGalleryViewRequestBuilder), true)]
    public partial interface IAddLargeGalleryViewRequestBuilder;
}

namespace Microsoft.Graph.Communications.Calls.Item.Answer
{
    [Proxy(typeof(AnswerRequestBuilder), true)]
    public partial interface IAnswerRequestBuilder;
}

namespace Microsoft.Graph.Communications.Calls.Item.AudioRoutingGroups
{
    [Proxy(typeof(AudioRoutingGroupsRequestBuilder), true)]
    public partial interface IAudioRoutingGroupsRequestBuilder;
}

namespace Microsoft.Graph.Communications.Calls.Item.AudioRoutingGroups.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Communications.Calls.Item.AudioRoutingGroups.Item
{
    [Proxy(typeof(AudioRoutingGroupItemRequestBuilder), true)]
    public partial interface IAudioRoutingGroupItemRequestBuilder;
}

namespace Microsoft.Graph.Communications.Calls.Item.CancelMediaProcessing
{
    [Proxy(typeof(CancelMediaProcessingRequestBuilder), true)]
    public partial interface ICancelMediaProcessingRequestBuilder;
}

namespace Microsoft.Graph.Communications.Calls.Item.ChangeScreenSharingRole
{
    [Proxy(typeof(ChangeScreenSharingRoleRequestBuilder), true)]
    public partial interface IChangeScreenSharingRoleRequestBuilder;
}

namespace Microsoft.Graph.Communications.Calls.Item.ContentSharingSessions
{
    [Proxy(typeof(ContentSharingSessionsRequestBuilder), true)]
    public partial interface IContentSharingSessionsRequestBuilder;
}

namespace Microsoft.Graph.Communications.Calls.Item.ContentSharingSessions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Communications.Calls.Item.ContentSharingSessions.Item
{
    [Proxy(typeof(ContentSharingSessionItemRequestBuilder), true)]
    public partial interface IContentSharingSessionItemRequestBuilder;
}

namespace Microsoft.Graph.Communications.Calls.Item.KeepAlive
{
    [Proxy(typeof(KeepAliveRequestBuilder), true)]
    public partial interface IKeepAliveRequestBuilder;
}

namespace Microsoft.Graph.Communications.Calls.Item.Mute
{
    [Proxy(typeof(MuteRequestBuilder), true)]
    public partial interface IMuteRequestBuilder;
}

namespace Microsoft.Graph.Communications.Calls.Item.Operations
{
    [Proxy(typeof(OperationsRequestBuilder), true)]
    public partial interface IOperationsRequestBuilder;
}

namespace Microsoft.Graph.Communications.Calls.Item.Operations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Communications.Calls.Item.Operations.Item
{
    [Proxy(typeof(CommsOperationItemRequestBuilder), true)]
    public partial interface ICommsOperationItemRequestBuilder;
}

namespace Microsoft.Graph.Communications.Calls.Item.Participants
{
    [Proxy(typeof(ParticipantsRequestBuilder), true)]
    public partial interface IParticipantsRequestBuilder;
}

namespace Microsoft.Graph.Communications.Calls.Item.Participants.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Communications.Calls.Item.Participants.Invite
{
    [Proxy(typeof(InviteRequestBuilder), true)]
    public partial interface IInviteRequestBuilder;
}

namespace Microsoft.Graph.Communications.Calls.Item.Participants.Item
{
    [Proxy(typeof(ParticipantItemRequestBuilder), true)]
    public partial interface IParticipantItemRequestBuilder;
}

namespace Microsoft.Graph.Communications.Calls.Item.Participants.Item.Mute
{
    [Proxy(typeof(MuteRequestBuilder), true)]
    public partial interface IMuteRequestBuilder;
}

namespace Microsoft.Graph.Communications.Calls.Item.Participants.Item.StartHoldMusic
{
    [Proxy(typeof(StartHoldMusicRequestBuilder), true)]
    public partial interface IStartHoldMusicRequestBuilder;
}

namespace Microsoft.Graph.Communications.Calls.Item.Participants.Item.StopHoldMusic
{
    [Proxy(typeof(StopHoldMusicRequestBuilder), true)]
    public partial interface IStopHoldMusicRequestBuilder;
}

namespace Microsoft.Graph.Communications.Calls.Item.PlayPrompt
{
    [Proxy(typeof(PlayPromptRequestBuilder), true)]
    public partial interface IPlayPromptRequestBuilder;
}

namespace Microsoft.Graph.Communications.Calls.Item.RecordResponse
{
    [Proxy(typeof(RecordResponseRequestBuilder), true)]
    public partial interface IRecordResponseRequestBuilder;
}

namespace Microsoft.Graph.Communications.Calls.Item.Redirect
{
    [Proxy(typeof(RedirectRequestBuilder), true)]
    public partial interface IRedirectRequestBuilder;
}

namespace Microsoft.Graph.Communications.Calls.Item.Reject
{
    [Proxy(typeof(RejectRequestBuilder), true)]
    public partial interface IRejectRequestBuilder;
}

namespace Microsoft.Graph.Communications.Calls.Item.SendDtmfTones
{
    [Proxy(typeof(SendDtmfTonesRequestBuilder), true)]
    public partial interface ISendDtmfTonesRequestBuilder;
}

namespace Microsoft.Graph.Communications.Calls.Item.SubscribeToTone
{
    [Proxy(typeof(SubscribeToToneRequestBuilder), true)]
    public partial interface ISubscribeToToneRequestBuilder;
}

namespace Microsoft.Graph.Communications.Calls.Item.Transfer
{
    [Proxy(typeof(TransferRequestBuilder), true)]
    public partial interface ITransferRequestBuilder;
}

namespace Microsoft.Graph.Communications.Calls.Item.Unmute
{
    [Proxy(typeof(UnmuteRequestBuilder), true)]
    public partial interface IUnmuteRequestBuilder;
}

namespace Microsoft.Graph.Communications.Calls.Item.UpdateRecordingStatus
{
    [Proxy(typeof(UpdateRecordingStatusRequestBuilder), true)]
    public partial interface IUpdateRecordingStatusRequestBuilder;
}

namespace Microsoft.Graph.Communications.Calls.LogTeleconferenceDeviceQuality
{
    [Proxy(typeof(LogTeleconferenceDeviceQualityRequestBuilder), true)]
    public partial interface ILogTeleconferenceDeviceQualityRequestBuilder;
}

namespace Microsoft.Graph.Communications.GetPresencesByUserId
{
    [Proxy(typeof(GetPresencesByUserIdRequestBuilder), true)]
    public partial interface IGetPresencesByUserIdRequestBuilder;
}

namespace Microsoft.Graph.Communications.OnlineMeetings
{
    [Proxy(typeof(OnlineMeetingsRequestBuilder), true)]
    public partial interface IOnlineMeetingsRequestBuilder;
}

namespace Microsoft.Graph.Communications.OnlineMeetings.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Communications.OnlineMeetings.CreateOrGet
{
    [Proxy(typeof(CreateOrGetRequestBuilder), true)]
    public partial interface ICreateOrGetRequestBuilder;
}

namespace Microsoft.Graph.Communications.OnlineMeetings.GetAllRecordingsmeetingOrganizerUserIdMeetingOrganizerUserIdWithStartDateTimeWithEndDateTime
{
    [Proxy(typeof(GetAllRecordingsmeetingOrganizerUserIdMeetingOrganizerUserIdWithStartDateTimeWithEndDateTimeRequestBuilder), true)]
    public partial interface IGetAllRecordingsmeetingOrganizerUserIdMeetingOrganizerUserIdWithStartDateTimeWithEndDateTimeRequestBuilder;
}

namespace Microsoft.Graph.Communications.OnlineMeetings.GetAllTranscriptsmeetingOrganizerUserIdMeetingOrganizerUserIdWithStartDateTimeWithEndDateTime
{
    [Proxy(typeof(GetAllTranscriptsmeetingOrganizerUserIdMeetingOrganizerUserIdWithStartDateTimeWithEndDateTimeRequestBuilder), true)]
    public partial interface IGetAllTranscriptsmeetingOrganizerUserIdMeetingOrganizerUserIdWithStartDateTimeWithEndDateTimeRequestBuilder;
}

namespace Microsoft.Graph.Communications.OnlineMeetings.Item
{
    [Proxy(typeof(OnlineMeetingItemRequestBuilder), true)]
    public partial interface IOnlineMeetingItemRequestBuilder;
}

namespace Microsoft.Graph.Communications.OnlineMeetings.Item.AttendanceReports
{
    [Proxy(typeof(AttendanceReportsRequestBuilder), true)]
    public partial interface IAttendanceReportsRequestBuilder;
}

namespace Microsoft.Graph.Communications.OnlineMeetings.Item.AttendanceReports.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Communications.OnlineMeetings.Item.AttendanceReports.Item
{
    [Proxy(typeof(MeetingAttendanceReportItemRequestBuilder), true)]
    public partial interface IMeetingAttendanceReportItemRequestBuilder;
}

namespace Microsoft.Graph.Communications.OnlineMeetings.Item.AttendanceReports.Item.AttendanceRecords
{
    [Proxy(typeof(AttendanceRecordsRequestBuilder), true)]
    public partial interface IAttendanceRecordsRequestBuilder;
}

namespace Microsoft.Graph.Communications.OnlineMeetings.Item.AttendanceReports.Item.AttendanceRecords.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Communications.OnlineMeetings.Item.AttendanceReports.Item.AttendanceRecords.Item
{
    [Proxy(typeof(AttendanceRecordItemRequestBuilder), true)]
    public partial interface IAttendanceRecordItemRequestBuilder;
}

namespace Microsoft.Graph.Communications.OnlineMeetings.Item.AttendeeReport
{
    [Proxy(typeof(AttendeeReportRequestBuilder), true)]
    public partial interface IAttendeeReportRequestBuilder;
}

namespace Microsoft.Graph.Communications.OnlineMeetings.Item.GetVirtualAppointmentJoinWebUrl
{
    [Proxy(typeof(GetVirtualAppointmentJoinWebUrlRequestBuilder), true)]
    public partial interface IGetVirtualAppointmentJoinWebUrlRequestBuilder;
}

namespace Microsoft.Graph.Communications.OnlineMeetings.Item.Recordings
{
    [Proxy(typeof(RecordingsRequestBuilder), true)]
    public partial interface IRecordingsRequestBuilder;
}

namespace Microsoft.Graph.Communications.OnlineMeetings.Item.Recordings.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Communications.OnlineMeetings.Item.Recordings.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Communications.OnlineMeetings.Item.Recordings.Item
{
    [Proxy(typeof(CallRecordingItemRequestBuilder), true)]
    public partial interface ICallRecordingItemRequestBuilder;
}

namespace Microsoft.Graph.Communications.OnlineMeetings.Item.Recordings.Item.Content
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Communications.OnlineMeetings.Item.SendVirtualAppointmentReminderSms
{
    [Proxy(typeof(SendVirtualAppointmentReminderSmsRequestBuilder), true)]
    public partial interface ISendVirtualAppointmentReminderSmsRequestBuilder;
}

namespace Microsoft.Graph.Communications.OnlineMeetings.Item.SendVirtualAppointmentSms
{
    [Proxy(typeof(SendVirtualAppointmentSmsRequestBuilder), true)]
    public partial interface ISendVirtualAppointmentSmsRequestBuilder;
}

namespace Microsoft.Graph.Communications.OnlineMeetings.Item.Transcripts
{
    [Proxy(typeof(TranscriptsRequestBuilder), true)]
    public partial interface ITranscriptsRequestBuilder;
}

namespace Microsoft.Graph.Communications.OnlineMeetings.Item.Transcripts.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Communications.OnlineMeetings.Item.Transcripts.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Communications.OnlineMeetings.Item.Transcripts.Item
{
    [Proxy(typeof(CallTranscriptItemRequestBuilder), true)]
    public partial interface ICallTranscriptItemRequestBuilder;
}

namespace Microsoft.Graph.Communications.OnlineMeetings.Item.Transcripts.Item.Content
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Communications.OnlineMeetings.Item.Transcripts.Item.MetadataContent
{
    [Proxy(typeof(MetadataContentRequestBuilder), true)]
    public partial interface IMetadataContentRequestBuilder;
}

namespace Microsoft.Graph.Communications.Presences
{
    [Proxy(typeof(PresencesRequestBuilder), true)]
    public partial interface IPresencesRequestBuilder;
}

namespace Microsoft.Graph.Communications.Presences.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Communications.Presences.Item
{
    [Proxy(typeof(PresenceItemRequestBuilder), true)]
    public partial interface IPresenceItemRequestBuilder;
}

namespace Microsoft.Graph.Communications.Presences.Item.ClearPresence
{
    [Proxy(typeof(ClearPresenceRequestBuilder), true)]
    public partial interface IClearPresenceRequestBuilder;
}

namespace Microsoft.Graph.Communications.Presences.Item.ClearUserPreferredPresence
{
    [Proxy(typeof(ClearUserPreferredPresenceRequestBuilder), true)]
    public partial interface IClearUserPreferredPresenceRequestBuilder;
}

namespace Microsoft.Graph.Communications.Presences.Item.SetPresence
{
    [Proxy(typeof(SetPresenceRequestBuilder), true)]
    public partial interface ISetPresenceRequestBuilder;
}

namespace Microsoft.Graph.Communications.Presences.Item.SetStatusMessage
{
    [Proxy(typeof(SetStatusMessageRequestBuilder), true)]
    public partial interface ISetStatusMessageRequestBuilder;
}

namespace Microsoft.Graph.Communications.Presences.Item.SetUserPreferredPresence
{
    [Proxy(typeof(SetUserPreferredPresenceRequestBuilder), true)]
    public partial interface ISetUserPreferredPresenceRequestBuilder;
}

namespace Microsoft.Graph.Compliance
{
    [Proxy(typeof(ComplianceRequestBuilder), true)]
    public partial interface IComplianceRequestBuilder;
}

namespace Microsoft.Graph.Connections
{
    [Proxy(typeof(ConnectionsRequestBuilder), true)]
    public partial interface IConnectionsRequestBuilder;
}

namespace Microsoft.Graph.Connections.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Connections.Item
{
    [Proxy(typeof(ExternalConnectionItemRequestBuilder), true)]
    public partial interface IExternalConnectionItemRequestBuilder;
}

namespace Microsoft.Graph.Connections.Item.Groups
{
    [Proxy(typeof(GroupsRequestBuilder), true)]
    public partial interface IGroupsRequestBuilder;
}

namespace Microsoft.Graph.Connections.Item.Groups.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Connections.Item.Groups.Item
{
    [Proxy(typeof(ExternalGroupItemRequestBuilder), true)]
    public partial interface IExternalGroupItemRequestBuilder;
}

namespace Microsoft.Graph.Connections.Item.Groups.Item.Members
{
    [Proxy(typeof(MembersRequestBuilder), true)]
    public partial interface IMembersRequestBuilder;
}

namespace Microsoft.Graph.Connections.Item.Groups.Item.Members.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Connections.Item.Groups.Item.Members.Item
{
    [Proxy(typeof(IdentityItemRequestBuilder), true)]
    public partial interface IIdentityItemRequestBuilder;
}

namespace Microsoft.Graph.Connections.Item.Items
{
    [Proxy(typeof(ItemsRequestBuilder), true)]
    public partial interface IItemsRequestBuilder;
}

namespace Microsoft.Graph.Connections.Item.Items.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Connections.Item.Items.Item
{
    [Proxy(typeof(ExternalItemItemRequestBuilder), true)]
    public partial interface IExternalItemItemRequestBuilder;
}

namespace Microsoft.Graph.Connections.Item.Items.Item.Activities
{
    [Proxy(typeof(ActivitiesRequestBuilder), true)]
    public partial interface IActivitiesRequestBuilder;
}

namespace Microsoft.Graph.Connections.Item.Items.Item.Activities.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Connections.Item.Items.Item.Activities.Item
{
    [Proxy(typeof(ExternalActivityItemRequestBuilder), true)]
    public partial interface IExternalActivityItemRequestBuilder;
}

namespace Microsoft.Graph.Connections.Item.Items.Item.Activities.Item.PerformedBy
{
    [Proxy(typeof(PerformedByRequestBuilder), true)]
    public partial interface IPerformedByRequestBuilder;
}

namespace Microsoft.Graph.Connections.Item.Items.Item.MicrosoftGraphExternalConnectorsAddActivities
{
    [Proxy(typeof(MicrosoftGraphExternalConnectorsAddActivitiesRequestBuilder), true)]
    public partial interface IMicrosoftGraphExternalConnectorsAddActivitiesRequestBuilder;
}

namespace Microsoft.Graph.Connections.Item.Operations
{
    [Proxy(typeof(OperationsRequestBuilder), true)]
    public partial interface IOperationsRequestBuilder;
}

namespace Microsoft.Graph.Connections.Item.Operations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Connections.Item.Operations.Item
{
    [Proxy(typeof(ConnectionOperationItemRequestBuilder), true)]
    public partial interface IConnectionOperationItemRequestBuilder;
}

namespace Microsoft.Graph.Connections.Item.Schema
{
    [Proxy(typeof(SchemaRequestBuilder), true)]
    public partial interface ISchemaRequestBuilder;
}

namespace Microsoft.Graph.Contacts
{
    [Proxy(typeof(ContactsRequestBuilder), true)]
    public partial interface IContactsRequestBuilder;
}

namespace Microsoft.Graph.Contacts.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Contacts.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Contacts.GetAvailableExtensionProperties
{
    [Proxy(typeof(GetAvailableExtensionPropertiesRequestBuilder), true)]
    public partial interface IGetAvailableExtensionPropertiesRequestBuilder;
}

namespace Microsoft.Graph.Contacts.GetByIds
{
    [Proxy(typeof(GetByIdsRequestBuilder), true)]
    public partial interface IGetByIdsRequestBuilder;
}

namespace Microsoft.Graph.Contacts.Item
{
    [Proxy(typeof(OrgContactItemRequestBuilder), true)]
    public partial interface IOrgContactItemRequestBuilder;
}

namespace Microsoft.Graph.Contacts.Item.CheckMemberGroups
{
    [Proxy(typeof(CheckMemberGroupsRequestBuilder), true)]
    public partial interface ICheckMemberGroupsRequestBuilder;
}

namespace Microsoft.Graph.Contacts.Item.CheckMemberObjects
{
    [Proxy(typeof(CheckMemberObjectsRequestBuilder), true)]
    public partial interface ICheckMemberObjectsRequestBuilder;
}

namespace Microsoft.Graph.Contacts.Item.DirectReports
{
    [Proxy(typeof(DirectReportsRequestBuilder), true)]
    public partial interface IDirectReportsRequestBuilder;
}

namespace Microsoft.Graph.Contacts.Item.DirectReports.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Contacts.Item.DirectReports.GraphOrgContact
{
    [Proxy(typeof(GraphOrgContactRequestBuilder), true)]
    public partial interface IGraphOrgContactRequestBuilder;
}

namespace Microsoft.Graph.Contacts.Item.DirectReports.GraphOrgContact.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Contacts.Item.DirectReports.GraphUser
{
    [Proxy(typeof(GraphUserRequestBuilder), true)]
    public partial interface IGraphUserRequestBuilder;
}

namespace Microsoft.Graph.Contacts.Item.DirectReports.GraphUser.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Contacts.Item.DirectReports.Item
{
    [Proxy(typeof(DirectoryObjectItemRequestBuilder), true)]
    public partial interface IDirectoryObjectItemRequestBuilder;
}

namespace Microsoft.Graph.Contacts.Item.DirectReports.Item.GraphOrgContact
{
    [Proxy(typeof(GraphOrgContactRequestBuilder), true)]
    public partial interface IGraphOrgContactRequestBuilder;
}

namespace Microsoft.Graph.Contacts.Item.DirectReports.Item.GraphUser
{
    [Proxy(typeof(GraphUserRequestBuilder), true)]
    public partial interface IGraphUserRequestBuilder;
}

namespace Microsoft.Graph.Contacts.Item.GetMemberGroups
{
    [Proxy(typeof(GetMemberGroupsRequestBuilder), true)]
    public partial interface IGetMemberGroupsRequestBuilder;
}

namespace Microsoft.Graph.Contacts.Item.GetMemberObjects
{
    [Proxy(typeof(GetMemberObjectsRequestBuilder), true)]
    public partial interface IGetMemberObjectsRequestBuilder;
}

namespace Microsoft.Graph.Contacts.Item.Manager
{
    [Proxy(typeof(ManagerRequestBuilder), true)]
    public partial interface IManagerRequestBuilder;
}

namespace Microsoft.Graph.Contacts.Item.MemberOf
{
    [Proxy(typeof(MemberOfRequestBuilder), true)]
    public partial interface IMemberOfRequestBuilder;
}

namespace Microsoft.Graph.Contacts.Item.MemberOf.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Contacts.Item.MemberOf.GraphAdministrativeUnit
{
    [Proxy(typeof(GraphAdministrativeUnitRequestBuilder), true)]
    public partial interface IGraphAdministrativeUnitRequestBuilder;
}

namespace Microsoft.Graph.Contacts.Item.MemberOf.GraphAdministrativeUnit.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Contacts.Item.MemberOf.GraphGroup
{
    [Proxy(typeof(GraphGroupRequestBuilder), true)]
    public partial interface IGraphGroupRequestBuilder;
}

namespace Microsoft.Graph.Contacts.Item.MemberOf.GraphGroup.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Contacts.Item.MemberOf.Item
{
    [Proxy(typeof(DirectoryObjectItemRequestBuilder), true)]
    public partial interface IDirectoryObjectItemRequestBuilder;
}

namespace Microsoft.Graph.Contacts.Item.MemberOf.Item.GraphAdministrativeUnit
{
    [Proxy(typeof(GraphAdministrativeUnitRequestBuilder), true)]
    public partial interface IGraphAdministrativeUnitRequestBuilder;
}

namespace Microsoft.Graph.Contacts.Item.MemberOf.Item.GraphGroup
{
    [Proxy(typeof(GraphGroupRequestBuilder), true)]
    public partial interface IGraphGroupRequestBuilder;
}

namespace Microsoft.Graph.Contacts.Item.Restore
{
    [Proxy(typeof(RestoreRequestBuilder), true)]
    public partial interface IRestoreRequestBuilder;
}

namespace Microsoft.Graph.Contacts.Item.RetryServiceProvisioning
{
    [Proxy(typeof(RetryServiceProvisioningRequestBuilder), true)]
    public partial interface IRetryServiceProvisioningRequestBuilder;
}

namespace Microsoft.Graph.Contacts.Item.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.Contacts.Item.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Contacts.Item.TransitiveMemberOf
{
    [Proxy(typeof(TransitiveMemberOfRequestBuilder), true)]
    public partial interface ITransitiveMemberOfRequestBuilder;
}

namespace Microsoft.Graph.Contacts.Item.TransitiveMemberOf.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Contacts.Item.TransitiveMemberOf.GraphAdministrativeUnit
{
    [Proxy(typeof(GraphAdministrativeUnitRequestBuilder), true)]
    public partial interface IGraphAdministrativeUnitRequestBuilder;
}

namespace Microsoft.Graph.Contacts.Item.TransitiveMemberOf.GraphAdministrativeUnit.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Contacts.Item.TransitiveMemberOf.GraphGroup
{
    [Proxy(typeof(GraphGroupRequestBuilder), true)]
    public partial interface IGraphGroupRequestBuilder;
}

namespace Microsoft.Graph.Contacts.Item.TransitiveMemberOf.GraphGroup.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Contacts.Item.TransitiveMemberOf.Item
{
    [Proxy(typeof(DirectoryObjectItemRequestBuilder), true)]
    public partial interface IDirectoryObjectItemRequestBuilder;
}

namespace Microsoft.Graph.Contacts.Item.TransitiveMemberOf.Item.GraphAdministrativeUnit
{
    [Proxy(typeof(GraphAdministrativeUnitRequestBuilder), true)]
    public partial interface IGraphAdministrativeUnitRequestBuilder;
}

namespace Microsoft.Graph.Contacts.Item.TransitiveMemberOf.Item.GraphGroup
{
    [Proxy(typeof(GraphGroupRequestBuilder), true)]
    public partial interface IGraphGroupRequestBuilder;
}

namespace Microsoft.Graph.Contacts.ValidateProperties
{
    [Proxy(typeof(ValidatePropertiesRequestBuilder), true)]
    public partial interface IValidatePropertiesRequestBuilder;
}

namespace Microsoft.Graph.Contracts
{
    [Proxy(typeof(ContractsRequestBuilder), true)]
    public partial interface IContractsRequestBuilder;
}

namespace Microsoft.Graph.Contracts.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Contracts.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Contracts.GetAvailableExtensionProperties
{
    [Proxy(typeof(GetAvailableExtensionPropertiesRequestBuilder), true)]
    public partial interface IGetAvailableExtensionPropertiesRequestBuilder;
}

namespace Microsoft.Graph.Contracts.GetByIds
{
    [Proxy(typeof(GetByIdsRequestBuilder), true)]
    public partial interface IGetByIdsRequestBuilder;
}

namespace Microsoft.Graph.Contracts.Item
{
    [Proxy(typeof(ContractItemRequestBuilder), true)]
    public partial interface IContractItemRequestBuilder;
}

namespace Microsoft.Graph.Contracts.Item.CheckMemberGroups
{
    [Proxy(typeof(CheckMemberGroupsRequestBuilder), true)]
    public partial interface ICheckMemberGroupsRequestBuilder;
}

namespace Microsoft.Graph.Contracts.Item.CheckMemberObjects
{
    [Proxy(typeof(CheckMemberObjectsRequestBuilder), true)]
    public partial interface ICheckMemberObjectsRequestBuilder;
}

namespace Microsoft.Graph.Contracts.Item.GetMemberGroups
{
    [Proxy(typeof(GetMemberGroupsRequestBuilder), true)]
    public partial interface IGetMemberGroupsRequestBuilder;
}

namespace Microsoft.Graph.Contracts.Item.GetMemberObjects
{
    [Proxy(typeof(GetMemberObjectsRequestBuilder), true)]
    public partial interface IGetMemberObjectsRequestBuilder;
}

namespace Microsoft.Graph.Contracts.Item.Restore
{
    [Proxy(typeof(RestoreRequestBuilder), true)]
    public partial interface IRestoreRequestBuilder;
}

namespace Microsoft.Graph.Contracts.ValidateProperties
{
    [Proxy(typeof(ValidatePropertiesRequestBuilder), true)]
    public partial interface IValidatePropertiesRequestBuilder;
}

namespace Microsoft.Graph.DataPolicyOperations
{
    [Proxy(typeof(DataPolicyOperationsRequestBuilder), true)]
    public partial interface IDataPolicyOperationsRequestBuilder;
}

namespace Microsoft.Graph.DataPolicyOperations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DataPolicyOperations.Item
{
    [Proxy(typeof(DataPolicyOperationItemRequestBuilder), true)]
    public partial interface IDataPolicyOperationItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement
{
    [Proxy(typeof(DeviceAppManagementRequestBuilder), true)]
    public partial interface IDeviceAppManagementRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.AndroidManagedAppProtections
{
    [Proxy(typeof(AndroidManagedAppProtectionsRequestBuilder), true)]
    public partial interface IAndroidManagedAppProtectionsRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.AndroidManagedAppProtections.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.AndroidManagedAppProtections.Item
{
    [Proxy(typeof(AndroidManagedAppProtectionItemRequestBuilder), true)]
    public partial interface IAndroidManagedAppProtectionItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.AndroidManagedAppProtections.Item.Apps
{
    [Proxy(typeof(AppsRequestBuilder), true)]
    public partial interface IAppsRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.AndroidManagedAppProtections.Item.Apps.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.AndroidManagedAppProtections.Item.Apps.Item
{
    [Proxy(typeof(ManagedMobileAppItemRequestBuilder), true)]
    public partial interface IManagedMobileAppItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.AndroidManagedAppProtections.Item.Assignments
{
    [Proxy(typeof(AssignmentsRequestBuilder), true)]
    public partial interface IAssignmentsRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.AndroidManagedAppProtections.Item.Assignments.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.AndroidManagedAppProtections.Item.Assignments.Item
{
    [Proxy(typeof(TargetedManagedAppPolicyAssignmentItemRequestBuilder), true)]
    public partial interface ITargetedManagedAppPolicyAssignmentItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.AndroidManagedAppProtections.Item.DeploymentSummary
{
    [Proxy(typeof(DeploymentSummaryRequestBuilder), true)]
    public partial interface IDeploymentSummaryRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.DefaultManagedAppProtections
{
    [Proxy(typeof(DefaultManagedAppProtectionsRequestBuilder), true)]
    public partial interface IDefaultManagedAppProtectionsRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.DefaultManagedAppProtections.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.DefaultManagedAppProtections.Item
{
    [Proxy(typeof(DefaultManagedAppProtectionItemRequestBuilder), true)]
    public partial interface IDefaultManagedAppProtectionItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.DefaultManagedAppProtections.Item.Apps
{
    [Proxy(typeof(AppsRequestBuilder), true)]
    public partial interface IAppsRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.DefaultManagedAppProtections.Item.Apps.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.DefaultManagedAppProtections.Item.Apps.Item
{
    [Proxy(typeof(ManagedMobileAppItemRequestBuilder), true)]
    public partial interface IManagedMobileAppItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.DefaultManagedAppProtections.Item.DeploymentSummary
{
    [Proxy(typeof(DeploymentSummaryRequestBuilder), true)]
    public partial interface IDeploymentSummaryRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.IosManagedAppProtections
{
    [Proxy(typeof(IosManagedAppProtectionsRequestBuilder), true)]
    public partial interface IIosManagedAppProtectionsRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.IosManagedAppProtections.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.IosManagedAppProtections.Item
{
    [Proxy(typeof(IosManagedAppProtectionItemRequestBuilder), true)]
    public partial interface IIosManagedAppProtectionItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.IosManagedAppProtections.Item.Apps
{
    [Proxy(typeof(AppsRequestBuilder), true)]
    public partial interface IAppsRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.IosManagedAppProtections.Item.Apps.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.IosManagedAppProtections.Item.Apps.Item
{
    [Proxy(typeof(ManagedMobileAppItemRequestBuilder), true)]
    public partial interface IManagedMobileAppItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.IosManagedAppProtections.Item.Assignments
{
    [Proxy(typeof(AssignmentsRequestBuilder), true)]
    public partial interface IAssignmentsRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.IosManagedAppProtections.Item.Assignments.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.IosManagedAppProtections.Item.Assignments.Item
{
    [Proxy(typeof(TargetedManagedAppPolicyAssignmentItemRequestBuilder), true)]
    public partial interface ITargetedManagedAppPolicyAssignmentItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.IosManagedAppProtections.Item.DeploymentSummary
{
    [Proxy(typeof(DeploymentSummaryRequestBuilder), true)]
    public partial interface IDeploymentSummaryRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.ManagedAppPolicies
{
    [Proxy(typeof(ManagedAppPoliciesRequestBuilder), true)]
    public partial interface IManagedAppPoliciesRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.ManagedAppPolicies.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.ManagedAppPolicies.Item
{
    [Proxy(typeof(ManagedAppPolicyItemRequestBuilder), true)]
    public partial interface IManagedAppPolicyItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.ManagedAppPolicies.Item.TargetApps
{
    [Proxy(typeof(TargetAppsRequestBuilder), true)]
    public partial interface ITargetAppsRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.ManagedAppRegistrations
{
    [Proxy(typeof(ManagedAppRegistrationsRequestBuilder), true)]
    public partial interface IManagedAppRegistrationsRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.ManagedAppRegistrations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.ManagedAppRegistrations.GetUserIdsWithFlaggedAppRegistration
{
    [Proxy(typeof(GetUserIdsWithFlaggedAppRegistrationRequestBuilder), true)]
    public partial interface IGetUserIdsWithFlaggedAppRegistrationRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.ManagedAppRegistrations.Item
{
    [Proxy(typeof(ManagedAppRegistrationItemRequestBuilder), true)]
    public partial interface IManagedAppRegistrationItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.ManagedAppRegistrations.Item.AppliedPolicies
{
    [Proxy(typeof(AppliedPoliciesRequestBuilder), true)]
    public partial interface IAppliedPoliciesRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.ManagedAppRegistrations.Item.AppliedPolicies.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.ManagedAppRegistrations.Item.AppliedPolicies.Item
{
    [Proxy(typeof(ManagedAppPolicyItemRequestBuilder), true)]
    public partial interface IManagedAppPolicyItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.ManagedAppRegistrations.Item.AppliedPolicies.Item.TargetApps
{
    [Proxy(typeof(TargetAppsRequestBuilder), true)]
    public partial interface ITargetAppsRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.ManagedAppRegistrations.Item.IntendedPolicies
{
    [Proxy(typeof(IntendedPoliciesRequestBuilder), true)]
    public partial interface IIntendedPoliciesRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.ManagedAppRegistrations.Item.IntendedPolicies.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.ManagedAppRegistrations.Item.IntendedPolicies.Item
{
    [Proxy(typeof(ManagedAppPolicyItemRequestBuilder), true)]
    public partial interface IManagedAppPolicyItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.ManagedAppRegistrations.Item.IntendedPolicies.Item.TargetApps
{
    [Proxy(typeof(TargetAppsRequestBuilder), true)]
    public partial interface ITargetAppsRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.ManagedAppRegistrations.Item.Operations
{
    [Proxy(typeof(OperationsRequestBuilder), true)]
    public partial interface IOperationsRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.ManagedAppRegistrations.Item.Operations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.ManagedAppRegistrations.Item.Operations.Item
{
    [Proxy(typeof(ManagedAppOperationItemRequestBuilder), true)]
    public partial interface IManagedAppOperationItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.ManagedAppStatuses
{
    [Proxy(typeof(ManagedAppStatusesRequestBuilder), true)]
    public partial interface IManagedAppStatusesRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.ManagedAppStatuses.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.ManagedAppStatuses.Item
{
    [Proxy(typeof(ManagedAppStatusItemRequestBuilder), true)]
    public partial interface IManagedAppStatusItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.ManagedEBooks
{
    [Proxy(typeof(ManagedEBooksRequestBuilder), true)]
    public partial interface IManagedEBooksRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.ManagedEBooks.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.ManagedEBooks.Item
{
    [Proxy(typeof(ManagedEBookItemRequestBuilder), true)]
    public partial interface IManagedEBookItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.ManagedEBooks.Item.Assign
{
    [Proxy(typeof(AssignRequestBuilder), true)]
    public partial interface IAssignRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.ManagedEBooks.Item.Assignments
{
    [Proxy(typeof(AssignmentsRequestBuilder), true)]
    public partial interface IAssignmentsRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.ManagedEBooks.Item.Assignments.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.ManagedEBooks.Item.Assignments.Item
{
    [Proxy(typeof(ManagedEBookAssignmentItemRequestBuilder), true)]
    public partial interface IManagedEBookAssignmentItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.ManagedEBooks.Item.DeviceStates
{
    [Proxy(typeof(DeviceStatesRequestBuilder), true)]
    public partial interface IDeviceStatesRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.ManagedEBooks.Item.DeviceStates.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.ManagedEBooks.Item.DeviceStates.Item
{
    [Proxy(typeof(DeviceInstallStateItemRequestBuilder), true)]
    public partial interface IDeviceInstallStateItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.ManagedEBooks.Item.InstallSummary
{
    [Proxy(typeof(InstallSummaryRequestBuilder), true)]
    public partial interface IInstallSummaryRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.ManagedEBooks.Item.UserStateSummary
{
    [Proxy(typeof(UserStateSummaryRequestBuilder), true)]
    public partial interface IUserStateSummaryRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.ManagedEBooks.Item.UserStateSummary.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.ManagedEBooks.Item.UserStateSummary.Item
{
    [Proxy(typeof(UserInstallStateSummaryItemRequestBuilder), true)]
    public partial interface IUserInstallStateSummaryItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.ManagedEBooks.Item.UserStateSummary.Item.DeviceStates
{
    [Proxy(typeof(DeviceStatesRequestBuilder), true)]
    public partial interface IDeviceStatesRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.ManagedEBooks.Item.UserStateSummary.Item.DeviceStates.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.ManagedEBooks.Item.UserStateSummary.Item.DeviceStates.Item
{
    [Proxy(typeof(DeviceInstallStateItemRequestBuilder), true)]
    public partial interface IDeviceInstallStateItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MdmWindowsInformationProtectionPolicies
{
    [Proxy(typeof(MdmWindowsInformationProtectionPoliciesRequestBuilder), true)]
    public partial interface IMdmWindowsInformationProtectionPoliciesRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MdmWindowsInformationProtectionPolicies.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MdmWindowsInformationProtectionPolicies.Item
{
    [Proxy(typeof(MdmWindowsInformationProtectionPolicyItemRequestBuilder), true)]
    public partial interface IMdmWindowsInformationProtectionPolicyItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MdmWindowsInformationProtectionPolicies.Item.Assignments
{
    [Proxy(typeof(AssignmentsRequestBuilder), true)]
    public partial interface IAssignmentsRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MdmWindowsInformationProtectionPolicies.Item.Assignments.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MdmWindowsInformationProtectionPolicies.Item.Assignments.Item
{
    [Proxy(typeof(TargetedManagedAppPolicyAssignmentItemRequestBuilder), true)]
    public partial interface ITargetedManagedAppPolicyAssignmentItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MdmWindowsInformationProtectionPolicies.Item.ExemptAppLockerFiles
{
    [Proxy(typeof(ExemptAppLockerFilesRequestBuilder), true)]
    public partial interface IExemptAppLockerFilesRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MdmWindowsInformationProtectionPolicies.Item.ExemptAppLockerFiles.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MdmWindowsInformationProtectionPolicies.Item.ExemptAppLockerFiles.Item
{
    [Proxy(typeof(WindowsInformationProtectionAppLockerFileItemRequestBuilder), true)]
    public partial interface IWindowsInformationProtectionAppLockerFileItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MdmWindowsInformationProtectionPolicies.Item.ProtectedAppLockerFiles
{
    [Proxy(typeof(ProtectedAppLockerFilesRequestBuilder), true)]
    public partial interface IProtectedAppLockerFilesRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MdmWindowsInformationProtectionPolicies.Item.ProtectedAppLockerFiles.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MdmWindowsInformationProtectionPolicies.Item.ProtectedAppLockerFiles.Item
{
    [Proxy(typeof(WindowsInformationProtectionAppLockerFileItemRequestBuilder), true)]
    public partial interface IWindowsInformationProtectionAppLockerFileItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileAppCategories
{
    [Proxy(typeof(MobileAppCategoriesRequestBuilder), true)]
    public partial interface IMobileAppCategoriesRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileAppCategories.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileAppCategories.Item
{
    [Proxy(typeof(MobileAppCategoryItemRequestBuilder), true)]
    public partial interface IMobileAppCategoryItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileAppConfigurations
{
    [Proxy(typeof(MobileAppConfigurationsRequestBuilder), true)]
    public partial interface IMobileAppConfigurationsRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileAppConfigurations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileAppConfigurations.Item
{
    [Proxy(typeof(ManagedDeviceMobileAppConfigurationItemRequestBuilder), true)]
    public partial interface IManagedDeviceMobileAppConfigurationItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileAppConfigurations.Item.Assign
{
    [Proxy(typeof(AssignRequestBuilder), true)]
    public partial interface IAssignRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileAppConfigurations.Item.Assignments
{
    [Proxy(typeof(AssignmentsRequestBuilder), true)]
    public partial interface IAssignmentsRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileAppConfigurations.Item.Assignments.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileAppConfigurations.Item.Assignments.Item
{
    [Proxy(typeof(ManagedDeviceMobileAppConfigurationAssignmentItemRequestBuilder), true)]
    public partial interface IManagedDeviceMobileAppConfigurationAssignmentItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileAppConfigurations.Item.DeviceStatuses
{
    [Proxy(typeof(DeviceStatusesRequestBuilder), true)]
    public partial interface IDeviceStatusesRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileAppConfigurations.Item.DeviceStatuses.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileAppConfigurations.Item.DeviceStatuses.Item
{
    [Proxy(typeof(ManagedDeviceMobileAppConfigurationDeviceStatusItemRequestBuilder), true)]
    public partial interface IManagedDeviceMobileAppConfigurationDeviceStatusItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileAppConfigurations.Item.DeviceStatusSummary
{
    [Proxy(typeof(DeviceStatusSummaryRequestBuilder), true)]
    public partial interface IDeviceStatusSummaryRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileAppConfigurations.Item.UserStatuses
{
    [Proxy(typeof(UserStatusesRequestBuilder), true)]
    public partial interface IUserStatusesRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileAppConfigurations.Item.UserStatuses.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileAppConfigurations.Item.UserStatuses.Item
{
    [Proxy(typeof(ManagedDeviceMobileAppConfigurationUserStatusItemRequestBuilder), true)]
    public partial interface IManagedDeviceMobileAppConfigurationUserStatusItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileAppConfigurations.Item.UserStatusSummary
{
    [Proxy(typeof(UserStatusSummaryRequestBuilder), true)]
    public partial interface IUserStatusSummaryRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps
{
    [Proxy(typeof(MobileAppsRequestBuilder), true)]
    public partial interface IMobileAppsRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.GraphAndroidLobApp
{
    [Proxy(typeof(GraphAndroidLobAppRequestBuilder), true)]
    public partial interface IGraphAndroidLobAppRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.GraphAndroidLobApp.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.GraphAndroidStoreApp
{
    [Proxy(typeof(GraphAndroidStoreAppRequestBuilder), true)]
    public partial interface IGraphAndroidStoreAppRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.GraphAndroidStoreApp.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.GraphIosLobApp
{
    [Proxy(typeof(GraphIosLobAppRequestBuilder), true)]
    public partial interface IGraphIosLobAppRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.GraphIosLobApp.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.GraphIosStoreApp
{
    [Proxy(typeof(GraphIosStoreAppRequestBuilder), true)]
    public partial interface IGraphIosStoreAppRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.GraphIosStoreApp.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.GraphIosVppApp
{
    [Proxy(typeof(GraphIosVppAppRequestBuilder), true)]
    public partial interface IGraphIosVppAppRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.GraphIosVppApp.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.GraphMacOSDmgApp
{
    [Proxy(typeof(GraphMacOSDmgAppRequestBuilder), true)]
    public partial interface IGraphMacOSDmgAppRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.GraphMacOSDmgApp.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.GraphMacOSLobApp
{
    [Proxy(typeof(GraphMacOSLobAppRequestBuilder), true)]
    public partial interface IGraphMacOSLobAppRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.GraphMacOSLobApp.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.GraphManagedAndroidLobApp
{
    [Proxy(typeof(GraphManagedAndroidLobAppRequestBuilder), true)]
    public partial interface IGraphManagedAndroidLobAppRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.GraphManagedAndroidLobApp.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.GraphManagedIOSLobApp
{
    [Proxy(typeof(GraphManagedIOSLobAppRequestBuilder), true)]
    public partial interface IGraphManagedIOSLobAppRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.GraphManagedIOSLobApp.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.GraphManagedMobileLobApp
{
    [Proxy(typeof(GraphManagedMobileLobAppRequestBuilder), true)]
    public partial interface IGraphManagedMobileLobAppRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.GraphManagedMobileLobApp.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.GraphMicrosoftStoreForBusinessApp
{
    [Proxy(typeof(GraphMicrosoftStoreForBusinessAppRequestBuilder), true)]
    public partial interface IGraphMicrosoftStoreForBusinessAppRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.GraphMicrosoftStoreForBusinessApp.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.GraphWin32LobApp
{
    [Proxy(typeof(GraphWin32LobAppRequestBuilder), true)]
    public partial interface IGraphWin32LobAppRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.GraphWin32LobApp.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.GraphWindowsAppX
{
    [Proxy(typeof(GraphWindowsAppXRequestBuilder), true)]
    public partial interface IGraphWindowsAppXRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.GraphWindowsAppX.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.GraphWindowsMobileMSI
{
    [Proxy(typeof(GraphWindowsMobileMSIRequestBuilder), true)]
    public partial interface IGraphWindowsMobileMSIRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.GraphWindowsMobileMSI.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.GraphWindowsUniversalAppX
{
    [Proxy(typeof(GraphWindowsUniversalAppXRequestBuilder), true)]
    public partial interface IGraphWindowsUniversalAppXRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.GraphWindowsUniversalAppX.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.GraphWindowsWebApp
{
    [Proxy(typeof(GraphWindowsWebAppRequestBuilder), true)]
    public partial interface IGraphWindowsWebAppRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.GraphWindowsWebApp.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item
{
    [Proxy(typeof(MobileAppItemRequestBuilder), true)]
    public partial interface IMobileAppItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.Assign
{
    [Proxy(typeof(AssignRequestBuilder), true)]
    public partial interface IAssignRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.Assignments
{
    [Proxy(typeof(AssignmentsRequestBuilder), true)]
    public partial interface IAssignmentsRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.Assignments.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.Assignments.Item
{
    [Proxy(typeof(MobileAppAssignmentItemRequestBuilder), true)]
    public partial interface IMobileAppAssignmentItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.Categories
{
    [Proxy(typeof(CategoriesRequestBuilder), true)]
    public partial interface ICategoriesRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.Categories.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.Categories.Item
{
    [Proxy(typeof(MobileAppCategoryItemRequestBuilder), true)]
    public partial interface IMobileAppCategoryItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphAndroidLobApp
{
    [Proxy(typeof(GraphAndroidLobAppRequestBuilder), true)]
    public partial interface IGraphAndroidLobAppRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphAndroidLobApp.Assignments
{
    [Proxy(typeof(AssignmentsRequestBuilder), true)]
    public partial interface IAssignmentsRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphAndroidLobApp.Assignments.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphAndroidLobApp.Assignments.Item
{
    [Proxy(typeof(MobileAppAssignmentItemRequestBuilder), true)]
    public partial interface IMobileAppAssignmentItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphAndroidLobApp.Categories
{
    [Proxy(typeof(CategoriesRequestBuilder), true)]
    public partial interface ICategoriesRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphAndroidLobApp.Categories.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphAndroidLobApp.Categories.Item
{
    [Proxy(typeof(MobileAppCategoryItemRequestBuilder), true)]
    public partial interface IMobileAppCategoryItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphAndroidLobApp.ContentVersions
{
    [Proxy(typeof(ContentVersionsRequestBuilder), true)]
    public partial interface IContentVersionsRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphAndroidLobApp.ContentVersions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphAndroidLobApp.ContentVersions.Item
{
    [Proxy(typeof(MobileAppContentItemRequestBuilder), true)]
    public partial interface IMobileAppContentItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphAndroidLobApp.ContentVersions.Item.ContainedApps
{
    [Proxy(typeof(ContainedAppsRequestBuilder), true)]
    public partial interface IContainedAppsRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphAndroidLobApp.ContentVersions.Item.ContainedApps.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphAndroidLobApp.ContentVersions.Item.ContainedApps.Item
{
    [Proxy(typeof(MobileContainedAppItemRequestBuilder), true)]
    public partial interface IMobileContainedAppItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphAndroidLobApp.ContentVersions.Item.Files
{
    [Proxy(typeof(FilesRequestBuilder), true)]
    public partial interface IFilesRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphAndroidLobApp.ContentVersions.Item.Files.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphAndroidLobApp.ContentVersions.Item.Files.Item
{
    [Proxy(typeof(MobileAppContentFileItemRequestBuilder), true)]
    public partial interface IMobileAppContentFileItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphAndroidLobApp.ContentVersions.Item.Files.Item.Commit
{
    [Proxy(typeof(CommitRequestBuilder), true)]
    public partial interface ICommitRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphAndroidLobApp.ContentVersions.Item.Files.Item.RenewUpload
{
    [Proxy(typeof(RenewUploadRequestBuilder), true)]
    public partial interface IRenewUploadRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphAndroidStoreApp
{
    [Proxy(typeof(GraphAndroidStoreAppRequestBuilder), true)]
    public partial interface IGraphAndroidStoreAppRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphAndroidStoreApp.Assignments
{
    [Proxy(typeof(AssignmentsRequestBuilder), true)]
    public partial interface IAssignmentsRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphAndroidStoreApp.Assignments.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphAndroidStoreApp.Assignments.Item
{
    [Proxy(typeof(MobileAppAssignmentItemRequestBuilder), true)]
    public partial interface IMobileAppAssignmentItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphAndroidStoreApp.Categories
{
    [Proxy(typeof(CategoriesRequestBuilder), true)]
    public partial interface ICategoriesRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphAndroidStoreApp.Categories.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphAndroidStoreApp.Categories.Item
{
    [Proxy(typeof(MobileAppCategoryItemRequestBuilder), true)]
    public partial interface IMobileAppCategoryItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphIosLobApp
{
    [Proxy(typeof(GraphIosLobAppRequestBuilder), true)]
    public partial interface IGraphIosLobAppRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphIosLobApp.Assignments
{
    [Proxy(typeof(AssignmentsRequestBuilder), true)]
    public partial interface IAssignmentsRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphIosLobApp.Assignments.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphIosLobApp.Assignments.Item
{
    [Proxy(typeof(MobileAppAssignmentItemRequestBuilder), true)]
    public partial interface IMobileAppAssignmentItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphIosLobApp.Categories
{
    [Proxy(typeof(CategoriesRequestBuilder), true)]
    public partial interface ICategoriesRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphIosLobApp.Categories.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphIosLobApp.Categories.Item
{
    [Proxy(typeof(MobileAppCategoryItemRequestBuilder), true)]
    public partial interface IMobileAppCategoryItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphIosLobApp.ContentVersions
{
    [Proxy(typeof(ContentVersionsRequestBuilder), true)]
    public partial interface IContentVersionsRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphIosLobApp.ContentVersions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphIosLobApp.ContentVersions.Item
{
    [Proxy(typeof(MobileAppContentItemRequestBuilder), true)]
    public partial interface IMobileAppContentItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphIosLobApp.ContentVersions.Item.ContainedApps
{
    [Proxy(typeof(ContainedAppsRequestBuilder), true)]
    public partial interface IContainedAppsRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphIosLobApp.ContentVersions.Item.ContainedApps.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphIosLobApp.ContentVersions.Item.ContainedApps.Item
{
    [Proxy(typeof(MobileContainedAppItemRequestBuilder), true)]
    public partial interface IMobileContainedAppItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphIosLobApp.ContentVersions.Item.Files
{
    [Proxy(typeof(FilesRequestBuilder), true)]
    public partial interface IFilesRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphIosLobApp.ContentVersions.Item.Files.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphIosLobApp.ContentVersions.Item.Files.Item
{
    [Proxy(typeof(MobileAppContentFileItemRequestBuilder), true)]
    public partial interface IMobileAppContentFileItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphIosLobApp.ContentVersions.Item.Files.Item.Commit
{
    [Proxy(typeof(CommitRequestBuilder), true)]
    public partial interface ICommitRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphIosLobApp.ContentVersions.Item.Files.Item.RenewUpload
{
    [Proxy(typeof(RenewUploadRequestBuilder), true)]
    public partial interface IRenewUploadRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphIosStoreApp
{
    [Proxy(typeof(GraphIosStoreAppRequestBuilder), true)]
    public partial interface IGraphIosStoreAppRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphIosStoreApp.Assignments
{
    [Proxy(typeof(AssignmentsRequestBuilder), true)]
    public partial interface IAssignmentsRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphIosStoreApp.Assignments.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphIosStoreApp.Assignments.Item
{
    [Proxy(typeof(MobileAppAssignmentItemRequestBuilder), true)]
    public partial interface IMobileAppAssignmentItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphIosStoreApp.Categories
{
    [Proxy(typeof(CategoriesRequestBuilder), true)]
    public partial interface ICategoriesRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphIosStoreApp.Categories.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphIosStoreApp.Categories.Item
{
    [Proxy(typeof(MobileAppCategoryItemRequestBuilder), true)]
    public partial interface IMobileAppCategoryItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphIosVppApp
{
    [Proxy(typeof(GraphIosVppAppRequestBuilder), true)]
    public partial interface IGraphIosVppAppRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphIosVppApp.Assignments
{
    [Proxy(typeof(AssignmentsRequestBuilder), true)]
    public partial interface IAssignmentsRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphIosVppApp.Assignments.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphIosVppApp.Assignments.Item
{
    [Proxy(typeof(MobileAppAssignmentItemRequestBuilder), true)]
    public partial interface IMobileAppAssignmentItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphIosVppApp.Categories
{
    [Proxy(typeof(CategoriesRequestBuilder), true)]
    public partial interface ICategoriesRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphIosVppApp.Categories.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphIosVppApp.Categories.Item
{
    [Proxy(typeof(MobileAppCategoryItemRequestBuilder), true)]
    public partial interface IMobileAppCategoryItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphMacOSDmgApp
{
    [Proxy(typeof(GraphMacOSDmgAppRequestBuilder), true)]
    public partial interface IGraphMacOSDmgAppRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphMacOSDmgApp.Assignments
{
    [Proxy(typeof(AssignmentsRequestBuilder), true)]
    public partial interface IAssignmentsRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphMacOSDmgApp.Assignments.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphMacOSDmgApp.Assignments.Item
{
    [Proxy(typeof(MobileAppAssignmentItemRequestBuilder), true)]
    public partial interface IMobileAppAssignmentItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphMacOSDmgApp.Categories
{
    [Proxy(typeof(CategoriesRequestBuilder), true)]
    public partial interface ICategoriesRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphMacOSDmgApp.Categories.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphMacOSDmgApp.Categories.Item
{
    [Proxy(typeof(MobileAppCategoryItemRequestBuilder), true)]
    public partial interface IMobileAppCategoryItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphMacOSDmgApp.ContentVersions
{
    [Proxy(typeof(ContentVersionsRequestBuilder), true)]
    public partial interface IContentVersionsRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphMacOSDmgApp.ContentVersions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphMacOSDmgApp.ContentVersions.Item
{
    [Proxy(typeof(MobileAppContentItemRequestBuilder), true)]
    public partial interface IMobileAppContentItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphMacOSDmgApp.ContentVersions.Item.ContainedApps
{
    [Proxy(typeof(ContainedAppsRequestBuilder), true)]
    public partial interface IContainedAppsRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphMacOSDmgApp.ContentVersions.Item.ContainedApps.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphMacOSDmgApp.ContentVersions.Item.ContainedApps.Item
{
    [Proxy(typeof(MobileContainedAppItemRequestBuilder), true)]
    public partial interface IMobileContainedAppItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphMacOSDmgApp.ContentVersions.Item.Files
{
    [Proxy(typeof(FilesRequestBuilder), true)]
    public partial interface IFilesRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphMacOSDmgApp.ContentVersions.Item.Files.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphMacOSDmgApp.ContentVersions.Item.Files.Item
{
    [Proxy(typeof(MobileAppContentFileItemRequestBuilder), true)]
    public partial interface IMobileAppContentFileItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphMacOSDmgApp.ContentVersions.Item.Files.Item.Commit
{
    [Proxy(typeof(CommitRequestBuilder), true)]
    public partial interface ICommitRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphMacOSDmgApp.ContentVersions.Item.Files.Item.RenewUpload
{
    [Proxy(typeof(RenewUploadRequestBuilder), true)]
    public partial interface IRenewUploadRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphMacOSLobApp
{
    [Proxy(typeof(GraphMacOSLobAppRequestBuilder), true)]
    public partial interface IGraphMacOSLobAppRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphMacOSLobApp.Assignments
{
    [Proxy(typeof(AssignmentsRequestBuilder), true)]
    public partial interface IAssignmentsRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphMacOSLobApp.Assignments.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphMacOSLobApp.Assignments.Item
{
    [Proxy(typeof(MobileAppAssignmentItemRequestBuilder), true)]
    public partial interface IMobileAppAssignmentItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphMacOSLobApp.Categories
{
    [Proxy(typeof(CategoriesRequestBuilder), true)]
    public partial interface ICategoriesRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphMacOSLobApp.Categories.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphMacOSLobApp.Categories.Item
{
    [Proxy(typeof(MobileAppCategoryItemRequestBuilder), true)]
    public partial interface IMobileAppCategoryItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphMacOSLobApp.ContentVersions
{
    [Proxy(typeof(ContentVersionsRequestBuilder), true)]
    public partial interface IContentVersionsRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphMacOSLobApp.ContentVersions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphMacOSLobApp.ContentVersions.Item
{
    [Proxy(typeof(MobileAppContentItemRequestBuilder), true)]
    public partial interface IMobileAppContentItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphMacOSLobApp.ContentVersions.Item.ContainedApps
{
    [Proxy(typeof(ContainedAppsRequestBuilder), true)]
    public partial interface IContainedAppsRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphMacOSLobApp.ContentVersions.Item.ContainedApps.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphMacOSLobApp.ContentVersions.Item.ContainedApps.Item
{
    [Proxy(typeof(MobileContainedAppItemRequestBuilder), true)]
    public partial interface IMobileContainedAppItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphMacOSLobApp.ContentVersions.Item.Files
{
    [Proxy(typeof(FilesRequestBuilder), true)]
    public partial interface IFilesRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphMacOSLobApp.ContentVersions.Item.Files.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphMacOSLobApp.ContentVersions.Item.Files.Item
{
    [Proxy(typeof(MobileAppContentFileItemRequestBuilder), true)]
    public partial interface IMobileAppContentFileItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphMacOSLobApp.ContentVersions.Item.Files.Item.Commit
{
    [Proxy(typeof(CommitRequestBuilder), true)]
    public partial interface ICommitRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphMacOSLobApp.ContentVersions.Item.Files.Item.RenewUpload
{
    [Proxy(typeof(RenewUploadRequestBuilder), true)]
    public partial interface IRenewUploadRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphManagedAndroidLobApp
{
    [Proxy(typeof(GraphManagedAndroidLobAppRequestBuilder), true)]
    public partial interface IGraphManagedAndroidLobAppRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphManagedAndroidLobApp.Assignments
{
    [Proxy(typeof(AssignmentsRequestBuilder), true)]
    public partial interface IAssignmentsRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphManagedAndroidLobApp.Assignments.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphManagedAndroidLobApp.Assignments.Item
{
    [Proxy(typeof(MobileAppAssignmentItemRequestBuilder), true)]
    public partial interface IMobileAppAssignmentItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphManagedAndroidLobApp.Categories
{
    [Proxy(typeof(CategoriesRequestBuilder), true)]
    public partial interface ICategoriesRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphManagedAndroidLobApp.Categories.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphManagedAndroidLobApp.Categories.Item
{
    [Proxy(typeof(MobileAppCategoryItemRequestBuilder), true)]
    public partial interface IMobileAppCategoryItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphManagedAndroidLobApp.ContentVersions
{
    [Proxy(typeof(ContentVersionsRequestBuilder), true)]
    public partial interface IContentVersionsRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphManagedAndroidLobApp.ContentVersions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphManagedAndroidLobApp.ContentVersions.Item
{
    [Proxy(typeof(MobileAppContentItemRequestBuilder), true)]
    public partial interface IMobileAppContentItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphManagedAndroidLobApp.ContentVersions.Item.ContainedApps
{
    [Proxy(typeof(ContainedAppsRequestBuilder), true)]
    public partial interface IContainedAppsRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphManagedAndroidLobApp.ContentVersions.Item.ContainedApps.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphManagedAndroidLobApp.ContentVersions.Item.ContainedApps.Item
{
    [Proxy(typeof(MobileContainedAppItemRequestBuilder), true)]
    public partial interface IMobileContainedAppItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphManagedAndroidLobApp.ContentVersions.Item.Files
{
    [Proxy(typeof(FilesRequestBuilder), true)]
    public partial interface IFilesRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphManagedAndroidLobApp.ContentVersions.Item.Files.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphManagedAndroidLobApp.ContentVersions.Item.Files.Item
{
    [Proxy(typeof(MobileAppContentFileItemRequestBuilder), true)]
    public partial interface IMobileAppContentFileItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphManagedAndroidLobApp.ContentVersions.Item.Files.Item.Commit
{
    [Proxy(typeof(CommitRequestBuilder), true)]
    public partial interface ICommitRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphManagedAndroidLobApp.ContentVersions.Item.Files.Item.RenewUpload
{
    [Proxy(typeof(RenewUploadRequestBuilder), true)]
    public partial interface IRenewUploadRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphManagedIOSLobApp
{
    [Proxy(typeof(GraphManagedIOSLobAppRequestBuilder), true)]
    public partial interface IGraphManagedIOSLobAppRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphManagedIOSLobApp.Assignments
{
    [Proxy(typeof(AssignmentsRequestBuilder), true)]
    public partial interface IAssignmentsRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphManagedIOSLobApp.Assignments.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphManagedIOSLobApp.Assignments.Item
{
    [Proxy(typeof(MobileAppAssignmentItemRequestBuilder), true)]
    public partial interface IMobileAppAssignmentItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphManagedIOSLobApp.Categories
{
    [Proxy(typeof(CategoriesRequestBuilder), true)]
    public partial interface ICategoriesRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphManagedIOSLobApp.Categories.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphManagedIOSLobApp.Categories.Item
{
    [Proxy(typeof(MobileAppCategoryItemRequestBuilder), true)]
    public partial interface IMobileAppCategoryItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphManagedIOSLobApp.ContentVersions
{
    [Proxy(typeof(ContentVersionsRequestBuilder), true)]
    public partial interface IContentVersionsRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphManagedIOSLobApp.ContentVersions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphManagedIOSLobApp.ContentVersions.Item
{
    [Proxy(typeof(MobileAppContentItemRequestBuilder), true)]
    public partial interface IMobileAppContentItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphManagedIOSLobApp.ContentVersions.Item.ContainedApps
{
    [Proxy(typeof(ContainedAppsRequestBuilder), true)]
    public partial interface IContainedAppsRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphManagedIOSLobApp.ContentVersions.Item.ContainedApps.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphManagedIOSLobApp.ContentVersions.Item.ContainedApps.Item
{
    [Proxy(typeof(MobileContainedAppItemRequestBuilder), true)]
    public partial interface IMobileContainedAppItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphManagedIOSLobApp.ContentVersions.Item.Files
{
    [Proxy(typeof(FilesRequestBuilder), true)]
    public partial interface IFilesRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphManagedIOSLobApp.ContentVersions.Item.Files.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphManagedIOSLobApp.ContentVersions.Item.Files.Item
{
    [Proxy(typeof(MobileAppContentFileItemRequestBuilder), true)]
    public partial interface IMobileAppContentFileItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphManagedIOSLobApp.ContentVersions.Item.Files.Item.Commit
{
    [Proxy(typeof(CommitRequestBuilder), true)]
    public partial interface ICommitRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphManagedIOSLobApp.ContentVersions.Item.Files.Item.RenewUpload
{
    [Proxy(typeof(RenewUploadRequestBuilder), true)]
    public partial interface IRenewUploadRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphManagedMobileLobApp
{
    [Proxy(typeof(GraphManagedMobileLobAppRequestBuilder), true)]
    public partial interface IGraphManagedMobileLobAppRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphManagedMobileLobApp.Assignments
{
    [Proxy(typeof(AssignmentsRequestBuilder), true)]
    public partial interface IAssignmentsRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphManagedMobileLobApp.Assignments.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphManagedMobileLobApp.Assignments.Item
{
    [Proxy(typeof(MobileAppAssignmentItemRequestBuilder), true)]
    public partial interface IMobileAppAssignmentItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphManagedMobileLobApp.Categories
{
    [Proxy(typeof(CategoriesRequestBuilder), true)]
    public partial interface ICategoriesRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphManagedMobileLobApp.Categories.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphManagedMobileLobApp.Categories.Item
{
    [Proxy(typeof(MobileAppCategoryItemRequestBuilder), true)]
    public partial interface IMobileAppCategoryItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphManagedMobileLobApp.ContentVersions
{
    [Proxy(typeof(ContentVersionsRequestBuilder), true)]
    public partial interface IContentVersionsRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphManagedMobileLobApp.ContentVersions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphManagedMobileLobApp.ContentVersions.Item
{
    [Proxy(typeof(MobileAppContentItemRequestBuilder), true)]
    public partial interface IMobileAppContentItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphManagedMobileLobApp.ContentVersions.Item.ContainedApps
{
    [Proxy(typeof(ContainedAppsRequestBuilder), true)]
    public partial interface IContainedAppsRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphManagedMobileLobApp.ContentVersions.Item.ContainedApps.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphManagedMobileLobApp.ContentVersions.Item.ContainedApps.Item
{
    [Proxy(typeof(MobileContainedAppItemRequestBuilder), true)]
    public partial interface IMobileContainedAppItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphManagedMobileLobApp.ContentVersions.Item.Files
{
    [Proxy(typeof(FilesRequestBuilder), true)]
    public partial interface IFilesRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphManagedMobileLobApp.ContentVersions.Item.Files.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphManagedMobileLobApp.ContentVersions.Item.Files.Item
{
    [Proxy(typeof(MobileAppContentFileItemRequestBuilder), true)]
    public partial interface IMobileAppContentFileItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphManagedMobileLobApp.ContentVersions.Item.Files.Item.Commit
{
    [Proxy(typeof(CommitRequestBuilder), true)]
    public partial interface ICommitRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphManagedMobileLobApp.ContentVersions.Item.Files.Item.RenewUpload
{
    [Proxy(typeof(RenewUploadRequestBuilder), true)]
    public partial interface IRenewUploadRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphMicrosoftStoreForBusinessApp
{
    [Proxy(typeof(GraphMicrosoftStoreForBusinessAppRequestBuilder), true)]
    public partial interface IGraphMicrosoftStoreForBusinessAppRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphMicrosoftStoreForBusinessApp.Assignments
{
    [Proxy(typeof(AssignmentsRequestBuilder), true)]
    public partial interface IAssignmentsRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphMicrosoftStoreForBusinessApp.Assignments.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphMicrosoftStoreForBusinessApp.Assignments.Item
{
    [Proxy(typeof(MobileAppAssignmentItemRequestBuilder), true)]
    public partial interface IMobileAppAssignmentItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphMicrosoftStoreForBusinessApp.Categories
{
    [Proxy(typeof(CategoriesRequestBuilder), true)]
    public partial interface ICategoriesRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphMicrosoftStoreForBusinessApp.Categories.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphMicrosoftStoreForBusinessApp.Categories.Item
{
    [Proxy(typeof(MobileAppCategoryItemRequestBuilder), true)]
    public partial interface IMobileAppCategoryItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphWin32LobApp
{
    [Proxy(typeof(GraphWin32LobAppRequestBuilder), true)]
    public partial interface IGraphWin32LobAppRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphWin32LobApp.Assignments
{
    [Proxy(typeof(AssignmentsRequestBuilder), true)]
    public partial interface IAssignmentsRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphWin32LobApp.Assignments.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphWin32LobApp.Assignments.Item
{
    [Proxy(typeof(MobileAppAssignmentItemRequestBuilder), true)]
    public partial interface IMobileAppAssignmentItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphWin32LobApp.Categories
{
    [Proxy(typeof(CategoriesRequestBuilder), true)]
    public partial interface ICategoriesRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphWin32LobApp.Categories.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphWin32LobApp.Categories.Item
{
    [Proxy(typeof(MobileAppCategoryItemRequestBuilder), true)]
    public partial interface IMobileAppCategoryItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphWin32LobApp.ContentVersions
{
    [Proxy(typeof(ContentVersionsRequestBuilder), true)]
    public partial interface IContentVersionsRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphWin32LobApp.ContentVersions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphWin32LobApp.ContentVersions.Item
{
    [Proxy(typeof(MobileAppContentItemRequestBuilder), true)]
    public partial interface IMobileAppContentItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphWin32LobApp.ContentVersions.Item.ContainedApps
{
    [Proxy(typeof(ContainedAppsRequestBuilder), true)]
    public partial interface IContainedAppsRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphWin32LobApp.ContentVersions.Item.ContainedApps.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphWin32LobApp.ContentVersions.Item.ContainedApps.Item
{
    [Proxy(typeof(MobileContainedAppItemRequestBuilder), true)]
    public partial interface IMobileContainedAppItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphWin32LobApp.ContentVersions.Item.Files
{
    [Proxy(typeof(FilesRequestBuilder), true)]
    public partial interface IFilesRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphWin32LobApp.ContentVersions.Item.Files.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphWin32LobApp.ContentVersions.Item.Files.Item
{
    [Proxy(typeof(MobileAppContentFileItemRequestBuilder), true)]
    public partial interface IMobileAppContentFileItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphWin32LobApp.ContentVersions.Item.Files.Item.Commit
{
    [Proxy(typeof(CommitRequestBuilder), true)]
    public partial interface ICommitRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphWin32LobApp.ContentVersions.Item.Files.Item.RenewUpload
{
    [Proxy(typeof(RenewUploadRequestBuilder), true)]
    public partial interface IRenewUploadRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphWindowsAppX
{
    [Proxy(typeof(GraphWindowsAppXRequestBuilder), true)]
    public partial interface IGraphWindowsAppXRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphWindowsAppX.Assignments
{
    [Proxy(typeof(AssignmentsRequestBuilder), true)]
    public partial interface IAssignmentsRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphWindowsAppX.Assignments.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphWindowsAppX.Assignments.Item
{
    [Proxy(typeof(MobileAppAssignmentItemRequestBuilder), true)]
    public partial interface IMobileAppAssignmentItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphWindowsAppX.Categories
{
    [Proxy(typeof(CategoriesRequestBuilder), true)]
    public partial interface ICategoriesRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphWindowsAppX.Categories.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphWindowsAppX.Categories.Item
{
    [Proxy(typeof(MobileAppCategoryItemRequestBuilder), true)]
    public partial interface IMobileAppCategoryItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphWindowsAppX.ContentVersions
{
    [Proxy(typeof(ContentVersionsRequestBuilder), true)]
    public partial interface IContentVersionsRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphWindowsAppX.ContentVersions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphWindowsAppX.ContentVersions.Item
{
    [Proxy(typeof(MobileAppContentItemRequestBuilder), true)]
    public partial interface IMobileAppContentItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphWindowsAppX.ContentVersions.Item.ContainedApps
{
    [Proxy(typeof(ContainedAppsRequestBuilder), true)]
    public partial interface IContainedAppsRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphWindowsAppX.ContentVersions.Item.ContainedApps.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphWindowsAppX.ContentVersions.Item.ContainedApps.Item
{
    [Proxy(typeof(MobileContainedAppItemRequestBuilder), true)]
    public partial interface IMobileContainedAppItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphWindowsAppX.ContentVersions.Item.Files
{
    [Proxy(typeof(FilesRequestBuilder), true)]
    public partial interface IFilesRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphWindowsAppX.ContentVersions.Item.Files.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphWindowsAppX.ContentVersions.Item.Files.Item
{
    [Proxy(typeof(MobileAppContentFileItemRequestBuilder), true)]
    public partial interface IMobileAppContentFileItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphWindowsAppX.ContentVersions.Item.Files.Item.Commit
{
    [Proxy(typeof(CommitRequestBuilder), true)]
    public partial interface ICommitRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphWindowsAppX.ContentVersions.Item.Files.Item.RenewUpload
{
    [Proxy(typeof(RenewUploadRequestBuilder), true)]
    public partial interface IRenewUploadRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphWindowsMobileMSI
{
    [Proxy(typeof(GraphWindowsMobileMSIRequestBuilder), true)]
    public partial interface IGraphWindowsMobileMSIRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphWindowsMobileMSI.Assignments
{
    [Proxy(typeof(AssignmentsRequestBuilder), true)]
    public partial interface IAssignmentsRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphWindowsMobileMSI.Assignments.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphWindowsMobileMSI.Assignments.Item
{
    [Proxy(typeof(MobileAppAssignmentItemRequestBuilder), true)]
    public partial interface IMobileAppAssignmentItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphWindowsMobileMSI.Categories
{
    [Proxy(typeof(CategoriesRequestBuilder), true)]
    public partial interface ICategoriesRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphWindowsMobileMSI.Categories.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphWindowsMobileMSI.Categories.Item
{
    [Proxy(typeof(MobileAppCategoryItemRequestBuilder), true)]
    public partial interface IMobileAppCategoryItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphWindowsMobileMSI.ContentVersions
{
    [Proxy(typeof(ContentVersionsRequestBuilder), true)]
    public partial interface IContentVersionsRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphWindowsMobileMSI.ContentVersions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphWindowsMobileMSI.ContentVersions.Item
{
    [Proxy(typeof(MobileAppContentItemRequestBuilder), true)]
    public partial interface IMobileAppContentItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphWindowsMobileMSI.ContentVersions.Item.ContainedApps
{
    [Proxy(typeof(ContainedAppsRequestBuilder), true)]
    public partial interface IContainedAppsRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphWindowsMobileMSI.ContentVersions.Item.ContainedApps.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphWindowsMobileMSI.ContentVersions.Item.ContainedApps.Item
{
    [Proxy(typeof(MobileContainedAppItemRequestBuilder), true)]
    public partial interface IMobileContainedAppItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphWindowsMobileMSI.ContentVersions.Item.Files
{
    [Proxy(typeof(FilesRequestBuilder), true)]
    public partial interface IFilesRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphWindowsMobileMSI.ContentVersions.Item.Files.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphWindowsMobileMSI.ContentVersions.Item.Files.Item
{
    [Proxy(typeof(MobileAppContentFileItemRequestBuilder), true)]
    public partial interface IMobileAppContentFileItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphWindowsMobileMSI.ContentVersions.Item.Files.Item.Commit
{
    [Proxy(typeof(CommitRequestBuilder), true)]
    public partial interface ICommitRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphWindowsMobileMSI.ContentVersions.Item.Files.Item.RenewUpload
{
    [Proxy(typeof(RenewUploadRequestBuilder), true)]
    public partial interface IRenewUploadRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphWindowsUniversalAppX
{
    [Proxy(typeof(GraphWindowsUniversalAppXRequestBuilder), true)]
    public partial interface IGraphWindowsUniversalAppXRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphWindowsUniversalAppX.Assignments
{
    [Proxy(typeof(AssignmentsRequestBuilder), true)]
    public partial interface IAssignmentsRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphWindowsUniversalAppX.Assignments.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphWindowsUniversalAppX.Assignments.Item
{
    [Proxy(typeof(MobileAppAssignmentItemRequestBuilder), true)]
    public partial interface IMobileAppAssignmentItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphWindowsUniversalAppX.Categories
{
    [Proxy(typeof(CategoriesRequestBuilder), true)]
    public partial interface ICategoriesRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphWindowsUniversalAppX.Categories.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphWindowsUniversalAppX.Categories.Item
{
    [Proxy(typeof(MobileAppCategoryItemRequestBuilder), true)]
    public partial interface IMobileAppCategoryItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphWindowsUniversalAppX.CommittedContainedApps
{
    [Proxy(typeof(CommittedContainedAppsRequestBuilder), true)]
    public partial interface ICommittedContainedAppsRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphWindowsUniversalAppX.CommittedContainedApps.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphWindowsUniversalAppX.CommittedContainedApps.Item
{
    [Proxy(typeof(MobileContainedAppItemRequestBuilder), true)]
    public partial interface IMobileContainedAppItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphWindowsUniversalAppX.ContentVersions
{
    [Proxy(typeof(ContentVersionsRequestBuilder), true)]
    public partial interface IContentVersionsRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphWindowsUniversalAppX.ContentVersions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphWindowsUniversalAppX.ContentVersions.Item
{
    [Proxy(typeof(MobileAppContentItemRequestBuilder), true)]
    public partial interface IMobileAppContentItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphWindowsUniversalAppX.ContentVersions.Item.ContainedApps
{
    [Proxy(typeof(ContainedAppsRequestBuilder), true)]
    public partial interface IContainedAppsRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphWindowsUniversalAppX.ContentVersions.Item.ContainedApps.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphWindowsUniversalAppX.ContentVersions.Item.ContainedApps.Item
{
    [Proxy(typeof(MobileContainedAppItemRequestBuilder), true)]
    public partial interface IMobileContainedAppItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphWindowsUniversalAppX.ContentVersions.Item.Files
{
    [Proxy(typeof(FilesRequestBuilder), true)]
    public partial interface IFilesRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphWindowsUniversalAppX.ContentVersions.Item.Files.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphWindowsUniversalAppX.ContentVersions.Item.Files.Item
{
    [Proxy(typeof(MobileAppContentFileItemRequestBuilder), true)]
    public partial interface IMobileAppContentFileItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphWindowsUniversalAppX.ContentVersions.Item.Files.Item.Commit
{
    [Proxy(typeof(CommitRequestBuilder), true)]
    public partial interface ICommitRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphWindowsUniversalAppX.ContentVersions.Item.Files.Item.RenewUpload
{
    [Proxy(typeof(RenewUploadRequestBuilder), true)]
    public partial interface IRenewUploadRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphWindowsWebApp
{
    [Proxy(typeof(GraphWindowsWebAppRequestBuilder), true)]
    public partial interface IGraphWindowsWebAppRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphWindowsWebApp.Assignments
{
    [Proxy(typeof(AssignmentsRequestBuilder), true)]
    public partial interface IAssignmentsRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphWindowsWebApp.Assignments.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphWindowsWebApp.Assignments.Item
{
    [Proxy(typeof(MobileAppAssignmentItemRequestBuilder), true)]
    public partial interface IMobileAppAssignmentItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphWindowsWebApp.Categories
{
    [Proxy(typeof(CategoriesRequestBuilder), true)]
    public partial interface ICategoriesRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphWindowsWebApp.Categories.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.MobileApps.Item.GraphWindowsWebApp.Categories.Item
{
    [Proxy(typeof(MobileAppCategoryItemRequestBuilder), true)]
    public partial interface IMobileAppCategoryItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.SyncMicrosoftStoreForBusinessApps
{
    [Proxy(typeof(SyncMicrosoftStoreForBusinessAppsRequestBuilder), true)]
    public partial interface ISyncMicrosoftStoreForBusinessAppsRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.TargetedManagedAppConfigurations
{
    [Proxy(typeof(TargetedManagedAppConfigurationsRequestBuilder), true)]
    public partial interface ITargetedManagedAppConfigurationsRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.TargetedManagedAppConfigurations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.TargetedManagedAppConfigurations.Item
{
    [Proxy(typeof(TargetedManagedAppConfigurationItemRequestBuilder), true)]
    public partial interface ITargetedManagedAppConfigurationItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.TargetedManagedAppConfigurations.Item.Apps
{
    [Proxy(typeof(AppsRequestBuilder), true)]
    public partial interface IAppsRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.TargetedManagedAppConfigurations.Item.Apps.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.TargetedManagedAppConfigurations.Item.Apps.Item
{
    [Proxy(typeof(ManagedMobileAppItemRequestBuilder), true)]
    public partial interface IManagedMobileAppItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.TargetedManagedAppConfigurations.Item.Assign
{
    [Proxy(typeof(AssignRequestBuilder), true)]
    public partial interface IAssignRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.TargetedManagedAppConfigurations.Item.Assignments
{
    [Proxy(typeof(AssignmentsRequestBuilder), true)]
    public partial interface IAssignmentsRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.TargetedManagedAppConfigurations.Item.Assignments.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.TargetedManagedAppConfigurations.Item.Assignments.Item
{
    [Proxy(typeof(TargetedManagedAppPolicyAssignmentItemRequestBuilder), true)]
    public partial interface ITargetedManagedAppPolicyAssignmentItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.TargetedManagedAppConfigurations.Item.DeploymentSummary
{
    [Proxy(typeof(DeploymentSummaryRequestBuilder), true)]
    public partial interface IDeploymentSummaryRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.TargetedManagedAppConfigurations.Item.TargetApps
{
    [Proxy(typeof(TargetAppsRequestBuilder), true)]
    public partial interface ITargetAppsRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.VppTokens
{
    [Proxy(typeof(VppTokensRequestBuilder), true)]
    public partial interface IVppTokensRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.VppTokens.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.VppTokens.Item
{
    [Proxy(typeof(VppTokenItemRequestBuilder), true)]
    public partial interface IVppTokenItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.VppTokens.Item.SyncLicenses
{
    [Proxy(typeof(SyncLicensesRequestBuilder), true)]
    public partial interface ISyncLicensesRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.WindowsInformationProtectionPolicies
{
    [Proxy(typeof(WindowsInformationProtectionPoliciesRequestBuilder), true)]
    public partial interface IWindowsInformationProtectionPoliciesRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.WindowsInformationProtectionPolicies.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.WindowsInformationProtectionPolicies.Item
{
    [Proxy(typeof(WindowsInformationProtectionPolicyItemRequestBuilder), true)]
    public partial interface IWindowsInformationProtectionPolicyItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.WindowsInformationProtectionPolicies.Item.Assignments
{
    [Proxy(typeof(AssignmentsRequestBuilder), true)]
    public partial interface IAssignmentsRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.WindowsInformationProtectionPolicies.Item.Assignments.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.WindowsInformationProtectionPolicies.Item.Assignments.Item
{
    [Proxy(typeof(TargetedManagedAppPolicyAssignmentItemRequestBuilder), true)]
    public partial interface ITargetedManagedAppPolicyAssignmentItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.WindowsInformationProtectionPolicies.Item.ExemptAppLockerFiles
{
    [Proxy(typeof(ExemptAppLockerFilesRequestBuilder), true)]
    public partial interface IExemptAppLockerFilesRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.WindowsInformationProtectionPolicies.Item.ExemptAppLockerFiles.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.WindowsInformationProtectionPolicies.Item.ExemptAppLockerFiles.Item
{
    [Proxy(typeof(WindowsInformationProtectionAppLockerFileItemRequestBuilder), true)]
    public partial interface IWindowsInformationProtectionAppLockerFileItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.WindowsInformationProtectionPolicies.Item.ProtectedAppLockerFiles
{
    [Proxy(typeof(ProtectedAppLockerFilesRequestBuilder), true)]
    public partial interface IProtectedAppLockerFilesRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.WindowsInformationProtectionPolicies.Item.ProtectedAppLockerFiles.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceAppManagement.WindowsInformationProtectionPolicies.Item.ProtectedAppLockerFiles.Item
{
    [Proxy(typeof(WindowsInformationProtectionAppLockerFileItemRequestBuilder), true)]
    public partial interface IWindowsInformationProtectionAppLockerFileItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement
{
    [Proxy(typeof(DeviceManagementRequestBuilder), true)]
    public partial interface IDeviceManagementRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.ApplePushNotificationCertificate
{
    [Proxy(typeof(ApplePushNotificationCertificateRequestBuilder), true)]
    public partial interface IApplePushNotificationCertificateRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.ApplePushNotificationCertificate.DownloadApplePushNotificationCertificateSigningRequest
{
    [Proxy(typeof(DownloadApplePushNotificationCertificateSigningRequestRequestBuilder), true)]
    public partial interface IDownloadApplePushNotificationCertificateSigningRequestRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.AuditEvents
{
    [Proxy(typeof(AuditEventsRequestBuilder), true)]
    public partial interface IAuditEventsRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.AuditEvents.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.AuditEvents.GetAuditActivityTypesWithCategory
{
    [Proxy(typeof(GetAuditActivityTypesWithCategoryRequestBuilder), true)]
    public partial interface IGetAuditActivityTypesWithCategoryRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.AuditEvents.GetAuditCategories
{
    [Proxy(typeof(GetAuditCategoriesRequestBuilder), true)]
    public partial interface IGetAuditCategoriesRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.AuditEvents.Item
{
    [Proxy(typeof(AuditEventItemRequestBuilder), true)]
    public partial interface IAuditEventItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.ComplianceManagementPartners
{
    [Proxy(typeof(ComplianceManagementPartnersRequestBuilder), true)]
    public partial interface IComplianceManagementPartnersRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.ComplianceManagementPartners.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.ComplianceManagementPartners.Item
{
    [Proxy(typeof(ComplianceManagementPartnerItemRequestBuilder), true)]
    public partial interface IComplianceManagementPartnerItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.ConditionalAccessSettings
{
    [Proxy(typeof(ConditionalAccessSettingsRequestBuilder), true)]
    public partial interface IConditionalAccessSettingsRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.DetectedApps
{
    [Proxy(typeof(DetectedAppsRequestBuilder), true)]
    public partial interface IDetectedAppsRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.DetectedApps.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.DetectedApps.Item
{
    [Proxy(typeof(DetectedAppItemRequestBuilder), true)]
    public partial interface IDetectedAppItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.DetectedApps.Item.ManagedDevices
{
    [Proxy(typeof(ManagedDevicesRequestBuilder), true)]
    public partial interface IManagedDevicesRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.DetectedApps.Item.ManagedDevices.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.DetectedApps.Item.ManagedDevices.Item
{
    [Proxy(typeof(ManagedDeviceItemRequestBuilder), true)]
    public partial interface IManagedDeviceItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.DeviceCategories
{
    [Proxy(typeof(DeviceCategoriesRequestBuilder), true)]
    public partial interface IDeviceCategoriesRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.DeviceCategories.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.DeviceCategories.Item
{
    [Proxy(typeof(DeviceCategoryItemRequestBuilder), true)]
    public partial interface IDeviceCategoryItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.DeviceCompliancePolicies
{
    [Proxy(typeof(DeviceCompliancePoliciesRequestBuilder), true)]
    public partial interface IDeviceCompliancePoliciesRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.DeviceCompliancePolicies.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.DeviceCompliancePolicies.Item
{
    [Proxy(typeof(DeviceCompliancePolicyItemRequestBuilder), true)]
    public partial interface IDeviceCompliancePolicyItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.DeviceCompliancePolicies.Item.Assign
{
    [Proxy(typeof(AssignRequestBuilder), true)]
    public partial interface IAssignRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.DeviceCompliancePolicies.Item.Assignments
{
    [Proxy(typeof(AssignmentsRequestBuilder), true)]
    public partial interface IAssignmentsRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.DeviceCompliancePolicies.Item.Assignments.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.DeviceCompliancePolicies.Item.Assignments.Item
{
    [Proxy(typeof(DeviceCompliancePolicyAssignmentItemRequestBuilder), true)]
    public partial interface IDeviceCompliancePolicyAssignmentItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.DeviceCompliancePolicies.Item.DeviceSettingStateSummaries
{
    [Proxy(typeof(DeviceSettingStateSummariesRequestBuilder), true)]
    public partial interface IDeviceSettingStateSummariesRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.DeviceCompliancePolicies.Item.DeviceSettingStateSummaries.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.DeviceCompliancePolicies.Item.DeviceSettingStateSummaries.Item
{
    [Proxy(typeof(SettingStateDeviceSummaryItemRequestBuilder), true)]
    public partial interface ISettingStateDeviceSummaryItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.DeviceCompliancePolicies.Item.DeviceStatuses
{
    [Proxy(typeof(DeviceStatusesRequestBuilder), true)]
    public partial interface IDeviceStatusesRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.DeviceCompliancePolicies.Item.DeviceStatuses.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.DeviceCompliancePolicies.Item.DeviceStatuses.Item
{
    [Proxy(typeof(DeviceComplianceDeviceStatusItemRequestBuilder), true)]
    public partial interface IDeviceComplianceDeviceStatusItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.DeviceCompliancePolicies.Item.DeviceStatusOverview
{
    [Proxy(typeof(DeviceStatusOverviewRequestBuilder), true)]
    public partial interface IDeviceStatusOverviewRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.DeviceCompliancePolicies.Item.ScheduleActionsForRules
{
    [Proxy(typeof(ScheduleActionsForRulesRequestBuilder), true)]
    public partial interface IScheduleActionsForRulesRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.DeviceCompliancePolicies.Item.ScheduledActionsForRule
{
    [Proxy(typeof(ScheduledActionsForRuleRequestBuilder), true)]
    public partial interface IScheduledActionsForRuleRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.DeviceCompliancePolicies.Item.ScheduledActionsForRule.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.DeviceCompliancePolicies.Item.ScheduledActionsForRule.Item
{
    [Proxy(typeof(DeviceComplianceScheduledActionForRuleItemRequestBuilder), true)]
    public partial interface IDeviceComplianceScheduledActionForRuleItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.DeviceCompliancePolicies.Item.ScheduledActionsForRule.Item.ScheduledActionConfigurations
{
    [Proxy(typeof(ScheduledActionConfigurationsRequestBuilder), true)]
    public partial interface IScheduledActionConfigurationsRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.DeviceCompliancePolicies.Item.ScheduledActionsForRule.Item.ScheduledActionConfigurations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.DeviceCompliancePolicies.Item.ScheduledActionsForRule.Item.ScheduledActionConfigurations.Item
{
    [Proxy(typeof(DeviceComplianceActionItemItemRequestBuilder), true)]
    public partial interface IDeviceComplianceActionItemItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.DeviceCompliancePolicies.Item.UserStatuses
{
    [Proxy(typeof(UserStatusesRequestBuilder), true)]
    public partial interface IUserStatusesRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.DeviceCompliancePolicies.Item.UserStatuses.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.DeviceCompliancePolicies.Item.UserStatuses.Item
{
    [Proxy(typeof(DeviceComplianceUserStatusItemRequestBuilder), true)]
    public partial interface IDeviceComplianceUserStatusItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.DeviceCompliancePolicies.Item.UserStatusOverview
{
    [Proxy(typeof(UserStatusOverviewRequestBuilder), true)]
    public partial interface IUserStatusOverviewRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.DeviceCompliancePolicyDeviceStateSummary
{
    [Proxy(typeof(DeviceCompliancePolicyDeviceStateSummaryRequestBuilder), true)]
    public partial interface IDeviceCompliancePolicyDeviceStateSummaryRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.DeviceCompliancePolicySettingStateSummaries
{
    [Proxy(typeof(DeviceCompliancePolicySettingStateSummariesRequestBuilder), true)]
    public partial interface IDeviceCompliancePolicySettingStateSummariesRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.DeviceCompliancePolicySettingStateSummaries.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.DeviceCompliancePolicySettingStateSummaries.Item
{
    [Proxy(typeof(DeviceCompliancePolicySettingStateSummaryItemRequestBuilder), true)]
    public partial interface IDeviceCompliancePolicySettingStateSummaryItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.DeviceCompliancePolicySettingStateSummaries.Item.DeviceComplianceSettingStates
{
    [Proxy(typeof(DeviceComplianceSettingStatesRequestBuilder), true)]
    public partial interface IDeviceComplianceSettingStatesRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.DeviceCompliancePolicySettingStateSummaries.Item.DeviceComplianceSettingStates.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.DeviceCompliancePolicySettingStateSummaries.Item.DeviceComplianceSettingStates.Item
{
    [Proxy(typeof(DeviceComplianceSettingStateItemRequestBuilder), true)]
    public partial interface IDeviceComplianceSettingStateItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.DeviceConfigurationDeviceStateSummaries
{
    [Proxy(typeof(DeviceConfigurationDeviceStateSummariesRequestBuilder), true)]
    public partial interface IDeviceConfigurationDeviceStateSummariesRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.DeviceConfigurations
{
    [Proxy(typeof(DeviceConfigurationsRequestBuilder), true)]
    public partial interface IDeviceConfigurationsRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.DeviceConfigurations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.DeviceConfigurations.Item
{
    [Proxy(typeof(DeviceConfigurationItemRequestBuilder), true)]
    public partial interface IDeviceConfigurationItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.DeviceConfigurations.Item.Assign
{
    [Proxy(typeof(AssignRequestBuilder), true)]
    public partial interface IAssignRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.DeviceConfigurations.Item.Assignments
{
    [Proxy(typeof(AssignmentsRequestBuilder), true)]
    public partial interface IAssignmentsRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.DeviceConfigurations.Item.Assignments.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.DeviceConfigurations.Item.Assignments.Item
{
    [Proxy(typeof(DeviceConfigurationAssignmentItemRequestBuilder), true)]
    public partial interface IDeviceConfigurationAssignmentItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.DeviceConfigurations.Item.DeviceSettingStateSummaries
{
    [Proxy(typeof(DeviceSettingStateSummariesRequestBuilder), true)]
    public partial interface IDeviceSettingStateSummariesRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.DeviceConfigurations.Item.DeviceSettingStateSummaries.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.DeviceConfigurations.Item.DeviceSettingStateSummaries.Item
{
    [Proxy(typeof(SettingStateDeviceSummaryItemRequestBuilder), true)]
    public partial interface ISettingStateDeviceSummaryItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.DeviceConfigurations.Item.DeviceStatuses
{
    [Proxy(typeof(DeviceStatusesRequestBuilder), true)]
    public partial interface IDeviceStatusesRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.DeviceConfigurations.Item.DeviceStatuses.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.DeviceConfigurations.Item.DeviceStatuses.Item
{
    [Proxy(typeof(DeviceConfigurationDeviceStatusItemRequestBuilder), true)]
    public partial interface IDeviceConfigurationDeviceStatusItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.DeviceConfigurations.Item.DeviceStatusOverview
{
    [Proxy(typeof(DeviceStatusOverviewRequestBuilder), true)]
    public partial interface IDeviceStatusOverviewRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.DeviceConfigurations.Item.GetOmaSettingPlainTextValueWithSecretReferenceValueId
{
    [Proxy(typeof(GetOmaSettingPlainTextValueWithSecretReferenceValueIdRequestBuilder), true)]
    public partial interface IGetOmaSettingPlainTextValueWithSecretReferenceValueIdRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.DeviceConfigurations.Item.UserStatuses
{
    [Proxy(typeof(UserStatusesRequestBuilder), true)]
    public partial interface IUserStatusesRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.DeviceConfigurations.Item.UserStatuses.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.DeviceConfigurations.Item.UserStatuses.Item
{
    [Proxy(typeof(DeviceConfigurationUserStatusItemRequestBuilder), true)]
    public partial interface IDeviceConfigurationUserStatusItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.DeviceConfigurations.Item.UserStatusOverview
{
    [Proxy(typeof(UserStatusOverviewRequestBuilder), true)]
    public partial interface IUserStatusOverviewRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.DeviceEnrollmentConfigurations
{
    [Proxy(typeof(DeviceEnrollmentConfigurationsRequestBuilder), true)]
    public partial interface IDeviceEnrollmentConfigurationsRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.DeviceEnrollmentConfigurations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.DeviceEnrollmentConfigurations.Item
{
    [Proxy(typeof(DeviceEnrollmentConfigurationItemRequestBuilder), true)]
    public partial interface IDeviceEnrollmentConfigurationItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.DeviceEnrollmentConfigurations.Item.Assign
{
    [Proxy(typeof(AssignRequestBuilder), true)]
    public partial interface IAssignRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.DeviceEnrollmentConfigurations.Item.Assignments
{
    [Proxy(typeof(AssignmentsRequestBuilder), true)]
    public partial interface IAssignmentsRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.DeviceEnrollmentConfigurations.Item.Assignments.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.DeviceEnrollmentConfigurations.Item.Assignments.Item
{
    [Proxy(typeof(EnrollmentConfigurationAssignmentItemRequestBuilder), true)]
    public partial interface IEnrollmentConfigurationAssignmentItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.DeviceEnrollmentConfigurations.Item.SetPriority
{
    [Proxy(typeof(SetPriorityRequestBuilder), true)]
    public partial interface ISetPriorityRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.DeviceManagementPartners
{
    [Proxy(typeof(DeviceManagementPartnersRequestBuilder), true)]
    public partial interface IDeviceManagementPartnersRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.DeviceManagementPartners.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.DeviceManagementPartners.Item
{
    [Proxy(typeof(DeviceManagementPartnerItemRequestBuilder), true)]
    public partial interface IDeviceManagementPartnerItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.DeviceManagementPartners.Item.Terminate
{
    [Proxy(typeof(TerminateRequestBuilder), true)]
    public partial interface ITerminateRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.ExchangeConnectors
{
    [Proxy(typeof(ExchangeConnectorsRequestBuilder), true)]
    public partial interface IExchangeConnectorsRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.ExchangeConnectors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.ExchangeConnectors.Item
{
    [Proxy(typeof(DeviceManagementExchangeConnectorItemRequestBuilder), true)]
    public partial interface IDeviceManagementExchangeConnectorItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.ExchangeConnectors.Item.Sync
{
    [Proxy(typeof(SyncRequestBuilder), true)]
    public partial interface ISyncRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.GetEffectivePermissionsWithScope
{
    [Proxy(typeof(GetEffectivePermissionsWithScopeRequestBuilder), true)]
    public partial interface IGetEffectivePermissionsWithScopeRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.ImportedWindowsAutopilotDeviceIdentities
{
    [Proxy(typeof(ImportedWindowsAutopilotDeviceIdentitiesRequestBuilder), true)]
    public partial interface IImportedWindowsAutopilotDeviceIdentitiesRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.ImportedWindowsAutopilotDeviceIdentities.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.ImportedWindowsAutopilotDeviceIdentities.Import
{
    [Proxy(typeof(ImportRequestBuilder), true)]
    public partial interface IImportRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.ImportedWindowsAutopilotDeviceIdentities.Item
{
    [Proxy(typeof(ImportedWindowsAutopilotDeviceIdentityItemRequestBuilder), true)]
    public partial interface IImportedWindowsAutopilotDeviceIdentityItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.IosUpdateStatuses
{
    [Proxy(typeof(IosUpdateStatusesRequestBuilder), true)]
    public partial interface IIosUpdateStatusesRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.IosUpdateStatuses.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.IosUpdateStatuses.Item
{
    [Proxy(typeof(IosUpdateDeviceStatusItemRequestBuilder), true)]
    public partial interface IIosUpdateDeviceStatusItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.ManagedDeviceOverview
{
    [Proxy(typeof(ManagedDeviceOverviewRequestBuilder), true)]
    public partial interface IManagedDeviceOverviewRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.ManagedDevices
{
    [Proxy(typeof(ManagedDevicesRequestBuilder), true)]
    public partial interface IManagedDevicesRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.ManagedDevices.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.ManagedDevices.Item
{
    [Proxy(typeof(ManagedDeviceItemRequestBuilder), true)]
    public partial interface IManagedDeviceItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.ManagedDevices.Item.BypassActivationLock
{
    [Proxy(typeof(BypassActivationLockRequestBuilder), true)]
    public partial interface IBypassActivationLockRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.ManagedDevices.Item.CleanWindowsDevice
{
    [Proxy(typeof(CleanWindowsDeviceRequestBuilder), true)]
    public partial interface ICleanWindowsDeviceRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.ManagedDevices.Item.DeleteUserFromSharedAppleDevice
{
    [Proxy(typeof(DeleteUserFromSharedAppleDeviceRequestBuilder), true)]
    public partial interface IDeleteUserFromSharedAppleDeviceRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.ManagedDevices.Item.DeviceCategory
{
    [Proxy(typeof(DeviceCategoryRequestBuilder), true)]
    public partial interface IDeviceCategoryRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.ManagedDevices.Item.DeviceCategory.Ref
{
    [Proxy(typeof(RefRequestBuilder), true)]
    public partial interface IRefRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.ManagedDevices.Item.DeviceCompliancePolicyStates
{
    [Proxy(typeof(DeviceCompliancePolicyStatesRequestBuilder), true)]
    public partial interface IDeviceCompliancePolicyStatesRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.ManagedDevices.Item.DeviceCompliancePolicyStates.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.ManagedDevices.Item.DeviceCompliancePolicyStates.Item
{
    [Proxy(typeof(DeviceCompliancePolicyStateItemRequestBuilder), true)]
    public partial interface IDeviceCompliancePolicyStateItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.ManagedDevices.Item.DeviceConfigurationStates
{
    [Proxy(typeof(DeviceConfigurationStatesRequestBuilder), true)]
    public partial interface IDeviceConfigurationStatesRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.ManagedDevices.Item.DeviceConfigurationStates.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.ManagedDevices.Item.DeviceConfigurationStates.Item
{
    [Proxy(typeof(DeviceConfigurationStateItemRequestBuilder), true)]
    public partial interface IDeviceConfigurationStateItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.ManagedDevices.Item.DisableLostMode
{
    [Proxy(typeof(DisableLostModeRequestBuilder), true)]
    public partial interface IDisableLostModeRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.ManagedDevices.Item.LocateDevice
{
    [Proxy(typeof(LocateDeviceRequestBuilder), true)]
    public partial interface ILocateDeviceRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.ManagedDevices.Item.LogCollectionRequests
{
    [Proxy(typeof(LogCollectionRequestsRequestBuilder), true)]
    public partial interface ILogCollectionRequestsRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.ManagedDevices.Item.LogCollectionRequests.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.ManagedDevices.Item.LogCollectionRequests.Item
{
    [Proxy(typeof(DeviceLogCollectionResponseItemRequestBuilder), true)]
    public partial interface IDeviceLogCollectionResponseItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.ManagedDevices.Item.LogCollectionRequests.Item.CreateDownloadUrl
{
    [Proxy(typeof(CreateDownloadUrlRequestBuilder), true)]
    public partial interface ICreateDownloadUrlRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.ManagedDevices.Item.LogoutSharedAppleDeviceActiveUser
{
    [Proxy(typeof(LogoutSharedAppleDeviceActiveUserRequestBuilder), true)]
    public partial interface ILogoutSharedAppleDeviceActiveUserRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.ManagedDevices.Item.RebootNow
{
    [Proxy(typeof(RebootNowRequestBuilder), true)]
    public partial interface IRebootNowRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.ManagedDevices.Item.RecoverPasscode
{
    [Proxy(typeof(RecoverPasscodeRequestBuilder), true)]
    public partial interface IRecoverPasscodeRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.ManagedDevices.Item.RemoteLock
{
    [Proxy(typeof(RemoteLockRequestBuilder), true)]
    public partial interface IRemoteLockRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.ManagedDevices.Item.RequestRemoteAssistance
{
    [Proxy(typeof(RequestRemoteAssistanceRequestBuilder), true)]
    public partial interface IRequestRemoteAssistanceRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.ManagedDevices.Item.ResetPasscode
{
    [Proxy(typeof(ResetPasscodeRequestBuilder), true)]
    public partial interface IResetPasscodeRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.ManagedDevices.Item.Retire
{
    [Proxy(typeof(RetireRequestBuilder), true)]
    public partial interface IRetireRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.ManagedDevices.Item.ShutDown
{
    [Proxy(typeof(ShutDownRequestBuilder), true)]
    public partial interface IShutDownRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.ManagedDevices.Item.SyncDevice
{
    [Proxy(typeof(SyncDeviceRequestBuilder), true)]
    public partial interface ISyncDeviceRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.ManagedDevices.Item.UpdateWindowsDeviceAccount
{
    [Proxy(typeof(UpdateWindowsDeviceAccountRequestBuilder), true)]
    public partial interface IUpdateWindowsDeviceAccountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.ManagedDevices.Item.Users
{
    [Proxy(typeof(UsersRequestBuilder), true)]
    public partial interface IUsersRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.ManagedDevices.Item.WindowsDefenderScan
{
    [Proxy(typeof(WindowsDefenderScanRequestBuilder), true)]
    public partial interface IWindowsDefenderScanRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.ManagedDevices.Item.WindowsDefenderUpdateSignatures
{
    [Proxy(typeof(WindowsDefenderUpdateSignaturesRequestBuilder), true)]
    public partial interface IWindowsDefenderUpdateSignaturesRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.ManagedDevices.Item.WindowsProtectionState
{
    [Proxy(typeof(WindowsProtectionStateRequestBuilder), true)]
    public partial interface IWindowsProtectionStateRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.ManagedDevices.Item.WindowsProtectionState.DetectedMalwareState
{
    [Proxy(typeof(DetectedMalwareStateRequestBuilder), true)]
    public partial interface IDetectedMalwareStateRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.ManagedDevices.Item.WindowsProtectionState.DetectedMalwareState.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.ManagedDevices.Item.WindowsProtectionState.DetectedMalwareState.Item
{
    [Proxy(typeof(WindowsDeviceMalwareStateItemRequestBuilder), true)]
    public partial interface IWindowsDeviceMalwareStateItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.ManagedDevices.Item.Wipe
{
    [Proxy(typeof(WipeRequestBuilder), true)]
    public partial interface IWipeRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.MobileAppTroubleshootingEvents
{
    [Proxy(typeof(MobileAppTroubleshootingEventsRequestBuilder), true)]
    public partial interface IMobileAppTroubleshootingEventsRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.MobileAppTroubleshootingEvents.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.MobileAppTroubleshootingEvents.Item
{
    [Proxy(typeof(MobileAppTroubleshootingEventItemRequestBuilder), true)]
    public partial interface IMobileAppTroubleshootingEventItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.MobileAppTroubleshootingEvents.Item.AppLogCollectionRequests
{
    [Proxy(typeof(AppLogCollectionRequestsRequestBuilder), true)]
    public partial interface IAppLogCollectionRequestsRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.MobileAppTroubleshootingEvents.Item.AppLogCollectionRequests.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.MobileAppTroubleshootingEvents.Item.AppLogCollectionRequests.Item
{
    [Proxy(typeof(AppLogCollectionRequestItemRequestBuilder), true)]
    public partial interface IAppLogCollectionRequestItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.MobileAppTroubleshootingEvents.Item.AppLogCollectionRequests.Item.CreateDownloadUrl
{
    [Proxy(typeof(CreateDownloadUrlRequestBuilder), true)]
    public partial interface ICreateDownloadUrlRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.MobileThreatDefenseConnectors
{
    [Proxy(typeof(MobileThreatDefenseConnectorsRequestBuilder), true)]
    public partial interface IMobileThreatDefenseConnectorsRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.MobileThreatDefenseConnectors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.MobileThreatDefenseConnectors.Item
{
    [Proxy(typeof(MobileThreatDefenseConnectorItemRequestBuilder), true)]
    public partial interface IMobileThreatDefenseConnectorItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.NotificationMessageTemplates
{
    [Proxy(typeof(NotificationMessageTemplatesRequestBuilder), true)]
    public partial interface INotificationMessageTemplatesRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.NotificationMessageTemplates.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.NotificationMessageTemplates.Item
{
    [Proxy(typeof(NotificationMessageTemplateItemRequestBuilder), true)]
    public partial interface INotificationMessageTemplateItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.NotificationMessageTemplates.Item.LocalizedNotificationMessages
{
    [Proxy(typeof(LocalizedNotificationMessagesRequestBuilder), true)]
    public partial interface ILocalizedNotificationMessagesRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.NotificationMessageTemplates.Item.LocalizedNotificationMessages.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.NotificationMessageTemplates.Item.LocalizedNotificationMessages.Item
{
    [Proxy(typeof(LocalizedNotificationMessageItemRequestBuilder), true)]
    public partial interface ILocalizedNotificationMessageItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.NotificationMessageTemplates.Item.SendTestMessage
{
    [Proxy(typeof(SendTestMessageRequestBuilder), true)]
    public partial interface ISendTestMessageRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.RemoteAssistancePartners
{
    [Proxy(typeof(RemoteAssistancePartnersRequestBuilder), true)]
    public partial interface IRemoteAssistancePartnersRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.RemoteAssistancePartners.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.RemoteAssistancePartners.Item
{
    [Proxy(typeof(RemoteAssistancePartnerItemRequestBuilder), true)]
    public partial interface IRemoteAssistancePartnerItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.RemoteAssistancePartners.Item.BeginOnboarding
{
    [Proxy(typeof(BeginOnboardingRequestBuilder), true)]
    public partial interface IBeginOnboardingRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.RemoteAssistancePartners.Item.Disconnect
{
    [Proxy(typeof(DisconnectRequestBuilder), true)]
    public partial interface IDisconnectRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.Reports
{
    [Proxy(typeof(ReportsRequestBuilder), true)]
    public partial interface IReportsRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.Reports.ExportJobs
{
    [Proxy(typeof(ExportJobsRequestBuilder), true)]
    public partial interface IExportJobsRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.Reports.ExportJobs.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.Reports.ExportJobs.Item
{
    [Proxy(typeof(DeviceManagementExportJobItemRequestBuilder), true)]
    public partial interface IDeviceManagementExportJobItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.Reports.GetCachedReport
{
    [Proxy(typeof(GetCachedReportRequestBuilder), true)]
    public partial interface IGetCachedReportRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.Reports.GetCompliancePolicyNonComplianceReport
{
    [Proxy(typeof(GetCompliancePolicyNonComplianceReportRequestBuilder), true)]
    public partial interface IGetCompliancePolicyNonComplianceReportRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.Reports.GetCompliancePolicyNonComplianceSummaryReport
{
    [Proxy(typeof(GetCompliancePolicyNonComplianceSummaryReportRequestBuilder), true)]
    public partial interface IGetCompliancePolicyNonComplianceSummaryReportRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.Reports.GetComplianceSettingNonComplianceReport
{
    [Proxy(typeof(GetComplianceSettingNonComplianceReportRequestBuilder), true)]
    public partial interface IGetComplianceSettingNonComplianceReportRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.Reports.GetConfigurationPolicyNonComplianceReport
{
    [Proxy(typeof(GetConfigurationPolicyNonComplianceReportRequestBuilder), true)]
    public partial interface IGetConfigurationPolicyNonComplianceReportRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.Reports.GetConfigurationPolicyNonComplianceSummaryReport
{
    [Proxy(typeof(GetConfigurationPolicyNonComplianceSummaryReportRequestBuilder), true)]
    public partial interface IGetConfigurationPolicyNonComplianceSummaryReportRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.Reports.GetConfigurationSettingNonComplianceReport
{
    [Proxy(typeof(GetConfigurationSettingNonComplianceReportRequestBuilder), true)]
    public partial interface IGetConfigurationSettingNonComplianceReportRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.Reports.GetDeviceManagementIntentPerSettingContributingProfiles
{
    [Proxy(typeof(GetDeviceManagementIntentPerSettingContributingProfilesRequestBuilder), true)]
    public partial interface IGetDeviceManagementIntentPerSettingContributingProfilesRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.Reports.GetDeviceManagementIntentSettingsReport
{
    [Proxy(typeof(GetDeviceManagementIntentSettingsReportRequestBuilder), true)]
    public partial interface IGetDeviceManagementIntentSettingsReportRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.Reports.GetDeviceNonComplianceReport
{
    [Proxy(typeof(GetDeviceNonComplianceReportRequestBuilder), true)]
    public partial interface IGetDeviceNonComplianceReportRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.Reports.GetDevicesWithoutCompliancePolicyReport
{
    [Proxy(typeof(GetDevicesWithoutCompliancePolicyReportRequestBuilder), true)]
    public partial interface IGetDevicesWithoutCompliancePolicyReportRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.Reports.GetHistoricalReport
{
    [Proxy(typeof(GetHistoricalReportRequestBuilder), true)]
    public partial interface IGetHistoricalReportRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.Reports.GetNoncompliantDevicesAndSettingsReport
{
    [Proxy(typeof(GetNoncompliantDevicesAndSettingsReportRequestBuilder), true)]
    public partial interface IGetNoncompliantDevicesAndSettingsReportRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.Reports.GetPolicyNonComplianceMetadata
{
    [Proxy(typeof(GetPolicyNonComplianceMetadataRequestBuilder), true)]
    public partial interface IGetPolicyNonComplianceMetadataRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.Reports.GetPolicyNonComplianceReport
{
    [Proxy(typeof(GetPolicyNonComplianceReportRequestBuilder), true)]
    public partial interface IGetPolicyNonComplianceReportRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.Reports.GetPolicyNonComplianceSummaryReport
{
    [Proxy(typeof(GetPolicyNonComplianceSummaryReportRequestBuilder), true)]
    public partial interface IGetPolicyNonComplianceSummaryReportRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.Reports.GetReportFilters
{
    [Proxy(typeof(GetReportFiltersRequestBuilder), true)]
    public partial interface IGetReportFiltersRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.Reports.GetSettingNonComplianceReport
{
    [Proxy(typeof(GetSettingNonComplianceReportRequestBuilder), true)]
    public partial interface IGetSettingNonComplianceReportRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.Reports.RetrieveDeviceAppInstallationStatusReport
{
    [Proxy(typeof(RetrieveDeviceAppInstallationStatusReportRequestBuilder), true)]
    public partial interface IRetrieveDeviceAppInstallationStatusReportRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.ResourceOperations
{
    [Proxy(typeof(ResourceOperationsRequestBuilder), true)]
    public partial interface IResourceOperationsRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.ResourceOperations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.ResourceOperations.Item
{
    [Proxy(typeof(ResourceOperationItemRequestBuilder), true)]
    public partial interface IResourceOperationItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.RoleAssignments
{
    [Proxy(typeof(RoleAssignmentsRequestBuilder), true)]
    public partial interface IRoleAssignmentsRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.RoleAssignments.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.RoleAssignments.Item
{
    [Proxy(typeof(DeviceAndAppManagementRoleAssignmentItemRequestBuilder), true)]
    public partial interface IDeviceAndAppManagementRoleAssignmentItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.RoleAssignments.Item.RoleDefinition
{
    [Proxy(typeof(RoleDefinitionRequestBuilder), true)]
    public partial interface IRoleDefinitionRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.RoleDefinitions
{
    [Proxy(typeof(RoleDefinitionsRequestBuilder), true)]
    public partial interface IRoleDefinitionsRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.RoleDefinitions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.RoleDefinitions.Item
{
    [Proxy(typeof(RoleDefinitionItemRequestBuilder), true)]
    public partial interface IRoleDefinitionItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.RoleDefinitions.Item.RoleAssignments
{
    [Proxy(typeof(RoleAssignmentsRequestBuilder), true)]
    public partial interface IRoleAssignmentsRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.RoleDefinitions.Item.RoleAssignments.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.RoleDefinitions.Item.RoleAssignments.Item
{
    [Proxy(typeof(RoleAssignmentItemRequestBuilder), true)]
    public partial interface IRoleAssignmentItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.RoleDefinitions.Item.RoleAssignments.Item.RoleDefinition
{
    [Proxy(typeof(RoleDefinitionRequestBuilder), true)]
    public partial interface IRoleDefinitionRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.SoftwareUpdateStatusSummary
{
    [Proxy(typeof(SoftwareUpdateStatusSummaryRequestBuilder), true)]
    public partial interface ISoftwareUpdateStatusSummaryRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.TelecomExpenseManagementPartners
{
    [Proxy(typeof(TelecomExpenseManagementPartnersRequestBuilder), true)]
    public partial interface ITelecomExpenseManagementPartnersRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.TelecomExpenseManagementPartners.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.TelecomExpenseManagementPartners.Item
{
    [Proxy(typeof(TelecomExpenseManagementPartnerItemRequestBuilder), true)]
    public partial interface ITelecomExpenseManagementPartnerItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.TermsAndConditions
{
    [Proxy(typeof(TermsAndConditionsRequestBuilder), true)]
    public partial interface ITermsAndConditionsRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.TermsAndConditions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.TermsAndConditions.Item
{
    [Proxy(typeof(TermsAndConditionsItemRequestBuilder), true)]
    public partial interface ITermsAndConditionsItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.TermsAndConditions.Item.AcceptanceStatuses
{
    [Proxy(typeof(AcceptanceStatusesRequestBuilder), true)]
    public partial interface IAcceptanceStatusesRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.TermsAndConditions.Item.AcceptanceStatuses.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.TermsAndConditions.Item.AcceptanceStatuses.Item
{
    [Proxy(typeof(TermsAndConditionsAcceptanceStatusItemRequestBuilder), true)]
    public partial interface ITermsAndConditionsAcceptanceStatusItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.TermsAndConditions.Item.AcceptanceStatuses.Item.TermsAndConditions
{
    [Proxy(typeof(TermsAndConditionsRequestBuilder), true)]
    public partial interface ITermsAndConditionsRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.TermsAndConditions.Item.Assignments
{
    [Proxy(typeof(AssignmentsRequestBuilder), true)]
    public partial interface IAssignmentsRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.TermsAndConditions.Item.Assignments.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.TermsAndConditions.Item.Assignments.Item
{
    [Proxy(typeof(TermsAndConditionsAssignmentItemRequestBuilder), true)]
    public partial interface ITermsAndConditionsAssignmentItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.TroubleshootingEvents
{
    [Proxy(typeof(TroubleshootingEventsRequestBuilder), true)]
    public partial interface ITroubleshootingEventsRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.TroubleshootingEvents.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.TroubleshootingEvents.Item
{
    [Proxy(typeof(DeviceManagementTroubleshootingEventItemRequestBuilder), true)]
    public partial interface IDeviceManagementTroubleshootingEventItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.UserExperienceAnalyticsAppHealthApplicationPerformance
{
    [Proxy(typeof(UserExperienceAnalyticsAppHealthApplicationPerformanceRequestBuilder), true)]
    public partial interface IUserExperienceAnalyticsAppHealthApplicationPerformanceRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.UserExperienceAnalyticsAppHealthApplicationPerformance.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.UserExperienceAnalyticsAppHealthApplicationPerformance.Item
{
    [Proxy(typeof(UserExperienceAnalyticsAppHealthApplicationPerformanceItemRequestBuilder), true)]
    public partial interface IUserExperienceAnalyticsAppHealthApplicationPerformanceItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.UserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDetails
{
    [Proxy(typeof(UserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDetailsRequestBuilder), true)]
    public partial interface IUserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDetailsRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.UserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDetails.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.UserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDetails.Item
{
    [Proxy(typeof(UserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDetailsItemRequestBuilder), true)]
    public partial interface IUserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDetailsItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.UserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDeviceId
{
    [Proxy(typeof(UserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDeviceIdRequestBuilder), true)]
    public partial interface IUserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDeviceIdRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.UserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDeviceId.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.UserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDeviceId.Item
{
    [Proxy(typeof(UserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDeviceIdItemRequestBuilder), true)]
    public partial interface IUserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDeviceIdItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.UserExperienceAnalyticsAppHealthApplicationPerformanceByOSVersion
{
    [Proxy(typeof(UserExperienceAnalyticsAppHealthApplicationPerformanceByOSVersionRequestBuilder), true)]
    public partial interface IUserExperienceAnalyticsAppHealthApplicationPerformanceByOSVersionRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.UserExperienceAnalyticsAppHealthApplicationPerformanceByOSVersion.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.UserExperienceAnalyticsAppHealthApplicationPerformanceByOSVersion.Item
{
    [Proxy(typeof(UserExperienceAnalyticsAppHealthAppPerformanceByOSVersionItemRequestBuilder), true)]
    public partial interface IUserExperienceAnalyticsAppHealthAppPerformanceByOSVersionItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.UserExperienceAnalyticsAppHealthDeviceModelPerformance
{
    [Proxy(typeof(UserExperienceAnalyticsAppHealthDeviceModelPerformanceRequestBuilder), true)]
    public partial interface IUserExperienceAnalyticsAppHealthDeviceModelPerformanceRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.UserExperienceAnalyticsAppHealthDeviceModelPerformance.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.UserExperienceAnalyticsAppHealthDeviceModelPerformance.Item
{
    [Proxy(typeof(UserExperienceAnalyticsAppHealthDeviceModelPerformanceItemRequestBuilder), true)]
    public partial interface IUserExperienceAnalyticsAppHealthDeviceModelPerformanceItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.UserExperienceAnalyticsAppHealthDevicePerformance
{
    [Proxy(typeof(UserExperienceAnalyticsAppHealthDevicePerformanceRequestBuilder), true)]
    public partial interface IUserExperienceAnalyticsAppHealthDevicePerformanceRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.UserExperienceAnalyticsAppHealthDevicePerformance.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.UserExperienceAnalyticsAppHealthDevicePerformance.Item
{
    [Proxy(typeof(UserExperienceAnalyticsAppHealthDevicePerformanceItemRequestBuilder), true)]
    public partial interface IUserExperienceAnalyticsAppHealthDevicePerformanceItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.UserExperienceAnalyticsAppHealthDevicePerformanceDetails
{
    [Proxy(typeof(UserExperienceAnalyticsAppHealthDevicePerformanceDetailsRequestBuilder), true)]
    public partial interface IUserExperienceAnalyticsAppHealthDevicePerformanceDetailsRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.UserExperienceAnalyticsAppHealthDevicePerformanceDetails.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.UserExperienceAnalyticsAppHealthDevicePerformanceDetails.Item
{
    [Proxy(typeof(UserExperienceAnalyticsAppHealthDevicePerformanceDetailsItemRequestBuilder), true)]
    public partial interface IUserExperienceAnalyticsAppHealthDevicePerformanceDetailsItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.UserExperienceAnalyticsAppHealthOSVersionPerformance
{
    [Proxy(typeof(UserExperienceAnalyticsAppHealthOSVersionPerformanceRequestBuilder), true)]
    public partial interface IUserExperienceAnalyticsAppHealthOSVersionPerformanceRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.UserExperienceAnalyticsAppHealthOSVersionPerformance.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.UserExperienceAnalyticsAppHealthOSVersionPerformance.Item
{
    [Proxy(typeof(UserExperienceAnalyticsAppHealthOSVersionPerformanceItemRequestBuilder), true)]
    public partial interface IUserExperienceAnalyticsAppHealthOSVersionPerformanceItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.UserExperienceAnalyticsAppHealthOverview
{
    [Proxy(typeof(UserExperienceAnalyticsAppHealthOverviewRequestBuilder), true)]
    public partial interface IUserExperienceAnalyticsAppHealthOverviewRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.UserExperienceAnalyticsAppHealthOverview.MetricValues
{
    [Proxy(typeof(MetricValuesRequestBuilder), true)]
    public partial interface IMetricValuesRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.UserExperienceAnalyticsAppHealthOverview.MetricValues.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.UserExperienceAnalyticsAppHealthOverview.MetricValues.Item
{
    [Proxy(typeof(UserExperienceAnalyticsMetricItemRequestBuilder), true)]
    public partial interface IUserExperienceAnalyticsMetricItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.UserExperienceAnalyticsBaselines
{
    [Proxy(typeof(UserExperienceAnalyticsBaselinesRequestBuilder), true)]
    public partial interface IUserExperienceAnalyticsBaselinesRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.UserExperienceAnalyticsBaselines.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.UserExperienceAnalyticsBaselines.Item
{
    [Proxy(typeof(UserExperienceAnalyticsBaselineItemRequestBuilder), true)]
    public partial interface IUserExperienceAnalyticsBaselineItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.UserExperienceAnalyticsBaselines.Item.AppHealthMetrics
{
    [Proxy(typeof(AppHealthMetricsRequestBuilder), true)]
    public partial interface IAppHealthMetricsRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.UserExperienceAnalyticsBaselines.Item.BatteryHealthMetrics
{
    [Proxy(typeof(BatteryHealthMetricsRequestBuilder), true)]
    public partial interface IBatteryHealthMetricsRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.UserExperienceAnalyticsBaselines.Item.BestPracticesMetrics
{
    [Proxy(typeof(BestPracticesMetricsRequestBuilder), true)]
    public partial interface IBestPracticesMetricsRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.UserExperienceAnalyticsBaselines.Item.DeviceBootPerformanceMetrics
{
    [Proxy(typeof(DeviceBootPerformanceMetricsRequestBuilder), true)]
    public partial interface IDeviceBootPerformanceMetricsRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.UserExperienceAnalyticsBaselines.Item.RebootAnalyticsMetrics
{
    [Proxy(typeof(RebootAnalyticsMetricsRequestBuilder), true)]
    public partial interface IRebootAnalyticsMetricsRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.UserExperienceAnalyticsBaselines.Item.ResourcePerformanceMetrics
{
    [Proxy(typeof(ResourcePerformanceMetricsRequestBuilder), true)]
    public partial interface IResourcePerformanceMetricsRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.UserExperienceAnalyticsBaselines.Item.WorkFromAnywhereMetrics
{
    [Proxy(typeof(WorkFromAnywhereMetricsRequestBuilder), true)]
    public partial interface IWorkFromAnywhereMetricsRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.UserExperienceAnalyticsCategories
{
    [Proxy(typeof(UserExperienceAnalyticsCategoriesRequestBuilder), true)]
    public partial interface IUserExperienceAnalyticsCategoriesRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.UserExperienceAnalyticsCategories.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.UserExperienceAnalyticsCategories.Item
{
    [Proxy(typeof(UserExperienceAnalyticsCategoryItemRequestBuilder), true)]
    public partial interface IUserExperienceAnalyticsCategoryItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.UserExperienceAnalyticsCategories.Item.MetricValues
{
    [Proxy(typeof(MetricValuesRequestBuilder), true)]
    public partial interface IMetricValuesRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.UserExperienceAnalyticsCategories.Item.MetricValues.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.UserExperienceAnalyticsCategories.Item.MetricValues.Item
{
    [Proxy(typeof(UserExperienceAnalyticsMetricItemRequestBuilder), true)]
    public partial interface IUserExperienceAnalyticsMetricItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.UserExperienceAnalyticsDevicePerformance
{
    [Proxy(typeof(UserExperienceAnalyticsDevicePerformanceRequestBuilder), true)]
    public partial interface IUserExperienceAnalyticsDevicePerformanceRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.UserExperienceAnalyticsDevicePerformance.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.UserExperienceAnalyticsDevicePerformance.Item
{
    [Proxy(typeof(UserExperienceAnalyticsDevicePerformanceItemRequestBuilder), true)]
    public partial interface IUserExperienceAnalyticsDevicePerformanceItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.UserExperienceAnalyticsDevicePerformance.SummarizeDevicePerformanceDevicesWithSummarizeBy
{
    [Proxy(typeof(SummarizeDevicePerformanceDevicesWithSummarizeByRequestBuilder), true)]
    public partial interface ISummarizeDevicePerformanceDevicesWithSummarizeByRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.UserExperienceAnalyticsDeviceScores
{
    [Proxy(typeof(UserExperienceAnalyticsDeviceScoresRequestBuilder), true)]
    public partial interface IUserExperienceAnalyticsDeviceScoresRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.UserExperienceAnalyticsDeviceScores.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.UserExperienceAnalyticsDeviceScores.Item
{
    [Proxy(typeof(UserExperienceAnalyticsDeviceScoresItemRequestBuilder), true)]
    public partial interface IUserExperienceAnalyticsDeviceScoresItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.UserExperienceAnalyticsDeviceStartupHistory
{
    [Proxy(typeof(UserExperienceAnalyticsDeviceStartupHistoryRequestBuilder), true)]
    public partial interface IUserExperienceAnalyticsDeviceStartupHistoryRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.UserExperienceAnalyticsDeviceStartupHistory.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.UserExperienceAnalyticsDeviceStartupHistory.Item
{
    [Proxy(typeof(UserExperienceAnalyticsDeviceStartupHistoryItemRequestBuilder), true)]
    public partial interface IUserExperienceAnalyticsDeviceStartupHistoryItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.UserExperienceAnalyticsDeviceStartupProcesses
{
    [Proxy(typeof(UserExperienceAnalyticsDeviceStartupProcessesRequestBuilder), true)]
    public partial interface IUserExperienceAnalyticsDeviceStartupProcessesRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.UserExperienceAnalyticsDeviceStartupProcesses.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.UserExperienceAnalyticsDeviceStartupProcesses.Item
{
    [Proxy(typeof(UserExperienceAnalyticsDeviceStartupProcessItemRequestBuilder), true)]
    public partial interface IUserExperienceAnalyticsDeviceStartupProcessItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.UserExperienceAnalyticsDeviceStartupProcessPerformance
{
    [Proxy(typeof(UserExperienceAnalyticsDeviceStartupProcessPerformanceRequestBuilder), true)]
    public partial interface IUserExperienceAnalyticsDeviceStartupProcessPerformanceRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.UserExperienceAnalyticsDeviceStartupProcessPerformance.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.UserExperienceAnalyticsDeviceStartupProcessPerformance.Item
{
    [Proxy(typeof(UserExperienceAnalyticsDeviceStartupProcessPerformanceItemRequestBuilder), true)]
    public partial interface IUserExperienceAnalyticsDeviceStartupProcessPerformanceItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.UserExperienceAnalyticsMetricHistory
{
    [Proxy(typeof(UserExperienceAnalyticsMetricHistoryRequestBuilder), true)]
    public partial interface IUserExperienceAnalyticsMetricHistoryRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.UserExperienceAnalyticsMetricHistory.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.UserExperienceAnalyticsMetricHistory.Item
{
    [Proxy(typeof(UserExperienceAnalyticsMetricHistoryItemRequestBuilder), true)]
    public partial interface IUserExperienceAnalyticsMetricHistoryItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.UserExperienceAnalyticsModelScores
{
    [Proxy(typeof(UserExperienceAnalyticsModelScoresRequestBuilder), true)]
    public partial interface IUserExperienceAnalyticsModelScoresRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.UserExperienceAnalyticsModelScores.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.UserExperienceAnalyticsModelScores.Item
{
    [Proxy(typeof(UserExperienceAnalyticsModelScoresItemRequestBuilder), true)]
    public partial interface IUserExperienceAnalyticsModelScoresItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.UserExperienceAnalyticsOverview
{
    [Proxy(typeof(UserExperienceAnalyticsOverviewRequestBuilder), true)]
    public partial interface IUserExperienceAnalyticsOverviewRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.UserExperienceAnalyticsScoreHistory
{
    [Proxy(typeof(UserExperienceAnalyticsScoreHistoryRequestBuilder), true)]
    public partial interface IUserExperienceAnalyticsScoreHistoryRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.UserExperienceAnalyticsScoreHistory.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.UserExperienceAnalyticsScoreHistory.Item
{
    [Proxy(typeof(UserExperienceAnalyticsScoreHistoryItemRequestBuilder), true)]
    public partial interface IUserExperienceAnalyticsScoreHistoryItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.UserExperienceAnalyticsSummarizeWorkFromAnywhereDevices
{
    [Proxy(typeof(UserExperienceAnalyticsSummarizeWorkFromAnywhereDevicesRequestBuilder), true)]
    public partial interface IUserExperienceAnalyticsSummarizeWorkFromAnywhereDevicesRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.UserExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetric
{
    [Proxy(typeof(UserExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetricRequestBuilder), true)]
    public partial interface IUserExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetricRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.UserExperienceAnalyticsWorkFromAnywhereMetrics
{
    [Proxy(typeof(UserExperienceAnalyticsWorkFromAnywhereMetricsRequestBuilder), true)]
    public partial interface IUserExperienceAnalyticsWorkFromAnywhereMetricsRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.UserExperienceAnalyticsWorkFromAnywhereMetrics.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.UserExperienceAnalyticsWorkFromAnywhereMetrics.Item
{
    [Proxy(typeof(UserExperienceAnalyticsWorkFromAnywhereMetricItemRequestBuilder), true)]
    public partial interface IUserExperienceAnalyticsWorkFromAnywhereMetricItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.UserExperienceAnalyticsWorkFromAnywhereMetrics.Item.MetricDevices
{
    [Proxy(typeof(MetricDevicesRequestBuilder), true)]
    public partial interface IMetricDevicesRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.UserExperienceAnalyticsWorkFromAnywhereMetrics.Item.MetricDevices.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.UserExperienceAnalyticsWorkFromAnywhereMetrics.Item.MetricDevices.Item
{
    [Proxy(typeof(UserExperienceAnalyticsWorkFromAnywhereDeviceItemRequestBuilder), true)]
    public partial interface IUserExperienceAnalyticsWorkFromAnywhereDeviceItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.UserExperienceAnalyticsWorkFromAnywhereModelPerformance
{
    [Proxy(typeof(UserExperienceAnalyticsWorkFromAnywhereModelPerformanceRequestBuilder), true)]
    public partial interface IUserExperienceAnalyticsWorkFromAnywhereModelPerformanceRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.UserExperienceAnalyticsWorkFromAnywhereModelPerformance.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.UserExperienceAnalyticsWorkFromAnywhereModelPerformance.Item
{
    [Proxy(typeof(UserExperienceAnalyticsWorkFromAnywhereModelPerformanceItemRequestBuilder), true)]
    public partial interface IUserExperienceAnalyticsWorkFromAnywhereModelPerformanceItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.VerifyWindowsEnrollmentAutoDiscoveryWithDomainName
{
    [Proxy(typeof(VerifyWindowsEnrollmentAutoDiscoveryWithDomainNameRequestBuilder), true)]
    public partial interface IVerifyWindowsEnrollmentAutoDiscoveryWithDomainNameRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.VirtualEndpoint
{
    [Proxy(typeof(VirtualEndpointRequestBuilder), true)]
    public partial interface IVirtualEndpointRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.VirtualEndpoint.AuditEvents
{
    [Proxy(typeof(AuditEventsRequestBuilder), true)]
    public partial interface IAuditEventsRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.VirtualEndpoint.AuditEvents.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.VirtualEndpoint.AuditEvents.GetAuditActivityTypes
{
    [Proxy(typeof(GetAuditActivityTypesRequestBuilder), true)]
    public partial interface IGetAuditActivityTypesRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.VirtualEndpoint.AuditEvents.Item
{
    [Proxy(typeof(CloudPcAuditEventItemRequestBuilder), true)]
    public partial interface ICloudPcAuditEventItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.VirtualEndpoint.CloudPCs
{
    [Proxy(typeof(CloudPCsRequestBuilder), true)]
    public partial interface ICloudPCsRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.VirtualEndpoint.CloudPCs.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.VirtualEndpoint.CloudPCs.Item
{
    [Proxy(typeof(CloudPCItemRequestBuilder), true)]
    public partial interface ICloudPCItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.VirtualEndpoint.CloudPCs.Item.EndGracePeriod
{
    [Proxy(typeof(EndGracePeriodRequestBuilder), true)]
    public partial interface IEndGracePeriodRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.VirtualEndpoint.CloudPCs.Item.Reboot
{
    [Proxy(typeof(RebootRequestBuilder), true)]
    public partial interface IRebootRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.VirtualEndpoint.CloudPCs.Item.Rename
{
    [Proxy(typeof(RenameRequestBuilder), true)]
    public partial interface IRenameRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.VirtualEndpoint.CloudPCs.Item.Restore
{
    [Proxy(typeof(RestoreRequestBuilder), true)]
    public partial interface IRestoreRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.VirtualEndpoint.CloudPCs.Item.Troubleshoot
{
    [Proxy(typeof(TroubleshootRequestBuilder), true)]
    public partial interface ITroubleshootRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.VirtualEndpoint.DeviceImages
{
    [Proxy(typeof(DeviceImagesRequestBuilder), true)]
    public partial interface IDeviceImagesRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.VirtualEndpoint.DeviceImages.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.VirtualEndpoint.DeviceImages.GetSourceImages
{
    [Proxy(typeof(GetSourceImagesRequestBuilder), true)]
    public partial interface IGetSourceImagesRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.VirtualEndpoint.DeviceImages.Item
{
    [Proxy(typeof(CloudPcDeviceImageItemRequestBuilder), true)]
    public partial interface ICloudPcDeviceImageItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.VirtualEndpoint.GalleryImages
{
    [Proxy(typeof(GalleryImagesRequestBuilder), true)]
    public partial interface IGalleryImagesRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.VirtualEndpoint.GalleryImages.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.VirtualEndpoint.GalleryImages.Item
{
    [Proxy(typeof(CloudPcGalleryImageItemRequestBuilder), true)]
    public partial interface ICloudPcGalleryImageItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.VirtualEndpoint.OnPremisesConnections
{
    [Proxy(typeof(OnPremisesConnectionsRequestBuilder), true)]
    public partial interface IOnPremisesConnectionsRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.VirtualEndpoint.OnPremisesConnections.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.VirtualEndpoint.OnPremisesConnections.Item
{
    [Proxy(typeof(CloudPcOnPremisesConnectionItemRequestBuilder), true)]
    public partial interface ICloudPcOnPremisesConnectionItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.VirtualEndpoint.OnPremisesConnections.Item.RunHealthChecks
{
    [Proxy(typeof(RunHealthChecksRequestBuilder), true)]
    public partial interface IRunHealthChecksRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.VirtualEndpoint.ProvisioningPolicies
{
    [Proxy(typeof(ProvisioningPoliciesRequestBuilder), true)]
    public partial interface IProvisioningPoliciesRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.VirtualEndpoint.ProvisioningPolicies.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.VirtualEndpoint.ProvisioningPolicies.Item
{
    [Proxy(typeof(CloudPcProvisioningPolicyItemRequestBuilder), true)]
    public partial interface ICloudPcProvisioningPolicyItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.VirtualEndpoint.ProvisioningPolicies.Item.Assign
{
    [Proxy(typeof(AssignRequestBuilder), true)]
    public partial interface IAssignRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.VirtualEndpoint.ProvisioningPolicies.Item.Assignments
{
    [Proxy(typeof(AssignmentsRequestBuilder), true)]
    public partial interface IAssignmentsRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.VirtualEndpoint.ProvisioningPolicies.Item.Assignments.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.VirtualEndpoint.ProvisioningPolicies.Item.Assignments.Item
{
    [Proxy(typeof(CloudPcProvisioningPolicyAssignmentItemRequestBuilder), true)]
    public partial interface ICloudPcProvisioningPolicyAssignmentItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.VirtualEndpoint.ProvisioningPolicies.Item.Assignments.Item.AssignedUsers
{
    [Proxy(typeof(AssignedUsersRequestBuilder), true)]
    public partial interface IAssignedUsersRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.VirtualEndpoint.ProvisioningPolicies.Item.Assignments.Item.AssignedUsers.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.VirtualEndpoint.ProvisioningPolicies.Item.Assignments.Item.AssignedUsers.Item
{
    [Proxy(typeof(UserItemRequestBuilder), true)]
    public partial interface IUserItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.VirtualEndpoint.ProvisioningPolicies.Item.Assignments.Item.AssignedUsers.Item.MailboxSettings
{
    [Proxy(typeof(MailboxSettingsRequestBuilder), true)]
    public partial interface IMailboxSettingsRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.VirtualEndpoint.ProvisioningPolicies.Item.Assignments.Item.AssignedUsers.Item.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.VirtualEndpoint.ProvisioningPolicies.Item.Assignments.Item.AssignedUsers.Item.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.VirtualEndpoint.ProvisioningPolicies.Item.Assignments.Item.AssignedUsersWithUserPrincipalName
{
    [Proxy(typeof(AssignedUsersWithUserPrincipalNameRequestBuilder), true)]
    public partial interface IAssignedUsersWithUserPrincipalNameRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.VirtualEndpoint.UserSettings
{
    [Proxy(typeof(UserSettingsRequestBuilder), true)]
    public partial interface IUserSettingsRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.VirtualEndpoint.UserSettings.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.VirtualEndpoint.UserSettings.Item
{
    [Proxy(typeof(CloudPcUserSettingItemRequestBuilder), true)]
    public partial interface ICloudPcUserSettingItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.VirtualEndpoint.UserSettings.Item.Assign
{
    [Proxy(typeof(AssignRequestBuilder), true)]
    public partial interface IAssignRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.VirtualEndpoint.UserSettings.Item.Assignments
{
    [Proxy(typeof(AssignmentsRequestBuilder), true)]
    public partial interface IAssignmentsRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.VirtualEndpoint.UserSettings.Item.Assignments.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.VirtualEndpoint.UserSettings.Item.Assignments.Item
{
    [Proxy(typeof(CloudPcUserSettingAssignmentItemRequestBuilder), true)]
    public partial interface ICloudPcUserSettingAssignmentItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.WindowsAutopilotDeviceIdentities
{
    [Proxy(typeof(WindowsAutopilotDeviceIdentitiesRequestBuilder), true)]
    public partial interface IWindowsAutopilotDeviceIdentitiesRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.WindowsAutopilotDeviceIdentities.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.WindowsAutopilotDeviceIdentities.Item
{
    [Proxy(typeof(WindowsAutopilotDeviceIdentityItemRequestBuilder), true)]
    public partial interface IWindowsAutopilotDeviceIdentityItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.WindowsAutopilotDeviceIdentities.Item.AssignUserToDevice
{
    [Proxy(typeof(AssignUserToDeviceRequestBuilder), true)]
    public partial interface IAssignUserToDeviceRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.WindowsAutopilotDeviceIdentities.Item.UnassignUserFromDevice
{
    [Proxy(typeof(UnassignUserFromDeviceRequestBuilder), true)]
    public partial interface IUnassignUserFromDeviceRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.WindowsAutopilotDeviceIdentities.Item.UpdateDeviceProperties
{
    [Proxy(typeof(UpdateDevicePropertiesRequestBuilder), true)]
    public partial interface IUpdateDevicePropertiesRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.WindowsInformationProtectionAppLearningSummaries
{
    [Proxy(typeof(WindowsInformationProtectionAppLearningSummariesRequestBuilder), true)]
    public partial interface IWindowsInformationProtectionAppLearningSummariesRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.WindowsInformationProtectionAppLearningSummaries.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.WindowsInformationProtectionAppLearningSummaries.Item
{
    [Proxy(typeof(WindowsInformationProtectionAppLearningSummaryItemRequestBuilder), true)]
    public partial interface IWindowsInformationProtectionAppLearningSummaryItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.WindowsInformationProtectionNetworkLearningSummaries
{
    [Proxy(typeof(WindowsInformationProtectionNetworkLearningSummariesRequestBuilder), true)]
    public partial interface IWindowsInformationProtectionNetworkLearningSummariesRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.WindowsInformationProtectionNetworkLearningSummaries.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.WindowsInformationProtectionNetworkLearningSummaries.Item
{
    [Proxy(typeof(WindowsInformationProtectionNetworkLearningSummaryItemRequestBuilder), true)]
    public partial interface IWindowsInformationProtectionNetworkLearningSummaryItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.WindowsMalwareInformation
{
    [Proxy(typeof(WindowsMalwareInformationRequestBuilder), true)]
    public partial interface IWindowsMalwareInformationRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.WindowsMalwareInformation.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.WindowsMalwareInformation.Item
{
    [Proxy(typeof(WindowsMalwareInformationItemRequestBuilder), true)]
    public partial interface IWindowsMalwareInformationItemRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.WindowsMalwareInformation.Item.DeviceMalwareStates
{
    [Proxy(typeof(DeviceMalwareStatesRequestBuilder), true)]
    public partial interface IDeviceMalwareStatesRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.WindowsMalwareInformation.Item.DeviceMalwareStates.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DeviceManagement.WindowsMalwareInformation.Item.DeviceMalwareStates.Item
{
    [Proxy(typeof(MalwareStateForWindowsDeviceItemRequestBuilder), true)]
    public partial interface IMalwareStateForWindowsDeviceItemRequestBuilder;
}

namespace Microsoft.Graph.Devices
{
    [Proxy(typeof(DevicesRequestBuilder), true)]
    public partial interface IDevicesRequestBuilder;
}

namespace Microsoft.Graph.Devices.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Devices.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Devices.GetAvailableExtensionProperties
{
    [Proxy(typeof(GetAvailableExtensionPropertiesRequestBuilder), true)]
    public partial interface IGetAvailableExtensionPropertiesRequestBuilder;
}

namespace Microsoft.Graph.Devices.GetByIds
{
    [Proxy(typeof(GetByIdsRequestBuilder), true)]
    public partial interface IGetByIdsRequestBuilder;
}

namespace Microsoft.Graph.Devices.Item
{
    [Proxy(typeof(DeviceItemRequestBuilder), true)]
    public partial interface IDeviceItemRequestBuilder;
}

namespace Microsoft.Graph.Devices.Item.CheckMemberGroups
{
    [Proxy(typeof(CheckMemberGroupsRequestBuilder), true)]
    public partial interface ICheckMemberGroupsRequestBuilder;
}

namespace Microsoft.Graph.Devices.Item.CheckMemberObjects
{
    [Proxy(typeof(CheckMemberObjectsRequestBuilder), true)]
    public partial interface ICheckMemberObjectsRequestBuilder;
}

namespace Microsoft.Graph.Devices.Item.Extensions
{
    [Proxy(typeof(ExtensionsRequestBuilder), true)]
    public partial interface IExtensionsRequestBuilder;
}

namespace Microsoft.Graph.Devices.Item.Extensions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Devices.Item.Extensions.Item
{
    [Proxy(typeof(ExtensionItemRequestBuilder), true)]
    public partial interface IExtensionItemRequestBuilder;
}

namespace Microsoft.Graph.Devices.Item.GetMemberGroups
{
    [Proxy(typeof(GetMemberGroupsRequestBuilder), true)]
    public partial interface IGetMemberGroupsRequestBuilder;
}

namespace Microsoft.Graph.Devices.Item.GetMemberObjects
{
    [Proxy(typeof(GetMemberObjectsRequestBuilder), true)]
    public partial interface IGetMemberObjectsRequestBuilder;
}

namespace Microsoft.Graph.Devices.Item.MemberOf
{
    [Proxy(typeof(MemberOfRequestBuilder), true)]
    public partial interface IMemberOfRequestBuilder;
}

namespace Microsoft.Graph.Devices.Item.MemberOf.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Devices.Item.MemberOf.GraphAdministrativeUnit
{
    [Proxy(typeof(GraphAdministrativeUnitRequestBuilder), true)]
    public partial interface IGraphAdministrativeUnitRequestBuilder;
}

namespace Microsoft.Graph.Devices.Item.MemberOf.GraphAdministrativeUnit.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Devices.Item.MemberOf.GraphGroup
{
    [Proxy(typeof(GraphGroupRequestBuilder), true)]
    public partial interface IGraphGroupRequestBuilder;
}

namespace Microsoft.Graph.Devices.Item.MemberOf.GraphGroup.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Devices.Item.MemberOf.Item
{
    [Proxy(typeof(DirectoryObjectItemRequestBuilder), true)]
    public partial interface IDirectoryObjectItemRequestBuilder;
}

namespace Microsoft.Graph.Devices.Item.MemberOf.Item.GraphAdministrativeUnit
{
    [Proxy(typeof(GraphAdministrativeUnitRequestBuilder), true)]
    public partial interface IGraphAdministrativeUnitRequestBuilder;
}

namespace Microsoft.Graph.Devices.Item.MemberOf.Item.GraphGroup
{
    [Proxy(typeof(GraphGroupRequestBuilder), true)]
    public partial interface IGraphGroupRequestBuilder;
}

namespace Microsoft.Graph.Devices.Item.RegisteredOwners
{
    [Proxy(typeof(RegisteredOwnersRequestBuilder), true)]
    public partial interface IRegisteredOwnersRequestBuilder;
}

namespace Microsoft.Graph.Devices.Item.RegisteredOwners.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Devices.Item.RegisteredOwners.GraphAppRoleAssignment
{
    [Proxy(typeof(GraphAppRoleAssignmentRequestBuilder), true)]
    public partial interface IGraphAppRoleAssignmentRequestBuilder;
}

namespace Microsoft.Graph.Devices.Item.RegisteredOwners.GraphAppRoleAssignment.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Devices.Item.RegisteredOwners.GraphEndpoint
{
    [Proxy(typeof(GraphEndpointRequestBuilder), true)]
    public partial interface IGraphEndpointRequestBuilder;
}

namespace Microsoft.Graph.Devices.Item.RegisteredOwners.GraphEndpoint.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Devices.Item.RegisteredOwners.GraphServicePrincipal
{
    [Proxy(typeof(GraphServicePrincipalRequestBuilder), true)]
    public partial interface IGraphServicePrincipalRequestBuilder;
}

namespace Microsoft.Graph.Devices.Item.RegisteredOwners.GraphServicePrincipal.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Devices.Item.RegisteredOwners.GraphUser
{
    [Proxy(typeof(GraphUserRequestBuilder), true)]
    public partial interface IGraphUserRequestBuilder;
}

namespace Microsoft.Graph.Devices.Item.RegisteredOwners.GraphUser.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Devices.Item.RegisteredOwners.Item
{
    [Proxy(typeof(DirectoryObjectItemRequestBuilder), true)]
    public partial interface IDirectoryObjectItemRequestBuilder;
}

namespace Microsoft.Graph.Devices.Item.RegisteredOwners.Item.GraphAppRoleAssignment
{
    [Proxy(typeof(GraphAppRoleAssignmentRequestBuilder), true)]
    public partial interface IGraphAppRoleAssignmentRequestBuilder;
}

namespace Microsoft.Graph.Devices.Item.RegisteredOwners.Item.GraphEndpoint
{
    [Proxy(typeof(GraphEndpointRequestBuilder), true)]
    public partial interface IGraphEndpointRequestBuilder;
}

namespace Microsoft.Graph.Devices.Item.RegisteredOwners.Item.GraphServicePrincipal
{
    [Proxy(typeof(GraphServicePrincipalRequestBuilder), true)]
    public partial interface IGraphServicePrincipalRequestBuilder;
}

namespace Microsoft.Graph.Devices.Item.RegisteredOwners.Item.GraphUser
{
    [Proxy(typeof(GraphUserRequestBuilder), true)]
    public partial interface IGraphUserRequestBuilder;
}

namespace Microsoft.Graph.Devices.Item.RegisteredOwners.Item.Ref
{
    [Proxy(typeof(RefRequestBuilder), true)]
    public partial interface IRefRequestBuilder;
}

namespace Microsoft.Graph.Devices.Item.RegisteredOwners.Ref
{
    [Proxy(typeof(RefRequestBuilder), true)]
    public partial interface IRefRequestBuilder;
}

namespace Microsoft.Graph.Devices.Item.RegisteredUsers
{
    [Proxy(typeof(RegisteredUsersRequestBuilder), true)]
    public partial interface IRegisteredUsersRequestBuilder;
}

namespace Microsoft.Graph.Devices.Item.RegisteredUsers.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Devices.Item.RegisteredUsers.GraphAppRoleAssignment
{
    [Proxy(typeof(GraphAppRoleAssignmentRequestBuilder), true)]
    public partial interface IGraphAppRoleAssignmentRequestBuilder;
}

namespace Microsoft.Graph.Devices.Item.RegisteredUsers.GraphAppRoleAssignment.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Devices.Item.RegisteredUsers.GraphEndpoint
{
    [Proxy(typeof(GraphEndpointRequestBuilder), true)]
    public partial interface IGraphEndpointRequestBuilder;
}

namespace Microsoft.Graph.Devices.Item.RegisteredUsers.GraphEndpoint.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Devices.Item.RegisteredUsers.GraphServicePrincipal
{
    [Proxy(typeof(GraphServicePrincipalRequestBuilder), true)]
    public partial interface IGraphServicePrincipalRequestBuilder;
}

namespace Microsoft.Graph.Devices.Item.RegisteredUsers.GraphServicePrincipal.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Devices.Item.RegisteredUsers.GraphUser
{
    [Proxy(typeof(GraphUserRequestBuilder), true)]
    public partial interface IGraphUserRequestBuilder;
}

namespace Microsoft.Graph.Devices.Item.RegisteredUsers.GraphUser.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Devices.Item.RegisteredUsers.Item
{
    [Proxy(typeof(DirectoryObjectItemRequestBuilder), true)]
    public partial interface IDirectoryObjectItemRequestBuilder;
}

namespace Microsoft.Graph.Devices.Item.RegisteredUsers.Item.GraphAppRoleAssignment
{
    [Proxy(typeof(GraphAppRoleAssignmentRequestBuilder), true)]
    public partial interface IGraphAppRoleAssignmentRequestBuilder;
}

namespace Microsoft.Graph.Devices.Item.RegisteredUsers.Item.GraphEndpoint
{
    [Proxy(typeof(GraphEndpointRequestBuilder), true)]
    public partial interface IGraphEndpointRequestBuilder;
}

namespace Microsoft.Graph.Devices.Item.RegisteredUsers.Item.GraphServicePrincipal
{
    [Proxy(typeof(GraphServicePrincipalRequestBuilder), true)]
    public partial interface IGraphServicePrincipalRequestBuilder;
}

namespace Microsoft.Graph.Devices.Item.RegisteredUsers.Item.GraphUser
{
    [Proxy(typeof(GraphUserRequestBuilder), true)]
    public partial interface IGraphUserRequestBuilder;
}

namespace Microsoft.Graph.Devices.Item.RegisteredUsers.Item.Ref
{
    [Proxy(typeof(RefRequestBuilder), true)]
    public partial interface IRefRequestBuilder;
}

namespace Microsoft.Graph.Devices.Item.RegisteredUsers.Ref
{
    [Proxy(typeof(RefRequestBuilder), true)]
    public partial interface IRefRequestBuilder;
}

namespace Microsoft.Graph.Devices.Item.Restore
{
    [Proxy(typeof(RestoreRequestBuilder), true)]
    public partial interface IRestoreRequestBuilder;
}

namespace Microsoft.Graph.Devices.Item.TransitiveMemberOf
{
    [Proxy(typeof(TransitiveMemberOfRequestBuilder), true)]
    public partial interface ITransitiveMemberOfRequestBuilder;
}

namespace Microsoft.Graph.Devices.Item.TransitiveMemberOf.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Devices.Item.TransitiveMemberOf.GraphAdministrativeUnit
{
    [Proxy(typeof(GraphAdministrativeUnitRequestBuilder), true)]
    public partial interface IGraphAdministrativeUnitRequestBuilder;
}

namespace Microsoft.Graph.Devices.Item.TransitiveMemberOf.GraphAdministrativeUnit.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Devices.Item.TransitiveMemberOf.GraphGroup
{
    [Proxy(typeof(GraphGroupRequestBuilder), true)]
    public partial interface IGraphGroupRequestBuilder;
}

namespace Microsoft.Graph.Devices.Item.TransitiveMemberOf.GraphGroup.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Devices.Item.TransitiveMemberOf.Item
{
    [Proxy(typeof(DirectoryObjectItemRequestBuilder), true)]
    public partial interface IDirectoryObjectItemRequestBuilder;
}

namespace Microsoft.Graph.Devices.Item.TransitiveMemberOf.Item.GraphAdministrativeUnit
{
    [Proxy(typeof(GraphAdministrativeUnitRequestBuilder), true)]
    public partial interface IGraphAdministrativeUnitRequestBuilder;
}

namespace Microsoft.Graph.Devices.Item.TransitiveMemberOf.Item.GraphGroup
{
    [Proxy(typeof(GraphGroupRequestBuilder), true)]
    public partial interface IGraphGroupRequestBuilder;
}

namespace Microsoft.Graph.Devices.ValidateProperties
{
    [Proxy(typeof(ValidatePropertiesRequestBuilder), true)]
    public partial interface IValidatePropertiesRequestBuilder;
}

namespace Microsoft.Graph.DevicesWithDeviceId
{
    [Proxy(typeof(DevicesWithDeviceIdRequestBuilder), true)]
    public partial interface IDevicesWithDeviceIdRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace
{
    [Proxy(typeof(DirectoryRequestBuilder), true)]
    public partial interface IDirectoryRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.AdministrativeUnits
{
    [Proxy(typeof(AdministrativeUnitsRequestBuilder), true)]
    public partial interface IAdministrativeUnitsRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.AdministrativeUnits.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.AdministrativeUnits.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.AdministrativeUnits.Item
{
    [Proxy(typeof(AdministrativeUnitItemRequestBuilder), true)]
    public partial interface IAdministrativeUnitItemRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.AdministrativeUnits.Item.Extensions
{
    [Proxy(typeof(ExtensionsRequestBuilder), true)]
    public partial interface IExtensionsRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.AdministrativeUnits.Item.Extensions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.AdministrativeUnits.Item.Extensions.Item
{
    [Proxy(typeof(ExtensionItemRequestBuilder), true)]
    public partial interface IExtensionItemRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.AdministrativeUnits.Item.Members
{
    [Proxy(typeof(MembersRequestBuilder), true)]
    public partial interface IMembersRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.AdministrativeUnits.Item.Members.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.AdministrativeUnits.Item.Members.GraphApplication
{
    [Proxy(typeof(GraphApplicationRequestBuilder), true)]
    public partial interface IGraphApplicationRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.AdministrativeUnits.Item.Members.GraphApplication.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.AdministrativeUnits.Item.Members.GraphDevice
{
    [Proxy(typeof(GraphDeviceRequestBuilder), true)]
    public partial interface IGraphDeviceRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.AdministrativeUnits.Item.Members.GraphDevice.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.AdministrativeUnits.Item.Members.GraphGroup
{
    [Proxy(typeof(GraphGroupRequestBuilder), true)]
    public partial interface IGraphGroupRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.AdministrativeUnits.Item.Members.GraphGroup.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.AdministrativeUnits.Item.Members.GraphOrgContact
{
    [Proxy(typeof(GraphOrgContactRequestBuilder), true)]
    public partial interface IGraphOrgContactRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.AdministrativeUnits.Item.Members.GraphOrgContact.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.AdministrativeUnits.Item.Members.GraphServicePrincipal
{
    [Proxy(typeof(GraphServicePrincipalRequestBuilder), true)]
    public partial interface IGraphServicePrincipalRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.AdministrativeUnits.Item.Members.GraphServicePrincipal.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.AdministrativeUnits.Item.Members.GraphUser
{
    [Proxy(typeof(GraphUserRequestBuilder), true)]
    public partial interface IGraphUserRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.AdministrativeUnits.Item.Members.GraphUser.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.AdministrativeUnits.Item.Members.Item
{
    [Proxy(typeof(DirectoryObjectItemRequestBuilder), true)]
    public partial interface IDirectoryObjectItemRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.AdministrativeUnits.Item.Members.Item.GraphApplication
{
    [Proxy(typeof(GraphApplicationRequestBuilder), true)]
    public partial interface IGraphApplicationRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.AdministrativeUnits.Item.Members.Item.GraphDevice
{
    [Proxy(typeof(GraphDeviceRequestBuilder), true)]
    public partial interface IGraphDeviceRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.AdministrativeUnits.Item.Members.Item.GraphGroup
{
    [Proxy(typeof(GraphGroupRequestBuilder), true)]
    public partial interface IGraphGroupRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.AdministrativeUnits.Item.Members.Item.GraphOrgContact
{
    [Proxy(typeof(GraphOrgContactRequestBuilder), true)]
    public partial interface IGraphOrgContactRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.AdministrativeUnits.Item.Members.Item.GraphServicePrincipal
{
    [Proxy(typeof(GraphServicePrincipalRequestBuilder), true)]
    public partial interface IGraphServicePrincipalRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.AdministrativeUnits.Item.Members.Item.GraphUser
{
    [Proxy(typeof(GraphUserRequestBuilder), true)]
    public partial interface IGraphUserRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.AdministrativeUnits.Item.Members.Item.Ref
{
    [Proxy(typeof(RefRequestBuilder), true)]
    public partial interface IRefRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.AdministrativeUnits.Item.Members.Ref
{
    [Proxy(typeof(RefRequestBuilder), true)]
    public partial interface IRefRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.AdministrativeUnits.Item.ScopedRoleMembers
{
    [Proxy(typeof(ScopedRoleMembersRequestBuilder), true)]
    public partial interface IScopedRoleMembersRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.AdministrativeUnits.Item.ScopedRoleMembers.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.AdministrativeUnits.Item.ScopedRoleMembers.Item
{
    [Proxy(typeof(ScopedRoleMembershipItemRequestBuilder), true)]
    public partial interface IScopedRoleMembershipItemRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.AttributeSets
{
    [Proxy(typeof(AttributeSetsRequestBuilder), true)]
    public partial interface IAttributeSetsRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.AttributeSets.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.AttributeSets.Item
{
    [Proxy(typeof(AttributeSetItemRequestBuilder), true)]
    public partial interface IAttributeSetItemRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.CustomSecurityAttributeDefinitions
{
    [Proxy(typeof(CustomSecurityAttributeDefinitionsRequestBuilder), true)]
    public partial interface ICustomSecurityAttributeDefinitionsRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.CustomSecurityAttributeDefinitions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.CustomSecurityAttributeDefinitions.Item
{
    [Proxy(typeof(CustomSecurityAttributeDefinitionItemRequestBuilder), true)]
    public partial interface ICustomSecurityAttributeDefinitionItemRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.CustomSecurityAttributeDefinitions.Item.AllowedValues
{
    [Proxy(typeof(AllowedValuesRequestBuilder), true)]
    public partial interface IAllowedValuesRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.CustomSecurityAttributeDefinitions.Item.AllowedValues.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.CustomSecurityAttributeDefinitions.Item.AllowedValues.Item
{
    [Proxy(typeof(AllowedValueItemRequestBuilder), true)]
    public partial interface IAllowedValueItemRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.DeletedItems
{
    [Proxy(typeof(DeletedItemsRequestBuilder), true)]
    public partial interface IDeletedItemsRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.DeletedItems.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.DeletedItems.GetAvailableExtensionProperties
{
    [Proxy(typeof(GetAvailableExtensionPropertiesRequestBuilder), true)]
    public partial interface IGetAvailableExtensionPropertiesRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.DeletedItems.GetByIds
{
    [Proxy(typeof(GetByIdsRequestBuilder), true)]
    public partial interface IGetByIdsRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.DeletedItems.GraphAdministrativeUnit
{
    [Proxy(typeof(GraphAdministrativeUnitRequestBuilder), true)]
    public partial interface IGraphAdministrativeUnitRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.DeletedItems.GraphAdministrativeUnit.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.DeletedItems.GraphApplication
{
    [Proxy(typeof(GraphApplicationRequestBuilder), true)]
    public partial interface IGraphApplicationRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.DeletedItems.GraphApplication.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.DeletedItems.GraphDevice
{
    [Proxy(typeof(GraphDeviceRequestBuilder), true)]
    public partial interface IGraphDeviceRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.DeletedItems.GraphDevice.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.DeletedItems.GraphGroup
{
    [Proxy(typeof(GraphGroupRequestBuilder), true)]
    public partial interface IGraphGroupRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.DeletedItems.GraphGroup.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.DeletedItems.GraphServicePrincipal
{
    [Proxy(typeof(GraphServicePrincipalRequestBuilder), true)]
    public partial interface IGraphServicePrincipalRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.DeletedItems.GraphServicePrincipal.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.DeletedItems.GraphUser
{
    [Proxy(typeof(GraphUserRequestBuilder), true)]
    public partial interface IGraphUserRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.DeletedItems.GraphUser.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.DeletedItems.Item
{
    [Proxy(typeof(DirectoryObjectItemRequestBuilder), true)]
    public partial interface IDirectoryObjectItemRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.DeletedItems.Item.CheckMemberGroups
{
    [Proxy(typeof(CheckMemberGroupsRequestBuilder), true)]
    public partial interface ICheckMemberGroupsRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.DeletedItems.Item.CheckMemberObjects
{
    [Proxy(typeof(CheckMemberObjectsRequestBuilder), true)]
    public partial interface ICheckMemberObjectsRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.DeletedItems.Item.GetMemberGroups
{
    [Proxy(typeof(GetMemberGroupsRequestBuilder), true)]
    public partial interface IGetMemberGroupsRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.DeletedItems.Item.GetMemberObjects
{
    [Proxy(typeof(GetMemberObjectsRequestBuilder), true)]
    public partial interface IGetMemberObjectsRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.DeletedItems.Item.GraphAdministrativeUnit
{
    [Proxy(typeof(GraphAdministrativeUnitRequestBuilder), true)]
    public partial interface IGraphAdministrativeUnitRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.DeletedItems.Item.GraphApplication
{
    [Proxy(typeof(GraphApplicationRequestBuilder), true)]
    public partial interface IGraphApplicationRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.DeletedItems.Item.GraphDevice
{
    [Proxy(typeof(GraphDeviceRequestBuilder), true)]
    public partial interface IGraphDeviceRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.DeletedItems.Item.GraphGroup
{
    [Proxy(typeof(GraphGroupRequestBuilder), true)]
    public partial interface IGraphGroupRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.DeletedItems.Item.GraphServicePrincipal
{
    [Proxy(typeof(GraphServicePrincipalRequestBuilder), true)]
    public partial interface IGraphServicePrincipalRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.DeletedItems.Item.GraphUser
{
    [Proxy(typeof(GraphUserRequestBuilder), true)]
    public partial interface IGraphUserRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.DeletedItems.Item.Restore
{
    [Proxy(typeof(RestoreRequestBuilder), true)]
    public partial interface IRestoreRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.DeletedItems.ValidateProperties
{
    [Proxy(typeof(ValidatePropertiesRequestBuilder), true)]
    public partial interface IValidatePropertiesRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.DeviceLocalCredentials
{
    [Proxy(typeof(DeviceLocalCredentialsRequestBuilder), true)]
    public partial interface IDeviceLocalCredentialsRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.DeviceLocalCredentials.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.DeviceLocalCredentials.Item
{
    [Proxy(typeof(DeviceLocalCredentialInfoItemRequestBuilder), true)]
    public partial interface IDeviceLocalCredentialInfoItemRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.FederationConfigurations
{
    [Proxy(typeof(FederationConfigurationsRequestBuilder), true)]
    public partial interface IFederationConfigurationsRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.FederationConfigurations.AvailableProviderTypes
{
    [Proxy(typeof(AvailableProviderTypesRequestBuilder), true)]
    public partial interface IAvailableProviderTypesRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.FederationConfigurations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.FederationConfigurations.Item
{
    [Proxy(typeof(IdentityProviderBaseItemRequestBuilder), true)]
    public partial interface IIdentityProviderBaseItemRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.OnPremisesSynchronization
{
    [Proxy(typeof(OnPremisesSynchronizationRequestBuilder), true)]
    public partial interface IOnPremisesSynchronizationRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.OnPremisesSynchronization.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.OnPremisesSynchronization.Item
{
    [Proxy(typeof(OnPremisesDirectorySynchronizationItemRequestBuilder), true)]
    public partial interface IOnPremisesDirectorySynchronizationItemRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.PublicKeyInfrastructure
{
    [Proxy(typeof(PublicKeyInfrastructureRequestBuilder), true)]
    public partial interface IPublicKeyInfrastructureRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.PublicKeyInfrastructure.CertificateBasedAuthConfigurations
{
    [Proxy(typeof(CertificateBasedAuthConfigurationsRequestBuilder), true)]
    public partial interface ICertificateBasedAuthConfigurationsRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.PublicKeyInfrastructure.CertificateBasedAuthConfigurations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.PublicKeyInfrastructure.CertificateBasedAuthConfigurations.Item
{
    [Proxy(typeof(CertificateBasedAuthPkiItemRequestBuilder), true)]
    public partial interface ICertificateBasedAuthPkiItemRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.PublicKeyInfrastructure.CertificateBasedAuthConfigurations.Item.CertificateAuthorities
{
    [Proxy(typeof(CertificateAuthoritiesRequestBuilder), true)]
    public partial interface ICertificateAuthoritiesRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.PublicKeyInfrastructure.CertificateBasedAuthConfigurations.Item.CertificateAuthorities.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.PublicKeyInfrastructure.CertificateBasedAuthConfigurations.Item.CertificateAuthorities.Item
{
    [Proxy(typeof(CertificateAuthorityDetailItemRequestBuilder), true)]
    public partial interface ICertificateAuthorityDetailItemRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.PublicKeyInfrastructure.CertificateBasedAuthConfigurations.Item.Upload
{
    [Proxy(typeof(UploadRequestBuilder), true)]
    public partial interface IUploadRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.Subscriptions
{
    [Proxy(typeof(SubscriptionsRequestBuilder), true)]
    public partial interface ISubscriptionsRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.Subscriptions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.Subscriptions.Item
{
    [Proxy(typeof(CompanySubscriptionItemRequestBuilder), true)]
    public partial interface ICompanySubscriptionItemRequestBuilder;
}

namespace Microsoft.Graph.DirectoryNamespace.SubscriptionsWithCommerceSubscriptionId
{
    [Proxy(typeof(SubscriptionsWithCommerceSubscriptionIdRequestBuilder), true)]
    public partial interface ISubscriptionsWithCommerceSubscriptionIdRequestBuilder;
}

namespace Microsoft.Graph.DirectoryObjects
{
    [Proxy(typeof(DirectoryObjectsRequestBuilder), true)]
    public partial interface IDirectoryObjectsRequestBuilder;
}

namespace Microsoft.Graph.DirectoryObjects.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DirectoryObjects.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.DirectoryObjects.GetAvailableExtensionProperties
{
    [Proxy(typeof(GetAvailableExtensionPropertiesRequestBuilder), true)]
    public partial interface IGetAvailableExtensionPropertiesRequestBuilder;
}

namespace Microsoft.Graph.DirectoryObjects.GetByIds
{
    [Proxy(typeof(GetByIdsRequestBuilder), true)]
    public partial interface IGetByIdsRequestBuilder;
}

namespace Microsoft.Graph.DirectoryObjects.Item
{
    [Proxy(typeof(DirectoryObjectItemRequestBuilder), true)]
    public partial interface IDirectoryObjectItemRequestBuilder;
}

namespace Microsoft.Graph.DirectoryObjects.Item.CheckMemberGroups
{
    [Proxy(typeof(CheckMemberGroupsRequestBuilder), true)]
    public partial interface ICheckMemberGroupsRequestBuilder;
}

namespace Microsoft.Graph.DirectoryObjects.Item.CheckMemberObjects
{
    [Proxy(typeof(CheckMemberObjectsRequestBuilder), true)]
    public partial interface ICheckMemberObjectsRequestBuilder;
}

namespace Microsoft.Graph.DirectoryObjects.Item.GetMemberGroups
{
    [Proxy(typeof(GetMemberGroupsRequestBuilder), true)]
    public partial interface IGetMemberGroupsRequestBuilder;
}

namespace Microsoft.Graph.DirectoryObjects.Item.GetMemberObjects
{
    [Proxy(typeof(GetMemberObjectsRequestBuilder), true)]
    public partial interface IGetMemberObjectsRequestBuilder;
}

namespace Microsoft.Graph.DirectoryObjects.Item.Restore
{
    [Proxy(typeof(RestoreRequestBuilder), true)]
    public partial interface IRestoreRequestBuilder;
}

namespace Microsoft.Graph.DirectoryObjects.ValidateProperties
{
    [Proxy(typeof(ValidatePropertiesRequestBuilder), true)]
    public partial interface IValidatePropertiesRequestBuilder;
}

namespace Microsoft.Graph.DirectoryRoles
{
    [Proxy(typeof(DirectoryRolesRequestBuilder), true)]
    public partial interface IDirectoryRolesRequestBuilder;
}

namespace Microsoft.Graph.DirectoryRoles.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DirectoryRoles.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.DirectoryRoles.GetAvailableExtensionProperties
{
    [Proxy(typeof(GetAvailableExtensionPropertiesRequestBuilder), true)]
    public partial interface IGetAvailableExtensionPropertiesRequestBuilder;
}

namespace Microsoft.Graph.DirectoryRoles.GetByIds
{
    [Proxy(typeof(GetByIdsRequestBuilder), true)]
    public partial interface IGetByIdsRequestBuilder;
}

namespace Microsoft.Graph.DirectoryRoles.Item
{
    [Proxy(typeof(DirectoryRoleItemRequestBuilder), true)]
    public partial interface IDirectoryRoleItemRequestBuilder;
}

namespace Microsoft.Graph.DirectoryRoles.Item.CheckMemberGroups
{
    [Proxy(typeof(CheckMemberGroupsRequestBuilder), true)]
    public partial interface ICheckMemberGroupsRequestBuilder;
}

namespace Microsoft.Graph.DirectoryRoles.Item.CheckMemberObjects
{
    [Proxy(typeof(CheckMemberObjectsRequestBuilder), true)]
    public partial interface ICheckMemberObjectsRequestBuilder;
}

namespace Microsoft.Graph.DirectoryRoles.Item.GetMemberGroups
{
    [Proxy(typeof(GetMemberGroupsRequestBuilder), true)]
    public partial interface IGetMemberGroupsRequestBuilder;
}

namespace Microsoft.Graph.DirectoryRoles.Item.GetMemberObjects
{
    [Proxy(typeof(GetMemberObjectsRequestBuilder), true)]
    public partial interface IGetMemberObjectsRequestBuilder;
}

namespace Microsoft.Graph.DirectoryRoles.Item.Members
{
    [Proxy(typeof(MembersRequestBuilder), true)]
    public partial interface IMembersRequestBuilder;
}

namespace Microsoft.Graph.DirectoryRoles.Item.Members.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DirectoryRoles.Item.Members.GraphApplication
{
    [Proxy(typeof(GraphApplicationRequestBuilder), true)]
    public partial interface IGraphApplicationRequestBuilder;
}

namespace Microsoft.Graph.DirectoryRoles.Item.Members.GraphApplication.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DirectoryRoles.Item.Members.GraphDevice
{
    [Proxy(typeof(GraphDeviceRequestBuilder), true)]
    public partial interface IGraphDeviceRequestBuilder;
}

namespace Microsoft.Graph.DirectoryRoles.Item.Members.GraphDevice.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DirectoryRoles.Item.Members.GraphGroup
{
    [Proxy(typeof(GraphGroupRequestBuilder), true)]
    public partial interface IGraphGroupRequestBuilder;
}

namespace Microsoft.Graph.DirectoryRoles.Item.Members.GraphGroup.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DirectoryRoles.Item.Members.GraphOrgContact
{
    [Proxy(typeof(GraphOrgContactRequestBuilder), true)]
    public partial interface IGraphOrgContactRequestBuilder;
}

namespace Microsoft.Graph.DirectoryRoles.Item.Members.GraphOrgContact.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DirectoryRoles.Item.Members.GraphServicePrincipal
{
    [Proxy(typeof(GraphServicePrincipalRequestBuilder), true)]
    public partial interface IGraphServicePrincipalRequestBuilder;
}

namespace Microsoft.Graph.DirectoryRoles.Item.Members.GraphServicePrincipal.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DirectoryRoles.Item.Members.GraphUser
{
    [Proxy(typeof(GraphUserRequestBuilder), true)]
    public partial interface IGraphUserRequestBuilder;
}

namespace Microsoft.Graph.DirectoryRoles.Item.Members.GraphUser.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DirectoryRoles.Item.Members.Item
{
    [Proxy(typeof(DirectoryObjectItemRequestBuilder), true)]
    public partial interface IDirectoryObjectItemRequestBuilder;
}

namespace Microsoft.Graph.DirectoryRoles.Item.Members.Item.GraphApplication
{
    [Proxy(typeof(GraphApplicationRequestBuilder), true)]
    public partial interface IGraphApplicationRequestBuilder;
}

namespace Microsoft.Graph.DirectoryRoles.Item.Members.Item.GraphDevice
{
    [Proxy(typeof(GraphDeviceRequestBuilder), true)]
    public partial interface IGraphDeviceRequestBuilder;
}

namespace Microsoft.Graph.DirectoryRoles.Item.Members.Item.GraphGroup
{
    [Proxy(typeof(GraphGroupRequestBuilder), true)]
    public partial interface IGraphGroupRequestBuilder;
}

namespace Microsoft.Graph.DirectoryRoles.Item.Members.Item.GraphOrgContact
{
    [Proxy(typeof(GraphOrgContactRequestBuilder), true)]
    public partial interface IGraphOrgContactRequestBuilder;
}

namespace Microsoft.Graph.DirectoryRoles.Item.Members.Item.GraphServicePrincipal
{
    [Proxy(typeof(GraphServicePrincipalRequestBuilder), true)]
    public partial interface IGraphServicePrincipalRequestBuilder;
}

namespace Microsoft.Graph.DirectoryRoles.Item.Members.Item.GraphUser
{
    [Proxy(typeof(GraphUserRequestBuilder), true)]
    public partial interface IGraphUserRequestBuilder;
}

namespace Microsoft.Graph.DirectoryRoles.Item.Members.Item.Ref
{
    [Proxy(typeof(RefRequestBuilder), true)]
    public partial interface IRefRequestBuilder;
}

namespace Microsoft.Graph.DirectoryRoles.Item.Members.Ref
{
    [Proxy(typeof(RefRequestBuilder), true)]
    public partial interface IRefRequestBuilder;
}

namespace Microsoft.Graph.DirectoryRoles.Item.Restore
{
    [Proxy(typeof(RestoreRequestBuilder), true)]
    public partial interface IRestoreRequestBuilder;
}

namespace Microsoft.Graph.DirectoryRoles.Item.ScopedMembers
{
    [Proxy(typeof(ScopedMembersRequestBuilder), true)]
    public partial interface IScopedMembersRequestBuilder;
}

namespace Microsoft.Graph.DirectoryRoles.Item.ScopedMembers.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DirectoryRoles.Item.ScopedMembers.Item
{
    [Proxy(typeof(ScopedRoleMembershipItemRequestBuilder), true)]
    public partial interface IScopedRoleMembershipItemRequestBuilder;
}

namespace Microsoft.Graph.DirectoryRoles.ValidateProperties
{
    [Proxy(typeof(ValidatePropertiesRequestBuilder), true)]
    public partial interface IValidatePropertiesRequestBuilder;
}

namespace Microsoft.Graph.DirectoryRolesWithRoleTemplateId
{
    [Proxy(typeof(DirectoryRolesWithRoleTemplateIdRequestBuilder), true)]
    public partial interface IDirectoryRolesWithRoleTemplateIdRequestBuilder;
}

namespace Microsoft.Graph.DirectoryRoleTemplates
{
    [Proxy(typeof(DirectoryRoleTemplatesRequestBuilder), true)]
    public partial interface IDirectoryRoleTemplatesRequestBuilder;
}

namespace Microsoft.Graph.DirectoryRoleTemplates.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DirectoryRoleTemplates.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.DirectoryRoleTemplates.GetAvailableExtensionProperties
{
    [Proxy(typeof(GetAvailableExtensionPropertiesRequestBuilder), true)]
    public partial interface IGetAvailableExtensionPropertiesRequestBuilder;
}

namespace Microsoft.Graph.DirectoryRoleTemplates.GetByIds
{
    [Proxy(typeof(GetByIdsRequestBuilder), true)]
    public partial interface IGetByIdsRequestBuilder;
}

namespace Microsoft.Graph.DirectoryRoleTemplates.Item
{
    [Proxy(typeof(DirectoryRoleTemplateItemRequestBuilder), true)]
    public partial interface IDirectoryRoleTemplateItemRequestBuilder;
}

namespace Microsoft.Graph.DirectoryRoleTemplates.Item.CheckMemberGroups
{
    [Proxy(typeof(CheckMemberGroupsRequestBuilder), true)]
    public partial interface ICheckMemberGroupsRequestBuilder;
}

namespace Microsoft.Graph.DirectoryRoleTemplates.Item.CheckMemberObjects
{
    [Proxy(typeof(CheckMemberObjectsRequestBuilder), true)]
    public partial interface ICheckMemberObjectsRequestBuilder;
}

namespace Microsoft.Graph.DirectoryRoleTemplates.Item.GetMemberGroups
{
    [Proxy(typeof(GetMemberGroupsRequestBuilder), true)]
    public partial interface IGetMemberGroupsRequestBuilder;
}

namespace Microsoft.Graph.DirectoryRoleTemplates.Item.GetMemberObjects
{
    [Proxy(typeof(GetMemberObjectsRequestBuilder), true)]
    public partial interface IGetMemberObjectsRequestBuilder;
}

namespace Microsoft.Graph.DirectoryRoleTemplates.Item.Restore
{
    [Proxy(typeof(RestoreRequestBuilder), true)]
    public partial interface IRestoreRequestBuilder;
}

namespace Microsoft.Graph.DirectoryRoleTemplates.ValidateProperties
{
    [Proxy(typeof(ValidatePropertiesRequestBuilder), true)]
    public partial interface IValidatePropertiesRequestBuilder;
}

namespace Microsoft.Graph.DomainDnsRecords
{
    [Proxy(typeof(DomainDnsRecordsRequestBuilder), true)]
    public partial interface IDomainDnsRecordsRequestBuilder;
}

namespace Microsoft.Graph.DomainDnsRecords.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.DomainDnsRecords.Item
{
    [Proxy(typeof(DomainDnsRecordItemRequestBuilder), true)]
    public partial interface IDomainDnsRecordItemRequestBuilder;
}

namespace Microsoft.Graph.Domains
{
    [Proxy(typeof(DomainsRequestBuilder), true)]
    public partial interface IDomainsRequestBuilder;
}

namespace Microsoft.Graph.Domains.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Domains.Item
{
    [Proxy(typeof(DomainItemRequestBuilder), true)]
    public partial interface IDomainItemRequestBuilder;
}

namespace Microsoft.Graph.Domains.Item.DomainNameReferences
{
    [Proxy(typeof(DomainNameReferencesRequestBuilder), true)]
    public partial interface IDomainNameReferencesRequestBuilder;
}

namespace Microsoft.Graph.Domains.Item.DomainNameReferences.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Domains.Item.DomainNameReferences.Item
{
    [Proxy(typeof(DirectoryObjectItemRequestBuilder), true)]
    public partial interface IDirectoryObjectItemRequestBuilder;
}

namespace Microsoft.Graph.Domains.Item.FederationConfiguration
{
    [Proxy(typeof(FederationConfigurationRequestBuilder), true)]
    public partial interface IFederationConfigurationRequestBuilder;
}

namespace Microsoft.Graph.Domains.Item.FederationConfiguration.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Domains.Item.FederationConfiguration.Item
{
    [Proxy(typeof(InternalDomainFederationItemRequestBuilder), true)]
    public partial interface IInternalDomainFederationItemRequestBuilder;
}

namespace Microsoft.Graph.Domains.Item.ForceDelete
{
    [Proxy(typeof(ForceDeleteRequestBuilder), true)]
    public partial interface IForceDeleteRequestBuilder;
}

namespace Microsoft.Graph.Domains.Item.Promote
{
    [Proxy(typeof(PromoteRequestBuilder), true)]
    public partial interface IPromoteRequestBuilder;
}

namespace Microsoft.Graph.Domains.Item.RootDomain
{
    [Proxy(typeof(RootDomainRequestBuilder), true)]
    public partial interface IRootDomainRequestBuilder;
}

namespace Microsoft.Graph.Domains.Item.ServiceConfigurationRecords
{
    [Proxy(typeof(ServiceConfigurationRecordsRequestBuilder), true)]
    public partial interface IServiceConfigurationRecordsRequestBuilder;
}

namespace Microsoft.Graph.Domains.Item.ServiceConfigurationRecords.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Domains.Item.ServiceConfigurationRecords.Item
{
    [Proxy(typeof(DomainDnsRecordItemRequestBuilder), true)]
    public partial interface IDomainDnsRecordItemRequestBuilder;
}

namespace Microsoft.Graph.Domains.Item.VerificationDnsRecords
{
    [Proxy(typeof(VerificationDnsRecordsRequestBuilder), true)]
    public partial interface IVerificationDnsRecordsRequestBuilder;
}

namespace Microsoft.Graph.Domains.Item.VerificationDnsRecords.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Domains.Item.VerificationDnsRecords.Item
{
    [Proxy(typeof(DomainDnsRecordItemRequestBuilder), true)]
    public partial interface IDomainDnsRecordItemRequestBuilder;
}

namespace Microsoft.Graph.Domains.Item.Verify
{
    [Proxy(typeof(VerifyRequestBuilder), true)]
    public partial interface IVerifyRequestBuilder;
}

namespace Microsoft.Graph.Drives
{
    [Proxy(typeof(DrivesRequestBuilder), true)]
    public partial interface IDrivesRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item
{
    [Proxy(typeof(DriveItemRequestBuilder), true)]
    public partial interface IDriveItemRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Bundles
{
    [Proxy(typeof(BundlesRequestBuilder), true)]
    public partial interface IBundlesRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Bundles.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Bundles.Item
{
    [Proxy(typeof(DriveItemItemRequestBuilder), true)]
    public partial interface IDriveItemItemRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Bundles.Item.Content
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.CreatedByUser
{
    [Proxy(typeof(CreatedByUserRequestBuilder), true)]
    public partial interface ICreatedByUserRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.CreatedByUser.MailboxSettings
{
    [Proxy(typeof(MailboxSettingsRequestBuilder), true)]
    public partial interface IMailboxSettingsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.CreatedByUser.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.CreatedByUser.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Following
{
    [Proxy(typeof(FollowingRequestBuilder), true)]
    public partial interface IFollowingRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Following.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Following.Item
{
    [Proxy(typeof(DriveItemItemRequestBuilder), true)]
    public partial interface IDriveItemItemRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Following.Item.Content
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items
{
    [Proxy(typeof(ItemsRequestBuilder), true)]
    public partial interface IItemsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item
{
    [Proxy(typeof(DriveItemItemRequestBuilder), true)]
    public partial interface IDriveItemItemRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Analytics
{
    [Proxy(typeof(AnalyticsRequestBuilder), true)]
    public partial interface IAnalyticsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Analytics.AllTime
{
    [Proxy(typeof(AllTimeRequestBuilder), true)]
    public partial interface IAllTimeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Analytics.ItemActivityStats
{
    [Proxy(typeof(ItemActivityStatsRequestBuilder), true)]
    public partial interface IItemActivityStatsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Analytics.ItemActivityStats.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Analytics.ItemActivityStats.Item
{
    [Proxy(typeof(ItemActivityStatItemRequestBuilder), true)]
    public partial interface IItemActivityStatItemRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Analytics.ItemActivityStats.Item.Activities
{
    [Proxy(typeof(ActivitiesRequestBuilder), true)]
    public partial interface IActivitiesRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Analytics.ItemActivityStats.Item.Activities.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Analytics.ItemActivityStats.Item.Activities.Item
{
    [Proxy(typeof(ItemActivityItemRequestBuilder), true)]
    public partial interface IItemActivityItemRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Analytics.ItemActivityStats.Item.Activities.Item.DriveItem
{
    [Proxy(typeof(DriveItemRequestBuilder), true)]
    public partial interface IDriveItemRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Analytics.ItemActivityStats.Item.Activities.Item.DriveItem.Content
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Analytics.LastSevenDays
{
    [Proxy(typeof(LastSevenDaysRequestBuilder), true)]
    public partial interface ILastSevenDaysRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.AssignSensitivityLabel
{
    [Proxy(typeof(AssignSensitivityLabelRequestBuilder), true)]
    public partial interface IAssignSensitivityLabelRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Checkin
{
    [Proxy(typeof(CheckinRequestBuilder), true)]
    public partial interface ICheckinRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Checkout
{
    [Proxy(typeof(CheckoutRequestBuilder), true)]
    public partial interface ICheckoutRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Children
{
    [Proxy(typeof(ChildrenRequestBuilder), true)]
    public partial interface IChildrenRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Children.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Children.Item
{
    [Proxy(typeof(DriveItemItemRequestBuilder), true)]
    public partial interface IDriveItemItemRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Children.Item.Content
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Content
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Copy
{
    [Proxy(typeof(CopyRequestBuilder), true)]
    public partial interface ICopyRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.CreatedByUser
{
    [Proxy(typeof(CreatedByUserRequestBuilder), true)]
    public partial interface ICreatedByUserRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.CreatedByUser.MailboxSettings
{
    [Proxy(typeof(MailboxSettingsRequestBuilder), true)]
    public partial interface IMailboxSettingsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.CreatedByUser.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.CreatedByUser.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.CreateLink
{
    [Proxy(typeof(CreateLinkRequestBuilder), true)]
    public partial interface ICreateLinkRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.CreateUploadSession
{
    [Proxy(typeof(CreateUploadSessionRequestBuilder), true)]
    public partial interface ICreateUploadSessionRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.DeltaWithToken
{
    [Proxy(typeof(DeltaWithTokenRequestBuilder), true)]
    public partial interface IDeltaWithTokenRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.DiscardCheckout
{
    [Proxy(typeof(DiscardCheckoutRequestBuilder), true)]
    public partial interface IDiscardCheckoutRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.ExtractSensitivityLabels
{
    [Proxy(typeof(ExtractSensitivityLabelsRequestBuilder), true)]
    public partial interface IExtractSensitivityLabelsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Follow
{
    [Proxy(typeof(FollowRequestBuilder), true)]
    public partial interface IFollowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.GetActivitiesByInterval
{
    [Proxy(typeof(GetActivitiesByIntervalRequestBuilder), true)]
    public partial interface IGetActivitiesByIntervalRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.GetActivitiesByIntervalWithStartDateTimeWithEndDateTimeWithInterval
{
    [Proxy(typeof(GetActivitiesByIntervalWithStartDateTimeWithEndDateTimeWithIntervalRequestBuilder), true)]
    public partial interface IGetActivitiesByIntervalWithStartDateTimeWithEndDateTimeWithIntervalRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Invite
{
    [Proxy(typeof(InviteRequestBuilder), true)]
    public partial interface IInviteRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.LastModifiedByUser
{
    [Proxy(typeof(LastModifiedByUserRequestBuilder), true)]
    public partial interface ILastModifiedByUserRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.LastModifiedByUser.MailboxSettings
{
    [Proxy(typeof(MailboxSettingsRequestBuilder), true)]
    public partial interface IMailboxSettingsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.LastModifiedByUser.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.LastModifiedByUser.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.ListItem
{
    [Proxy(typeof(ListItemRequestBuilder), true)]
    public partial interface IListItemRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.PermanentDelete
{
    [Proxy(typeof(PermanentDeleteRequestBuilder), true)]
    public partial interface IPermanentDeleteRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Permissions
{
    [Proxy(typeof(PermissionsRequestBuilder), true)]
    public partial interface IPermissionsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Permissions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Permissions.Item
{
    [Proxy(typeof(PermissionItemRequestBuilder), true)]
    public partial interface IPermissionItemRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Permissions.Item.Grant
{
    [Proxy(typeof(GrantRequestBuilder), true)]
    public partial interface IGrantRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Preview
{
    [Proxy(typeof(PreviewRequestBuilder), true)]
    public partial interface IPreviewRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Restore
{
    [Proxy(typeof(RestoreRequestBuilder), true)]
    public partial interface IRestoreRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.RetentionLabel
{
    [Proxy(typeof(RetentionLabelRequestBuilder), true)]
    public partial interface IRetentionLabelRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.SearchWithQ
{
    [Proxy(typeof(SearchWithQRequestBuilder), true)]
    public partial interface ISearchWithQRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Subscriptions
{
    [Proxy(typeof(SubscriptionsRequestBuilder), true)]
    public partial interface ISubscriptionsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Subscriptions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Subscriptions.Item
{
    [Proxy(typeof(SubscriptionItemRequestBuilder), true)]
    public partial interface ISubscriptionItemRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Subscriptions.Item.Reauthorize
{
    [Proxy(typeof(ReauthorizeRequestBuilder), true)]
    public partial interface IReauthorizeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Thumbnails
{
    [Proxy(typeof(ThumbnailsRequestBuilder), true)]
    public partial interface IThumbnailsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Thumbnails.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Thumbnails.Item
{
    [Proxy(typeof(ThumbnailSetItemRequestBuilder), true)]
    public partial interface IThumbnailSetItemRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Unfollow
{
    [Proxy(typeof(UnfollowRequestBuilder), true)]
    public partial interface IUnfollowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.ValidatePermission
{
    [Proxy(typeof(ValidatePermissionRequestBuilder), true)]
    public partial interface IValidatePermissionRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Versions
{
    [Proxy(typeof(VersionsRequestBuilder), true)]
    public partial interface IVersionsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Versions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Versions.Item
{
    [Proxy(typeof(DriveItemVersionItemRequestBuilder), true)]
    public partial interface IDriveItemVersionItemRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Versions.Item.Content
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Versions.Item.RestoreVersion
{
    [Proxy(typeof(RestoreVersionRequestBuilder), true)]
    public partial interface IRestoreVersionRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook
{
    [Proxy(typeof(WorkbookRequestBuilder), true)]
    public partial interface IWorkbookRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Application
{
    [Proxy(typeof(ApplicationRequestBuilder), true)]
    public partial interface IApplicationRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Application.Calculate
{
    [Proxy(typeof(CalculateRequestBuilder), true)]
    public partial interface ICalculateRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.CloseSession
{
    [Proxy(typeof(CloseSessionRequestBuilder), true)]
    public partial interface ICloseSessionRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Comments
{
    [Proxy(typeof(CommentsRequestBuilder), true)]
    public partial interface ICommentsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Comments.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Comments.Item
{
    [Proxy(typeof(WorkbookCommentItemRequestBuilder), true)]
    public partial interface IWorkbookCommentItemRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Comments.Item.Replies
{
    [Proxy(typeof(RepliesRequestBuilder), true)]
    public partial interface IRepliesRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Comments.Item.Replies.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Comments.Item.Replies.Item
{
    [Proxy(typeof(WorkbookCommentReplyItemRequestBuilder), true)]
    public partial interface IWorkbookCommentReplyItemRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.CreateSession
{
    [Proxy(typeof(CreateSessionRequestBuilder), true)]
    public partial interface ICreateSessionRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions
{
    [Proxy(typeof(FunctionsRequestBuilder), true)]
    public partial interface IFunctionsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Abs
{
    [Proxy(typeof(AbsRequestBuilder), true)]
    public partial interface IAbsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.AccrInt
{
    [Proxy(typeof(AccrIntRequestBuilder), true)]
    public partial interface IAccrIntRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.AccrIntM
{
    [Proxy(typeof(AccrIntMRequestBuilder), true)]
    public partial interface IAccrIntMRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Acos
{
    [Proxy(typeof(AcosRequestBuilder), true)]
    public partial interface IAcosRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Acosh
{
    [Proxy(typeof(AcoshRequestBuilder), true)]
    public partial interface IAcoshRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Acot
{
    [Proxy(typeof(AcotRequestBuilder), true)]
    public partial interface IAcotRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Acoth
{
    [Proxy(typeof(AcothRequestBuilder), true)]
    public partial interface IAcothRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.AmorDegrc
{
    [Proxy(typeof(AmorDegrcRequestBuilder), true)]
    public partial interface IAmorDegrcRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.AmorLinc
{
    [Proxy(typeof(AmorLincRequestBuilder), true)]
    public partial interface IAmorLincRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.And
{
    [Proxy(typeof(AndRequestBuilder), true)]
    public partial interface IAndRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Arabic
{
    [Proxy(typeof(ArabicRequestBuilder), true)]
    public partial interface IArabicRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Areas
{
    [Proxy(typeof(AreasRequestBuilder), true)]
    public partial interface IAreasRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Asc
{
    [Proxy(typeof(AscRequestBuilder), true)]
    public partial interface IAscRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Asin
{
    [Proxy(typeof(AsinRequestBuilder), true)]
    public partial interface IAsinRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Asinh
{
    [Proxy(typeof(AsinhRequestBuilder), true)]
    public partial interface IAsinhRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Atan
{
    [Proxy(typeof(AtanRequestBuilder), true)]
    public partial interface IAtanRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Atan2
{
    [Proxy(typeof(Atan2RequestBuilder), true)]
    public partial interface IAtan2RequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Atanh
{
    [Proxy(typeof(AtanhRequestBuilder), true)]
    public partial interface IAtanhRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.AveDev
{
    [Proxy(typeof(AveDevRequestBuilder), true)]
    public partial interface IAveDevRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Average
{
    [Proxy(typeof(AverageRequestBuilder), true)]
    public partial interface IAverageRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.AverageA
{
    [Proxy(typeof(AverageARequestBuilder), true)]
    public partial interface IAverageARequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.AverageIf
{
    [Proxy(typeof(AverageIfRequestBuilder), true)]
    public partial interface IAverageIfRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.AverageIfs
{
    [Proxy(typeof(AverageIfsRequestBuilder), true)]
    public partial interface IAverageIfsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.BahtText
{
    [Proxy(typeof(BahtTextRequestBuilder), true)]
    public partial interface IBahtTextRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.BesselI
{
    [Proxy(typeof(BesselIRequestBuilder), true)]
    public partial interface IBesselIRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.BesselJ
{
    [Proxy(typeof(BesselJRequestBuilder), true)]
    public partial interface IBesselJRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.BesselK
{
    [Proxy(typeof(BesselKRequestBuilder), true)]
    public partial interface IBesselKRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.BesselY
{
    [Proxy(typeof(BesselYRequestBuilder), true)]
    public partial interface IBesselYRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Beta_Dist
{
    [Proxy(typeof(Beta_DistRequestBuilder), true)]
    public partial interface IBeta_DistRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Beta_Inv
{
    [Proxy(typeof(Beta_InvRequestBuilder), true)]
    public partial interface IBeta_InvRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Bin2Dec
{
    [Proxy(typeof(Bin2DecRequestBuilder), true)]
    public partial interface IBin2DecRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Bin2Hex
{
    [Proxy(typeof(Bin2HexRequestBuilder), true)]
    public partial interface IBin2HexRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Bin2Oct
{
    [Proxy(typeof(Bin2OctRequestBuilder), true)]
    public partial interface IBin2OctRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Binom_Dist
{
    [Proxy(typeof(Binom_DistRequestBuilder), true)]
    public partial interface IBinom_DistRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Binom_Dist_Range
{
    [Proxy(typeof(Binom_Dist_RangeRequestBuilder), true)]
    public partial interface IBinom_Dist_RangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Binom_Inv
{
    [Proxy(typeof(Binom_InvRequestBuilder), true)]
    public partial interface IBinom_InvRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Bitand
{
    [Proxy(typeof(BitandRequestBuilder), true)]
    public partial interface IBitandRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Bitlshift
{
    [Proxy(typeof(BitlshiftRequestBuilder), true)]
    public partial interface IBitlshiftRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Bitor
{
    [Proxy(typeof(BitorRequestBuilder), true)]
    public partial interface IBitorRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Bitrshift
{
    [Proxy(typeof(BitrshiftRequestBuilder), true)]
    public partial interface IBitrshiftRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Bitxor
{
    [Proxy(typeof(BitxorRequestBuilder), true)]
    public partial interface IBitxorRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Ceiling_Math
{
    [Proxy(typeof(Ceiling_MathRequestBuilder), true)]
    public partial interface ICeiling_MathRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Ceiling_Precise
{
    [Proxy(typeof(Ceiling_PreciseRequestBuilder), true)]
    public partial interface ICeiling_PreciseRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.CharNamespace
{
    [Proxy(typeof(CharRequestBuilder), true)]
    public partial interface ICharRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.ChiSq_Dist
{
    [Proxy(typeof(ChiSq_DistRequestBuilder), true)]
    public partial interface IChiSq_DistRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.ChiSq_Dist_RT
{
    [Proxy(typeof(ChiSq_Dist_RTRequestBuilder), true)]
    public partial interface IChiSq_Dist_RTRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.ChiSq_Inv
{
    [Proxy(typeof(ChiSq_InvRequestBuilder), true)]
    public partial interface IChiSq_InvRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.ChiSq_Inv_RT
{
    [Proxy(typeof(ChiSq_Inv_RTRequestBuilder), true)]
    public partial interface IChiSq_Inv_RTRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Choose
{
    [Proxy(typeof(ChooseRequestBuilder), true)]
    public partial interface IChooseRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Clean
{
    [Proxy(typeof(CleanRequestBuilder), true)]
    public partial interface ICleanRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Code
{
    [Proxy(typeof(CodeRequestBuilder), true)]
    public partial interface ICodeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Columns
{
    [Proxy(typeof(ColumnsRequestBuilder), true)]
    public partial interface IColumnsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Combin
{
    [Proxy(typeof(CombinRequestBuilder), true)]
    public partial interface ICombinRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Combina
{
    [Proxy(typeof(CombinaRequestBuilder), true)]
    public partial interface ICombinaRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Complex
{
    [Proxy(typeof(ComplexRequestBuilder), true)]
    public partial interface IComplexRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Concatenate
{
    [Proxy(typeof(ConcatenateRequestBuilder), true)]
    public partial interface IConcatenateRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Confidence_Norm
{
    [Proxy(typeof(Confidence_NormRequestBuilder), true)]
    public partial interface IConfidence_NormRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Confidence_T
{
    [Proxy(typeof(Confidence_TRequestBuilder), true)]
    public partial interface IConfidence_TRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.ConvertNamespace
{
    [Proxy(typeof(ConvertRequestBuilder), true)]
    public partial interface IConvertRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Cos
{
    [Proxy(typeof(CosRequestBuilder), true)]
    public partial interface ICosRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Cosh
{
    [Proxy(typeof(CoshRequestBuilder), true)]
    public partial interface ICoshRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Cot
{
    [Proxy(typeof(CotRequestBuilder), true)]
    public partial interface ICotRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Coth
{
    [Proxy(typeof(CothRequestBuilder), true)]
    public partial interface ICothRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.CountA
{
    [Proxy(typeof(CountARequestBuilder), true)]
    public partial interface ICountARequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.CountBlank
{
    [Proxy(typeof(CountBlankRequestBuilder), true)]
    public partial interface ICountBlankRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.CountIf
{
    [Proxy(typeof(CountIfRequestBuilder), true)]
    public partial interface ICountIfRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.CountIfs
{
    [Proxy(typeof(CountIfsRequestBuilder), true)]
    public partial interface ICountIfsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.CoupDayBs
{
    [Proxy(typeof(CoupDayBsRequestBuilder), true)]
    public partial interface ICoupDayBsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.CoupDays
{
    [Proxy(typeof(CoupDaysRequestBuilder), true)]
    public partial interface ICoupDaysRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.CoupDaysNc
{
    [Proxy(typeof(CoupDaysNcRequestBuilder), true)]
    public partial interface ICoupDaysNcRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.CoupNcd
{
    [Proxy(typeof(CoupNcdRequestBuilder), true)]
    public partial interface ICoupNcdRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.CoupNum
{
    [Proxy(typeof(CoupNumRequestBuilder), true)]
    public partial interface ICoupNumRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.CoupPcd
{
    [Proxy(typeof(CoupPcdRequestBuilder), true)]
    public partial interface ICoupPcdRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Csc
{
    [Proxy(typeof(CscRequestBuilder), true)]
    public partial interface ICscRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Csch
{
    [Proxy(typeof(CschRequestBuilder), true)]
    public partial interface ICschRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.CumIPmt
{
    [Proxy(typeof(CumIPmtRequestBuilder), true)]
    public partial interface ICumIPmtRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.CumPrinc
{
    [Proxy(typeof(CumPrincRequestBuilder), true)]
    public partial interface ICumPrincRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.DateNamespace
{
    [Proxy(typeof(DateRequestBuilder), true)]
    public partial interface IDateRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Datevalue
{
    [Proxy(typeof(DatevalueRequestBuilder), true)]
    public partial interface IDatevalueRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Daverage
{
    [Proxy(typeof(DaverageRequestBuilder), true)]
    public partial interface IDaverageRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Day
{
    [Proxy(typeof(DayRequestBuilder), true)]
    public partial interface IDayRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Days
{
    [Proxy(typeof(DaysRequestBuilder), true)]
    public partial interface IDaysRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Days360
{
    [Proxy(typeof(Days360RequestBuilder), true)]
    public partial interface IDays360RequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Db
{
    [Proxy(typeof(DbRequestBuilder), true)]
    public partial interface IDbRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Dbcs
{
    [Proxy(typeof(DbcsRequestBuilder), true)]
    public partial interface IDbcsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Dcount
{
    [Proxy(typeof(DcountRequestBuilder), true)]
    public partial interface IDcountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.DcountA
{
    [Proxy(typeof(DcountARequestBuilder), true)]
    public partial interface IDcountARequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Ddb
{
    [Proxy(typeof(DdbRequestBuilder), true)]
    public partial interface IDdbRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Dec2Bin
{
    [Proxy(typeof(Dec2BinRequestBuilder), true)]
    public partial interface IDec2BinRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Dec2Hex
{
    [Proxy(typeof(Dec2HexRequestBuilder), true)]
    public partial interface IDec2HexRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Dec2Oct
{
    [Proxy(typeof(Dec2OctRequestBuilder), true)]
    public partial interface IDec2OctRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.DecimalNamespace
{
    [Proxy(typeof(DecimalRequestBuilder), true)]
    public partial interface IDecimalRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Degrees
{
    [Proxy(typeof(DegreesRequestBuilder), true)]
    public partial interface IDegreesRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.DevSq
{
    [Proxy(typeof(DevSqRequestBuilder), true)]
    public partial interface IDevSqRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Dget
{
    [Proxy(typeof(DgetRequestBuilder), true)]
    public partial interface IDgetRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Disc
{
    [Proxy(typeof(DiscRequestBuilder), true)]
    public partial interface IDiscRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Dmax
{
    [Proxy(typeof(DmaxRequestBuilder), true)]
    public partial interface IDmaxRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Dmin
{
    [Proxy(typeof(DminRequestBuilder), true)]
    public partial interface IDminRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Dollar
{
    [Proxy(typeof(DollarRequestBuilder), true)]
    public partial interface IDollarRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.DollarDe
{
    [Proxy(typeof(DollarDeRequestBuilder), true)]
    public partial interface IDollarDeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.DollarFr
{
    [Proxy(typeof(DollarFrRequestBuilder), true)]
    public partial interface IDollarFrRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Dproduct
{
    [Proxy(typeof(DproductRequestBuilder), true)]
    public partial interface IDproductRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.DstDev
{
    [Proxy(typeof(DstDevRequestBuilder), true)]
    public partial interface IDstDevRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.DstDevP
{
    [Proxy(typeof(DstDevPRequestBuilder), true)]
    public partial interface IDstDevPRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Dsum
{
    [Proxy(typeof(DsumRequestBuilder), true)]
    public partial interface IDsumRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Duration
{
    [Proxy(typeof(DurationRequestBuilder), true)]
    public partial interface IDurationRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Dvar
{
    [Proxy(typeof(DvarRequestBuilder), true)]
    public partial interface IDvarRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.DvarP
{
    [Proxy(typeof(DvarPRequestBuilder), true)]
    public partial interface IDvarPRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Ecma_Ceiling
{
    [Proxy(typeof(Ecma_CeilingRequestBuilder), true)]
    public partial interface IEcma_CeilingRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Edate
{
    [Proxy(typeof(EdateRequestBuilder), true)]
    public partial interface IEdateRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Effect
{
    [Proxy(typeof(EffectRequestBuilder), true)]
    public partial interface IEffectRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.EoMonth
{
    [Proxy(typeof(EoMonthRequestBuilder), true)]
    public partial interface IEoMonthRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Erf
{
    [Proxy(typeof(ErfRequestBuilder), true)]
    public partial interface IErfRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Erf_Precise
{
    [Proxy(typeof(Erf_PreciseRequestBuilder), true)]
    public partial interface IErf_PreciseRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.ErfC
{
    [Proxy(typeof(ErfCRequestBuilder), true)]
    public partial interface IErfCRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.ErfC_Precise
{
    [Proxy(typeof(ErfC_PreciseRequestBuilder), true)]
    public partial interface IErfC_PreciseRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Error_Type
{
    [Proxy(typeof(Error_TypeRequestBuilder), true)]
    public partial interface IError_TypeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Even
{
    [Proxy(typeof(EvenRequestBuilder), true)]
    public partial interface IEvenRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Exact
{
    [Proxy(typeof(ExactRequestBuilder), true)]
    public partial interface IExactRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Exp
{
    [Proxy(typeof(ExpRequestBuilder), true)]
    public partial interface IExpRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Expon_Dist
{
    [Proxy(typeof(Expon_DistRequestBuilder), true)]
    public partial interface IExpon_DistRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.F_Dist
{
    [Proxy(typeof(F_DistRequestBuilder), true)]
    public partial interface IF_DistRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.F_Dist_RT
{
    [Proxy(typeof(F_Dist_RTRequestBuilder), true)]
    public partial interface IF_Dist_RTRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.F_Inv
{
    [Proxy(typeof(F_InvRequestBuilder), true)]
    public partial interface IF_InvRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.F_Inv_RT
{
    [Proxy(typeof(F_Inv_RTRequestBuilder), true)]
    public partial interface IF_Inv_RTRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Fact
{
    [Proxy(typeof(FactRequestBuilder), true)]
    public partial interface IFactRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.FactDouble
{
    [Proxy(typeof(FactDoubleRequestBuilder), true)]
    public partial interface IFactDoubleRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.False
{
    [Proxy(typeof(FalseRequestBuilder), true)]
    public partial interface IFalseRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Find
{
    [Proxy(typeof(FindRequestBuilder), true)]
    public partial interface IFindRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.FindB
{
    [Proxy(typeof(FindBRequestBuilder), true)]
    public partial interface IFindBRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Fisher
{
    [Proxy(typeof(FisherRequestBuilder), true)]
    public partial interface IFisherRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.FisherInv
{
    [Proxy(typeof(FisherInvRequestBuilder), true)]
    public partial interface IFisherInvRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Fixed
{
    [Proxy(typeof(FixedRequestBuilder), true)]
    public partial interface IFixedRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Floor_Math
{
    [Proxy(typeof(Floor_MathRequestBuilder), true)]
    public partial interface IFloor_MathRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Floor_Precise
{
    [Proxy(typeof(Floor_PreciseRequestBuilder), true)]
    public partial interface IFloor_PreciseRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Fv
{
    [Proxy(typeof(FvRequestBuilder), true)]
    public partial interface IFvRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Fvschedule
{
    [Proxy(typeof(FvscheduleRequestBuilder), true)]
    public partial interface IFvscheduleRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Gamma
{
    [Proxy(typeof(GammaRequestBuilder), true)]
    public partial interface IGammaRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Gamma_Dist
{
    [Proxy(typeof(Gamma_DistRequestBuilder), true)]
    public partial interface IGamma_DistRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Gamma_Inv
{
    [Proxy(typeof(Gamma_InvRequestBuilder), true)]
    public partial interface IGamma_InvRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.GammaLn
{
    [Proxy(typeof(GammaLnRequestBuilder), true)]
    public partial interface IGammaLnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.GammaLn_Precise
{
    [Proxy(typeof(GammaLn_PreciseRequestBuilder), true)]
    public partial interface IGammaLn_PreciseRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Gauss
{
    [Proxy(typeof(GaussRequestBuilder), true)]
    public partial interface IGaussRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Gcd
{
    [Proxy(typeof(GcdRequestBuilder), true)]
    public partial interface IGcdRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.GeoMean
{
    [Proxy(typeof(GeoMeanRequestBuilder), true)]
    public partial interface IGeoMeanRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.GeStep
{
    [Proxy(typeof(GeStepRequestBuilder), true)]
    public partial interface IGeStepRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.HarMean
{
    [Proxy(typeof(HarMeanRequestBuilder), true)]
    public partial interface IHarMeanRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Hex2Bin
{
    [Proxy(typeof(Hex2BinRequestBuilder), true)]
    public partial interface IHex2BinRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Hex2Dec
{
    [Proxy(typeof(Hex2DecRequestBuilder), true)]
    public partial interface IHex2DecRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Hex2Oct
{
    [Proxy(typeof(Hex2OctRequestBuilder), true)]
    public partial interface IHex2OctRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Hlookup
{
    [Proxy(typeof(HlookupRequestBuilder), true)]
    public partial interface IHlookupRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Hour
{
    [Proxy(typeof(HourRequestBuilder), true)]
    public partial interface IHourRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Hyperlink
{
    [Proxy(typeof(HyperlinkRequestBuilder), true)]
    public partial interface IHyperlinkRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.HypGeom_Dist
{
    [Proxy(typeof(HypGeom_DistRequestBuilder), true)]
    public partial interface IHypGeom_DistRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.If
{
    [Proxy(typeof(IfRequestBuilder), true)]
    public partial interface IIfRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.ImAbs
{
    [Proxy(typeof(ImAbsRequestBuilder), true)]
    public partial interface IImAbsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Imaginary
{
    [Proxy(typeof(ImaginaryRequestBuilder), true)]
    public partial interface IImaginaryRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.ImArgument
{
    [Proxy(typeof(ImArgumentRequestBuilder), true)]
    public partial interface IImArgumentRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.ImConjugate
{
    [Proxy(typeof(ImConjugateRequestBuilder), true)]
    public partial interface IImConjugateRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.ImCos
{
    [Proxy(typeof(ImCosRequestBuilder), true)]
    public partial interface IImCosRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.ImCosh
{
    [Proxy(typeof(ImCoshRequestBuilder), true)]
    public partial interface IImCoshRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.ImCot
{
    [Proxy(typeof(ImCotRequestBuilder), true)]
    public partial interface IImCotRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.ImCsc
{
    [Proxy(typeof(ImCscRequestBuilder), true)]
    public partial interface IImCscRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.ImCsch
{
    [Proxy(typeof(ImCschRequestBuilder), true)]
    public partial interface IImCschRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.ImDiv
{
    [Proxy(typeof(ImDivRequestBuilder), true)]
    public partial interface IImDivRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.ImExp
{
    [Proxy(typeof(ImExpRequestBuilder), true)]
    public partial interface IImExpRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.ImLn
{
    [Proxy(typeof(ImLnRequestBuilder), true)]
    public partial interface IImLnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.ImLog10
{
    [Proxy(typeof(ImLog10RequestBuilder), true)]
    public partial interface IImLog10RequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.ImLog2
{
    [Proxy(typeof(ImLog2RequestBuilder), true)]
    public partial interface IImLog2RequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.ImPower
{
    [Proxy(typeof(ImPowerRequestBuilder), true)]
    public partial interface IImPowerRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.ImProduct
{
    [Proxy(typeof(ImProductRequestBuilder), true)]
    public partial interface IImProductRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.ImReal
{
    [Proxy(typeof(ImRealRequestBuilder), true)]
    public partial interface IImRealRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.ImSec
{
    [Proxy(typeof(ImSecRequestBuilder), true)]
    public partial interface IImSecRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.ImSech
{
    [Proxy(typeof(ImSechRequestBuilder), true)]
    public partial interface IImSechRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.ImSin
{
    [Proxy(typeof(ImSinRequestBuilder), true)]
    public partial interface IImSinRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.ImSinh
{
    [Proxy(typeof(ImSinhRequestBuilder), true)]
    public partial interface IImSinhRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.ImSqrt
{
    [Proxy(typeof(ImSqrtRequestBuilder), true)]
    public partial interface IImSqrtRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.ImSub
{
    [Proxy(typeof(ImSubRequestBuilder), true)]
    public partial interface IImSubRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.ImSum
{
    [Proxy(typeof(ImSumRequestBuilder), true)]
    public partial interface IImSumRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.ImTan
{
    [Proxy(typeof(ImTanRequestBuilder), true)]
    public partial interface IImTanRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Int
{
    [Proxy(typeof(IntRequestBuilder), true)]
    public partial interface IIntRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.IntRate
{
    [Proxy(typeof(IntRateRequestBuilder), true)]
    public partial interface IIntRateRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Ipmt
{
    [Proxy(typeof(IpmtRequestBuilder), true)]
    public partial interface IIpmtRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Irr
{
    [Proxy(typeof(IrrRequestBuilder), true)]
    public partial interface IIrrRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.IsErr
{
    [Proxy(typeof(IsErrRequestBuilder), true)]
    public partial interface IIsErrRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.IsError
{
    [Proxy(typeof(IsErrorRequestBuilder), true)]
    public partial interface IIsErrorRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.IsEven
{
    [Proxy(typeof(IsEvenRequestBuilder), true)]
    public partial interface IIsEvenRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.IsFormula
{
    [Proxy(typeof(IsFormulaRequestBuilder), true)]
    public partial interface IIsFormulaRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.IsLogical
{
    [Proxy(typeof(IsLogicalRequestBuilder), true)]
    public partial interface IIsLogicalRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.IsNA
{
    [Proxy(typeof(IsNARequestBuilder), true)]
    public partial interface IIsNARequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.IsNonText
{
    [Proxy(typeof(IsNonTextRequestBuilder), true)]
    public partial interface IIsNonTextRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.IsNumber
{
    [Proxy(typeof(IsNumberRequestBuilder), true)]
    public partial interface IIsNumberRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Iso_Ceiling
{
    [Proxy(typeof(Iso_CeilingRequestBuilder), true)]
    public partial interface IIso_CeilingRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.IsOdd
{
    [Proxy(typeof(IsOddRequestBuilder), true)]
    public partial interface IIsOddRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.IsoWeekNum
{
    [Proxy(typeof(IsoWeekNumRequestBuilder), true)]
    public partial interface IIsoWeekNumRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Ispmt
{
    [Proxy(typeof(IspmtRequestBuilder), true)]
    public partial interface IIspmtRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Isref
{
    [Proxy(typeof(IsrefRequestBuilder), true)]
    public partial interface IIsrefRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.IsText
{
    [Proxy(typeof(IsTextRequestBuilder), true)]
    public partial interface IIsTextRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Kurt
{
    [Proxy(typeof(KurtRequestBuilder), true)]
    public partial interface IKurtRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Large
{
    [Proxy(typeof(LargeRequestBuilder), true)]
    public partial interface ILargeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Lcm
{
    [Proxy(typeof(LcmRequestBuilder), true)]
    public partial interface ILcmRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Left
{
    [Proxy(typeof(LeftRequestBuilder), true)]
    public partial interface ILeftRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Leftb
{
    [Proxy(typeof(LeftbRequestBuilder), true)]
    public partial interface ILeftbRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Len
{
    [Proxy(typeof(LenRequestBuilder), true)]
    public partial interface ILenRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Lenb
{
    [Proxy(typeof(LenbRequestBuilder), true)]
    public partial interface ILenbRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Ln
{
    [Proxy(typeof(LnRequestBuilder), true)]
    public partial interface ILnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Log
{
    [Proxy(typeof(LogRequestBuilder), true)]
    public partial interface ILogRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Log10
{
    [Proxy(typeof(Log10RequestBuilder), true)]
    public partial interface ILog10RequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.LogNorm_Dist
{
    [Proxy(typeof(LogNorm_DistRequestBuilder), true)]
    public partial interface ILogNorm_DistRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.LogNorm_Inv
{
    [Proxy(typeof(LogNorm_InvRequestBuilder), true)]
    public partial interface ILogNorm_InvRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Lookup
{
    [Proxy(typeof(LookupRequestBuilder), true)]
    public partial interface ILookupRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Lower
{
    [Proxy(typeof(LowerRequestBuilder), true)]
    public partial interface ILowerRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Match
{
    [Proxy(typeof(MatchRequestBuilder), true)]
    public partial interface IMatchRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Max
{
    [Proxy(typeof(MaxRequestBuilder), true)]
    public partial interface IMaxRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.MaxA
{
    [Proxy(typeof(MaxARequestBuilder), true)]
    public partial interface IMaxARequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Mduration
{
    [Proxy(typeof(MdurationRequestBuilder), true)]
    public partial interface IMdurationRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Median
{
    [Proxy(typeof(MedianRequestBuilder), true)]
    public partial interface IMedianRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Mid
{
    [Proxy(typeof(MidRequestBuilder), true)]
    public partial interface IMidRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Midb
{
    [Proxy(typeof(MidbRequestBuilder), true)]
    public partial interface IMidbRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Min
{
    [Proxy(typeof(MinRequestBuilder), true)]
    public partial interface IMinRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.MinA
{
    [Proxy(typeof(MinARequestBuilder), true)]
    public partial interface IMinARequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Minute
{
    [Proxy(typeof(MinuteRequestBuilder), true)]
    public partial interface IMinuteRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Mirr
{
    [Proxy(typeof(MirrRequestBuilder), true)]
    public partial interface IMirrRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Mod
{
    [Proxy(typeof(ModRequestBuilder), true)]
    public partial interface IModRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Month
{
    [Proxy(typeof(MonthRequestBuilder), true)]
    public partial interface IMonthRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Mround
{
    [Proxy(typeof(MroundRequestBuilder), true)]
    public partial interface IMroundRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.MultiNomial
{
    [Proxy(typeof(MultiNomialRequestBuilder), true)]
    public partial interface IMultiNomialRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.N
{
    [Proxy(typeof(NRequestBuilder), true)]
    public partial interface INRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Na
{
    [Proxy(typeof(NaRequestBuilder), true)]
    public partial interface INaRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.NegBinom_Dist
{
    [Proxy(typeof(NegBinom_DistRequestBuilder), true)]
    public partial interface INegBinom_DistRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.NetworkDays
{
    [Proxy(typeof(NetworkDaysRequestBuilder), true)]
    public partial interface INetworkDaysRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.NetworkDays_Intl
{
    [Proxy(typeof(NetworkDays_IntlRequestBuilder), true)]
    public partial interface INetworkDays_IntlRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Nominal
{
    [Proxy(typeof(NominalRequestBuilder), true)]
    public partial interface INominalRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Norm_Dist
{
    [Proxy(typeof(Norm_DistRequestBuilder), true)]
    public partial interface INorm_DistRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Norm_Inv
{
    [Proxy(typeof(Norm_InvRequestBuilder), true)]
    public partial interface INorm_InvRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Norm_S_Dist
{
    [Proxy(typeof(Norm_S_DistRequestBuilder), true)]
    public partial interface INorm_S_DistRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Norm_S_Inv
{
    [Proxy(typeof(Norm_S_InvRequestBuilder), true)]
    public partial interface INorm_S_InvRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Not
{
    [Proxy(typeof(NotRequestBuilder), true)]
    public partial interface INotRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Now
{
    [Proxy(typeof(NowRequestBuilder), true)]
    public partial interface INowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Nper
{
    [Proxy(typeof(NperRequestBuilder), true)]
    public partial interface INperRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Npv
{
    [Proxy(typeof(NpvRequestBuilder), true)]
    public partial interface INpvRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.NumberValue
{
    [Proxy(typeof(NumberValueRequestBuilder), true)]
    public partial interface INumberValueRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Oct2Bin
{
    [Proxy(typeof(Oct2BinRequestBuilder), true)]
    public partial interface IOct2BinRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Oct2Dec
{
    [Proxy(typeof(Oct2DecRequestBuilder), true)]
    public partial interface IOct2DecRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Oct2Hex
{
    [Proxy(typeof(Oct2HexRequestBuilder), true)]
    public partial interface IOct2HexRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Odd
{
    [Proxy(typeof(OddRequestBuilder), true)]
    public partial interface IOddRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.OddFPrice
{
    [Proxy(typeof(OddFPriceRequestBuilder), true)]
    public partial interface IOddFPriceRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.OddFYield
{
    [Proxy(typeof(OddFYieldRequestBuilder), true)]
    public partial interface IOddFYieldRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.OddLPrice
{
    [Proxy(typeof(OddLPriceRequestBuilder), true)]
    public partial interface IOddLPriceRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.OddLYield
{
    [Proxy(typeof(OddLYieldRequestBuilder), true)]
    public partial interface IOddLYieldRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Or
{
    [Proxy(typeof(OrRequestBuilder), true)]
    public partial interface IOrRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Pduration
{
    [Proxy(typeof(PdurationRequestBuilder), true)]
    public partial interface IPdurationRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Percentile_Exc
{
    [Proxy(typeof(Percentile_ExcRequestBuilder), true)]
    public partial interface IPercentile_ExcRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Percentile_Inc
{
    [Proxy(typeof(Percentile_IncRequestBuilder), true)]
    public partial interface IPercentile_IncRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.PercentRank_Exc
{
    [Proxy(typeof(PercentRank_ExcRequestBuilder), true)]
    public partial interface IPercentRank_ExcRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.PercentRank_Inc
{
    [Proxy(typeof(PercentRank_IncRequestBuilder), true)]
    public partial interface IPercentRank_IncRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Permut
{
    [Proxy(typeof(PermutRequestBuilder), true)]
    public partial interface IPermutRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Permutationa
{
    [Proxy(typeof(PermutationaRequestBuilder), true)]
    public partial interface IPermutationaRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Phi
{
    [Proxy(typeof(PhiRequestBuilder), true)]
    public partial interface IPhiRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Pi
{
    [Proxy(typeof(PiRequestBuilder), true)]
    public partial interface IPiRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Pmt
{
    [Proxy(typeof(PmtRequestBuilder), true)]
    public partial interface IPmtRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Poisson_Dist
{
    [Proxy(typeof(Poisson_DistRequestBuilder), true)]
    public partial interface IPoisson_DistRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Power
{
    [Proxy(typeof(PowerRequestBuilder), true)]
    public partial interface IPowerRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Ppmt
{
    [Proxy(typeof(PpmtRequestBuilder), true)]
    public partial interface IPpmtRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Price
{
    [Proxy(typeof(PriceRequestBuilder), true)]
    public partial interface IPriceRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.PriceDisc
{
    [Proxy(typeof(PriceDiscRequestBuilder), true)]
    public partial interface IPriceDiscRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.PriceMat
{
    [Proxy(typeof(PriceMatRequestBuilder), true)]
    public partial interface IPriceMatRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Product
{
    [Proxy(typeof(ProductRequestBuilder), true)]
    public partial interface IProductRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Proper
{
    [Proxy(typeof(ProperRequestBuilder), true)]
    public partial interface IProperRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Pv
{
    [Proxy(typeof(PvRequestBuilder), true)]
    public partial interface IPvRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Quartile_Exc
{
    [Proxy(typeof(Quartile_ExcRequestBuilder), true)]
    public partial interface IQuartile_ExcRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Quartile_Inc
{
    [Proxy(typeof(Quartile_IncRequestBuilder), true)]
    public partial interface IQuartile_IncRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Quotient
{
    [Proxy(typeof(QuotientRequestBuilder), true)]
    public partial interface IQuotientRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Radians
{
    [Proxy(typeof(RadiansRequestBuilder), true)]
    public partial interface IRadiansRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Rand
{
    [Proxy(typeof(RandRequestBuilder), true)]
    public partial interface IRandRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.RandBetween
{
    [Proxy(typeof(RandBetweenRequestBuilder), true)]
    public partial interface IRandBetweenRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Rank_Avg
{
    [Proxy(typeof(Rank_AvgRequestBuilder), true)]
    public partial interface IRank_AvgRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Rank_Eq
{
    [Proxy(typeof(Rank_EqRequestBuilder), true)]
    public partial interface IRank_EqRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Rate
{
    [Proxy(typeof(RateRequestBuilder), true)]
    public partial interface IRateRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Received
{
    [Proxy(typeof(ReceivedRequestBuilder), true)]
    public partial interface IReceivedRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Replace
{
    [Proxy(typeof(ReplaceRequestBuilder), true)]
    public partial interface IReplaceRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.ReplaceB
{
    [Proxy(typeof(ReplaceBRequestBuilder), true)]
    public partial interface IReplaceBRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Rept
{
    [Proxy(typeof(ReptRequestBuilder), true)]
    public partial interface IReptRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Right
{
    [Proxy(typeof(RightRequestBuilder), true)]
    public partial interface IRightRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Rightb
{
    [Proxy(typeof(RightbRequestBuilder), true)]
    public partial interface IRightbRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Roman
{
    [Proxy(typeof(RomanRequestBuilder), true)]
    public partial interface IRomanRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Round
{
    [Proxy(typeof(RoundRequestBuilder), true)]
    public partial interface IRoundRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.RoundDown
{
    [Proxy(typeof(RoundDownRequestBuilder), true)]
    public partial interface IRoundDownRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.RoundUp
{
    [Proxy(typeof(RoundUpRequestBuilder), true)]
    public partial interface IRoundUpRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Rows
{
    [Proxy(typeof(RowsRequestBuilder), true)]
    public partial interface IRowsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Rri
{
    [Proxy(typeof(RriRequestBuilder), true)]
    public partial interface IRriRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Sec
{
    [Proxy(typeof(SecRequestBuilder), true)]
    public partial interface ISecRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Sech
{
    [Proxy(typeof(SechRequestBuilder), true)]
    public partial interface ISechRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Second
{
    [Proxy(typeof(SecondRequestBuilder), true)]
    public partial interface ISecondRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.SeriesSum
{
    [Proxy(typeof(SeriesSumRequestBuilder), true)]
    public partial interface ISeriesSumRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Sheet
{
    [Proxy(typeof(SheetRequestBuilder), true)]
    public partial interface ISheetRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Sheets
{
    [Proxy(typeof(SheetsRequestBuilder), true)]
    public partial interface ISheetsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Sign
{
    [Proxy(typeof(SignRequestBuilder), true)]
    public partial interface ISignRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Sin
{
    [Proxy(typeof(SinRequestBuilder), true)]
    public partial interface ISinRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Sinh
{
    [Proxy(typeof(SinhRequestBuilder), true)]
    public partial interface ISinhRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Skew
{
    [Proxy(typeof(SkewRequestBuilder), true)]
    public partial interface ISkewRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Skew_p
{
    [Proxy(typeof(Skew_pRequestBuilder), true)]
    public partial interface ISkew_pRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Sln
{
    [Proxy(typeof(SlnRequestBuilder), true)]
    public partial interface ISlnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Small
{
    [Proxy(typeof(SmallRequestBuilder), true)]
    public partial interface ISmallRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Sqrt
{
    [Proxy(typeof(SqrtRequestBuilder), true)]
    public partial interface ISqrtRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.SqrtPi
{
    [Proxy(typeof(SqrtPiRequestBuilder), true)]
    public partial interface ISqrtPiRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Standardize
{
    [Proxy(typeof(StandardizeRequestBuilder), true)]
    public partial interface IStandardizeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.StDev_P
{
    [Proxy(typeof(StDev_PRequestBuilder), true)]
    public partial interface IStDev_PRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.StDev_S
{
    [Proxy(typeof(StDev_SRequestBuilder), true)]
    public partial interface IStDev_SRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.StDevA
{
    [Proxy(typeof(StDevARequestBuilder), true)]
    public partial interface IStDevARequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.StDevPA
{
    [Proxy(typeof(StDevPARequestBuilder), true)]
    public partial interface IStDevPARequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Substitute
{
    [Proxy(typeof(SubstituteRequestBuilder), true)]
    public partial interface ISubstituteRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Subtotal
{
    [Proxy(typeof(SubtotalRequestBuilder), true)]
    public partial interface ISubtotalRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Sum
{
    [Proxy(typeof(SumRequestBuilder), true)]
    public partial interface ISumRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.SumIf
{
    [Proxy(typeof(SumIfRequestBuilder), true)]
    public partial interface ISumIfRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.SumIfs
{
    [Proxy(typeof(SumIfsRequestBuilder), true)]
    public partial interface ISumIfsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.SumSq
{
    [Proxy(typeof(SumSqRequestBuilder), true)]
    public partial interface ISumSqRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Syd
{
    [Proxy(typeof(SydRequestBuilder), true)]
    public partial interface ISydRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.T
{
    [Proxy(typeof(TRequestBuilder), true)]
    public partial interface ITRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.T_Dist
{
    [Proxy(typeof(T_DistRequestBuilder), true)]
    public partial interface IT_DistRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.T_Dist_2T
{
    [Proxy(typeof(T_Dist_2TRequestBuilder), true)]
    public partial interface IT_Dist_2TRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.T_Dist_RT
{
    [Proxy(typeof(T_Dist_RTRequestBuilder), true)]
    public partial interface IT_Dist_RTRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.T_Inv
{
    [Proxy(typeof(T_InvRequestBuilder), true)]
    public partial interface IT_InvRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.T_Inv_2T
{
    [Proxy(typeof(T_Inv_2TRequestBuilder), true)]
    public partial interface IT_Inv_2TRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Tan
{
    [Proxy(typeof(TanRequestBuilder), true)]
    public partial interface ITanRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Tanh
{
    [Proxy(typeof(TanhRequestBuilder), true)]
    public partial interface ITanhRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.TbillEq
{
    [Proxy(typeof(TbillEqRequestBuilder), true)]
    public partial interface ITbillEqRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.TbillPrice
{
    [Proxy(typeof(TbillPriceRequestBuilder), true)]
    public partial interface ITbillPriceRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.TbillYield
{
    [Proxy(typeof(TbillYieldRequestBuilder), true)]
    public partial interface ITbillYieldRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Text
{
    [Proxy(typeof(TextRequestBuilder), true)]
    public partial interface ITextRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Time
{
    [Proxy(typeof(TimeRequestBuilder), true)]
    public partial interface ITimeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Timevalue
{
    [Proxy(typeof(TimevalueRequestBuilder), true)]
    public partial interface ITimevalueRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Today
{
    [Proxy(typeof(TodayRequestBuilder), true)]
    public partial interface ITodayRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Trim
{
    [Proxy(typeof(TrimRequestBuilder), true)]
    public partial interface ITrimRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.TrimMean
{
    [Proxy(typeof(TrimMeanRequestBuilder), true)]
    public partial interface ITrimMeanRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.True
{
    [Proxy(typeof(TrueRequestBuilder), true)]
    public partial interface ITrueRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Trunc
{
    [Proxy(typeof(TruncRequestBuilder), true)]
    public partial interface ITruncRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.TypeNamespace
{
    [Proxy(typeof(TypeRequestBuilder), true)]
    public partial interface ITypeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Unichar
{
    [Proxy(typeof(UnicharRequestBuilder), true)]
    public partial interface IUnicharRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Unicode
{
    [Proxy(typeof(UnicodeRequestBuilder), true)]
    public partial interface IUnicodeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Upper
{
    [Proxy(typeof(UpperRequestBuilder), true)]
    public partial interface IUpperRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Usdollar
{
    [Proxy(typeof(UsdollarRequestBuilder), true)]
    public partial interface IUsdollarRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Value
{
    [Proxy(typeof(ValueRequestBuilder), true)]
    public partial interface IValueRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Var_P
{
    [Proxy(typeof(Var_PRequestBuilder), true)]
    public partial interface IVar_PRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Var_S
{
    [Proxy(typeof(Var_SRequestBuilder), true)]
    public partial interface IVar_SRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.VarA
{
    [Proxy(typeof(VarARequestBuilder), true)]
    public partial interface IVarARequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.VarPA
{
    [Proxy(typeof(VarPARequestBuilder), true)]
    public partial interface IVarPARequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Vdb
{
    [Proxy(typeof(VdbRequestBuilder), true)]
    public partial interface IVdbRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Vlookup
{
    [Proxy(typeof(VlookupRequestBuilder), true)]
    public partial interface IVlookupRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Weekday
{
    [Proxy(typeof(WeekdayRequestBuilder), true)]
    public partial interface IWeekdayRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.WeekNum
{
    [Proxy(typeof(WeekNumRequestBuilder), true)]
    public partial interface IWeekNumRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Weibull_Dist
{
    [Proxy(typeof(Weibull_DistRequestBuilder), true)]
    public partial interface IWeibull_DistRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.WorkDay
{
    [Proxy(typeof(WorkDayRequestBuilder), true)]
    public partial interface IWorkDayRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.WorkDay_Intl
{
    [Proxy(typeof(WorkDay_IntlRequestBuilder), true)]
    public partial interface IWorkDay_IntlRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Xirr
{
    [Proxy(typeof(XirrRequestBuilder), true)]
    public partial interface IXirrRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Xnpv
{
    [Proxy(typeof(XnpvRequestBuilder), true)]
    public partial interface IXnpvRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Xor
{
    [Proxy(typeof(XorRequestBuilder), true)]
    public partial interface IXorRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Year
{
    [Proxy(typeof(YearRequestBuilder), true)]
    public partial interface IYearRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.YearFrac
{
    [Proxy(typeof(YearFracRequestBuilder), true)]
    public partial interface IYearFracRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Yield
{
    [Proxy(typeof(YieldRequestBuilder), true)]
    public partial interface IYieldRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.YieldDisc
{
    [Proxy(typeof(YieldDiscRequestBuilder), true)]
    public partial interface IYieldDiscRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.YieldMat
{
    [Proxy(typeof(YieldMatRequestBuilder), true)]
    public partial interface IYieldMatRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Functions.Z_Test
{
    [Proxy(typeof(Z_TestRequestBuilder), true)]
    public partial interface IZ_TestRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Names
{
    [Proxy(typeof(NamesRequestBuilder), true)]
    public partial interface INamesRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Names.Add
{
    [Proxy(typeof(AddRequestBuilder), true)]
    public partial interface IAddRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Names.AddFormulaLocal
{
    [Proxy(typeof(AddFormulaLocalRequestBuilder), true)]
    public partial interface IAddFormulaLocalRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Names.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Names.Item
{
    [Proxy(typeof(WorkbookNamedItemItemRequestBuilder), true)]
    public partial interface IWorkbookNamedItemItemRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Names.Item.RangeNamespace
{
    [Proxy(typeof(RangeRequestBuilder), true)]
    public partial interface IRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Names.Item.RangeNamespace.BoundingRectWithAnotherRange
{
    [Proxy(typeof(BoundingRectWithAnotherRangeRequestBuilder), true)]
    public partial interface IBoundingRectWithAnotherRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Names.Item.RangeNamespace.CellWithRowWithColumn
{
    [Proxy(typeof(CellWithRowWithColumnRequestBuilder), true)]
    public partial interface ICellWithRowWithColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Names.Item.RangeNamespace.Clear
{
    [Proxy(typeof(ClearRequestBuilder), true)]
    public partial interface IClearRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Names.Item.RangeNamespace.ColumnsAfter
{
    [Proxy(typeof(ColumnsAfterRequestBuilder), true)]
    public partial interface IColumnsAfterRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Names.Item.RangeNamespace.ColumnsAfterWithCount
{
    [Proxy(typeof(ColumnsAfterWithCountRequestBuilder), true)]
    public partial interface IColumnsAfterWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Names.Item.RangeNamespace.ColumnsBefore
{
    [Proxy(typeof(ColumnsBeforeRequestBuilder), true)]
    public partial interface IColumnsBeforeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Names.Item.RangeNamespace.ColumnsBeforeWithCount
{
    [Proxy(typeof(ColumnsBeforeWithCountRequestBuilder), true)]
    public partial interface IColumnsBeforeWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Names.Item.RangeNamespace.ColumnWithColumn
{
    [Proxy(typeof(ColumnWithColumnRequestBuilder), true)]
    public partial interface IColumnWithColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Names.Item.RangeNamespace.Delete
{
    [Proxy(typeof(DeleteRequestBuilder), true)]
    public partial interface IDeleteRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Names.Item.RangeNamespace.EntireColumn
{
    [Proxy(typeof(EntireColumnRequestBuilder), true)]
    public partial interface IEntireColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Names.Item.RangeNamespace.EntireRow
{
    [Proxy(typeof(EntireRowRequestBuilder), true)]
    public partial interface IEntireRowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Names.Item.RangeNamespace.Format
{
    [Proxy(typeof(FormatRequestBuilder), true)]
    public partial interface IFormatRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Names.Item.RangeNamespace.Insert
{
    [Proxy(typeof(InsertRequestBuilder), true)]
    public partial interface IInsertRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Names.Item.RangeNamespace.IntersectionWithAnotherRange
{
    [Proxy(typeof(IntersectionWithAnotherRangeRequestBuilder), true)]
    public partial interface IIntersectionWithAnotherRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Names.Item.RangeNamespace.LastCell
{
    [Proxy(typeof(LastCellRequestBuilder), true)]
    public partial interface ILastCellRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Names.Item.RangeNamespace.LastColumn
{
    [Proxy(typeof(LastColumnRequestBuilder), true)]
    public partial interface ILastColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Names.Item.RangeNamespace.LastRow
{
    [Proxy(typeof(LastRowRequestBuilder), true)]
    public partial interface ILastRowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Names.Item.RangeNamespace.Merge
{
    [Proxy(typeof(MergeRequestBuilder), true)]
    public partial interface IMergeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Names.Item.RangeNamespace.OffsetRangeWithRowOffsetWithColumnOffset
{
    [Proxy(typeof(OffsetRangeWithRowOffsetWithColumnOffsetRequestBuilder), true)]
    public partial interface IOffsetRangeWithRowOffsetWithColumnOffsetRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Names.Item.RangeNamespace.ResizedRangeWithDeltaRowsWithDeltaColumns
{
    [Proxy(typeof(ResizedRangeWithDeltaRowsWithDeltaColumnsRequestBuilder), true)]
    public partial interface IResizedRangeWithDeltaRowsWithDeltaColumnsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Names.Item.RangeNamespace.RowsAbove
{
    [Proxy(typeof(RowsAboveRequestBuilder), true)]
    public partial interface IRowsAboveRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Names.Item.RangeNamespace.RowsAboveWithCount
{
    [Proxy(typeof(RowsAboveWithCountRequestBuilder), true)]
    public partial interface IRowsAboveWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Names.Item.RangeNamespace.RowsBelow
{
    [Proxy(typeof(RowsBelowRequestBuilder), true)]
    public partial interface IRowsBelowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Names.Item.RangeNamespace.RowsBelowWithCount
{
    [Proxy(typeof(RowsBelowWithCountRequestBuilder), true)]
    public partial interface IRowsBelowWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Names.Item.RangeNamespace.RowWithRow
{
    [Proxy(typeof(RowWithRowRequestBuilder), true)]
    public partial interface IRowWithRowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Names.Item.RangeNamespace.Sort
{
    [Proxy(typeof(SortRequestBuilder), true)]
    public partial interface ISortRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Names.Item.RangeNamespace.Unmerge
{
    [Proxy(typeof(UnmergeRequestBuilder), true)]
    public partial interface IUnmergeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Names.Item.RangeNamespace.UsedRange
{
    [Proxy(typeof(UsedRangeRequestBuilder), true)]
    public partial interface IUsedRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Names.Item.RangeNamespace.UsedRangeWithValuesOnly
{
    [Proxy(typeof(UsedRangeWithValuesOnlyRequestBuilder), true)]
    public partial interface IUsedRangeWithValuesOnlyRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Names.Item.RangeNamespace.VisibleView
{
    [Proxy(typeof(VisibleViewRequestBuilder), true)]
    public partial interface IVisibleViewRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Names.Item.RangeNamespace.Worksheet
{
    [Proxy(typeof(WorksheetRequestBuilder), true)]
    public partial interface IWorksheetRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Names.Item.Worksheet
{
    [Proxy(typeof(WorksheetRequestBuilder), true)]
    public partial interface IWorksheetRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Operations
{
    [Proxy(typeof(OperationsRequestBuilder), true)]
    public partial interface IOperationsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Operations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Operations.Item
{
    [Proxy(typeof(WorkbookOperationItemRequestBuilder), true)]
    public partial interface IWorkbookOperationItemRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.RefreshSession
{
    [Proxy(typeof(RefreshSessionRequestBuilder), true)]
    public partial interface IRefreshSessionRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.SessionInfoResourceWithKey
{
    [Proxy(typeof(SessionInfoResourceWithKeyRequestBuilder), true)]
    public partial interface ISessionInfoResourceWithKeyRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.TableRowOperationResultWithKey
{
    [Proxy(typeof(TableRowOperationResultWithKeyRequestBuilder), true)]
    public partial interface ITableRowOperationResultWithKeyRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables
{
    [Proxy(typeof(TablesRequestBuilder), true)]
    public partial interface ITablesRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Add
{
    [Proxy(typeof(AddRequestBuilder), true)]
    public partial interface IAddRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item
{
    [Proxy(typeof(WorkbookTableItemRequestBuilder), true)]
    public partial interface IWorkbookTableItemRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.ClearFilters
{
    [Proxy(typeof(ClearFiltersRequestBuilder), true)]
    public partial interface IClearFiltersRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns
{
    [Proxy(typeof(ColumnsRequestBuilder), true)]
    public partial interface IColumnsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Add
{
    [Proxy(typeof(AddRequestBuilder), true)]
    public partial interface IAddRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item
{
    [Proxy(typeof(WorkbookTableColumnItemRequestBuilder), true)]
    public partial interface IWorkbookTableColumnItemRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.DataBodyRange
{
    [Proxy(typeof(DataBodyRangeRequestBuilder), true)]
    public partial interface IDataBodyRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.DataBodyRange.BoundingRectWithAnotherRange
{
    [Proxy(typeof(BoundingRectWithAnotherRangeRequestBuilder), true)]
    public partial interface IBoundingRectWithAnotherRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.DataBodyRange.CellWithRowWithColumn
{
    [Proxy(typeof(CellWithRowWithColumnRequestBuilder), true)]
    public partial interface ICellWithRowWithColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.DataBodyRange.Clear
{
    [Proxy(typeof(ClearRequestBuilder), true)]
    public partial interface IClearRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.DataBodyRange.ColumnsAfter
{
    [Proxy(typeof(ColumnsAfterRequestBuilder), true)]
    public partial interface IColumnsAfterRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.DataBodyRange.ColumnsAfterWithCount
{
    [Proxy(typeof(ColumnsAfterWithCountRequestBuilder), true)]
    public partial interface IColumnsAfterWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.DataBodyRange.ColumnsBefore
{
    [Proxy(typeof(ColumnsBeforeRequestBuilder), true)]
    public partial interface IColumnsBeforeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.DataBodyRange.ColumnsBeforeWithCount
{
    [Proxy(typeof(ColumnsBeforeWithCountRequestBuilder), true)]
    public partial interface IColumnsBeforeWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.DataBodyRange.ColumnWithColumn
{
    [Proxy(typeof(ColumnWithColumnRequestBuilder), true)]
    public partial interface IColumnWithColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.DataBodyRange.Delete
{
    [Proxy(typeof(DeleteRequestBuilder), true)]
    public partial interface IDeleteRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.DataBodyRange.EntireColumn
{
    [Proxy(typeof(EntireColumnRequestBuilder), true)]
    public partial interface IEntireColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.DataBodyRange.EntireRow
{
    [Proxy(typeof(EntireRowRequestBuilder), true)]
    public partial interface IEntireRowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.DataBodyRange.Format
{
    [Proxy(typeof(FormatRequestBuilder), true)]
    public partial interface IFormatRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.DataBodyRange.Insert
{
    [Proxy(typeof(InsertRequestBuilder), true)]
    public partial interface IInsertRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.DataBodyRange.IntersectionWithAnotherRange
{
    [Proxy(typeof(IntersectionWithAnotherRangeRequestBuilder), true)]
    public partial interface IIntersectionWithAnotherRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.DataBodyRange.LastCell
{
    [Proxy(typeof(LastCellRequestBuilder), true)]
    public partial interface ILastCellRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.DataBodyRange.LastColumn
{
    [Proxy(typeof(LastColumnRequestBuilder), true)]
    public partial interface ILastColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.DataBodyRange.LastRow
{
    [Proxy(typeof(LastRowRequestBuilder), true)]
    public partial interface ILastRowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.DataBodyRange.Merge
{
    [Proxy(typeof(MergeRequestBuilder), true)]
    public partial interface IMergeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.DataBodyRange.OffsetRangeWithRowOffsetWithColumnOffset
{
    [Proxy(typeof(OffsetRangeWithRowOffsetWithColumnOffsetRequestBuilder), true)]
    public partial interface IOffsetRangeWithRowOffsetWithColumnOffsetRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.DataBodyRange.ResizedRangeWithDeltaRowsWithDeltaColumns
{
    [Proxy(typeof(ResizedRangeWithDeltaRowsWithDeltaColumnsRequestBuilder), true)]
    public partial interface IResizedRangeWithDeltaRowsWithDeltaColumnsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.DataBodyRange.RowsAbove
{
    [Proxy(typeof(RowsAboveRequestBuilder), true)]
    public partial interface IRowsAboveRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.DataBodyRange.RowsAboveWithCount
{
    [Proxy(typeof(RowsAboveWithCountRequestBuilder), true)]
    public partial interface IRowsAboveWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.DataBodyRange.RowsBelow
{
    [Proxy(typeof(RowsBelowRequestBuilder), true)]
    public partial interface IRowsBelowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.DataBodyRange.RowsBelowWithCount
{
    [Proxy(typeof(RowsBelowWithCountRequestBuilder), true)]
    public partial interface IRowsBelowWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.DataBodyRange.RowWithRow
{
    [Proxy(typeof(RowWithRowRequestBuilder), true)]
    public partial interface IRowWithRowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.DataBodyRange.Sort
{
    [Proxy(typeof(SortRequestBuilder), true)]
    public partial interface ISortRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.DataBodyRange.Unmerge
{
    [Proxy(typeof(UnmergeRequestBuilder), true)]
    public partial interface IUnmergeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.DataBodyRange.UsedRange
{
    [Proxy(typeof(UsedRangeRequestBuilder), true)]
    public partial interface IUsedRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.DataBodyRange.UsedRangeWithValuesOnly
{
    [Proxy(typeof(UsedRangeWithValuesOnlyRequestBuilder), true)]
    public partial interface IUsedRangeWithValuesOnlyRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.DataBodyRange.VisibleView
{
    [Proxy(typeof(VisibleViewRequestBuilder), true)]
    public partial interface IVisibleViewRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.DataBodyRange.Worksheet
{
    [Proxy(typeof(WorksheetRequestBuilder), true)]
    public partial interface IWorksheetRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.Filter
{
    [Proxy(typeof(FilterRequestBuilder), true)]
    public partial interface IFilterRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.Filter.Apply
{
    [Proxy(typeof(ApplyRequestBuilder), true)]
    public partial interface IApplyRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.Filter.ApplyBottomItemsFilter
{
    [Proxy(typeof(ApplyBottomItemsFilterRequestBuilder), true)]
    public partial interface IApplyBottomItemsFilterRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.Filter.ApplyBottomPercentFilter
{
    [Proxy(typeof(ApplyBottomPercentFilterRequestBuilder), true)]
    public partial interface IApplyBottomPercentFilterRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.Filter.ApplyCellColorFilter
{
    [Proxy(typeof(ApplyCellColorFilterRequestBuilder), true)]
    public partial interface IApplyCellColorFilterRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.Filter.ApplyCustomFilter
{
    [Proxy(typeof(ApplyCustomFilterRequestBuilder), true)]
    public partial interface IApplyCustomFilterRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.Filter.ApplyDynamicFilter
{
    [Proxy(typeof(ApplyDynamicFilterRequestBuilder), true)]
    public partial interface IApplyDynamicFilterRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.Filter.ApplyFontColorFilter
{
    [Proxy(typeof(ApplyFontColorFilterRequestBuilder), true)]
    public partial interface IApplyFontColorFilterRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.Filter.ApplyIconFilter
{
    [Proxy(typeof(ApplyIconFilterRequestBuilder), true)]
    public partial interface IApplyIconFilterRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.Filter.ApplyTopItemsFilter
{
    [Proxy(typeof(ApplyTopItemsFilterRequestBuilder), true)]
    public partial interface IApplyTopItemsFilterRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.Filter.ApplyTopPercentFilter
{
    [Proxy(typeof(ApplyTopPercentFilterRequestBuilder), true)]
    public partial interface IApplyTopPercentFilterRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.Filter.ApplyValuesFilter
{
    [Proxy(typeof(ApplyValuesFilterRequestBuilder), true)]
    public partial interface IApplyValuesFilterRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.Filter.Clear
{
    [Proxy(typeof(ClearRequestBuilder), true)]
    public partial interface IClearRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.HeaderRowRange
{
    [Proxy(typeof(HeaderRowRangeRequestBuilder), true)]
    public partial interface IHeaderRowRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.HeaderRowRange.BoundingRectWithAnotherRange
{
    [Proxy(typeof(BoundingRectWithAnotherRangeRequestBuilder), true)]
    public partial interface IBoundingRectWithAnotherRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.HeaderRowRange.CellWithRowWithColumn
{
    [Proxy(typeof(CellWithRowWithColumnRequestBuilder), true)]
    public partial interface ICellWithRowWithColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.HeaderRowRange.Clear
{
    [Proxy(typeof(ClearRequestBuilder), true)]
    public partial interface IClearRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.HeaderRowRange.ColumnsAfter
{
    [Proxy(typeof(ColumnsAfterRequestBuilder), true)]
    public partial interface IColumnsAfterRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.HeaderRowRange.ColumnsAfterWithCount
{
    [Proxy(typeof(ColumnsAfterWithCountRequestBuilder), true)]
    public partial interface IColumnsAfterWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.HeaderRowRange.ColumnsBefore
{
    [Proxy(typeof(ColumnsBeforeRequestBuilder), true)]
    public partial interface IColumnsBeforeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.HeaderRowRange.ColumnsBeforeWithCount
{
    [Proxy(typeof(ColumnsBeforeWithCountRequestBuilder), true)]
    public partial interface IColumnsBeforeWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.HeaderRowRange.ColumnWithColumn
{
    [Proxy(typeof(ColumnWithColumnRequestBuilder), true)]
    public partial interface IColumnWithColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.HeaderRowRange.Delete
{
    [Proxy(typeof(DeleteRequestBuilder), true)]
    public partial interface IDeleteRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.HeaderRowRange.EntireColumn
{
    [Proxy(typeof(EntireColumnRequestBuilder), true)]
    public partial interface IEntireColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.HeaderRowRange.EntireRow
{
    [Proxy(typeof(EntireRowRequestBuilder), true)]
    public partial interface IEntireRowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.HeaderRowRange.Format
{
    [Proxy(typeof(FormatRequestBuilder), true)]
    public partial interface IFormatRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.HeaderRowRange.Insert
{
    [Proxy(typeof(InsertRequestBuilder), true)]
    public partial interface IInsertRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.HeaderRowRange.IntersectionWithAnotherRange
{
    [Proxy(typeof(IntersectionWithAnotherRangeRequestBuilder), true)]
    public partial interface IIntersectionWithAnotherRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.HeaderRowRange.LastCell
{
    [Proxy(typeof(LastCellRequestBuilder), true)]
    public partial interface ILastCellRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.HeaderRowRange.LastColumn
{
    [Proxy(typeof(LastColumnRequestBuilder), true)]
    public partial interface ILastColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.HeaderRowRange.LastRow
{
    [Proxy(typeof(LastRowRequestBuilder), true)]
    public partial interface ILastRowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.HeaderRowRange.Merge
{
    [Proxy(typeof(MergeRequestBuilder), true)]
    public partial interface IMergeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.HeaderRowRange.OffsetRangeWithRowOffsetWithColumnOffset
{
    [Proxy(typeof(OffsetRangeWithRowOffsetWithColumnOffsetRequestBuilder), true)]
    public partial interface IOffsetRangeWithRowOffsetWithColumnOffsetRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.HeaderRowRange.ResizedRangeWithDeltaRowsWithDeltaColumns
{
    [Proxy(typeof(ResizedRangeWithDeltaRowsWithDeltaColumnsRequestBuilder), true)]
    public partial interface IResizedRangeWithDeltaRowsWithDeltaColumnsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.HeaderRowRange.RowsAbove
{
    [Proxy(typeof(RowsAboveRequestBuilder), true)]
    public partial interface IRowsAboveRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.HeaderRowRange.RowsAboveWithCount
{
    [Proxy(typeof(RowsAboveWithCountRequestBuilder), true)]
    public partial interface IRowsAboveWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.HeaderRowRange.RowsBelow
{
    [Proxy(typeof(RowsBelowRequestBuilder), true)]
    public partial interface IRowsBelowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.HeaderRowRange.RowsBelowWithCount
{
    [Proxy(typeof(RowsBelowWithCountRequestBuilder), true)]
    public partial interface IRowsBelowWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.HeaderRowRange.RowWithRow
{
    [Proxy(typeof(RowWithRowRequestBuilder), true)]
    public partial interface IRowWithRowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.HeaderRowRange.Sort
{
    [Proxy(typeof(SortRequestBuilder), true)]
    public partial interface ISortRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.HeaderRowRange.Unmerge
{
    [Proxy(typeof(UnmergeRequestBuilder), true)]
    public partial interface IUnmergeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.HeaderRowRange.UsedRange
{
    [Proxy(typeof(UsedRangeRequestBuilder), true)]
    public partial interface IUsedRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.HeaderRowRange.UsedRangeWithValuesOnly
{
    [Proxy(typeof(UsedRangeWithValuesOnlyRequestBuilder), true)]
    public partial interface IUsedRangeWithValuesOnlyRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.HeaderRowRange.VisibleView
{
    [Proxy(typeof(VisibleViewRequestBuilder), true)]
    public partial interface IVisibleViewRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.HeaderRowRange.Worksheet
{
    [Proxy(typeof(WorksheetRequestBuilder), true)]
    public partial interface IWorksheetRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.RangeNamespace
{
    [Proxy(typeof(RangeRequestBuilder), true)]
    public partial interface IRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.RangeNamespace.BoundingRectWithAnotherRange
{
    [Proxy(typeof(BoundingRectWithAnotherRangeRequestBuilder), true)]
    public partial interface IBoundingRectWithAnotherRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.RangeNamespace.CellWithRowWithColumn
{
    [Proxy(typeof(CellWithRowWithColumnRequestBuilder), true)]
    public partial interface ICellWithRowWithColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.RangeNamespace.Clear
{
    [Proxy(typeof(ClearRequestBuilder), true)]
    public partial interface IClearRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.RangeNamespace.ColumnsAfter
{
    [Proxy(typeof(ColumnsAfterRequestBuilder), true)]
    public partial interface IColumnsAfterRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.RangeNamespace.ColumnsAfterWithCount
{
    [Proxy(typeof(ColumnsAfterWithCountRequestBuilder), true)]
    public partial interface IColumnsAfterWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.RangeNamespace.ColumnsBefore
{
    [Proxy(typeof(ColumnsBeforeRequestBuilder), true)]
    public partial interface IColumnsBeforeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.RangeNamespace.ColumnsBeforeWithCount
{
    [Proxy(typeof(ColumnsBeforeWithCountRequestBuilder), true)]
    public partial interface IColumnsBeforeWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.RangeNamespace.ColumnWithColumn
{
    [Proxy(typeof(ColumnWithColumnRequestBuilder), true)]
    public partial interface IColumnWithColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.RangeNamespace.Delete
{
    [Proxy(typeof(DeleteRequestBuilder), true)]
    public partial interface IDeleteRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.RangeNamespace.EntireColumn
{
    [Proxy(typeof(EntireColumnRequestBuilder), true)]
    public partial interface IEntireColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.RangeNamespace.EntireRow
{
    [Proxy(typeof(EntireRowRequestBuilder), true)]
    public partial interface IEntireRowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.RangeNamespace.Format
{
    [Proxy(typeof(FormatRequestBuilder), true)]
    public partial interface IFormatRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.RangeNamespace.Insert
{
    [Proxy(typeof(InsertRequestBuilder), true)]
    public partial interface IInsertRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.RangeNamespace.IntersectionWithAnotherRange
{
    [Proxy(typeof(IntersectionWithAnotherRangeRequestBuilder), true)]
    public partial interface IIntersectionWithAnotherRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.RangeNamespace.LastCell
{
    [Proxy(typeof(LastCellRequestBuilder), true)]
    public partial interface ILastCellRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.RangeNamespace.LastColumn
{
    [Proxy(typeof(LastColumnRequestBuilder), true)]
    public partial interface ILastColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.RangeNamespace.LastRow
{
    [Proxy(typeof(LastRowRequestBuilder), true)]
    public partial interface ILastRowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.RangeNamespace.Merge
{
    [Proxy(typeof(MergeRequestBuilder), true)]
    public partial interface IMergeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.RangeNamespace.OffsetRangeWithRowOffsetWithColumnOffset
{
    [Proxy(typeof(OffsetRangeWithRowOffsetWithColumnOffsetRequestBuilder), true)]
    public partial interface IOffsetRangeWithRowOffsetWithColumnOffsetRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.RangeNamespace.ResizedRangeWithDeltaRowsWithDeltaColumns
{
    [Proxy(typeof(ResizedRangeWithDeltaRowsWithDeltaColumnsRequestBuilder), true)]
    public partial interface IResizedRangeWithDeltaRowsWithDeltaColumnsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.RangeNamespace.RowsAbove
{
    [Proxy(typeof(RowsAboveRequestBuilder), true)]
    public partial interface IRowsAboveRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.RangeNamespace.RowsAboveWithCount
{
    [Proxy(typeof(RowsAboveWithCountRequestBuilder), true)]
    public partial interface IRowsAboveWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.RangeNamespace.RowsBelow
{
    [Proxy(typeof(RowsBelowRequestBuilder), true)]
    public partial interface IRowsBelowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.RangeNamespace.RowsBelowWithCount
{
    [Proxy(typeof(RowsBelowWithCountRequestBuilder), true)]
    public partial interface IRowsBelowWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.RangeNamespace.RowWithRow
{
    [Proxy(typeof(RowWithRowRequestBuilder), true)]
    public partial interface IRowWithRowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.RangeNamespace.Sort
{
    [Proxy(typeof(SortRequestBuilder), true)]
    public partial interface ISortRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.RangeNamespace.Unmerge
{
    [Proxy(typeof(UnmergeRequestBuilder), true)]
    public partial interface IUnmergeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.RangeNamespace.UsedRange
{
    [Proxy(typeof(UsedRangeRequestBuilder), true)]
    public partial interface IUsedRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.RangeNamespace.UsedRangeWithValuesOnly
{
    [Proxy(typeof(UsedRangeWithValuesOnlyRequestBuilder), true)]
    public partial interface IUsedRangeWithValuesOnlyRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.RangeNamespace.VisibleView
{
    [Proxy(typeof(VisibleViewRequestBuilder), true)]
    public partial interface IVisibleViewRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.RangeNamespace.Worksheet
{
    [Proxy(typeof(WorksheetRequestBuilder), true)]
    public partial interface IWorksheetRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.TotalRowRange
{
    [Proxy(typeof(TotalRowRangeRequestBuilder), true)]
    public partial interface ITotalRowRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.TotalRowRange.BoundingRectWithAnotherRange
{
    [Proxy(typeof(BoundingRectWithAnotherRangeRequestBuilder), true)]
    public partial interface IBoundingRectWithAnotherRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.TotalRowRange.CellWithRowWithColumn
{
    [Proxy(typeof(CellWithRowWithColumnRequestBuilder), true)]
    public partial interface ICellWithRowWithColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.TotalRowRange.Clear
{
    [Proxy(typeof(ClearRequestBuilder), true)]
    public partial interface IClearRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.TotalRowRange.ColumnsAfter
{
    [Proxy(typeof(ColumnsAfterRequestBuilder), true)]
    public partial interface IColumnsAfterRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.TotalRowRange.ColumnsAfterWithCount
{
    [Proxy(typeof(ColumnsAfterWithCountRequestBuilder), true)]
    public partial interface IColumnsAfterWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.TotalRowRange.ColumnsBefore
{
    [Proxy(typeof(ColumnsBeforeRequestBuilder), true)]
    public partial interface IColumnsBeforeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.TotalRowRange.ColumnsBeforeWithCount
{
    [Proxy(typeof(ColumnsBeforeWithCountRequestBuilder), true)]
    public partial interface IColumnsBeforeWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.TotalRowRange.ColumnWithColumn
{
    [Proxy(typeof(ColumnWithColumnRequestBuilder), true)]
    public partial interface IColumnWithColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.TotalRowRange.Delete
{
    [Proxy(typeof(DeleteRequestBuilder), true)]
    public partial interface IDeleteRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.TotalRowRange.EntireColumn
{
    [Proxy(typeof(EntireColumnRequestBuilder), true)]
    public partial interface IEntireColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.TotalRowRange.EntireRow
{
    [Proxy(typeof(EntireRowRequestBuilder), true)]
    public partial interface IEntireRowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.TotalRowRange.Format
{
    [Proxy(typeof(FormatRequestBuilder), true)]
    public partial interface IFormatRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.TotalRowRange.Insert
{
    [Proxy(typeof(InsertRequestBuilder), true)]
    public partial interface IInsertRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.TotalRowRange.IntersectionWithAnotherRange
{
    [Proxy(typeof(IntersectionWithAnotherRangeRequestBuilder), true)]
    public partial interface IIntersectionWithAnotherRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.TotalRowRange.LastCell
{
    [Proxy(typeof(LastCellRequestBuilder), true)]
    public partial interface ILastCellRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.TotalRowRange.LastColumn
{
    [Proxy(typeof(LastColumnRequestBuilder), true)]
    public partial interface ILastColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.TotalRowRange.LastRow
{
    [Proxy(typeof(LastRowRequestBuilder), true)]
    public partial interface ILastRowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.TotalRowRange.Merge
{
    [Proxy(typeof(MergeRequestBuilder), true)]
    public partial interface IMergeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.TotalRowRange.OffsetRangeWithRowOffsetWithColumnOffset
{
    [Proxy(typeof(OffsetRangeWithRowOffsetWithColumnOffsetRequestBuilder), true)]
    public partial interface IOffsetRangeWithRowOffsetWithColumnOffsetRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.TotalRowRange.ResizedRangeWithDeltaRowsWithDeltaColumns
{
    [Proxy(typeof(ResizedRangeWithDeltaRowsWithDeltaColumnsRequestBuilder), true)]
    public partial interface IResizedRangeWithDeltaRowsWithDeltaColumnsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.TotalRowRange.RowsAbove
{
    [Proxy(typeof(RowsAboveRequestBuilder), true)]
    public partial interface IRowsAboveRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.TotalRowRange.RowsAboveWithCount
{
    [Proxy(typeof(RowsAboveWithCountRequestBuilder), true)]
    public partial interface IRowsAboveWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.TotalRowRange.RowsBelow
{
    [Proxy(typeof(RowsBelowRequestBuilder), true)]
    public partial interface IRowsBelowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.TotalRowRange.RowsBelowWithCount
{
    [Proxy(typeof(RowsBelowWithCountRequestBuilder), true)]
    public partial interface IRowsBelowWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.TotalRowRange.RowWithRow
{
    [Proxy(typeof(RowWithRowRequestBuilder), true)]
    public partial interface IRowWithRowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.TotalRowRange.Sort
{
    [Proxy(typeof(SortRequestBuilder), true)]
    public partial interface ISortRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.TotalRowRange.Unmerge
{
    [Proxy(typeof(UnmergeRequestBuilder), true)]
    public partial interface IUnmergeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.TotalRowRange.UsedRange
{
    [Proxy(typeof(UsedRangeRequestBuilder), true)]
    public partial interface IUsedRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.TotalRowRange.UsedRangeWithValuesOnly
{
    [Proxy(typeof(UsedRangeWithValuesOnlyRequestBuilder), true)]
    public partial interface IUsedRangeWithValuesOnlyRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.TotalRowRange.VisibleView
{
    [Proxy(typeof(VisibleViewRequestBuilder), true)]
    public partial interface IVisibleViewRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.Item.TotalRowRange.Worksheet
{
    [Proxy(typeof(WorksheetRequestBuilder), true)]
    public partial interface IWorksheetRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.ItemAtWithIndex
{
    [Proxy(typeof(ItemAtWithIndexRequestBuilder), true)]
    public partial interface IItemAtWithIndexRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.ItemAtWithIndex.DataBodyRange
{
    [Proxy(typeof(DataBodyRangeRequestBuilder), true)]
    public partial interface IDataBodyRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.ItemAtWithIndex.Filter
{
    [Proxy(typeof(FilterRequestBuilder), true)]
    public partial interface IFilterRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.ItemAtWithIndex.HeaderRowRange
{
    [Proxy(typeof(HeaderRowRangeRequestBuilder), true)]
    public partial interface IHeaderRowRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.ItemAtWithIndex.RangeNamespace
{
    [Proxy(typeof(RangeRequestBuilder), true)]
    public partial interface IRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Columns.ItemAtWithIndex.TotalRowRange
{
    [Proxy(typeof(TotalRowRangeRequestBuilder), true)]
    public partial interface ITotalRowRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.ConvertToRange
{
    [Proxy(typeof(ConvertToRangeRequestBuilder), true)]
    public partial interface IConvertToRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.DataBodyRange
{
    [Proxy(typeof(DataBodyRangeRequestBuilder), true)]
    public partial interface IDataBodyRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.DataBodyRange.BoundingRectWithAnotherRange
{
    [Proxy(typeof(BoundingRectWithAnotherRangeRequestBuilder), true)]
    public partial interface IBoundingRectWithAnotherRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.DataBodyRange.CellWithRowWithColumn
{
    [Proxy(typeof(CellWithRowWithColumnRequestBuilder), true)]
    public partial interface ICellWithRowWithColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.DataBodyRange.Clear
{
    [Proxy(typeof(ClearRequestBuilder), true)]
    public partial interface IClearRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.DataBodyRange.ColumnsAfter
{
    [Proxy(typeof(ColumnsAfterRequestBuilder), true)]
    public partial interface IColumnsAfterRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.DataBodyRange.ColumnsAfterWithCount
{
    [Proxy(typeof(ColumnsAfterWithCountRequestBuilder), true)]
    public partial interface IColumnsAfterWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.DataBodyRange.ColumnsBefore
{
    [Proxy(typeof(ColumnsBeforeRequestBuilder), true)]
    public partial interface IColumnsBeforeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.DataBodyRange.ColumnsBeforeWithCount
{
    [Proxy(typeof(ColumnsBeforeWithCountRequestBuilder), true)]
    public partial interface IColumnsBeforeWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.DataBodyRange.ColumnWithColumn
{
    [Proxy(typeof(ColumnWithColumnRequestBuilder), true)]
    public partial interface IColumnWithColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.DataBodyRange.Delete
{
    [Proxy(typeof(DeleteRequestBuilder), true)]
    public partial interface IDeleteRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.DataBodyRange.EntireColumn
{
    [Proxy(typeof(EntireColumnRequestBuilder), true)]
    public partial interface IEntireColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.DataBodyRange.EntireRow
{
    [Proxy(typeof(EntireRowRequestBuilder), true)]
    public partial interface IEntireRowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.DataBodyRange.Format
{
    [Proxy(typeof(FormatRequestBuilder), true)]
    public partial interface IFormatRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.DataBodyRange.Insert
{
    [Proxy(typeof(InsertRequestBuilder), true)]
    public partial interface IInsertRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.DataBodyRange.IntersectionWithAnotherRange
{
    [Proxy(typeof(IntersectionWithAnotherRangeRequestBuilder), true)]
    public partial interface IIntersectionWithAnotherRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.DataBodyRange.LastCell
{
    [Proxy(typeof(LastCellRequestBuilder), true)]
    public partial interface ILastCellRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.DataBodyRange.LastColumn
{
    [Proxy(typeof(LastColumnRequestBuilder), true)]
    public partial interface ILastColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.DataBodyRange.LastRow
{
    [Proxy(typeof(LastRowRequestBuilder), true)]
    public partial interface ILastRowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.DataBodyRange.Merge
{
    [Proxy(typeof(MergeRequestBuilder), true)]
    public partial interface IMergeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.DataBodyRange.OffsetRangeWithRowOffsetWithColumnOffset
{
    [Proxy(typeof(OffsetRangeWithRowOffsetWithColumnOffsetRequestBuilder), true)]
    public partial interface IOffsetRangeWithRowOffsetWithColumnOffsetRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.DataBodyRange.ResizedRangeWithDeltaRowsWithDeltaColumns
{
    [Proxy(typeof(ResizedRangeWithDeltaRowsWithDeltaColumnsRequestBuilder), true)]
    public partial interface IResizedRangeWithDeltaRowsWithDeltaColumnsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.DataBodyRange.RowsAbove
{
    [Proxy(typeof(RowsAboveRequestBuilder), true)]
    public partial interface IRowsAboveRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.DataBodyRange.RowsAboveWithCount
{
    [Proxy(typeof(RowsAboveWithCountRequestBuilder), true)]
    public partial interface IRowsAboveWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.DataBodyRange.RowsBelow
{
    [Proxy(typeof(RowsBelowRequestBuilder), true)]
    public partial interface IRowsBelowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.DataBodyRange.RowsBelowWithCount
{
    [Proxy(typeof(RowsBelowWithCountRequestBuilder), true)]
    public partial interface IRowsBelowWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.DataBodyRange.RowWithRow
{
    [Proxy(typeof(RowWithRowRequestBuilder), true)]
    public partial interface IRowWithRowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.DataBodyRange.Sort
{
    [Proxy(typeof(SortRequestBuilder), true)]
    public partial interface ISortRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.DataBodyRange.Unmerge
{
    [Proxy(typeof(UnmergeRequestBuilder), true)]
    public partial interface IUnmergeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.DataBodyRange.UsedRange
{
    [Proxy(typeof(UsedRangeRequestBuilder), true)]
    public partial interface IUsedRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.DataBodyRange.UsedRangeWithValuesOnly
{
    [Proxy(typeof(UsedRangeWithValuesOnlyRequestBuilder), true)]
    public partial interface IUsedRangeWithValuesOnlyRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.DataBodyRange.VisibleView
{
    [Proxy(typeof(VisibleViewRequestBuilder), true)]
    public partial interface IVisibleViewRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.DataBodyRange.Worksheet
{
    [Proxy(typeof(WorksheetRequestBuilder), true)]
    public partial interface IWorksheetRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.HeaderRowRange
{
    [Proxy(typeof(HeaderRowRangeRequestBuilder), true)]
    public partial interface IHeaderRowRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.HeaderRowRange.BoundingRectWithAnotherRange
{
    [Proxy(typeof(BoundingRectWithAnotherRangeRequestBuilder), true)]
    public partial interface IBoundingRectWithAnotherRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.HeaderRowRange.CellWithRowWithColumn
{
    [Proxy(typeof(CellWithRowWithColumnRequestBuilder), true)]
    public partial interface ICellWithRowWithColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.HeaderRowRange.Clear
{
    [Proxy(typeof(ClearRequestBuilder), true)]
    public partial interface IClearRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.HeaderRowRange.ColumnsAfter
{
    [Proxy(typeof(ColumnsAfterRequestBuilder), true)]
    public partial interface IColumnsAfterRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.HeaderRowRange.ColumnsAfterWithCount
{
    [Proxy(typeof(ColumnsAfterWithCountRequestBuilder), true)]
    public partial interface IColumnsAfterWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.HeaderRowRange.ColumnsBefore
{
    [Proxy(typeof(ColumnsBeforeRequestBuilder), true)]
    public partial interface IColumnsBeforeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.HeaderRowRange.ColumnsBeforeWithCount
{
    [Proxy(typeof(ColumnsBeforeWithCountRequestBuilder), true)]
    public partial interface IColumnsBeforeWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.HeaderRowRange.ColumnWithColumn
{
    [Proxy(typeof(ColumnWithColumnRequestBuilder), true)]
    public partial interface IColumnWithColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.HeaderRowRange.Delete
{
    [Proxy(typeof(DeleteRequestBuilder), true)]
    public partial interface IDeleteRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.HeaderRowRange.EntireColumn
{
    [Proxy(typeof(EntireColumnRequestBuilder), true)]
    public partial interface IEntireColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.HeaderRowRange.EntireRow
{
    [Proxy(typeof(EntireRowRequestBuilder), true)]
    public partial interface IEntireRowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.HeaderRowRange.Format
{
    [Proxy(typeof(FormatRequestBuilder), true)]
    public partial interface IFormatRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.HeaderRowRange.Insert
{
    [Proxy(typeof(InsertRequestBuilder), true)]
    public partial interface IInsertRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.HeaderRowRange.IntersectionWithAnotherRange
{
    [Proxy(typeof(IntersectionWithAnotherRangeRequestBuilder), true)]
    public partial interface IIntersectionWithAnotherRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.HeaderRowRange.LastCell
{
    [Proxy(typeof(LastCellRequestBuilder), true)]
    public partial interface ILastCellRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.HeaderRowRange.LastColumn
{
    [Proxy(typeof(LastColumnRequestBuilder), true)]
    public partial interface ILastColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.HeaderRowRange.LastRow
{
    [Proxy(typeof(LastRowRequestBuilder), true)]
    public partial interface ILastRowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.HeaderRowRange.Merge
{
    [Proxy(typeof(MergeRequestBuilder), true)]
    public partial interface IMergeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.HeaderRowRange.OffsetRangeWithRowOffsetWithColumnOffset
{
    [Proxy(typeof(OffsetRangeWithRowOffsetWithColumnOffsetRequestBuilder), true)]
    public partial interface IOffsetRangeWithRowOffsetWithColumnOffsetRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.HeaderRowRange.ResizedRangeWithDeltaRowsWithDeltaColumns
{
    [Proxy(typeof(ResizedRangeWithDeltaRowsWithDeltaColumnsRequestBuilder), true)]
    public partial interface IResizedRangeWithDeltaRowsWithDeltaColumnsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.HeaderRowRange.RowsAbove
{
    [Proxy(typeof(RowsAboveRequestBuilder), true)]
    public partial interface IRowsAboveRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.HeaderRowRange.RowsAboveWithCount
{
    [Proxy(typeof(RowsAboveWithCountRequestBuilder), true)]
    public partial interface IRowsAboveWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.HeaderRowRange.RowsBelow
{
    [Proxy(typeof(RowsBelowRequestBuilder), true)]
    public partial interface IRowsBelowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.HeaderRowRange.RowsBelowWithCount
{
    [Proxy(typeof(RowsBelowWithCountRequestBuilder), true)]
    public partial interface IRowsBelowWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.HeaderRowRange.RowWithRow
{
    [Proxy(typeof(RowWithRowRequestBuilder), true)]
    public partial interface IRowWithRowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.HeaderRowRange.Sort
{
    [Proxy(typeof(SortRequestBuilder), true)]
    public partial interface ISortRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.HeaderRowRange.Unmerge
{
    [Proxy(typeof(UnmergeRequestBuilder), true)]
    public partial interface IUnmergeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.HeaderRowRange.UsedRange
{
    [Proxy(typeof(UsedRangeRequestBuilder), true)]
    public partial interface IUsedRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.HeaderRowRange.UsedRangeWithValuesOnly
{
    [Proxy(typeof(UsedRangeWithValuesOnlyRequestBuilder), true)]
    public partial interface IUsedRangeWithValuesOnlyRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.HeaderRowRange.VisibleView
{
    [Proxy(typeof(VisibleViewRequestBuilder), true)]
    public partial interface IVisibleViewRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.HeaderRowRange.Worksheet
{
    [Proxy(typeof(WorksheetRequestBuilder), true)]
    public partial interface IWorksheetRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.RangeNamespace
{
    [Proxy(typeof(RangeRequestBuilder), true)]
    public partial interface IRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.RangeNamespace.BoundingRectWithAnotherRange
{
    [Proxy(typeof(BoundingRectWithAnotherRangeRequestBuilder), true)]
    public partial interface IBoundingRectWithAnotherRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.RangeNamespace.CellWithRowWithColumn
{
    [Proxy(typeof(CellWithRowWithColumnRequestBuilder), true)]
    public partial interface ICellWithRowWithColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.RangeNamespace.Clear
{
    [Proxy(typeof(ClearRequestBuilder), true)]
    public partial interface IClearRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.RangeNamespace.ColumnsAfter
{
    [Proxy(typeof(ColumnsAfterRequestBuilder), true)]
    public partial interface IColumnsAfterRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.RangeNamespace.ColumnsAfterWithCount
{
    [Proxy(typeof(ColumnsAfterWithCountRequestBuilder), true)]
    public partial interface IColumnsAfterWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.RangeNamespace.ColumnsBefore
{
    [Proxy(typeof(ColumnsBeforeRequestBuilder), true)]
    public partial interface IColumnsBeforeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.RangeNamespace.ColumnsBeforeWithCount
{
    [Proxy(typeof(ColumnsBeforeWithCountRequestBuilder), true)]
    public partial interface IColumnsBeforeWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.RangeNamespace.ColumnWithColumn
{
    [Proxy(typeof(ColumnWithColumnRequestBuilder), true)]
    public partial interface IColumnWithColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.RangeNamespace.Delete
{
    [Proxy(typeof(DeleteRequestBuilder), true)]
    public partial interface IDeleteRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.RangeNamespace.EntireColumn
{
    [Proxy(typeof(EntireColumnRequestBuilder), true)]
    public partial interface IEntireColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.RangeNamespace.EntireRow
{
    [Proxy(typeof(EntireRowRequestBuilder), true)]
    public partial interface IEntireRowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.RangeNamespace.Format
{
    [Proxy(typeof(FormatRequestBuilder), true)]
    public partial interface IFormatRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.RangeNamespace.Insert
{
    [Proxy(typeof(InsertRequestBuilder), true)]
    public partial interface IInsertRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.RangeNamespace.IntersectionWithAnotherRange
{
    [Proxy(typeof(IntersectionWithAnotherRangeRequestBuilder), true)]
    public partial interface IIntersectionWithAnotherRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.RangeNamespace.LastCell
{
    [Proxy(typeof(LastCellRequestBuilder), true)]
    public partial interface ILastCellRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.RangeNamespace.LastColumn
{
    [Proxy(typeof(LastColumnRequestBuilder), true)]
    public partial interface ILastColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.RangeNamespace.LastRow
{
    [Proxy(typeof(LastRowRequestBuilder), true)]
    public partial interface ILastRowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.RangeNamespace.Merge
{
    [Proxy(typeof(MergeRequestBuilder), true)]
    public partial interface IMergeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.RangeNamespace.OffsetRangeWithRowOffsetWithColumnOffset
{
    [Proxy(typeof(OffsetRangeWithRowOffsetWithColumnOffsetRequestBuilder), true)]
    public partial interface IOffsetRangeWithRowOffsetWithColumnOffsetRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.RangeNamespace.ResizedRangeWithDeltaRowsWithDeltaColumns
{
    [Proxy(typeof(ResizedRangeWithDeltaRowsWithDeltaColumnsRequestBuilder), true)]
    public partial interface IResizedRangeWithDeltaRowsWithDeltaColumnsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.RangeNamespace.RowsAbove
{
    [Proxy(typeof(RowsAboveRequestBuilder), true)]
    public partial interface IRowsAboveRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.RangeNamespace.RowsAboveWithCount
{
    [Proxy(typeof(RowsAboveWithCountRequestBuilder), true)]
    public partial interface IRowsAboveWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.RangeNamespace.RowsBelow
{
    [Proxy(typeof(RowsBelowRequestBuilder), true)]
    public partial interface IRowsBelowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.RangeNamespace.RowsBelowWithCount
{
    [Proxy(typeof(RowsBelowWithCountRequestBuilder), true)]
    public partial interface IRowsBelowWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.RangeNamespace.RowWithRow
{
    [Proxy(typeof(RowWithRowRequestBuilder), true)]
    public partial interface IRowWithRowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.RangeNamespace.Sort
{
    [Proxy(typeof(SortRequestBuilder), true)]
    public partial interface ISortRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.RangeNamespace.Unmerge
{
    [Proxy(typeof(UnmergeRequestBuilder), true)]
    public partial interface IUnmergeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.RangeNamespace.UsedRange
{
    [Proxy(typeof(UsedRangeRequestBuilder), true)]
    public partial interface IUsedRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.RangeNamespace.UsedRangeWithValuesOnly
{
    [Proxy(typeof(UsedRangeWithValuesOnlyRequestBuilder), true)]
    public partial interface IUsedRangeWithValuesOnlyRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.RangeNamespace.VisibleView
{
    [Proxy(typeof(VisibleViewRequestBuilder), true)]
    public partial interface IVisibleViewRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.RangeNamespace.Worksheet
{
    [Proxy(typeof(WorksheetRequestBuilder), true)]
    public partial interface IWorksheetRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.ReapplyFilters
{
    [Proxy(typeof(ReapplyFiltersRequestBuilder), true)]
    public partial interface IReapplyFiltersRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Rows
{
    [Proxy(typeof(RowsRequestBuilder), true)]
    public partial interface IRowsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Rows.Add
{
    [Proxy(typeof(AddRequestBuilder), true)]
    public partial interface IAddRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Rows.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Rows.Item
{
    [Proxy(typeof(WorkbookTableRowItemRequestBuilder), true)]
    public partial interface IWorkbookTableRowItemRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Rows.Item.RangeNamespace
{
    [Proxy(typeof(RangeRequestBuilder), true)]
    public partial interface IRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Rows.Item.RangeNamespace.BoundingRectWithAnotherRange
{
    [Proxy(typeof(BoundingRectWithAnotherRangeRequestBuilder), true)]
    public partial interface IBoundingRectWithAnotherRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Rows.Item.RangeNamespace.CellWithRowWithColumn
{
    [Proxy(typeof(CellWithRowWithColumnRequestBuilder), true)]
    public partial interface ICellWithRowWithColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Rows.Item.RangeNamespace.Clear
{
    [Proxy(typeof(ClearRequestBuilder), true)]
    public partial interface IClearRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Rows.Item.RangeNamespace.ColumnsAfter
{
    [Proxy(typeof(ColumnsAfterRequestBuilder), true)]
    public partial interface IColumnsAfterRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Rows.Item.RangeNamespace.ColumnsAfterWithCount
{
    [Proxy(typeof(ColumnsAfterWithCountRequestBuilder), true)]
    public partial interface IColumnsAfterWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Rows.Item.RangeNamespace.ColumnsBefore
{
    [Proxy(typeof(ColumnsBeforeRequestBuilder), true)]
    public partial interface IColumnsBeforeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Rows.Item.RangeNamespace.ColumnsBeforeWithCount
{
    [Proxy(typeof(ColumnsBeforeWithCountRequestBuilder), true)]
    public partial interface IColumnsBeforeWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Rows.Item.RangeNamespace.ColumnWithColumn
{
    [Proxy(typeof(ColumnWithColumnRequestBuilder), true)]
    public partial interface IColumnWithColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Rows.Item.RangeNamespace.Delete
{
    [Proxy(typeof(DeleteRequestBuilder), true)]
    public partial interface IDeleteRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Rows.Item.RangeNamespace.EntireColumn
{
    [Proxy(typeof(EntireColumnRequestBuilder), true)]
    public partial interface IEntireColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Rows.Item.RangeNamespace.EntireRow
{
    [Proxy(typeof(EntireRowRequestBuilder), true)]
    public partial interface IEntireRowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Rows.Item.RangeNamespace.Format
{
    [Proxy(typeof(FormatRequestBuilder), true)]
    public partial interface IFormatRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Rows.Item.RangeNamespace.Insert
{
    [Proxy(typeof(InsertRequestBuilder), true)]
    public partial interface IInsertRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Rows.Item.RangeNamespace.IntersectionWithAnotherRange
{
    [Proxy(typeof(IntersectionWithAnotherRangeRequestBuilder), true)]
    public partial interface IIntersectionWithAnotherRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Rows.Item.RangeNamespace.LastCell
{
    [Proxy(typeof(LastCellRequestBuilder), true)]
    public partial interface ILastCellRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Rows.Item.RangeNamespace.LastColumn
{
    [Proxy(typeof(LastColumnRequestBuilder), true)]
    public partial interface ILastColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Rows.Item.RangeNamespace.LastRow
{
    [Proxy(typeof(LastRowRequestBuilder), true)]
    public partial interface ILastRowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Rows.Item.RangeNamespace.Merge
{
    [Proxy(typeof(MergeRequestBuilder), true)]
    public partial interface IMergeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Rows.Item.RangeNamespace.OffsetRangeWithRowOffsetWithColumnOffset
{
    [Proxy(typeof(OffsetRangeWithRowOffsetWithColumnOffsetRequestBuilder), true)]
    public partial interface IOffsetRangeWithRowOffsetWithColumnOffsetRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Rows.Item.RangeNamespace.ResizedRangeWithDeltaRowsWithDeltaColumns
{
    [Proxy(typeof(ResizedRangeWithDeltaRowsWithDeltaColumnsRequestBuilder), true)]
    public partial interface IResizedRangeWithDeltaRowsWithDeltaColumnsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Rows.Item.RangeNamespace.RowsAbove
{
    [Proxy(typeof(RowsAboveRequestBuilder), true)]
    public partial interface IRowsAboveRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Rows.Item.RangeNamespace.RowsAboveWithCount
{
    [Proxy(typeof(RowsAboveWithCountRequestBuilder), true)]
    public partial interface IRowsAboveWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Rows.Item.RangeNamespace.RowsBelow
{
    [Proxy(typeof(RowsBelowRequestBuilder), true)]
    public partial interface IRowsBelowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Rows.Item.RangeNamespace.RowsBelowWithCount
{
    [Proxy(typeof(RowsBelowWithCountRequestBuilder), true)]
    public partial interface IRowsBelowWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Rows.Item.RangeNamespace.RowWithRow
{
    [Proxy(typeof(RowWithRowRequestBuilder), true)]
    public partial interface IRowWithRowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Rows.Item.RangeNamespace.Sort
{
    [Proxy(typeof(SortRequestBuilder), true)]
    public partial interface ISortRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Rows.Item.RangeNamespace.Unmerge
{
    [Proxy(typeof(UnmergeRequestBuilder), true)]
    public partial interface IUnmergeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Rows.Item.RangeNamespace.UsedRange
{
    [Proxy(typeof(UsedRangeRequestBuilder), true)]
    public partial interface IUsedRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Rows.Item.RangeNamespace.UsedRangeWithValuesOnly
{
    [Proxy(typeof(UsedRangeWithValuesOnlyRequestBuilder), true)]
    public partial interface IUsedRangeWithValuesOnlyRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Rows.Item.RangeNamespace.VisibleView
{
    [Proxy(typeof(VisibleViewRequestBuilder), true)]
    public partial interface IVisibleViewRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Rows.Item.RangeNamespace.Worksheet
{
    [Proxy(typeof(WorksheetRequestBuilder), true)]
    public partial interface IWorksheetRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Rows.ItemAtWithIndex
{
    [Proxy(typeof(ItemAtWithIndexRequestBuilder), true)]
    public partial interface IItemAtWithIndexRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Rows.ItemAtWithIndex.RangeNamespace
{
    [Proxy(typeof(RangeRequestBuilder), true)]
    public partial interface IRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Sort
{
    [Proxy(typeof(SortRequestBuilder), true)]
    public partial interface ISortRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Sort.Apply
{
    [Proxy(typeof(ApplyRequestBuilder), true)]
    public partial interface IApplyRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Sort.Clear
{
    [Proxy(typeof(ClearRequestBuilder), true)]
    public partial interface IClearRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Sort.Reapply
{
    [Proxy(typeof(ReapplyRequestBuilder), true)]
    public partial interface IReapplyRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.TotalRowRange
{
    [Proxy(typeof(TotalRowRangeRequestBuilder), true)]
    public partial interface ITotalRowRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.TotalRowRange.BoundingRectWithAnotherRange
{
    [Proxy(typeof(BoundingRectWithAnotherRangeRequestBuilder), true)]
    public partial interface IBoundingRectWithAnotherRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.TotalRowRange.CellWithRowWithColumn
{
    [Proxy(typeof(CellWithRowWithColumnRequestBuilder), true)]
    public partial interface ICellWithRowWithColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.TotalRowRange.Clear
{
    [Proxy(typeof(ClearRequestBuilder), true)]
    public partial interface IClearRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.TotalRowRange.ColumnsAfter
{
    [Proxy(typeof(ColumnsAfterRequestBuilder), true)]
    public partial interface IColumnsAfterRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.TotalRowRange.ColumnsAfterWithCount
{
    [Proxy(typeof(ColumnsAfterWithCountRequestBuilder), true)]
    public partial interface IColumnsAfterWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.TotalRowRange.ColumnsBefore
{
    [Proxy(typeof(ColumnsBeforeRequestBuilder), true)]
    public partial interface IColumnsBeforeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.TotalRowRange.ColumnsBeforeWithCount
{
    [Proxy(typeof(ColumnsBeforeWithCountRequestBuilder), true)]
    public partial interface IColumnsBeforeWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.TotalRowRange.ColumnWithColumn
{
    [Proxy(typeof(ColumnWithColumnRequestBuilder), true)]
    public partial interface IColumnWithColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.TotalRowRange.Delete
{
    [Proxy(typeof(DeleteRequestBuilder), true)]
    public partial interface IDeleteRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.TotalRowRange.EntireColumn
{
    [Proxy(typeof(EntireColumnRequestBuilder), true)]
    public partial interface IEntireColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.TotalRowRange.EntireRow
{
    [Proxy(typeof(EntireRowRequestBuilder), true)]
    public partial interface IEntireRowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.TotalRowRange.Format
{
    [Proxy(typeof(FormatRequestBuilder), true)]
    public partial interface IFormatRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.TotalRowRange.Insert
{
    [Proxy(typeof(InsertRequestBuilder), true)]
    public partial interface IInsertRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.TotalRowRange.IntersectionWithAnotherRange
{
    [Proxy(typeof(IntersectionWithAnotherRangeRequestBuilder), true)]
    public partial interface IIntersectionWithAnotherRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.TotalRowRange.LastCell
{
    [Proxy(typeof(LastCellRequestBuilder), true)]
    public partial interface ILastCellRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.TotalRowRange.LastColumn
{
    [Proxy(typeof(LastColumnRequestBuilder), true)]
    public partial interface ILastColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.TotalRowRange.LastRow
{
    [Proxy(typeof(LastRowRequestBuilder), true)]
    public partial interface ILastRowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.TotalRowRange.Merge
{
    [Proxy(typeof(MergeRequestBuilder), true)]
    public partial interface IMergeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.TotalRowRange.OffsetRangeWithRowOffsetWithColumnOffset
{
    [Proxy(typeof(OffsetRangeWithRowOffsetWithColumnOffsetRequestBuilder), true)]
    public partial interface IOffsetRangeWithRowOffsetWithColumnOffsetRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.TotalRowRange.ResizedRangeWithDeltaRowsWithDeltaColumns
{
    [Proxy(typeof(ResizedRangeWithDeltaRowsWithDeltaColumnsRequestBuilder), true)]
    public partial interface IResizedRangeWithDeltaRowsWithDeltaColumnsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.TotalRowRange.RowsAbove
{
    [Proxy(typeof(RowsAboveRequestBuilder), true)]
    public partial interface IRowsAboveRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.TotalRowRange.RowsAboveWithCount
{
    [Proxy(typeof(RowsAboveWithCountRequestBuilder), true)]
    public partial interface IRowsAboveWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.TotalRowRange.RowsBelow
{
    [Proxy(typeof(RowsBelowRequestBuilder), true)]
    public partial interface IRowsBelowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.TotalRowRange.RowsBelowWithCount
{
    [Proxy(typeof(RowsBelowWithCountRequestBuilder), true)]
    public partial interface IRowsBelowWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.TotalRowRange.RowWithRow
{
    [Proxy(typeof(RowWithRowRequestBuilder), true)]
    public partial interface IRowWithRowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.TotalRowRange.Sort
{
    [Proxy(typeof(SortRequestBuilder), true)]
    public partial interface ISortRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.TotalRowRange.Unmerge
{
    [Proxy(typeof(UnmergeRequestBuilder), true)]
    public partial interface IUnmergeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.TotalRowRange.UsedRange
{
    [Proxy(typeof(UsedRangeRequestBuilder), true)]
    public partial interface IUsedRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.TotalRowRange.UsedRangeWithValuesOnly
{
    [Proxy(typeof(UsedRangeWithValuesOnlyRequestBuilder), true)]
    public partial interface IUsedRangeWithValuesOnlyRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.TotalRowRange.VisibleView
{
    [Proxy(typeof(VisibleViewRequestBuilder), true)]
    public partial interface IVisibleViewRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.TotalRowRange.Worksheet
{
    [Proxy(typeof(WorksheetRequestBuilder), true)]
    public partial interface IWorksheetRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.Item.Worksheet
{
    [Proxy(typeof(WorksheetRequestBuilder), true)]
    public partial interface IWorksheetRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.ItemAtWithIndex
{
    [Proxy(typeof(ItemAtWithIndexRequestBuilder), true)]
    public partial interface IItemAtWithIndexRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.ItemAtWithIndex.ClearFilters
{
    [Proxy(typeof(ClearFiltersRequestBuilder), true)]
    public partial interface IClearFiltersRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.ItemAtWithIndex.Columns
{
    [Proxy(typeof(ColumnsRequestBuilder), true)]
    public partial interface IColumnsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.ItemAtWithIndex.ConvertToRange
{
    [Proxy(typeof(ConvertToRangeRequestBuilder), true)]
    public partial interface IConvertToRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.ItemAtWithIndex.DataBodyRange
{
    [Proxy(typeof(DataBodyRangeRequestBuilder), true)]
    public partial interface IDataBodyRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.ItemAtWithIndex.HeaderRowRange
{
    [Proxy(typeof(HeaderRowRangeRequestBuilder), true)]
    public partial interface IHeaderRowRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.ItemAtWithIndex.RangeNamespace
{
    [Proxy(typeof(RangeRequestBuilder), true)]
    public partial interface IRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.ItemAtWithIndex.ReapplyFilters
{
    [Proxy(typeof(ReapplyFiltersRequestBuilder), true)]
    public partial interface IReapplyFiltersRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.ItemAtWithIndex.Rows
{
    [Proxy(typeof(RowsRequestBuilder), true)]
    public partial interface IRowsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.ItemAtWithIndex.Sort
{
    [Proxy(typeof(SortRequestBuilder), true)]
    public partial interface ISortRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.ItemAtWithIndex.TotalRowRange
{
    [Proxy(typeof(TotalRowRangeRequestBuilder), true)]
    public partial interface ITotalRowRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Tables.ItemAtWithIndex.Worksheet
{
    [Proxy(typeof(WorksheetRequestBuilder), true)]
    public partial interface IWorksheetRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets
{
    [Proxy(typeof(WorksheetsRequestBuilder), true)]
    public partial interface IWorksheetsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Add
{
    [Proxy(typeof(AddRequestBuilder), true)]
    public partial interface IAddRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item
{
    [Proxy(typeof(WorkbookWorksheetItemRequestBuilder), true)]
    public partial interface IWorkbookWorksheetItemRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.CellWithRowWithColumn
{
    [Proxy(typeof(CellWithRowWithColumnRequestBuilder), true)]
    public partial interface ICellWithRowWithColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.CellWithRowWithColumn.BoundingRectWithAnotherRange
{
    [Proxy(typeof(BoundingRectWithAnotherRangeRequestBuilder), true)]
    public partial interface IBoundingRectWithAnotherRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.CellWithRowWithColumn.Clear
{
    [Proxy(typeof(ClearRequestBuilder), true)]
    public partial interface IClearRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.CellWithRowWithColumn.ColumnsAfter
{
    [Proxy(typeof(ColumnsAfterRequestBuilder), true)]
    public partial interface IColumnsAfterRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.CellWithRowWithColumn.ColumnsAfterWithCount
{
    [Proxy(typeof(ColumnsAfterWithCountRequestBuilder), true)]
    public partial interface IColumnsAfterWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.CellWithRowWithColumn.ColumnsBefore
{
    [Proxy(typeof(ColumnsBeforeRequestBuilder), true)]
    public partial interface IColumnsBeforeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.CellWithRowWithColumn.ColumnsBeforeWithCount
{
    [Proxy(typeof(ColumnsBeforeWithCountRequestBuilder), true)]
    public partial interface IColumnsBeforeWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.CellWithRowWithColumn.ColumnWithColumn1
{
    [Proxy(typeof(ColumnWithColumn1RequestBuilder), true)]
    public partial interface IColumnWithColumn1RequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.CellWithRowWithColumn.Delete
{
    [Proxy(typeof(DeleteRequestBuilder), true)]
    public partial interface IDeleteRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.CellWithRowWithColumn.EntireColumn
{
    [Proxy(typeof(EntireColumnRequestBuilder), true)]
    public partial interface IEntireColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.CellWithRowWithColumn.EntireRow
{
    [Proxy(typeof(EntireRowRequestBuilder), true)]
    public partial interface IEntireRowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.CellWithRowWithColumn.Format
{
    [Proxy(typeof(FormatRequestBuilder), true)]
    public partial interface IFormatRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.CellWithRowWithColumn.Insert
{
    [Proxy(typeof(InsertRequestBuilder), true)]
    public partial interface IInsertRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.CellWithRowWithColumn.IntersectionWithAnotherRange
{
    [Proxy(typeof(IntersectionWithAnotherRangeRequestBuilder), true)]
    public partial interface IIntersectionWithAnotherRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.CellWithRowWithColumn.LastCell
{
    [Proxy(typeof(LastCellRequestBuilder), true)]
    public partial interface ILastCellRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.CellWithRowWithColumn.LastColumn
{
    [Proxy(typeof(LastColumnRequestBuilder), true)]
    public partial interface ILastColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.CellWithRowWithColumn.LastRow
{
    [Proxy(typeof(LastRowRequestBuilder), true)]
    public partial interface ILastRowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.CellWithRowWithColumn.Merge
{
    [Proxy(typeof(MergeRequestBuilder), true)]
    public partial interface IMergeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.CellWithRowWithColumn.OffsetRangeWithRowOffsetWithColumnOffset
{
    [Proxy(typeof(OffsetRangeWithRowOffsetWithColumnOffsetRequestBuilder), true)]
    public partial interface IOffsetRangeWithRowOffsetWithColumnOffsetRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.CellWithRowWithColumn.ResizedRangeWithDeltaRowsWithDeltaColumns
{
    [Proxy(typeof(ResizedRangeWithDeltaRowsWithDeltaColumnsRequestBuilder), true)]
    public partial interface IResizedRangeWithDeltaRowsWithDeltaColumnsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.CellWithRowWithColumn.RowsAbove
{
    [Proxy(typeof(RowsAboveRequestBuilder), true)]
    public partial interface IRowsAboveRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.CellWithRowWithColumn.RowsAboveWithCount
{
    [Proxy(typeof(RowsAboveWithCountRequestBuilder), true)]
    public partial interface IRowsAboveWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.CellWithRowWithColumn.RowsBelow
{
    [Proxy(typeof(RowsBelowRequestBuilder), true)]
    public partial interface IRowsBelowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.CellWithRowWithColumn.RowsBelowWithCount
{
    [Proxy(typeof(RowsBelowWithCountRequestBuilder), true)]
    public partial interface IRowsBelowWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.CellWithRowWithColumn.RowWithRow1
{
    [Proxy(typeof(RowWithRow1RequestBuilder), true)]
    public partial interface IRowWithRow1RequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.CellWithRowWithColumn.Sort
{
    [Proxy(typeof(SortRequestBuilder), true)]
    public partial interface ISortRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.CellWithRowWithColumn.Unmerge
{
    [Proxy(typeof(UnmergeRequestBuilder), true)]
    public partial interface IUnmergeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.CellWithRowWithColumn.UsedRange
{
    [Proxy(typeof(UsedRangeRequestBuilder), true)]
    public partial interface IUsedRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.CellWithRowWithColumn.UsedRangeWithValuesOnly
{
    [Proxy(typeof(UsedRangeWithValuesOnlyRequestBuilder), true)]
    public partial interface IUsedRangeWithValuesOnlyRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.CellWithRowWithColumn.VisibleView
{
    [Proxy(typeof(VisibleViewRequestBuilder), true)]
    public partial interface IVisibleViewRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.CellWithRowWithColumn.Worksheet
{
    [Proxy(typeof(WorksheetRequestBuilder), true)]
    public partial interface IWorksheetRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts
{
    [Proxy(typeof(ChartsRequestBuilder), true)]
    public partial interface IChartsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Add
{
    [Proxy(typeof(AddRequestBuilder), true)]
    public partial interface IAddRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item
{
    [Proxy(typeof(WorkbookChartItemRequestBuilder), true)]
    public partial interface IWorkbookChartItemRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Axes
{
    [Proxy(typeof(AxesRequestBuilder), true)]
    public partial interface IAxesRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Axes.CategoryAxis
{
    [Proxy(typeof(CategoryAxisRequestBuilder), true)]
    public partial interface ICategoryAxisRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Axes.CategoryAxis.Format
{
    [Proxy(typeof(FormatRequestBuilder), true)]
    public partial interface IFormatRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Axes.CategoryAxis.Format.Font
{
    [Proxy(typeof(FontRequestBuilder), true)]
    public partial interface IFontRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Axes.CategoryAxis.Format.Line
{
    [Proxy(typeof(LineRequestBuilder), true)]
    public partial interface ILineRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Axes.CategoryAxis.Format.Line.Clear
{
    [Proxy(typeof(ClearRequestBuilder), true)]
    public partial interface IClearRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Axes.CategoryAxis.MajorGridlines
{
    [Proxy(typeof(MajorGridlinesRequestBuilder), true)]
    public partial interface IMajorGridlinesRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Axes.CategoryAxis.MajorGridlines.Format
{
    [Proxy(typeof(FormatRequestBuilder), true)]
    public partial interface IFormatRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Axes.CategoryAxis.MajorGridlines.Format.Line
{
    [Proxy(typeof(LineRequestBuilder), true)]
    public partial interface ILineRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Axes.CategoryAxis.MajorGridlines.Format.Line.Clear
{
    [Proxy(typeof(ClearRequestBuilder), true)]
    public partial interface IClearRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Axes.CategoryAxis.MinorGridlines
{
    [Proxy(typeof(MinorGridlinesRequestBuilder), true)]
    public partial interface IMinorGridlinesRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Axes.CategoryAxis.MinorGridlines.Format
{
    [Proxy(typeof(FormatRequestBuilder), true)]
    public partial interface IFormatRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Axes.CategoryAxis.MinorGridlines.Format.Line
{
    [Proxy(typeof(LineRequestBuilder), true)]
    public partial interface ILineRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Axes.CategoryAxis.MinorGridlines.Format.Line.Clear
{
    [Proxy(typeof(ClearRequestBuilder), true)]
    public partial interface IClearRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Axes.CategoryAxis.Title
{
    [Proxy(typeof(TitleRequestBuilder), true)]
    public partial interface ITitleRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Axes.CategoryAxis.Title.Format
{
    [Proxy(typeof(FormatRequestBuilder), true)]
    public partial interface IFormatRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Axes.CategoryAxis.Title.Format.Font
{
    [Proxy(typeof(FontRequestBuilder), true)]
    public partial interface IFontRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Axes.SeriesAxis
{
    [Proxy(typeof(SeriesAxisRequestBuilder), true)]
    public partial interface ISeriesAxisRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Axes.SeriesAxis.Format
{
    [Proxy(typeof(FormatRequestBuilder), true)]
    public partial interface IFormatRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Axes.SeriesAxis.Format.Font
{
    [Proxy(typeof(FontRequestBuilder), true)]
    public partial interface IFontRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Axes.SeriesAxis.Format.Line
{
    [Proxy(typeof(LineRequestBuilder), true)]
    public partial interface ILineRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Axes.SeriesAxis.Format.Line.Clear
{
    [Proxy(typeof(ClearRequestBuilder), true)]
    public partial interface IClearRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Axes.SeriesAxis.MajorGridlines
{
    [Proxy(typeof(MajorGridlinesRequestBuilder), true)]
    public partial interface IMajorGridlinesRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Axes.SeriesAxis.MajorGridlines.Format
{
    [Proxy(typeof(FormatRequestBuilder), true)]
    public partial interface IFormatRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Axes.SeriesAxis.MajorGridlines.Format.Line
{
    [Proxy(typeof(LineRequestBuilder), true)]
    public partial interface ILineRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Axes.SeriesAxis.MajorGridlines.Format.Line.Clear
{
    [Proxy(typeof(ClearRequestBuilder), true)]
    public partial interface IClearRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Axes.SeriesAxis.MinorGridlines
{
    [Proxy(typeof(MinorGridlinesRequestBuilder), true)]
    public partial interface IMinorGridlinesRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Axes.SeriesAxis.MinorGridlines.Format
{
    [Proxy(typeof(FormatRequestBuilder), true)]
    public partial interface IFormatRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Axes.SeriesAxis.MinorGridlines.Format.Line
{
    [Proxy(typeof(LineRequestBuilder), true)]
    public partial interface ILineRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Axes.SeriesAxis.MinorGridlines.Format.Line.Clear
{
    [Proxy(typeof(ClearRequestBuilder), true)]
    public partial interface IClearRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Axes.SeriesAxis.Title
{
    [Proxy(typeof(TitleRequestBuilder), true)]
    public partial interface ITitleRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Axes.SeriesAxis.Title.Format
{
    [Proxy(typeof(FormatRequestBuilder), true)]
    public partial interface IFormatRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Axes.SeriesAxis.Title.Format.Font
{
    [Proxy(typeof(FontRequestBuilder), true)]
    public partial interface IFontRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Axes.ValueAxis
{
    [Proxy(typeof(ValueAxisRequestBuilder), true)]
    public partial interface IValueAxisRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Axes.ValueAxis.Format
{
    [Proxy(typeof(FormatRequestBuilder), true)]
    public partial interface IFormatRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Axes.ValueAxis.Format.Font
{
    [Proxy(typeof(FontRequestBuilder), true)]
    public partial interface IFontRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Axes.ValueAxis.Format.Line
{
    [Proxy(typeof(LineRequestBuilder), true)]
    public partial interface ILineRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Axes.ValueAxis.Format.Line.Clear
{
    [Proxy(typeof(ClearRequestBuilder), true)]
    public partial interface IClearRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Axes.ValueAxis.MajorGridlines
{
    [Proxy(typeof(MajorGridlinesRequestBuilder), true)]
    public partial interface IMajorGridlinesRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Axes.ValueAxis.MajorGridlines.Format
{
    [Proxy(typeof(FormatRequestBuilder), true)]
    public partial interface IFormatRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Axes.ValueAxis.MajorGridlines.Format.Line
{
    [Proxy(typeof(LineRequestBuilder), true)]
    public partial interface ILineRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Axes.ValueAxis.MajorGridlines.Format.Line.Clear
{
    [Proxy(typeof(ClearRequestBuilder), true)]
    public partial interface IClearRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Axes.ValueAxis.MinorGridlines
{
    [Proxy(typeof(MinorGridlinesRequestBuilder), true)]
    public partial interface IMinorGridlinesRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Axes.ValueAxis.MinorGridlines.Format
{
    [Proxy(typeof(FormatRequestBuilder), true)]
    public partial interface IFormatRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Axes.ValueAxis.MinorGridlines.Format.Line
{
    [Proxy(typeof(LineRequestBuilder), true)]
    public partial interface ILineRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Axes.ValueAxis.MinorGridlines.Format.Line.Clear
{
    [Proxy(typeof(ClearRequestBuilder), true)]
    public partial interface IClearRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Axes.ValueAxis.Title
{
    [Proxy(typeof(TitleRequestBuilder), true)]
    public partial interface ITitleRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Axes.ValueAxis.Title.Format
{
    [Proxy(typeof(FormatRequestBuilder), true)]
    public partial interface IFormatRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Axes.ValueAxis.Title.Format.Font
{
    [Proxy(typeof(FontRequestBuilder), true)]
    public partial interface IFontRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.DataLabels
{
    [Proxy(typeof(DataLabelsRequestBuilder), true)]
    public partial interface IDataLabelsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.DataLabels.Format
{
    [Proxy(typeof(FormatRequestBuilder), true)]
    public partial interface IFormatRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.DataLabels.Format.Fill
{
    [Proxy(typeof(FillRequestBuilder), true)]
    public partial interface IFillRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.DataLabels.Format.Fill.Clear
{
    [Proxy(typeof(ClearRequestBuilder), true)]
    public partial interface IClearRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.DataLabels.Format.Fill.SetSolidColor
{
    [Proxy(typeof(SetSolidColorRequestBuilder), true)]
    public partial interface ISetSolidColorRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.DataLabels.Format.Font
{
    [Proxy(typeof(FontRequestBuilder), true)]
    public partial interface IFontRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Format
{
    [Proxy(typeof(FormatRequestBuilder), true)]
    public partial interface IFormatRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Format.Fill
{
    [Proxy(typeof(FillRequestBuilder), true)]
    public partial interface IFillRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Format.Fill.Clear
{
    [Proxy(typeof(ClearRequestBuilder), true)]
    public partial interface IClearRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Format.Fill.SetSolidColor
{
    [Proxy(typeof(SetSolidColorRequestBuilder), true)]
    public partial interface ISetSolidColorRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Format.Font
{
    [Proxy(typeof(FontRequestBuilder), true)]
    public partial interface IFontRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Image
{
    [Proxy(typeof(ImageRequestBuilder), true)]
    public partial interface IImageRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.ImageWithWidth
{
    [Proxy(typeof(ImageWithWidthRequestBuilder), true)]
    public partial interface IImageWithWidthRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.ImageWithWidthWithHeight
{
    [Proxy(typeof(ImageWithWidthWithHeightRequestBuilder), true)]
    public partial interface IImageWithWidthWithHeightRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.ImageWithWidthWithHeightWithFittingMode
{
    [Proxy(typeof(ImageWithWidthWithHeightWithFittingModeRequestBuilder), true)]
    public partial interface IImageWithWidthWithHeightWithFittingModeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Legend
{
    [Proxy(typeof(LegendRequestBuilder), true)]
    public partial interface ILegendRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Legend.Format
{
    [Proxy(typeof(FormatRequestBuilder), true)]
    public partial interface IFormatRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Legend.Format.Fill
{
    [Proxy(typeof(FillRequestBuilder), true)]
    public partial interface IFillRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Legend.Format.Fill.Clear
{
    [Proxy(typeof(ClearRequestBuilder), true)]
    public partial interface IClearRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Legend.Format.Fill.SetSolidColor
{
    [Proxy(typeof(SetSolidColorRequestBuilder), true)]
    public partial interface ISetSolidColorRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Legend.Format.Font
{
    [Proxy(typeof(FontRequestBuilder), true)]
    public partial interface IFontRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Series
{
    [Proxy(typeof(SeriesRequestBuilder), true)]
    public partial interface ISeriesRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Series.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Series.Item
{
    [Proxy(typeof(WorkbookChartSeriesItemRequestBuilder), true)]
    public partial interface IWorkbookChartSeriesItemRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Series.Item.Format
{
    [Proxy(typeof(FormatRequestBuilder), true)]
    public partial interface IFormatRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Series.Item.Format.Fill
{
    [Proxy(typeof(FillRequestBuilder), true)]
    public partial interface IFillRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Series.Item.Format.Fill.Clear
{
    [Proxy(typeof(ClearRequestBuilder), true)]
    public partial interface IClearRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Series.Item.Format.Fill.SetSolidColor
{
    [Proxy(typeof(SetSolidColorRequestBuilder), true)]
    public partial interface ISetSolidColorRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Series.Item.Format.Line
{
    [Proxy(typeof(LineRequestBuilder), true)]
    public partial interface ILineRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Series.Item.Format.Line.Clear
{
    [Proxy(typeof(ClearRequestBuilder), true)]
    public partial interface IClearRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Series.Item.Points
{
    [Proxy(typeof(PointsRequestBuilder), true)]
    public partial interface IPointsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Series.Item.Points.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Series.Item.Points.Item
{
    [Proxy(typeof(WorkbookChartPointItemRequestBuilder), true)]
    public partial interface IWorkbookChartPointItemRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Series.Item.Points.Item.Format
{
    [Proxy(typeof(FormatRequestBuilder), true)]
    public partial interface IFormatRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Series.Item.Points.Item.Format.Fill
{
    [Proxy(typeof(FillRequestBuilder), true)]
    public partial interface IFillRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Series.Item.Points.Item.Format.Fill.Clear
{
    [Proxy(typeof(ClearRequestBuilder), true)]
    public partial interface IClearRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Series.Item.Points.Item.Format.Fill.SetSolidColor
{
    [Proxy(typeof(SetSolidColorRequestBuilder), true)]
    public partial interface ISetSolidColorRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Series.Item.Points.ItemAtWithIndex
{
    [Proxy(typeof(ItemAtWithIndexRequestBuilder), true)]
    public partial interface IItemAtWithIndexRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Series.Item.Points.ItemAtWithIndex.Format
{
    [Proxy(typeof(FormatRequestBuilder), true)]
    public partial interface IFormatRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Series.ItemAtWithIndex
{
    [Proxy(typeof(ItemAtWithIndexRequestBuilder), true)]
    public partial interface IItemAtWithIndexRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Series.ItemAtWithIndex.Format
{
    [Proxy(typeof(FormatRequestBuilder), true)]
    public partial interface IFormatRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Series.ItemAtWithIndex.Points
{
    [Proxy(typeof(PointsRequestBuilder), true)]
    public partial interface IPointsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.SetData
{
    [Proxy(typeof(SetDataRequestBuilder), true)]
    public partial interface ISetDataRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.SetPosition
{
    [Proxy(typeof(SetPositionRequestBuilder), true)]
    public partial interface ISetPositionRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Title
{
    [Proxy(typeof(TitleRequestBuilder), true)]
    public partial interface ITitleRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Title.Format
{
    [Proxy(typeof(FormatRequestBuilder), true)]
    public partial interface IFormatRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Title.Format.Fill
{
    [Proxy(typeof(FillRequestBuilder), true)]
    public partial interface IFillRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Title.Format.Fill.Clear
{
    [Proxy(typeof(ClearRequestBuilder), true)]
    public partial interface IClearRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Title.Format.Fill.SetSolidColor
{
    [Proxy(typeof(SetSolidColorRequestBuilder), true)]
    public partial interface ISetSolidColorRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Title.Format.Font
{
    [Proxy(typeof(FontRequestBuilder), true)]
    public partial interface IFontRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.Item.Worksheet
{
    [Proxy(typeof(WorksheetRequestBuilder), true)]
    public partial interface IWorksheetRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.ItemAtWithIndex
{
    [Proxy(typeof(ItemAtWithIndexRequestBuilder), true)]
    public partial interface IItemAtWithIndexRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.ItemAtWithIndex.Axes
{
    [Proxy(typeof(AxesRequestBuilder), true)]
    public partial interface IAxesRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.ItemAtWithIndex.DataLabels
{
    [Proxy(typeof(DataLabelsRequestBuilder), true)]
    public partial interface IDataLabelsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.ItemAtWithIndex.Format
{
    [Proxy(typeof(FormatRequestBuilder), true)]
    public partial interface IFormatRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.ItemAtWithIndex.Image
{
    [Proxy(typeof(ImageRequestBuilder), true)]
    public partial interface IImageRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.ItemAtWithIndex.ImageWithWidth
{
    [Proxy(typeof(ImageWithWidthRequestBuilder), true)]
    public partial interface IImageWithWidthRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.ItemAtWithIndex.ImageWithWidthWithHeight
{
    [Proxy(typeof(ImageWithWidthWithHeightRequestBuilder), true)]
    public partial interface IImageWithWidthWithHeightRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.ItemAtWithIndex.ImageWithWidthWithHeightWithFittingMode
{
    [Proxy(typeof(ImageWithWidthWithHeightWithFittingModeRequestBuilder), true)]
    public partial interface IImageWithWidthWithHeightWithFittingModeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.ItemAtWithIndex.Legend
{
    [Proxy(typeof(LegendRequestBuilder), true)]
    public partial interface ILegendRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.ItemAtWithIndex.Series
{
    [Proxy(typeof(SeriesRequestBuilder), true)]
    public partial interface ISeriesRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.ItemAtWithIndex.SetData
{
    [Proxy(typeof(SetDataRequestBuilder), true)]
    public partial interface ISetDataRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.ItemAtWithIndex.SetPosition
{
    [Proxy(typeof(SetPositionRequestBuilder), true)]
    public partial interface ISetPositionRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.ItemAtWithIndex.Title
{
    [Proxy(typeof(TitleRequestBuilder), true)]
    public partial interface ITitleRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.ItemAtWithIndex.Worksheet
{
    [Proxy(typeof(WorksheetRequestBuilder), true)]
    public partial interface IWorksheetRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.ItemWithName
{
    [Proxy(typeof(ItemWithNameRequestBuilder), true)]
    public partial interface IItemWithNameRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.ItemWithName.Axes
{
    [Proxy(typeof(AxesRequestBuilder), true)]
    public partial interface IAxesRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.ItemWithName.DataLabels
{
    [Proxy(typeof(DataLabelsRequestBuilder), true)]
    public partial interface IDataLabelsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.ItemWithName.Format
{
    [Proxy(typeof(FormatRequestBuilder), true)]
    public partial interface IFormatRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.ItemWithName.Image
{
    [Proxy(typeof(ImageRequestBuilder), true)]
    public partial interface IImageRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.ItemWithName.ImageWithWidth
{
    [Proxy(typeof(ImageWithWidthRequestBuilder), true)]
    public partial interface IImageWithWidthRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.ItemWithName.ImageWithWidthWithHeight
{
    [Proxy(typeof(ImageWithWidthWithHeightRequestBuilder), true)]
    public partial interface IImageWithWidthWithHeightRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.ItemWithName.ImageWithWidthWithHeightWithFittingMode
{
    [Proxy(typeof(ImageWithWidthWithHeightWithFittingModeRequestBuilder), true)]
    public partial interface IImageWithWidthWithHeightWithFittingModeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.ItemWithName.Legend
{
    [Proxy(typeof(LegendRequestBuilder), true)]
    public partial interface ILegendRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.ItemWithName.Series
{
    [Proxy(typeof(SeriesRequestBuilder), true)]
    public partial interface ISeriesRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.ItemWithName.SetData
{
    [Proxy(typeof(SetDataRequestBuilder), true)]
    public partial interface ISetDataRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.ItemWithName.SetPosition
{
    [Proxy(typeof(SetPositionRequestBuilder), true)]
    public partial interface ISetPositionRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.ItemWithName.Title
{
    [Proxy(typeof(TitleRequestBuilder), true)]
    public partial interface ITitleRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Charts.ItemWithName.Worksheet
{
    [Proxy(typeof(WorksheetRequestBuilder), true)]
    public partial interface IWorksheetRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Names
{
    [Proxy(typeof(NamesRequestBuilder), true)]
    public partial interface INamesRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Names.Add
{
    [Proxy(typeof(AddRequestBuilder), true)]
    public partial interface IAddRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Names.AddFormulaLocal
{
    [Proxy(typeof(AddFormulaLocalRequestBuilder), true)]
    public partial interface IAddFormulaLocalRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Names.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Names.Item
{
    [Proxy(typeof(WorkbookNamedItemItemRequestBuilder), true)]
    public partial interface IWorkbookNamedItemItemRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Names.Item.RangeNamespace
{
    [Proxy(typeof(RangeRequestBuilder), true)]
    public partial interface IRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Names.Item.RangeNamespace.BoundingRectWithAnotherRange
{
    [Proxy(typeof(BoundingRectWithAnotherRangeRequestBuilder), true)]
    public partial interface IBoundingRectWithAnotherRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Names.Item.RangeNamespace.CellWithRowWithColumn
{
    [Proxy(typeof(CellWithRowWithColumnRequestBuilder), true)]
    public partial interface ICellWithRowWithColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Names.Item.RangeNamespace.Clear
{
    [Proxy(typeof(ClearRequestBuilder), true)]
    public partial interface IClearRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Names.Item.RangeNamespace.ColumnsAfter
{
    [Proxy(typeof(ColumnsAfterRequestBuilder), true)]
    public partial interface IColumnsAfterRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Names.Item.RangeNamespace.ColumnsAfterWithCount
{
    [Proxy(typeof(ColumnsAfterWithCountRequestBuilder), true)]
    public partial interface IColumnsAfterWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Names.Item.RangeNamespace.ColumnsBefore
{
    [Proxy(typeof(ColumnsBeforeRequestBuilder), true)]
    public partial interface IColumnsBeforeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Names.Item.RangeNamespace.ColumnsBeforeWithCount
{
    [Proxy(typeof(ColumnsBeforeWithCountRequestBuilder), true)]
    public partial interface IColumnsBeforeWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Names.Item.RangeNamespace.ColumnWithColumn
{
    [Proxy(typeof(ColumnWithColumnRequestBuilder), true)]
    public partial interface IColumnWithColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Names.Item.RangeNamespace.Delete
{
    [Proxy(typeof(DeleteRequestBuilder), true)]
    public partial interface IDeleteRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Names.Item.RangeNamespace.EntireColumn
{
    [Proxy(typeof(EntireColumnRequestBuilder), true)]
    public partial interface IEntireColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Names.Item.RangeNamespace.EntireRow
{
    [Proxy(typeof(EntireRowRequestBuilder), true)]
    public partial interface IEntireRowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Names.Item.RangeNamespace.Format
{
    [Proxy(typeof(FormatRequestBuilder), true)]
    public partial interface IFormatRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Names.Item.RangeNamespace.Insert
{
    [Proxy(typeof(InsertRequestBuilder), true)]
    public partial interface IInsertRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Names.Item.RangeNamespace.IntersectionWithAnotherRange
{
    [Proxy(typeof(IntersectionWithAnotherRangeRequestBuilder), true)]
    public partial interface IIntersectionWithAnotherRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Names.Item.RangeNamespace.LastCell
{
    [Proxy(typeof(LastCellRequestBuilder), true)]
    public partial interface ILastCellRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Names.Item.RangeNamespace.LastColumn
{
    [Proxy(typeof(LastColumnRequestBuilder), true)]
    public partial interface ILastColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Names.Item.RangeNamespace.LastRow
{
    [Proxy(typeof(LastRowRequestBuilder), true)]
    public partial interface ILastRowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Names.Item.RangeNamespace.Merge
{
    [Proxy(typeof(MergeRequestBuilder), true)]
    public partial interface IMergeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Names.Item.RangeNamespace.OffsetRangeWithRowOffsetWithColumnOffset
{
    [Proxy(typeof(OffsetRangeWithRowOffsetWithColumnOffsetRequestBuilder), true)]
    public partial interface IOffsetRangeWithRowOffsetWithColumnOffsetRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Names.Item.RangeNamespace.ResizedRangeWithDeltaRowsWithDeltaColumns
{
    [Proxy(typeof(ResizedRangeWithDeltaRowsWithDeltaColumnsRequestBuilder), true)]
    public partial interface IResizedRangeWithDeltaRowsWithDeltaColumnsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Names.Item.RangeNamespace.RowsAbove
{
    [Proxy(typeof(RowsAboveRequestBuilder), true)]
    public partial interface IRowsAboveRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Names.Item.RangeNamespace.RowsAboveWithCount
{
    [Proxy(typeof(RowsAboveWithCountRequestBuilder), true)]
    public partial interface IRowsAboveWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Names.Item.RangeNamespace.RowsBelow
{
    [Proxy(typeof(RowsBelowRequestBuilder), true)]
    public partial interface IRowsBelowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Names.Item.RangeNamespace.RowsBelowWithCount
{
    [Proxy(typeof(RowsBelowWithCountRequestBuilder), true)]
    public partial interface IRowsBelowWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Names.Item.RangeNamespace.RowWithRow
{
    [Proxy(typeof(RowWithRowRequestBuilder), true)]
    public partial interface IRowWithRowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Names.Item.RangeNamespace.Sort
{
    [Proxy(typeof(SortRequestBuilder), true)]
    public partial interface ISortRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Names.Item.RangeNamespace.Unmerge
{
    [Proxy(typeof(UnmergeRequestBuilder), true)]
    public partial interface IUnmergeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Names.Item.RangeNamespace.UsedRange
{
    [Proxy(typeof(UsedRangeRequestBuilder), true)]
    public partial interface IUsedRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Names.Item.RangeNamespace.UsedRangeWithValuesOnly
{
    [Proxy(typeof(UsedRangeWithValuesOnlyRequestBuilder), true)]
    public partial interface IUsedRangeWithValuesOnlyRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Names.Item.RangeNamespace.VisibleView
{
    [Proxy(typeof(VisibleViewRequestBuilder), true)]
    public partial interface IVisibleViewRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Names.Item.RangeNamespace.Worksheet
{
    [Proxy(typeof(WorksheetRequestBuilder), true)]
    public partial interface IWorksheetRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Names.Item.Worksheet
{
    [Proxy(typeof(WorksheetRequestBuilder), true)]
    public partial interface IWorksheetRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.PivotTables
{
    [Proxy(typeof(PivotTablesRequestBuilder), true)]
    public partial interface IPivotTablesRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.PivotTables.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.PivotTables.Item
{
    [Proxy(typeof(WorkbookPivotTableItemRequestBuilder), true)]
    public partial interface IWorkbookPivotTableItemRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.PivotTables.Item.Refresh
{
    [Proxy(typeof(RefreshRequestBuilder), true)]
    public partial interface IRefreshRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.PivotTables.Item.Worksheet
{
    [Proxy(typeof(WorksheetRequestBuilder), true)]
    public partial interface IWorksheetRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.PivotTables.RefreshAll
{
    [Proxy(typeof(RefreshAllRequestBuilder), true)]
    public partial interface IRefreshAllRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Protection
{
    [Proxy(typeof(ProtectionRequestBuilder), true)]
    public partial interface IProtectionRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Protection.Protect
{
    [Proxy(typeof(ProtectRequestBuilder), true)]
    public partial interface IProtectRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Protection.Unprotect
{
    [Proxy(typeof(UnprotectRequestBuilder), true)]
    public partial interface IUnprotectRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.RangeNamespace
{
    [Proxy(typeof(RangeRequestBuilder), true)]
    public partial interface IRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.RangeNamespace.BoundingRectWithAnotherRange
{
    [Proxy(typeof(BoundingRectWithAnotherRangeRequestBuilder), true)]
    public partial interface IBoundingRectWithAnotherRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.RangeNamespace.CellWithRowWithColumn
{
    [Proxy(typeof(CellWithRowWithColumnRequestBuilder), true)]
    public partial interface ICellWithRowWithColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.RangeNamespace.Clear
{
    [Proxy(typeof(ClearRequestBuilder), true)]
    public partial interface IClearRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.RangeNamespace.ColumnsAfter
{
    [Proxy(typeof(ColumnsAfterRequestBuilder), true)]
    public partial interface IColumnsAfterRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.RangeNamespace.ColumnsAfterWithCount
{
    [Proxy(typeof(ColumnsAfterWithCountRequestBuilder), true)]
    public partial interface IColumnsAfterWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.RangeNamespace.ColumnsBefore
{
    [Proxy(typeof(ColumnsBeforeRequestBuilder), true)]
    public partial interface IColumnsBeforeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.RangeNamespace.ColumnsBeforeWithCount
{
    [Proxy(typeof(ColumnsBeforeWithCountRequestBuilder), true)]
    public partial interface IColumnsBeforeWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.RangeNamespace.ColumnWithColumn
{
    [Proxy(typeof(ColumnWithColumnRequestBuilder), true)]
    public partial interface IColumnWithColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.RangeNamespace.Delete
{
    [Proxy(typeof(DeleteRequestBuilder), true)]
    public partial interface IDeleteRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.RangeNamespace.EntireColumn
{
    [Proxy(typeof(EntireColumnRequestBuilder), true)]
    public partial interface IEntireColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.RangeNamespace.EntireRow
{
    [Proxy(typeof(EntireRowRequestBuilder), true)]
    public partial interface IEntireRowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.RangeNamespace.Format
{
    [Proxy(typeof(FormatRequestBuilder), true)]
    public partial interface IFormatRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.RangeNamespace.Insert
{
    [Proxy(typeof(InsertRequestBuilder), true)]
    public partial interface IInsertRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.RangeNamespace.IntersectionWithAnotherRange
{
    [Proxy(typeof(IntersectionWithAnotherRangeRequestBuilder), true)]
    public partial interface IIntersectionWithAnotherRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.RangeNamespace.LastCell
{
    [Proxy(typeof(LastCellRequestBuilder), true)]
    public partial interface ILastCellRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.RangeNamespace.LastColumn
{
    [Proxy(typeof(LastColumnRequestBuilder), true)]
    public partial interface ILastColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.RangeNamespace.LastRow
{
    [Proxy(typeof(LastRowRequestBuilder), true)]
    public partial interface ILastRowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.RangeNamespace.Merge
{
    [Proxy(typeof(MergeRequestBuilder), true)]
    public partial interface IMergeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.RangeNamespace.OffsetRangeWithRowOffsetWithColumnOffset
{
    [Proxy(typeof(OffsetRangeWithRowOffsetWithColumnOffsetRequestBuilder), true)]
    public partial interface IOffsetRangeWithRowOffsetWithColumnOffsetRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.RangeNamespace.ResizedRangeWithDeltaRowsWithDeltaColumns
{
    [Proxy(typeof(ResizedRangeWithDeltaRowsWithDeltaColumnsRequestBuilder), true)]
    public partial interface IResizedRangeWithDeltaRowsWithDeltaColumnsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.RangeNamespace.RowsAbove
{
    [Proxy(typeof(RowsAboveRequestBuilder), true)]
    public partial interface IRowsAboveRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.RangeNamespace.RowsAboveWithCount
{
    [Proxy(typeof(RowsAboveWithCountRequestBuilder), true)]
    public partial interface IRowsAboveWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.RangeNamespace.RowsBelow
{
    [Proxy(typeof(RowsBelowRequestBuilder), true)]
    public partial interface IRowsBelowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.RangeNamespace.RowsBelowWithCount
{
    [Proxy(typeof(RowsBelowWithCountRequestBuilder), true)]
    public partial interface IRowsBelowWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.RangeNamespace.RowWithRow
{
    [Proxy(typeof(RowWithRowRequestBuilder), true)]
    public partial interface IRowWithRowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.RangeNamespace.Sort
{
    [Proxy(typeof(SortRequestBuilder), true)]
    public partial interface ISortRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.RangeNamespace.Unmerge
{
    [Proxy(typeof(UnmergeRequestBuilder), true)]
    public partial interface IUnmergeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.RangeNamespace.UsedRange
{
    [Proxy(typeof(UsedRangeRequestBuilder), true)]
    public partial interface IUsedRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.RangeNamespace.UsedRangeWithValuesOnly
{
    [Proxy(typeof(UsedRangeWithValuesOnlyRequestBuilder), true)]
    public partial interface IUsedRangeWithValuesOnlyRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.RangeNamespace.VisibleView
{
    [Proxy(typeof(VisibleViewRequestBuilder), true)]
    public partial interface IVisibleViewRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.RangeNamespace.Worksheet
{
    [Proxy(typeof(WorksheetRequestBuilder), true)]
    public partial interface IWorksheetRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.RangeWithAddress
{
    [Proxy(typeof(RangeWithAddressRequestBuilder), true)]
    public partial interface IRangeWithAddressRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.RangeWithAddress.BoundingRectWithAnotherRange
{
    [Proxy(typeof(BoundingRectWithAnotherRangeRequestBuilder), true)]
    public partial interface IBoundingRectWithAnotherRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.RangeWithAddress.CellWithRowWithColumn
{
    [Proxy(typeof(CellWithRowWithColumnRequestBuilder), true)]
    public partial interface ICellWithRowWithColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.RangeWithAddress.Clear
{
    [Proxy(typeof(ClearRequestBuilder), true)]
    public partial interface IClearRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.RangeWithAddress.ColumnsAfter
{
    [Proxy(typeof(ColumnsAfterRequestBuilder), true)]
    public partial interface IColumnsAfterRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.RangeWithAddress.ColumnsAfterWithCount
{
    [Proxy(typeof(ColumnsAfterWithCountRequestBuilder), true)]
    public partial interface IColumnsAfterWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.RangeWithAddress.ColumnsBefore
{
    [Proxy(typeof(ColumnsBeforeRequestBuilder), true)]
    public partial interface IColumnsBeforeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.RangeWithAddress.ColumnsBeforeWithCount
{
    [Proxy(typeof(ColumnsBeforeWithCountRequestBuilder), true)]
    public partial interface IColumnsBeforeWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.RangeWithAddress.ColumnWithColumn
{
    [Proxy(typeof(ColumnWithColumnRequestBuilder), true)]
    public partial interface IColumnWithColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.RangeWithAddress.Delete
{
    [Proxy(typeof(DeleteRequestBuilder), true)]
    public partial interface IDeleteRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.RangeWithAddress.EntireColumn
{
    [Proxy(typeof(EntireColumnRequestBuilder), true)]
    public partial interface IEntireColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.RangeWithAddress.EntireRow
{
    [Proxy(typeof(EntireRowRequestBuilder), true)]
    public partial interface IEntireRowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.RangeWithAddress.Format
{
    [Proxy(typeof(FormatRequestBuilder), true)]
    public partial interface IFormatRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.RangeWithAddress.Insert
{
    [Proxy(typeof(InsertRequestBuilder), true)]
    public partial interface IInsertRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.RangeWithAddress.IntersectionWithAnotherRange
{
    [Proxy(typeof(IntersectionWithAnotherRangeRequestBuilder), true)]
    public partial interface IIntersectionWithAnotherRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.RangeWithAddress.LastCell
{
    [Proxy(typeof(LastCellRequestBuilder), true)]
    public partial interface ILastCellRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.RangeWithAddress.LastColumn
{
    [Proxy(typeof(LastColumnRequestBuilder), true)]
    public partial interface ILastColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.RangeWithAddress.LastRow
{
    [Proxy(typeof(LastRowRequestBuilder), true)]
    public partial interface ILastRowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.RangeWithAddress.Merge
{
    [Proxy(typeof(MergeRequestBuilder), true)]
    public partial interface IMergeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.RangeWithAddress.OffsetRangeWithRowOffsetWithColumnOffset
{
    [Proxy(typeof(OffsetRangeWithRowOffsetWithColumnOffsetRequestBuilder), true)]
    public partial interface IOffsetRangeWithRowOffsetWithColumnOffsetRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.RangeWithAddress.ResizedRangeWithDeltaRowsWithDeltaColumns
{
    [Proxy(typeof(ResizedRangeWithDeltaRowsWithDeltaColumnsRequestBuilder), true)]
    public partial interface IResizedRangeWithDeltaRowsWithDeltaColumnsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.RangeWithAddress.RowsAbove
{
    [Proxy(typeof(RowsAboveRequestBuilder), true)]
    public partial interface IRowsAboveRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.RangeWithAddress.RowsAboveWithCount
{
    [Proxy(typeof(RowsAboveWithCountRequestBuilder), true)]
    public partial interface IRowsAboveWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.RangeWithAddress.RowsBelow
{
    [Proxy(typeof(RowsBelowRequestBuilder), true)]
    public partial interface IRowsBelowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.RangeWithAddress.RowsBelowWithCount
{
    [Proxy(typeof(RowsBelowWithCountRequestBuilder), true)]
    public partial interface IRowsBelowWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.RangeWithAddress.RowWithRow
{
    [Proxy(typeof(RowWithRowRequestBuilder), true)]
    public partial interface IRowWithRowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.RangeWithAddress.Sort
{
    [Proxy(typeof(SortRequestBuilder), true)]
    public partial interface ISortRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.RangeWithAddress.Unmerge
{
    [Proxy(typeof(UnmergeRequestBuilder), true)]
    public partial interface IUnmergeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.RangeWithAddress.UsedRange
{
    [Proxy(typeof(UsedRangeRequestBuilder), true)]
    public partial interface IUsedRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.RangeWithAddress.UsedRangeWithValuesOnly
{
    [Proxy(typeof(UsedRangeWithValuesOnlyRequestBuilder), true)]
    public partial interface IUsedRangeWithValuesOnlyRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.RangeWithAddress.VisibleView
{
    [Proxy(typeof(VisibleViewRequestBuilder), true)]
    public partial interface IVisibleViewRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.RangeWithAddress.Worksheet
{
    [Proxy(typeof(WorksheetRequestBuilder), true)]
    public partial interface IWorksheetRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables
{
    [Proxy(typeof(TablesRequestBuilder), true)]
    public partial interface ITablesRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Add
{
    [Proxy(typeof(AddRequestBuilder), true)]
    public partial interface IAddRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item
{
    [Proxy(typeof(WorkbookTableItemRequestBuilder), true)]
    public partial interface IWorkbookTableItemRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.ClearFilters
{
    [Proxy(typeof(ClearFiltersRequestBuilder), true)]
    public partial interface IClearFiltersRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns
{
    [Proxy(typeof(ColumnsRequestBuilder), true)]
    public partial interface IColumnsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Add
{
    [Proxy(typeof(AddRequestBuilder), true)]
    public partial interface IAddRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item
{
    [Proxy(typeof(WorkbookTableColumnItemRequestBuilder), true)]
    public partial interface IWorkbookTableColumnItemRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.DataBodyRange
{
    [Proxy(typeof(DataBodyRangeRequestBuilder), true)]
    public partial interface IDataBodyRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.DataBodyRange.BoundingRectWithAnotherRange
{
    [Proxy(typeof(BoundingRectWithAnotherRangeRequestBuilder), true)]
    public partial interface IBoundingRectWithAnotherRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.DataBodyRange.CellWithRowWithColumn
{
    [Proxy(typeof(CellWithRowWithColumnRequestBuilder), true)]
    public partial interface ICellWithRowWithColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.DataBodyRange.Clear
{
    [Proxy(typeof(ClearRequestBuilder), true)]
    public partial interface IClearRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.DataBodyRange.ColumnsAfter
{
    [Proxy(typeof(ColumnsAfterRequestBuilder), true)]
    public partial interface IColumnsAfterRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.DataBodyRange.ColumnsAfterWithCount
{
    [Proxy(typeof(ColumnsAfterWithCountRequestBuilder), true)]
    public partial interface IColumnsAfterWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.DataBodyRange.ColumnsBefore
{
    [Proxy(typeof(ColumnsBeforeRequestBuilder), true)]
    public partial interface IColumnsBeforeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.DataBodyRange.ColumnsBeforeWithCount
{
    [Proxy(typeof(ColumnsBeforeWithCountRequestBuilder), true)]
    public partial interface IColumnsBeforeWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.DataBodyRange.ColumnWithColumn
{
    [Proxy(typeof(ColumnWithColumnRequestBuilder), true)]
    public partial interface IColumnWithColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.DataBodyRange.Delete
{
    [Proxy(typeof(DeleteRequestBuilder), true)]
    public partial interface IDeleteRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.DataBodyRange.EntireColumn
{
    [Proxy(typeof(EntireColumnRequestBuilder), true)]
    public partial interface IEntireColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.DataBodyRange.EntireRow
{
    [Proxy(typeof(EntireRowRequestBuilder), true)]
    public partial interface IEntireRowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.DataBodyRange.Format
{
    [Proxy(typeof(FormatRequestBuilder), true)]
    public partial interface IFormatRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.DataBodyRange.Insert
{
    [Proxy(typeof(InsertRequestBuilder), true)]
    public partial interface IInsertRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.DataBodyRange.IntersectionWithAnotherRange
{
    [Proxy(typeof(IntersectionWithAnotherRangeRequestBuilder), true)]
    public partial interface IIntersectionWithAnotherRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.DataBodyRange.LastCell
{
    [Proxy(typeof(LastCellRequestBuilder), true)]
    public partial interface ILastCellRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.DataBodyRange.LastColumn
{
    [Proxy(typeof(LastColumnRequestBuilder), true)]
    public partial interface ILastColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.DataBodyRange.LastRow
{
    [Proxy(typeof(LastRowRequestBuilder), true)]
    public partial interface ILastRowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.DataBodyRange.Merge
{
    [Proxy(typeof(MergeRequestBuilder), true)]
    public partial interface IMergeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.DataBodyRange.OffsetRangeWithRowOffsetWithColumnOffset
{
    [Proxy(typeof(OffsetRangeWithRowOffsetWithColumnOffsetRequestBuilder), true)]
    public partial interface IOffsetRangeWithRowOffsetWithColumnOffsetRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.DataBodyRange.ResizedRangeWithDeltaRowsWithDeltaColumns
{
    [Proxy(typeof(ResizedRangeWithDeltaRowsWithDeltaColumnsRequestBuilder), true)]
    public partial interface IResizedRangeWithDeltaRowsWithDeltaColumnsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.DataBodyRange.RowsAbove
{
    [Proxy(typeof(RowsAboveRequestBuilder), true)]
    public partial interface IRowsAboveRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.DataBodyRange.RowsAboveWithCount
{
    [Proxy(typeof(RowsAboveWithCountRequestBuilder), true)]
    public partial interface IRowsAboveWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.DataBodyRange.RowsBelow
{
    [Proxy(typeof(RowsBelowRequestBuilder), true)]
    public partial interface IRowsBelowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.DataBodyRange.RowsBelowWithCount
{
    [Proxy(typeof(RowsBelowWithCountRequestBuilder), true)]
    public partial interface IRowsBelowWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.DataBodyRange.RowWithRow
{
    [Proxy(typeof(RowWithRowRequestBuilder), true)]
    public partial interface IRowWithRowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.DataBodyRange.Sort
{
    [Proxy(typeof(SortRequestBuilder), true)]
    public partial interface ISortRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.DataBodyRange.Unmerge
{
    [Proxy(typeof(UnmergeRequestBuilder), true)]
    public partial interface IUnmergeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.DataBodyRange.UsedRange
{
    [Proxy(typeof(UsedRangeRequestBuilder), true)]
    public partial interface IUsedRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.DataBodyRange.UsedRangeWithValuesOnly
{
    [Proxy(typeof(UsedRangeWithValuesOnlyRequestBuilder), true)]
    public partial interface IUsedRangeWithValuesOnlyRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.DataBodyRange.VisibleView
{
    [Proxy(typeof(VisibleViewRequestBuilder), true)]
    public partial interface IVisibleViewRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.DataBodyRange.Worksheet
{
    [Proxy(typeof(WorksheetRequestBuilder), true)]
    public partial interface IWorksheetRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.Filter
{
    [Proxy(typeof(FilterRequestBuilder), true)]
    public partial interface IFilterRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.Filter.Apply
{
    [Proxy(typeof(ApplyRequestBuilder), true)]
    public partial interface IApplyRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.Filter.ApplyBottomItemsFilter
{
    [Proxy(typeof(ApplyBottomItemsFilterRequestBuilder), true)]
    public partial interface IApplyBottomItemsFilterRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.Filter.ApplyBottomPercentFilter
{
    [Proxy(typeof(ApplyBottomPercentFilterRequestBuilder), true)]
    public partial interface IApplyBottomPercentFilterRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.Filter.ApplyCellColorFilter
{
    [Proxy(typeof(ApplyCellColorFilterRequestBuilder), true)]
    public partial interface IApplyCellColorFilterRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.Filter.ApplyCustomFilter
{
    [Proxy(typeof(ApplyCustomFilterRequestBuilder), true)]
    public partial interface IApplyCustomFilterRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.Filter.ApplyDynamicFilter
{
    [Proxy(typeof(ApplyDynamicFilterRequestBuilder), true)]
    public partial interface IApplyDynamicFilterRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.Filter.ApplyFontColorFilter
{
    [Proxy(typeof(ApplyFontColorFilterRequestBuilder), true)]
    public partial interface IApplyFontColorFilterRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.Filter.ApplyIconFilter
{
    [Proxy(typeof(ApplyIconFilterRequestBuilder), true)]
    public partial interface IApplyIconFilterRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.Filter.ApplyTopItemsFilter
{
    [Proxy(typeof(ApplyTopItemsFilterRequestBuilder), true)]
    public partial interface IApplyTopItemsFilterRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.Filter.ApplyTopPercentFilter
{
    [Proxy(typeof(ApplyTopPercentFilterRequestBuilder), true)]
    public partial interface IApplyTopPercentFilterRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.Filter.ApplyValuesFilter
{
    [Proxy(typeof(ApplyValuesFilterRequestBuilder), true)]
    public partial interface IApplyValuesFilterRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.Filter.Clear
{
    [Proxy(typeof(ClearRequestBuilder), true)]
    public partial interface IClearRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.HeaderRowRange
{
    [Proxy(typeof(HeaderRowRangeRequestBuilder), true)]
    public partial interface IHeaderRowRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.HeaderRowRange.BoundingRectWithAnotherRange
{
    [Proxy(typeof(BoundingRectWithAnotherRangeRequestBuilder), true)]
    public partial interface IBoundingRectWithAnotherRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.HeaderRowRange.CellWithRowWithColumn
{
    [Proxy(typeof(CellWithRowWithColumnRequestBuilder), true)]
    public partial interface ICellWithRowWithColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.HeaderRowRange.Clear
{
    [Proxy(typeof(ClearRequestBuilder), true)]
    public partial interface IClearRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.HeaderRowRange.ColumnsAfter
{
    [Proxy(typeof(ColumnsAfterRequestBuilder), true)]
    public partial interface IColumnsAfterRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.HeaderRowRange.ColumnsAfterWithCount
{
    [Proxy(typeof(ColumnsAfterWithCountRequestBuilder), true)]
    public partial interface IColumnsAfterWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.HeaderRowRange.ColumnsBefore
{
    [Proxy(typeof(ColumnsBeforeRequestBuilder), true)]
    public partial interface IColumnsBeforeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.HeaderRowRange.ColumnsBeforeWithCount
{
    [Proxy(typeof(ColumnsBeforeWithCountRequestBuilder), true)]
    public partial interface IColumnsBeforeWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.HeaderRowRange.ColumnWithColumn
{
    [Proxy(typeof(ColumnWithColumnRequestBuilder), true)]
    public partial interface IColumnWithColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.HeaderRowRange.Delete
{
    [Proxy(typeof(DeleteRequestBuilder), true)]
    public partial interface IDeleteRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.HeaderRowRange.EntireColumn
{
    [Proxy(typeof(EntireColumnRequestBuilder), true)]
    public partial interface IEntireColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.HeaderRowRange.EntireRow
{
    [Proxy(typeof(EntireRowRequestBuilder), true)]
    public partial interface IEntireRowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.HeaderRowRange.Format
{
    [Proxy(typeof(FormatRequestBuilder), true)]
    public partial interface IFormatRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.HeaderRowRange.Insert
{
    [Proxy(typeof(InsertRequestBuilder), true)]
    public partial interface IInsertRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.HeaderRowRange.IntersectionWithAnotherRange
{
    [Proxy(typeof(IntersectionWithAnotherRangeRequestBuilder), true)]
    public partial interface IIntersectionWithAnotherRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.HeaderRowRange.LastCell
{
    [Proxy(typeof(LastCellRequestBuilder), true)]
    public partial interface ILastCellRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.HeaderRowRange.LastColumn
{
    [Proxy(typeof(LastColumnRequestBuilder), true)]
    public partial interface ILastColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.HeaderRowRange.LastRow
{
    [Proxy(typeof(LastRowRequestBuilder), true)]
    public partial interface ILastRowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.HeaderRowRange.Merge
{
    [Proxy(typeof(MergeRequestBuilder), true)]
    public partial interface IMergeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.HeaderRowRange.OffsetRangeWithRowOffsetWithColumnOffset
{
    [Proxy(typeof(OffsetRangeWithRowOffsetWithColumnOffsetRequestBuilder), true)]
    public partial interface IOffsetRangeWithRowOffsetWithColumnOffsetRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.HeaderRowRange.ResizedRangeWithDeltaRowsWithDeltaColumns
{
    [Proxy(typeof(ResizedRangeWithDeltaRowsWithDeltaColumnsRequestBuilder), true)]
    public partial interface IResizedRangeWithDeltaRowsWithDeltaColumnsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.HeaderRowRange.RowsAbove
{
    [Proxy(typeof(RowsAboveRequestBuilder), true)]
    public partial interface IRowsAboveRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.HeaderRowRange.RowsAboveWithCount
{
    [Proxy(typeof(RowsAboveWithCountRequestBuilder), true)]
    public partial interface IRowsAboveWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.HeaderRowRange.RowsBelow
{
    [Proxy(typeof(RowsBelowRequestBuilder), true)]
    public partial interface IRowsBelowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.HeaderRowRange.RowsBelowWithCount
{
    [Proxy(typeof(RowsBelowWithCountRequestBuilder), true)]
    public partial interface IRowsBelowWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.HeaderRowRange.RowWithRow
{
    [Proxy(typeof(RowWithRowRequestBuilder), true)]
    public partial interface IRowWithRowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.HeaderRowRange.Sort
{
    [Proxy(typeof(SortRequestBuilder), true)]
    public partial interface ISortRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.HeaderRowRange.Unmerge
{
    [Proxy(typeof(UnmergeRequestBuilder), true)]
    public partial interface IUnmergeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.HeaderRowRange.UsedRange
{
    [Proxy(typeof(UsedRangeRequestBuilder), true)]
    public partial interface IUsedRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.HeaderRowRange.UsedRangeWithValuesOnly
{
    [Proxy(typeof(UsedRangeWithValuesOnlyRequestBuilder), true)]
    public partial interface IUsedRangeWithValuesOnlyRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.HeaderRowRange.VisibleView
{
    [Proxy(typeof(VisibleViewRequestBuilder), true)]
    public partial interface IVisibleViewRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.HeaderRowRange.Worksheet
{
    [Proxy(typeof(WorksheetRequestBuilder), true)]
    public partial interface IWorksheetRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.RangeNamespace
{
    [Proxy(typeof(RangeRequestBuilder), true)]
    public partial interface IRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.RangeNamespace.BoundingRectWithAnotherRange
{
    [Proxy(typeof(BoundingRectWithAnotherRangeRequestBuilder), true)]
    public partial interface IBoundingRectWithAnotherRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.RangeNamespace.CellWithRowWithColumn
{
    [Proxy(typeof(CellWithRowWithColumnRequestBuilder), true)]
    public partial interface ICellWithRowWithColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.RangeNamespace.Clear
{
    [Proxy(typeof(ClearRequestBuilder), true)]
    public partial interface IClearRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.RangeNamespace.ColumnsAfter
{
    [Proxy(typeof(ColumnsAfterRequestBuilder), true)]
    public partial interface IColumnsAfterRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.RangeNamespace.ColumnsAfterWithCount
{
    [Proxy(typeof(ColumnsAfterWithCountRequestBuilder), true)]
    public partial interface IColumnsAfterWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.RangeNamespace.ColumnsBefore
{
    [Proxy(typeof(ColumnsBeforeRequestBuilder), true)]
    public partial interface IColumnsBeforeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.RangeNamespace.ColumnsBeforeWithCount
{
    [Proxy(typeof(ColumnsBeforeWithCountRequestBuilder), true)]
    public partial interface IColumnsBeforeWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.RangeNamespace.ColumnWithColumn
{
    [Proxy(typeof(ColumnWithColumnRequestBuilder), true)]
    public partial interface IColumnWithColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.RangeNamespace.Delete
{
    [Proxy(typeof(DeleteRequestBuilder), true)]
    public partial interface IDeleteRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.RangeNamespace.EntireColumn
{
    [Proxy(typeof(EntireColumnRequestBuilder), true)]
    public partial interface IEntireColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.RangeNamespace.EntireRow
{
    [Proxy(typeof(EntireRowRequestBuilder), true)]
    public partial interface IEntireRowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.RangeNamespace.Format
{
    [Proxy(typeof(FormatRequestBuilder), true)]
    public partial interface IFormatRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.RangeNamespace.Insert
{
    [Proxy(typeof(InsertRequestBuilder), true)]
    public partial interface IInsertRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.RangeNamespace.IntersectionWithAnotherRange
{
    [Proxy(typeof(IntersectionWithAnotherRangeRequestBuilder), true)]
    public partial interface IIntersectionWithAnotherRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.RangeNamespace.LastCell
{
    [Proxy(typeof(LastCellRequestBuilder), true)]
    public partial interface ILastCellRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.RangeNamespace.LastColumn
{
    [Proxy(typeof(LastColumnRequestBuilder), true)]
    public partial interface ILastColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.RangeNamespace.LastRow
{
    [Proxy(typeof(LastRowRequestBuilder), true)]
    public partial interface ILastRowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.RangeNamespace.Merge
{
    [Proxy(typeof(MergeRequestBuilder), true)]
    public partial interface IMergeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.RangeNamespace.OffsetRangeWithRowOffsetWithColumnOffset
{
    [Proxy(typeof(OffsetRangeWithRowOffsetWithColumnOffsetRequestBuilder), true)]
    public partial interface IOffsetRangeWithRowOffsetWithColumnOffsetRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.RangeNamespace.ResizedRangeWithDeltaRowsWithDeltaColumns
{
    [Proxy(typeof(ResizedRangeWithDeltaRowsWithDeltaColumnsRequestBuilder), true)]
    public partial interface IResizedRangeWithDeltaRowsWithDeltaColumnsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.RangeNamespace.RowsAbove
{
    [Proxy(typeof(RowsAboveRequestBuilder), true)]
    public partial interface IRowsAboveRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.RangeNamespace.RowsAboveWithCount
{
    [Proxy(typeof(RowsAboveWithCountRequestBuilder), true)]
    public partial interface IRowsAboveWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.RangeNamespace.RowsBelow
{
    [Proxy(typeof(RowsBelowRequestBuilder), true)]
    public partial interface IRowsBelowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.RangeNamespace.RowsBelowWithCount
{
    [Proxy(typeof(RowsBelowWithCountRequestBuilder), true)]
    public partial interface IRowsBelowWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.RangeNamespace.RowWithRow
{
    [Proxy(typeof(RowWithRowRequestBuilder), true)]
    public partial interface IRowWithRowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.RangeNamespace.Sort
{
    [Proxy(typeof(SortRequestBuilder), true)]
    public partial interface ISortRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.RangeNamespace.Unmerge
{
    [Proxy(typeof(UnmergeRequestBuilder), true)]
    public partial interface IUnmergeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.RangeNamespace.UsedRange
{
    [Proxy(typeof(UsedRangeRequestBuilder), true)]
    public partial interface IUsedRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.RangeNamespace.UsedRangeWithValuesOnly
{
    [Proxy(typeof(UsedRangeWithValuesOnlyRequestBuilder), true)]
    public partial interface IUsedRangeWithValuesOnlyRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.RangeNamespace.VisibleView
{
    [Proxy(typeof(VisibleViewRequestBuilder), true)]
    public partial interface IVisibleViewRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.RangeNamespace.Worksheet
{
    [Proxy(typeof(WorksheetRequestBuilder), true)]
    public partial interface IWorksheetRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.TotalRowRange
{
    [Proxy(typeof(TotalRowRangeRequestBuilder), true)]
    public partial interface ITotalRowRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.TotalRowRange.BoundingRectWithAnotherRange
{
    [Proxy(typeof(BoundingRectWithAnotherRangeRequestBuilder), true)]
    public partial interface IBoundingRectWithAnotherRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.TotalRowRange.CellWithRowWithColumn
{
    [Proxy(typeof(CellWithRowWithColumnRequestBuilder), true)]
    public partial interface ICellWithRowWithColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.TotalRowRange.Clear
{
    [Proxy(typeof(ClearRequestBuilder), true)]
    public partial interface IClearRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.TotalRowRange.ColumnsAfter
{
    [Proxy(typeof(ColumnsAfterRequestBuilder), true)]
    public partial interface IColumnsAfterRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.TotalRowRange.ColumnsAfterWithCount
{
    [Proxy(typeof(ColumnsAfterWithCountRequestBuilder), true)]
    public partial interface IColumnsAfterWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.TotalRowRange.ColumnsBefore
{
    [Proxy(typeof(ColumnsBeforeRequestBuilder), true)]
    public partial interface IColumnsBeforeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.TotalRowRange.ColumnsBeforeWithCount
{
    [Proxy(typeof(ColumnsBeforeWithCountRequestBuilder), true)]
    public partial interface IColumnsBeforeWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.TotalRowRange.ColumnWithColumn
{
    [Proxy(typeof(ColumnWithColumnRequestBuilder), true)]
    public partial interface IColumnWithColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.TotalRowRange.Delete
{
    [Proxy(typeof(DeleteRequestBuilder), true)]
    public partial interface IDeleteRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.TotalRowRange.EntireColumn
{
    [Proxy(typeof(EntireColumnRequestBuilder), true)]
    public partial interface IEntireColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.TotalRowRange.EntireRow
{
    [Proxy(typeof(EntireRowRequestBuilder), true)]
    public partial interface IEntireRowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.TotalRowRange.Format
{
    [Proxy(typeof(FormatRequestBuilder), true)]
    public partial interface IFormatRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.TotalRowRange.Insert
{
    [Proxy(typeof(InsertRequestBuilder), true)]
    public partial interface IInsertRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.TotalRowRange.IntersectionWithAnotherRange
{
    [Proxy(typeof(IntersectionWithAnotherRangeRequestBuilder), true)]
    public partial interface IIntersectionWithAnotherRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.TotalRowRange.LastCell
{
    [Proxy(typeof(LastCellRequestBuilder), true)]
    public partial interface ILastCellRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.TotalRowRange.LastColumn
{
    [Proxy(typeof(LastColumnRequestBuilder), true)]
    public partial interface ILastColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.TotalRowRange.LastRow
{
    [Proxy(typeof(LastRowRequestBuilder), true)]
    public partial interface ILastRowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.TotalRowRange.Merge
{
    [Proxy(typeof(MergeRequestBuilder), true)]
    public partial interface IMergeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.TotalRowRange.OffsetRangeWithRowOffsetWithColumnOffset
{
    [Proxy(typeof(OffsetRangeWithRowOffsetWithColumnOffsetRequestBuilder), true)]
    public partial interface IOffsetRangeWithRowOffsetWithColumnOffsetRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.TotalRowRange.ResizedRangeWithDeltaRowsWithDeltaColumns
{
    [Proxy(typeof(ResizedRangeWithDeltaRowsWithDeltaColumnsRequestBuilder), true)]
    public partial interface IResizedRangeWithDeltaRowsWithDeltaColumnsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.TotalRowRange.RowsAbove
{
    [Proxy(typeof(RowsAboveRequestBuilder), true)]
    public partial interface IRowsAboveRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.TotalRowRange.RowsAboveWithCount
{
    [Proxy(typeof(RowsAboveWithCountRequestBuilder), true)]
    public partial interface IRowsAboveWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.TotalRowRange.RowsBelow
{
    [Proxy(typeof(RowsBelowRequestBuilder), true)]
    public partial interface IRowsBelowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.TotalRowRange.RowsBelowWithCount
{
    [Proxy(typeof(RowsBelowWithCountRequestBuilder), true)]
    public partial interface IRowsBelowWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.TotalRowRange.RowWithRow
{
    [Proxy(typeof(RowWithRowRequestBuilder), true)]
    public partial interface IRowWithRowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.TotalRowRange.Sort
{
    [Proxy(typeof(SortRequestBuilder), true)]
    public partial interface ISortRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.TotalRowRange.Unmerge
{
    [Proxy(typeof(UnmergeRequestBuilder), true)]
    public partial interface IUnmergeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.TotalRowRange.UsedRange
{
    [Proxy(typeof(UsedRangeRequestBuilder), true)]
    public partial interface IUsedRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.TotalRowRange.UsedRangeWithValuesOnly
{
    [Proxy(typeof(UsedRangeWithValuesOnlyRequestBuilder), true)]
    public partial interface IUsedRangeWithValuesOnlyRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.TotalRowRange.VisibleView
{
    [Proxy(typeof(VisibleViewRequestBuilder), true)]
    public partial interface IVisibleViewRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.Item.TotalRowRange.Worksheet
{
    [Proxy(typeof(WorksheetRequestBuilder), true)]
    public partial interface IWorksheetRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.ItemAtWithIndex
{
    [Proxy(typeof(ItemAtWithIndexRequestBuilder), true)]
    public partial interface IItemAtWithIndexRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.ItemAtWithIndex.DataBodyRange
{
    [Proxy(typeof(DataBodyRangeRequestBuilder), true)]
    public partial interface IDataBodyRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.ItemAtWithIndex.Filter
{
    [Proxy(typeof(FilterRequestBuilder), true)]
    public partial interface IFilterRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.ItemAtWithIndex.HeaderRowRange
{
    [Proxy(typeof(HeaderRowRangeRequestBuilder), true)]
    public partial interface IHeaderRowRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.ItemAtWithIndex.RangeNamespace
{
    [Proxy(typeof(RangeRequestBuilder), true)]
    public partial interface IRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Columns.ItemAtWithIndex.TotalRowRange
{
    [Proxy(typeof(TotalRowRangeRequestBuilder), true)]
    public partial interface ITotalRowRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.ConvertToRange
{
    [Proxy(typeof(ConvertToRangeRequestBuilder), true)]
    public partial interface IConvertToRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.DataBodyRange
{
    [Proxy(typeof(DataBodyRangeRequestBuilder), true)]
    public partial interface IDataBodyRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.DataBodyRange.BoundingRectWithAnotherRange
{
    [Proxy(typeof(BoundingRectWithAnotherRangeRequestBuilder), true)]
    public partial interface IBoundingRectWithAnotherRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.DataBodyRange.CellWithRowWithColumn
{
    [Proxy(typeof(CellWithRowWithColumnRequestBuilder), true)]
    public partial interface ICellWithRowWithColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.DataBodyRange.Clear
{
    [Proxy(typeof(ClearRequestBuilder), true)]
    public partial interface IClearRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.DataBodyRange.ColumnsAfter
{
    [Proxy(typeof(ColumnsAfterRequestBuilder), true)]
    public partial interface IColumnsAfterRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.DataBodyRange.ColumnsAfterWithCount
{
    [Proxy(typeof(ColumnsAfterWithCountRequestBuilder), true)]
    public partial interface IColumnsAfterWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.DataBodyRange.ColumnsBefore
{
    [Proxy(typeof(ColumnsBeforeRequestBuilder), true)]
    public partial interface IColumnsBeforeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.DataBodyRange.ColumnsBeforeWithCount
{
    [Proxy(typeof(ColumnsBeforeWithCountRequestBuilder), true)]
    public partial interface IColumnsBeforeWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.DataBodyRange.ColumnWithColumn
{
    [Proxy(typeof(ColumnWithColumnRequestBuilder), true)]
    public partial interface IColumnWithColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.DataBodyRange.Delete
{
    [Proxy(typeof(DeleteRequestBuilder), true)]
    public partial interface IDeleteRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.DataBodyRange.EntireColumn
{
    [Proxy(typeof(EntireColumnRequestBuilder), true)]
    public partial interface IEntireColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.DataBodyRange.EntireRow
{
    [Proxy(typeof(EntireRowRequestBuilder), true)]
    public partial interface IEntireRowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.DataBodyRange.Format
{
    [Proxy(typeof(FormatRequestBuilder), true)]
    public partial interface IFormatRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.DataBodyRange.Insert
{
    [Proxy(typeof(InsertRequestBuilder), true)]
    public partial interface IInsertRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.DataBodyRange.IntersectionWithAnotherRange
{
    [Proxy(typeof(IntersectionWithAnotherRangeRequestBuilder), true)]
    public partial interface IIntersectionWithAnotherRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.DataBodyRange.LastCell
{
    [Proxy(typeof(LastCellRequestBuilder), true)]
    public partial interface ILastCellRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.DataBodyRange.LastColumn
{
    [Proxy(typeof(LastColumnRequestBuilder), true)]
    public partial interface ILastColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.DataBodyRange.LastRow
{
    [Proxy(typeof(LastRowRequestBuilder), true)]
    public partial interface ILastRowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.DataBodyRange.Merge
{
    [Proxy(typeof(MergeRequestBuilder), true)]
    public partial interface IMergeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.DataBodyRange.OffsetRangeWithRowOffsetWithColumnOffset
{
    [Proxy(typeof(OffsetRangeWithRowOffsetWithColumnOffsetRequestBuilder), true)]
    public partial interface IOffsetRangeWithRowOffsetWithColumnOffsetRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.DataBodyRange.ResizedRangeWithDeltaRowsWithDeltaColumns
{
    [Proxy(typeof(ResizedRangeWithDeltaRowsWithDeltaColumnsRequestBuilder), true)]
    public partial interface IResizedRangeWithDeltaRowsWithDeltaColumnsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.DataBodyRange.RowsAbove
{
    [Proxy(typeof(RowsAboveRequestBuilder), true)]
    public partial interface IRowsAboveRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.DataBodyRange.RowsAboveWithCount
{
    [Proxy(typeof(RowsAboveWithCountRequestBuilder), true)]
    public partial interface IRowsAboveWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.DataBodyRange.RowsBelow
{
    [Proxy(typeof(RowsBelowRequestBuilder), true)]
    public partial interface IRowsBelowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.DataBodyRange.RowsBelowWithCount
{
    [Proxy(typeof(RowsBelowWithCountRequestBuilder), true)]
    public partial interface IRowsBelowWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.DataBodyRange.RowWithRow
{
    [Proxy(typeof(RowWithRowRequestBuilder), true)]
    public partial interface IRowWithRowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.DataBodyRange.Sort
{
    [Proxy(typeof(SortRequestBuilder), true)]
    public partial interface ISortRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.DataBodyRange.Unmerge
{
    [Proxy(typeof(UnmergeRequestBuilder), true)]
    public partial interface IUnmergeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.DataBodyRange.UsedRange
{
    [Proxy(typeof(UsedRangeRequestBuilder), true)]
    public partial interface IUsedRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.DataBodyRange.UsedRangeWithValuesOnly
{
    [Proxy(typeof(UsedRangeWithValuesOnlyRequestBuilder), true)]
    public partial interface IUsedRangeWithValuesOnlyRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.DataBodyRange.VisibleView
{
    [Proxy(typeof(VisibleViewRequestBuilder), true)]
    public partial interface IVisibleViewRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.DataBodyRange.Worksheet
{
    [Proxy(typeof(WorksheetRequestBuilder), true)]
    public partial interface IWorksheetRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.HeaderRowRange
{
    [Proxy(typeof(HeaderRowRangeRequestBuilder), true)]
    public partial interface IHeaderRowRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.HeaderRowRange.BoundingRectWithAnotherRange
{
    [Proxy(typeof(BoundingRectWithAnotherRangeRequestBuilder), true)]
    public partial interface IBoundingRectWithAnotherRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.HeaderRowRange.CellWithRowWithColumn
{
    [Proxy(typeof(CellWithRowWithColumnRequestBuilder), true)]
    public partial interface ICellWithRowWithColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.HeaderRowRange.Clear
{
    [Proxy(typeof(ClearRequestBuilder), true)]
    public partial interface IClearRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.HeaderRowRange.ColumnsAfter
{
    [Proxy(typeof(ColumnsAfterRequestBuilder), true)]
    public partial interface IColumnsAfterRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.HeaderRowRange.ColumnsAfterWithCount
{
    [Proxy(typeof(ColumnsAfterWithCountRequestBuilder), true)]
    public partial interface IColumnsAfterWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.HeaderRowRange.ColumnsBefore
{
    [Proxy(typeof(ColumnsBeforeRequestBuilder), true)]
    public partial interface IColumnsBeforeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.HeaderRowRange.ColumnsBeforeWithCount
{
    [Proxy(typeof(ColumnsBeforeWithCountRequestBuilder), true)]
    public partial interface IColumnsBeforeWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.HeaderRowRange.ColumnWithColumn
{
    [Proxy(typeof(ColumnWithColumnRequestBuilder), true)]
    public partial interface IColumnWithColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.HeaderRowRange.Delete
{
    [Proxy(typeof(DeleteRequestBuilder), true)]
    public partial interface IDeleteRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.HeaderRowRange.EntireColumn
{
    [Proxy(typeof(EntireColumnRequestBuilder), true)]
    public partial interface IEntireColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.HeaderRowRange.EntireRow
{
    [Proxy(typeof(EntireRowRequestBuilder), true)]
    public partial interface IEntireRowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.HeaderRowRange.Format
{
    [Proxy(typeof(FormatRequestBuilder), true)]
    public partial interface IFormatRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.HeaderRowRange.Insert
{
    [Proxy(typeof(InsertRequestBuilder), true)]
    public partial interface IInsertRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.HeaderRowRange.IntersectionWithAnotherRange
{
    [Proxy(typeof(IntersectionWithAnotherRangeRequestBuilder), true)]
    public partial interface IIntersectionWithAnotherRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.HeaderRowRange.LastCell
{
    [Proxy(typeof(LastCellRequestBuilder), true)]
    public partial interface ILastCellRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.HeaderRowRange.LastColumn
{
    [Proxy(typeof(LastColumnRequestBuilder), true)]
    public partial interface ILastColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.HeaderRowRange.LastRow
{
    [Proxy(typeof(LastRowRequestBuilder), true)]
    public partial interface ILastRowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.HeaderRowRange.Merge
{
    [Proxy(typeof(MergeRequestBuilder), true)]
    public partial interface IMergeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.HeaderRowRange.OffsetRangeWithRowOffsetWithColumnOffset
{
    [Proxy(typeof(OffsetRangeWithRowOffsetWithColumnOffsetRequestBuilder), true)]
    public partial interface IOffsetRangeWithRowOffsetWithColumnOffsetRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.HeaderRowRange.ResizedRangeWithDeltaRowsWithDeltaColumns
{
    [Proxy(typeof(ResizedRangeWithDeltaRowsWithDeltaColumnsRequestBuilder), true)]
    public partial interface IResizedRangeWithDeltaRowsWithDeltaColumnsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.HeaderRowRange.RowsAbove
{
    [Proxy(typeof(RowsAboveRequestBuilder), true)]
    public partial interface IRowsAboveRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.HeaderRowRange.RowsAboveWithCount
{
    [Proxy(typeof(RowsAboveWithCountRequestBuilder), true)]
    public partial interface IRowsAboveWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.HeaderRowRange.RowsBelow
{
    [Proxy(typeof(RowsBelowRequestBuilder), true)]
    public partial interface IRowsBelowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.HeaderRowRange.RowsBelowWithCount
{
    [Proxy(typeof(RowsBelowWithCountRequestBuilder), true)]
    public partial interface IRowsBelowWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.HeaderRowRange.RowWithRow
{
    [Proxy(typeof(RowWithRowRequestBuilder), true)]
    public partial interface IRowWithRowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.HeaderRowRange.Sort
{
    [Proxy(typeof(SortRequestBuilder), true)]
    public partial interface ISortRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.HeaderRowRange.Unmerge
{
    [Proxy(typeof(UnmergeRequestBuilder), true)]
    public partial interface IUnmergeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.HeaderRowRange.UsedRange
{
    [Proxy(typeof(UsedRangeRequestBuilder), true)]
    public partial interface IUsedRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.HeaderRowRange.UsedRangeWithValuesOnly
{
    [Proxy(typeof(UsedRangeWithValuesOnlyRequestBuilder), true)]
    public partial interface IUsedRangeWithValuesOnlyRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.HeaderRowRange.VisibleView
{
    [Proxy(typeof(VisibleViewRequestBuilder), true)]
    public partial interface IVisibleViewRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.HeaderRowRange.Worksheet
{
    [Proxy(typeof(WorksheetRequestBuilder), true)]
    public partial interface IWorksheetRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.RangeNamespace
{
    [Proxy(typeof(RangeRequestBuilder), true)]
    public partial interface IRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.RangeNamespace.BoundingRectWithAnotherRange
{
    [Proxy(typeof(BoundingRectWithAnotherRangeRequestBuilder), true)]
    public partial interface IBoundingRectWithAnotherRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.RangeNamespace.CellWithRowWithColumn
{
    [Proxy(typeof(CellWithRowWithColumnRequestBuilder), true)]
    public partial interface ICellWithRowWithColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.RangeNamespace.Clear
{
    [Proxy(typeof(ClearRequestBuilder), true)]
    public partial interface IClearRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.RangeNamespace.ColumnsAfter
{
    [Proxy(typeof(ColumnsAfterRequestBuilder), true)]
    public partial interface IColumnsAfterRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.RangeNamespace.ColumnsAfterWithCount
{
    [Proxy(typeof(ColumnsAfterWithCountRequestBuilder), true)]
    public partial interface IColumnsAfterWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.RangeNamespace.ColumnsBefore
{
    [Proxy(typeof(ColumnsBeforeRequestBuilder), true)]
    public partial interface IColumnsBeforeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.RangeNamespace.ColumnsBeforeWithCount
{
    [Proxy(typeof(ColumnsBeforeWithCountRequestBuilder), true)]
    public partial interface IColumnsBeforeWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.RangeNamespace.ColumnWithColumn
{
    [Proxy(typeof(ColumnWithColumnRequestBuilder), true)]
    public partial interface IColumnWithColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.RangeNamespace.Delete
{
    [Proxy(typeof(DeleteRequestBuilder), true)]
    public partial interface IDeleteRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.RangeNamespace.EntireColumn
{
    [Proxy(typeof(EntireColumnRequestBuilder), true)]
    public partial interface IEntireColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.RangeNamespace.EntireRow
{
    [Proxy(typeof(EntireRowRequestBuilder), true)]
    public partial interface IEntireRowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.RangeNamespace.Format
{
    [Proxy(typeof(FormatRequestBuilder), true)]
    public partial interface IFormatRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.RangeNamespace.Insert
{
    [Proxy(typeof(InsertRequestBuilder), true)]
    public partial interface IInsertRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.RangeNamespace.IntersectionWithAnotherRange
{
    [Proxy(typeof(IntersectionWithAnotherRangeRequestBuilder), true)]
    public partial interface IIntersectionWithAnotherRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.RangeNamespace.LastCell
{
    [Proxy(typeof(LastCellRequestBuilder), true)]
    public partial interface ILastCellRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.RangeNamespace.LastColumn
{
    [Proxy(typeof(LastColumnRequestBuilder), true)]
    public partial interface ILastColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.RangeNamespace.LastRow
{
    [Proxy(typeof(LastRowRequestBuilder), true)]
    public partial interface ILastRowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.RangeNamespace.Merge
{
    [Proxy(typeof(MergeRequestBuilder), true)]
    public partial interface IMergeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.RangeNamespace.OffsetRangeWithRowOffsetWithColumnOffset
{
    [Proxy(typeof(OffsetRangeWithRowOffsetWithColumnOffsetRequestBuilder), true)]
    public partial interface IOffsetRangeWithRowOffsetWithColumnOffsetRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.RangeNamespace.ResizedRangeWithDeltaRowsWithDeltaColumns
{
    [Proxy(typeof(ResizedRangeWithDeltaRowsWithDeltaColumnsRequestBuilder), true)]
    public partial interface IResizedRangeWithDeltaRowsWithDeltaColumnsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.RangeNamespace.RowsAbove
{
    [Proxy(typeof(RowsAboveRequestBuilder), true)]
    public partial interface IRowsAboveRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.RangeNamespace.RowsAboveWithCount
{
    [Proxy(typeof(RowsAboveWithCountRequestBuilder), true)]
    public partial interface IRowsAboveWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.RangeNamespace.RowsBelow
{
    [Proxy(typeof(RowsBelowRequestBuilder), true)]
    public partial interface IRowsBelowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.RangeNamespace.RowsBelowWithCount
{
    [Proxy(typeof(RowsBelowWithCountRequestBuilder), true)]
    public partial interface IRowsBelowWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.RangeNamespace.RowWithRow
{
    [Proxy(typeof(RowWithRowRequestBuilder), true)]
    public partial interface IRowWithRowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.RangeNamespace.Sort
{
    [Proxy(typeof(SortRequestBuilder), true)]
    public partial interface ISortRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.RangeNamespace.Unmerge
{
    [Proxy(typeof(UnmergeRequestBuilder), true)]
    public partial interface IUnmergeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.RangeNamespace.UsedRange
{
    [Proxy(typeof(UsedRangeRequestBuilder), true)]
    public partial interface IUsedRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.RangeNamespace.UsedRangeWithValuesOnly
{
    [Proxy(typeof(UsedRangeWithValuesOnlyRequestBuilder), true)]
    public partial interface IUsedRangeWithValuesOnlyRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.RangeNamespace.VisibleView
{
    [Proxy(typeof(VisibleViewRequestBuilder), true)]
    public partial interface IVisibleViewRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.RangeNamespace.Worksheet
{
    [Proxy(typeof(WorksheetRequestBuilder), true)]
    public partial interface IWorksheetRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.ReapplyFilters
{
    [Proxy(typeof(ReapplyFiltersRequestBuilder), true)]
    public partial interface IReapplyFiltersRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Rows
{
    [Proxy(typeof(RowsRequestBuilder), true)]
    public partial interface IRowsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Rows.Add
{
    [Proxy(typeof(AddRequestBuilder), true)]
    public partial interface IAddRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Rows.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Rows.Item
{
    [Proxy(typeof(WorkbookTableRowItemRequestBuilder), true)]
    public partial interface IWorkbookTableRowItemRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Rows.Item.RangeNamespace
{
    [Proxy(typeof(RangeRequestBuilder), true)]
    public partial interface IRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Rows.Item.RangeNamespace.BoundingRectWithAnotherRange
{
    [Proxy(typeof(BoundingRectWithAnotherRangeRequestBuilder), true)]
    public partial interface IBoundingRectWithAnotherRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Rows.Item.RangeNamespace.CellWithRowWithColumn
{
    [Proxy(typeof(CellWithRowWithColumnRequestBuilder), true)]
    public partial interface ICellWithRowWithColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Rows.Item.RangeNamespace.Clear
{
    [Proxy(typeof(ClearRequestBuilder), true)]
    public partial interface IClearRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Rows.Item.RangeNamespace.ColumnsAfter
{
    [Proxy(typeof(ColumnsAfterRequestBuilder), true)]
    public partial interface IColumnsAfterRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Rows.Item.RangeNamespace.ColumnsAfterWithCount
{
    [Proxy(typeof(ColumnsAfterWithCountRequestBuilder), true)]
    public partial interface IColumnsAfterWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Rows.Item.RangeNamespace.ColumnsBefore
{
    [Proxy(typeof(ColumnsBeforeRequestBuilder), true)]
    public partial interface IColumnsBeforeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Rows.Item.RangeNamespace.ColumnsBeforeWithCount
{
    [Proxy(typeof(ColumnsBeforeWithCountRequestBuilder), true)]
    public partial interface IColumnsBeforeWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Rows.Item.RangeNamespace.ColumnWithColumn
{
    [Proxy(typeof(ColumnWithColumnRequestBuilder), true)]
    public partial interface IColumnWithColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Rows.Item.RangeNamespace.Delete
{
    [Proxy(typeof(DeleteRequestBuilder), true)]
    public partial interface IDeleteRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Rows.Item.RangeNamespace.EntireColumn
{
    [Proxy(typeof(EntireColumnRequestBuilder), true)]
    public partial interface IEntireColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Rows.Item.RangeNamespace.EntireRow
{
    [Proxy(typeof(EntireRowRequestBuilder), true)]
    public partial interface IEntireRowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Rows.Item.RangeNamespace.Format
{
    [Proxy(typeof(FormatRequestBuilder), true)]
    public partial interface IFormatRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Rows.Item.RangeNamespace.Insert
{
    [Proxy(typeof(InsertRequestBuilder), true)]
    public partial interface IInsertRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Rows.Item.RangeNamespace.IntersectionWithAnotherRange
{
    [Proxy(typeof(IntersectionWithAnotherRangeRequestBuilder), true)]
    public partial interface IIntersectionWithAnotherRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Rows.Item.RangeNamespace.LastCell
{
    [Proxy(typeof(LastCellRequestBuilder), true)]
    public partial interface ILastCellRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Rows.Item.RangeNamespace.LastColumn
{
    [Proxy(typeof(LastColumnRequestBuilder), true)]
    public partial interface ILastColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Rows.Item.RangeNamespace.LastRow
{
    [Proxy(typeof(LastRowRequestBuilder), true)]
    public partial interface ILastRowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Rows.Item.RangeNamespace.Merge
{
    [Proxy(typeof(MergeRequestBuilder), true)]
    public partial interface IMergeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Rows.Item.RangeNamespace.OffsetRangeWithRowOffsetWithColumnOffset
{
    [Proxy(typeof(OffsetRangeWithRowOffsetWithColumnOffsetRequestBuilder), true)]
    public partial interface IOffsetRangeWithRowOffsetWithColumnOffsetRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Rows.Item.RangeNamespace.ResizedRangeWithDeltaRowsWithDeltaColumns
{
    [Proxy(typeof(ResizedRangeWithDeltaRowsWithDeltaColumnsRequestBuilder), true)]
    public partial interface IResizedRangeWithDeltaRowsWithDeltaColumnsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Rows.Item.RangeNamespace.RowsAbove
{
    [Proxy(typeof(RowsAboveRequestBuilder), true)]
    public partial interface IRowsAboveRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Rows.Item.RangeNamespace.RowsAboveWithCount
{
    [Proxy(typeof(RowsAboveWithCountRequestBuilder), true)]
    public partial interface IRowsAboveWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Rows.Item.RangeNamespace.RowsBelow
{
    [Proxy(typeof(RowsBelowRequestBuilder), true)]
    public partial interface IRowsBelowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Rows.Item.RangeNamespace.RowsBelowWithCount
{
    [Proxy(typeof(RowsBelowWithCountRequestBuilder), true)]
    public partial interface IRowsBelowWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Rows.Item.RangeNamespace.RowWithRow
{
    [Proxy(typeof(RowWithRowRequestBuilder), true)]
    public partial interface IRowWithRowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Rows.Item.RangeNamespace.Sort
{
    [Proxy(typeof(SortRequestBuilder), true)]
    public partial interface ISortRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Rows.Item.RangeNamespace.Unmerge
{
    [Proxy(typeof(UnmergeRequestBuilder), true)]
    public partial interface IUnmergeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Rows.Item.RangeNamespace.UsedRange
{
    [Proxy(typeof(UsedRangeRequestBuilder), true)]
    public partial interface IUsedRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Rows.Item.RangeNamespace.UsedRangeWithValuesOnly
{
    [Proxy(typeof(UsedRangeWithValuesOnlyRequestBuilder), true)]
    public partial interface IUsedRangeWithValuesOnlyRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Rows.Item.RangeNamespace.VisibleView
{
    [Proxy(typeof(VisibleViewRequestBuilder), true)]
    public partial interface IVisibleViewRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Rows.Item.RangeNamespace.Worksheet
{
    [Proxy(typeof(WorksheetRequestBuilder), true)]
    public partial interface IWorksheetRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Rows.ItemAtWithIndex
{
    [Proxy(typeof(ItemAtWithIndexRequestBuilder), true)]
    public partial interface IItemAtWithIndexRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Rows.ItemAtWithIndex.RangeNamespace
{
    [Proxy(typeof(RangeRequestBuilder), true)]
    public partial interface IRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Sort
{
    [Proxy(typeof(SortRequestBuilder), true)]
    public partial interface ISortRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Sort.Apply
{
    [Proxy(typeof(ApplyRequestBuilder), true)]
    public partial interface IApplyRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Sort.Clear
{
    [Proxy(typeof(ClearRequestBuilder), true)]
    public partial interface IClearRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Sort.Reapply
{
    [Proxy(typeof(ReapplyRequestBuilder), true)]
    public partial interface IReapplyRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.TotalRowRange
{
    [Proxy(typeof(TotalRowRangeRequestBuilder), true)]
    public partial interface ITotalRowRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.TotalRowRange.BoundingRectWithAnotherRange
{
    [Proxy(typeof(BoundingRectWithAnotherRangeRequestBuilder), true)]
    public partial interface IBoundingRectWithAnotherRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.TotalRowRange.CellWithRowWithColumn
{
    [Proxy(typeof(CellWithRowWithColumnRequestBuilder), true)]
    public partial interface ICellWithRowWithColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.TotalRowRange.Clear
{
    [Proxy(typeof(ClearRequestBuilder), true)]
    public partial interface IClearRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.TotalRowRange.ColumnsAfter
{
    [Proxy(typeof(ColumnsAfterRequestBuilder), true)]
    public partial interface IColumnsAfterRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.TotalRowRange.ColumnsAfterWithCount
{
    [Proxy(typeof(ColumnsAfterWithCountRequestBuilder), true)]
    public partial interface IColumnsAfterWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.TotalRowRange.ColumnsBefore
{
    [Proxy(typeof(ColumnsBeforeRequestBuilder), true)]
    public partial interface IColumnsBeforeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.TotalRowRange.ColumnsBeforeWithCount
{
    [Proxy(typeof(ColumnsBeforeWithCountRequestBuilder), true)]
    public partial interface IColumnsBeforeWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.TotalRowRange.ColumnWithColumn
{
    [Proxy(typeof(ColumnWithColumnRequestBuilder), true)]
    public partial interface IColumnWithColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.TotalRowRange.Delete
{
    [Proxy(typeof(DeleteRequestBuilder), true)]
    public partial interface IDeleteRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.TotalRowRange.EntireColumn
{
    [Proxy(typeof(EntireColumnRequestBuilder), true)]
    public partial interface IEntireColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.TotalRowRange.EntireRow
{
    [Proxy(typeof(EntireRowRequestBuilder), true)]
    public partial interface IEntireRowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.TotalRowRange.Format
{
    [Proxy(typeof(FormatRequestBuilder), true)]
    public partial interface IFormatRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.TotalRowRange.Insert
{
    [Proxy(typeof(InsertRequestBuilder), true)]
    public partial interface IInsertRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.TotalRowRange.IntersectionWithAnotherRange
{
    [Proxy(typeof(IntersectionWithAnotherRangeRequestBuilder), true)]
    public partial interface IIntersectionWithAnotherRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.TotalRowRange.LastCell
{
    [Proxy(typeof(LastCellRequestBuilder), true)]
    public partial interface ILastCellRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.TotalRowRange.LastColumn
{
    [Proxy(typeof(LastColumnRequestBuilder), true)]
    public partial interface ILastColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.TotalRowRange.LastRow
{
    [Proxy(typeof(LastRowRequestBuilder), true)]
    public partial interface ILastRowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.TotalRowRange.Merge
{
    [Proxy(typeof(MergeRequestBuilder), true)]
    public partial interface IMergeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.TotalRowRange.OffsetRangeWithRowOffsetWithColumnOffset
{
    [Proxy(typeof(OffsetRangeWithRowOffsetWithColumnOffsetRequestBuilder), true)]
    public partial interface IOffsetRangeWithRowOffsetWithColumnOffsetRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.TotalRowRange.ResizedRangeWithDeltaRowsWithDeltaColumns
{
    [Proxy(typeof(ResizedRangeWithDeltaRowsWithDeltaColumnsRequestBuilder), true)]
    public partial interface IResizedRangeWithDeltaRowsWithDeltaColumnsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.TotalRowRange.RowsAbove
{
    [Proxy(typeof(RowsAboveRequestBuilder), true)]
    public partial interface IRowsAboveRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.TotalRowRange.RowsAboveWithCount
{
    [Proxy(typeof(RowsAboveWithCountRequestBuilder), true)]
    public partial interface IRowsAboveWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.TotalRowRange.RowsBelow
{
    [Proxy(typeof(RowsBelowRequestBuilder), true)]
    public partial interface IRowsBelowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.TotalRowRange.RowsBelowWithCount
{
    [Proxy(typeof(RowsBelowWithCountRequestBuilder), true)]
    public partial interface IRowsBelowWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.TotalRowRange.RowWithRow
{
    [Proxy(typeof(RowWithRowRequestBuilder), true)]
    public partial interface IRowWithRowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.TotalRowRange.Sort
{
    [Proxy(typeof(SortRequestBuilder), true)]
    public partial interface ISortRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.TotalRowRange.Unmerge
{
    [Proxy(typeof(UnmergeRequestBuilder), true)]
    public partial interface IUnmergeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.TotalRowRange.UsedRange
{
    [Proxy(typeof(UsedRangeRequestBuilder), true)]
    public partial interface IUsedRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.TotalRowRange.UsedRangeWithValuesOnly
{
    [Proxy(typeof(UsedRangeWithValuesOnlyRequestBuilder), true)]
    public partial interface IUsedRangeWithValuesOnlyRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.TotalRowRange.VisibleView
{
    [Proxy(typeof(VisibleViewRequestBuilder), true)]
    public partial interface IVisibleViewRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.TotalRowRange.Worksheet
{
    [Proxy(typeof(WorksheetRequestBuilder), true)]
    public partial interface IWorksheetRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.Item.Worksheet
{
    [Proxy(typeof(WorksheetRequestBuilder), true)]
    public partial interface IWorksheetRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.ItemAtWithIndex
{
    [Proxy(typeof(ItemAtWithIndexRequestBuilder), true)]
    public partial interface IItemAtWithIndexRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.ItemAtWithIndex.ClearFilters
{
    [Proxy(typeof(ClearFiltersRequestBuilder), true)]
    public partial interface IClearFiltersRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.ItemAtWithIndex.Columns
{
    [Proxy(typeof(ColumnsRequestBuilder), true)]
    public partial interface IColumnsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.ItemAtWithIndex.ConvertToRange
{
    [Proxy(typeof(ConvertToRangeRequestBuilder), true)]
    public partial interface IConvertToRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.ItemAtWithIndex.DataBodyRange
{
    [Proxy(typeof(DataBodyRangeRequestBuilder), true)]
    public partial interface IDataBodyRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.ItemAtWithIndex.HeaderRowRange
{
    [Proxy(typeof(HeaderRowRangeRequestBuilder), true)]
    public partial interface IHeaderRowRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.ItemAtWithIndex.RangeNamespace
{
    [Proxy(typeof(RangeRequestBuilder), true)]
    public partial interface IRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.ItemAtWithIndex.ReapplyFilters
{
    [Proxy(typeof(ReapplyFiltersRequestBuilder), true)]
    public partial interface IReapplyFiltersRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.ItemAtWithIndex.Rows
{
    [Proxy(typeof(RowsRequestBuilder), true)]
    public partial interface IRowsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.ItemAtWithIndex.Sort
{
    [Proxy(typeof(SortRequestBuilder), true)]
    public partial interface ISortRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.ItemAtWithIndex.TotalRowRange
{
    [Proxy(typeof(TotalRowRangeRequestBuilder), true)]
    public partial interface ITotalRowRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.Tables.ItemAtWithIndex.Worksheet
{
    [Proxy(typeof(WorksheetRequestBuilder), true)]
    public partial interface IWorksheetRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.UsedRange
{
    [Proxy(typeof(UsedRangeRequestBuilder), true)]
    public partial interface IUsedRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.UsedRange.BoundingRectWithAnotherRange
{
    [Proxy(typeof(BoundingRectWithAnotherRangeRequestBuilder), true)]
    public partial interface IBoundingRectWithAnotherRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.UsedRange.CellWithRowWithColumn
{
    [Proxy(typeof(CellWithRowWithColumnRequestBuilder), true)]
    public partial interface ICellWithRowWithColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.UsedRange.Clear
{
    [Proxy(typeof(ClearRequestBuilder), true)]
    public partial interface IClearRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.UsedRange.ColumnsAfter
{
    [Proxy(typeof(ColumnsAfterRequestBuilder), true)]
    public partial interface IColumnsAfterRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.UsedRange.ColumnsAfterWithCount
{
    [Proxy(typeof(ColumnsAfterWithCountRequestBuilder), true)]
    public partial interface IColumnsAfterWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.UsedRange.ColumnsBefore
{
    [Proxy(typeof(ColumnsBeforeRequestBuilder), true)]
    public partial interface IColumnsBeforeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.UsedRange.ColumnsBeforeWithCount
{
    [Proxy(typeof(ColumnsBeforeWithCountRequestBuilder), true)]
    public partial interface IColumnsBeforeWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.UsedRange.ColumnWithColumn
{
    [Proxy(typeof(ColumnWithColumnRequestBuilder), true)]
    public partial interface IColumnWithColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.UsedRange.Delete
{
    [Proxy(typeof(DeleteRequestBuilder), true)]
    public partial interface IDeleteRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.UsedRange.EntireColumn
{
    [Proxy(typeof(EntireColumnRequestBuilder), true)]
    public partial interface IEntireColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.UsedRange.EntireRow
{
    [Proxy(typeof(EntireRowRequestBuilder), true)]
    public partial interface IEntireRowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.UsedRange.Format
{
    [Proxy(typeof(FormatRequestBuilder), true)]
    public partial interface IFormatRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.UsedRange.Insert
{
    [Proxy(typeof(InsertRequestBuilder), true)]
    public partial interface IInsertRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.UsedRange.IntersectionWithAnotherRange
{
    [Proxy(typeof(IntersectionWithAnotherRangeRequestBuilder), true)]
    public partial interface IIntersectionWithAnotherRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.UsedRange.LastCell
{
    [Proxy(typeof(LastCellRequestBuilder), true)]
    public partial interface ILastCellRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.UsedRange.LastColumn
{
    [Proxy(typeof(LastColumnRequestBuilder), true)]
    public partial interface ILastColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.UsedRange.LastRow
{
    [Proxy(typeof(LastRowRequestBuilder), true)]
    public partial interface ILastRowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.UsedRange.Merge
{
    [Proxy(typeof(MergeRequestBuilder), true)]
    public partial interface IMergeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.UsedRange.OffsetRangeWithRowOffsetWithColumnOffset
{
    [Proxy(typeof(OffsetRangeWithRowOffsetWithColumnOffsetRequestBuilder), true)]
    public partial interface IOffsetRangeWithRowOffsetWithColumnOffsetRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.UsedRange.ResizedRangeWithDeltaRowsWithDeltaColumns
{
    [Proxy(typeof(ResizedRangeWithDeltaRowsWithDeltaColumnsRequestBuilder), true)]
    public partial interface IResizedRangeWithDeltaRowsWithDeltaColumnsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.UsedRange.RowsAbove
{
    [Proxy(typeof(RowsAboveRequestBuilder), true)]
    public partial interface IRowsAboveRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.UsedRange.RowsAboveWithCount
{
    [Proxy(typeof(RowsAboveWithCountRequestBuilder), true)]
    public partial interface IRowsAboveWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.UsedRange.RowsBelow
{
    [Proxy(typeof(RowsBelowRequestBuilder), true)]
    public partial interface IRowsBelowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.UsedRange.RowsBelowWithCount
{
    [Proxy(typeof(RowsBelowWithCountRequestBuilder), true)]
    public partial interface IRowsBelowWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.UsedRange.RowWithRow
{
    [Proxy(typeof(RowWithRowRequestBuilder), true)]
    public partial interface IRowWithRowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.UsedRange.Sort
{
    [Proxy(typeof(SortRequestBuilder), true)]
    public partial interface ISortRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.UsedRange.Unmerge
{
    [Proxy(typeof(UnmergeRequestBuilder), true)]
    public partial interface IUnmergeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.UsedRange.VisibleView
{
    [Proxy(typeof(VisibleViewRequestBuilder), true)]
    public partial interface IVisibleViewRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.UsedRange.Worksheet
{
    [Proxy(typeof(WorksheetRequestBuilder), true)]
    public partial interface IWorksheetRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.UsedRangeWithValuesOnly
{
    [Proxy(typeof(UsedRangeWithValuesOnlyRequestBuilder), true)]
    public partial interface IUsedRangeWithValuesOnlyRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.UsedRangeWithValuesOnly.BoundingRectWithAnotherRange
{
    [Proxy(typeof(BoundingRectWithAnotherRangeRequestBuilder), true)]
    public partial interface IBoundingRectWithAnotherRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.UsedRangeWithValuesOnly.CellWithRowWithColumn
{
    [Proxy(typeof(CellWithRowWithColumnRequestBuilder), true)]
    public partial interface ICellWithRowWithColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.UsedRangeWithValuesOnly.Clear
{
    [Proxy(typeof(ClearRequestBuilder), true)]
    public partial interface IClearRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.UsedRangeWithValuesOnly.ColumnsAfter
{
    [Proxy(typeof(ColumnsAfterRequestBuilder), true)]
    public partial interface IColumnsAfterRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.UsedRangeWithValuesOnly.ColumnsAfterWithCount
{
    [Proxy(typeof(ColumnsAfterWithCountRequestBuilder), true)]
    public partial interface IColumnsAfterWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.UsedRangeWithValuesOnly.ColumnsBefore
{
    [Proxy(typeof(ColumnsBeforeRequestBuilder), true)]
    public partial interface IColumnsBeforeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.UsedRangeWithValuesOnly.ColumnsBeforeWithCount
{
    [Proxy(typeof(ColumnsBeforeWithCountRequestBuilder), true)]
    public partial interface IColumnsBeforeWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.UsedRangeWithValuesOnly.ColumnWithColumn
{
    [Proxy(typeof(ColumnWithColumnRequestBuilder), true)]
    public partial interface IColumnWithColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.UsedRangeWithValuesOnly.Delete
{
    [Proxy(typeof(DeleteRequestBuilder), true)]
    public partial interface IDeleteRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.UsedRangeWithValuesOnly.EntireColumn
{
    [Proxy(typeof(EntireColumnRequestBuilder), true)]
    public partial interface IEntireColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.UsedRangeWithValuesOnly.EntireRow
{
    [Proxy(typeof(EntireRowRequestBuilder), true)]
    public partial interface IEntireRowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.UsedRangeWithValuesOnly.Format
{
    [Proxy(typeof(FormatRequestBuilder), true)]
    public partial interface IFormatRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.UsedRangeWithValuesOnly.Insert
{
    [Proxy(typeof(InsertRequestBuilder), true)]
    public partial interface IInsertRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.UsedRangeWithValuesOnly.IntersectionWithAnotherRange
{
    [Proxy(typeof(IntersectionWithAnotherRangeRequestBuilder), true)]
    public partial interface IIntersectionWithAnotherRangeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.UsedRangeWithValuesOnly.LastCell
{
    [Proxy(typeof(LastCellRequestBuilder), true)]
    public partial interface ILastCellRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.UsedRangeWithValuesOnly.LastColumn
{
    [Proxy(typeof(LastColumnRequestBuilder), true)]
    public partial interface ILastColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.UsedRangeWithValuesOnly.LastRow
{
    [Proxy(typeof(LastRowRequestBuilder), true)]
    public partial interface ILastRowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.UsedRangeWithValuesOnly.Merge
{
    [Proxy(typeof(MergeRequestBuilder), true)]
    public partial interface IMergeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.UsedRangeWithValuesOnly.OffsetRangeWithRowOffsetWithColumnOffset
{
    [Proxy(typeof(OffsetRangeWithRowOffsetWithColumnOffsetRequestBuilder), true)]
    public partial interface IOffsetRangeWithRowOffsetWithColumnOffsetRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.UsedRangeWithValuesOnly.ResizedRangeWithDeltaRowsWithDeltaColumns
{
    [Proxy(typeof(ResizedRangeWithDeltaRowsWithDeltaColumnsRequestBuilder), true)]
    public partial interface IResizedRangeWithDeltaRowsWithDeltaColumnsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.UsedRangeWithValuesOnly.RowsAbove
{
    [Proxy(typeof(RowsAboveRequestBuilder), true)]
    public partial interface IRowsAboveRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.UsedRangeWithValuesOnly.RowsAboveWithCount
{
    [Proxy(typeof(RowsAboveWithCountRequestBuilder), true)]
    public partial interface IRowsAboveWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.UsedRangeWithValuesOnly.RowsBelow
{
    [Proxy(typeof(RowsBelowRequestBuilder), true)]
    public partial interface IRowsBelowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.UsedRangeWithValuesOnly.RowsBelowWithCount
{
    [Proxy(typeof(RowsBelowWithCountRequestBuilder), true)]
    public partial interface IRowsBelowWithCountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.UsedRangeWithValuesOnly.RowWithRow
{
    [Proxy(typeof(RowWithRowRequestBuilder), true)]
    public partial interface IRowWithRowRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.UsedRangeWithValuesOnly.Sort
{
    [Proxy(typeof(SortRequestBuilder), true)]
    public partial interface ISortRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.UsedRangeWithValuesOnly.Unmerge
{
    [Proxy(typeof(UnmergeRequestBuilder), true)]
    public partial interface IUnmergeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.UsedRangeWithValuesOnly.VisibleView
{
    [Proxy(typeof(VisibleViewRequestBuilder), true)]
    public partial interface IVisibleViewRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Items.Item.Workbook.Worksheets.Item.UsedRangeWithValuesOnly.Worksheet
{
    [Proxy(typeof(WorksheetRequestBuilder), true)]
    public partial interface IWorksheetRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.LastModifiedByUser
{
    [Proxy(typeof(LastModifiedByUserRequestBuilder), true)]
    public partial interface ILastModifiedByUserRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.LastModifiedByUser.MailboxSettings
{
    [Proxy(typeof(MailboxSettingsRequestBuilder), true)]
    public partial interface IMailboxSettingsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.LastModifiedByUser.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.LastModifiedByUser.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.List
{
    [Proxy(typeof(ListRequestBuilder), true)]
    public partial interface IListRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.List.Columns
{
    [Proxy(typeof(ColumnsRequestBuilder), true)]
    public partial interface IColumnsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.List.Columns.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.List.Columns.Item
{
    [Proxy(typeof(ColumnDefinitionItemRequestBuilder), true)]
    public partial interface IColumnDefinitionItemRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.List.Columns.Item.SourceColumn
{
    [Proxy(typeof(SourceColumnRequestBuilder), true)]
    public partial interface ISourceColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.List.ContentTypes
{
    [Proxy(typeof(ContentTypesRequestBuilder), true)]
    public partial interface IContentTypesRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.List.ContentTypes.AddCopy
{
    [Proxy(typeof(AddCopyRequestBuilder), true)]
    public partial interface IAddCopyRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.List.ContentTypes.AddCopyFromContentTypeHub
{
    [Proxy(typeof(AddCopyFromContentTypeHubRequestBuilder), true)]
    public partial interface IAddCopyFromContentTypeHubRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.List.ContentTypes.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.List.ContentTypes.GetCompatibleHubContentTypes
{
    [Proxy(typeof(GetCompatibleHubContentTypesRequestBuilder), true)]
    public partial interface IGetCompatibleHubContentTypesRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.List.ContentTypes.Item
{
    [Proxy(typeof(ContentTypeItemRequestBuilder), true)]
    public partial interface IContentTypeItemRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.List.ContentTypes.Item.AssociateWithHubSites
{
    [Proxy(typeof(AssociateWithHubSitesRequestBuilder), true)]
    public partial interface IAssociateWithHubSitesRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.List.ContentTypes.Item.BaseTypes
{
    [Proxy(typeof(BaseTypesRequestBuilder), true)]
    public partial interface IBaseTypesRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.List.ContentTypes.Item.BaseTypes.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.List.ContentTypes.Item.BaseTypes.Item
{
    [Proxy(typeof(ContentTypeItemRequestBuilder), true)]
    public partial interface IContentTypeItemRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.List.ContentTypes.Item.ColumnLinks
{
    [Proxy(typeof(ColumnLinksRequestBuilder), true)]
    public partial interface IColumnLinksRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.List.ContentTypes.Item.ColumnLinks.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.List.ContentTypes.Item.ColumnLinks.Item
{
    [Proxy(typeof(ColumnLinkItemRequestBuilder), true)]
    public partial interface IColumnLinkItemRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.List.ContentTypes.Item.ColumnPositions
{
    [Proxy(typeof(ColumnPositionsRequestBuilder), true)]
    public partial interface IColumnPositionsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.List.ContentTypes.Item.ColumnPositions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.List.ContentTypes.Item.ColumnPositions.Item
{
    [Proxy(typeof(ColumnDefinitionItemRequestBuilder), true)]
    public partial interface IColumnDefinitionItemRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.List.ContentTypes.Item.Columns
{
    [Proxy(typeof(ColumnsRequestBuilder), true)]
    public partial interface IColumnsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.List.ContentTypes.Item.Columns.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.List.ContentTypes.Item.Columns.Item
{
    [Proxy(typeof(ColumnDefinitionItemRequestBuilder), true)]
    public partial interface IColumnDefinitionItemRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.List.ContentTypes.Item.Columns.Item.SourceColumn
{
    [Proxy(typeof(SourceColumnRequestBuilder), true)]
    public partial interface ISourceColumnRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.List.ContentTypes.Item.CopyToDefaultContentLocation
{
    [Proxy(typeof(CopyToDefaultContentLocationRequestBuilder), true)]
    public partial interface ICopyToDefaultContentLocationRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.List.ContentTypes.Item.IsPublished
{
    [Proxy(typeof(IsPublishedRequestBuilder), true)]
    public partial interface IIsPublishedRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.List.ContentTypes.Item.Publish
{
    [Proxy(typeof(PublishRequestBuilder), true)]
    public partial interface IPublishRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.List.ContentTypes.Item.Unpublish
{
    [Proxy(typeof(UnpublishRequestBuilder), true)]
    public partial interface IUnpublishRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.List.CreatedByUser
{
    [Proxy(typeof(CreatedByUserRequestBuilder), true)]
    public partial interface ICreatedByUserRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.List.CreatedByUser.MailboxSettings
{
    [Proxy(typeof(MailboxSettingsRequestBuilder), true)]
    public partial interface IMailboxSettingsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.List.CreatedByUser.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.List.CreatedByUser.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.List.Drive
{
    [Proxy(typeof(DriveRequestBuilder), true)]
    public partial interface IDriveRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.List.Items
{
    [Proxy(typeof(ItemsRequestBuilder), true)]
    public partial interface IItemsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.List.Items.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.List.Items.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.List.Items.DeltaWithToken
{
    [Proxy(typeof(DeltaWithTokenRequestBuilder), true)]
    public partial interface IDeltaWithTokenRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.List.Items.Item
{
    [Proxy(typeof(ListItemItemRequestBuilder), true)]
    public partial interface IListItemItemRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.List.Items.Item.Analytics
{
    [Proxy(typeof(AnalyticsRequestBuilder), true)]
    public partial interface IAnalyticsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.List.Items.Item.CreatedByUser
{
    [Proxy(typeof(CreatedByUserRequestBuilder), true)]
    public partial interface ICreatedByUserRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.List.Items.Item.CreatedByUser.MailboxSettings
{
    [Proxy(typeof(MailboxSettingsRequestBuilder), true)]
    public partial interface IMailboxSettingsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.List.Items.Item.CreatedByUser.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.List.Items.Item.CreatedByUser.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.List.Items.Item.CreateLink
{
    [Proxy(typeof(CreateLinkRequestBuilder), true)]
    public partial interface ICreateLinkRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.List.Items.Item.DocumentSetVersions
{
    [Proxy(typeof(DocumentSetVersionsRequestBuilder), true)]
    public partial interface IDocumentSetVersionsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.List.Items.Item.DocumentSetVersions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.List.Items.Item.DocumentSetVersions.Item
{
    [Proxy(typeof(DocumentSetVersionItemRequestBuilder), true)]
    public partial interface IDocumentSetVersionItemRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.List.Items.Item.DocumentSetVersions.Item.Fields
{
    [Proxy(typeof(FieldsRequestBuilder), true)]
    public partial interface IFieldsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.List.Items.Item.DocumentSetVersions.Item.Restore
{
    [Proxy(typeof(RestoreRequestBuilder), true)]
    public partial interface IRestoreRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.List.Items.Item.DriveItem
{
    [Proxy(typeof(DriveItemRequestBuilder), true)]
    public partial interface IDriveItemRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.List.Items.Item.DriveItem.Content
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.List.Items.Item.Fields
{
    [Proxy(typeof(FieldsRequestBuilder), true)]
    public partial interface IFieldsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.List.Items.Item.GetActivitiesByInterval
{
    [Proxy(typeof(GetActivitiesByIntervalRequestBuilder), true)]
    public partial interface IGetActivitiesByIntervalRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.List.Items.Item.GetActivitiesByIntervalWithStartDateTimeWithEndDateTimeWithInterval
{
    [Proxy(typeof(GetActivitiesByIntervalWithStartDateTimeWithEndDateTimeWithIntervalRequestBuilder), true)]
    public partial interface IGetActivitiesByIntervalWithStartDateTimeWithEndDateTimeWithIntervalRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.List.Items.Item.LastModifiedByUser
{
    [Proxy(typeof(LastModifiedByUserRequestBuilder), true)]
    public partial interface ILastModifiedByUserRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.List.Items.Item.LastModifiedByUser.MailboxSettings
{
    [Proxy(typeof(MailboxSettingsRequestBuilder), true)]
    public partial interface IMailboxSettingsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.List.Items.Item.LastModifiedByUser.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.List.Items.Item.LastModifiedByUser.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.List.Items.Item.Versions
{
    [Proxy(typeof(VersionsRequestBuilder), true)]
    public partial interface IVersionsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.List.Items.Item.Versions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.List.Items.Item.Versions.Item
{
    [Proxy(typeof(ListItemVersionItemRequestBuilder), true)]
    public partial interface IListItemVersionItemRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.List.Items.Item.Versions.Item.Fields
{
    [Proxy(typeof(FieldsRequestBuilder), true)]
    public partial interface IFieldsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.List.Items.Item.Versions.Item.RestoreVersion
{
    [Proxy(typeof(RestoreVersionRequestBuilder), true)]
    public partial interface IRestoreVersionRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.List.LastModifiedByUser
{
    [Proxy(typeof(LastModifiedByUserRequestBuilder), true)]
    public partial interface ILastModifiedByUserRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.List.LastModifiedByUser.MailboxSettings
{
    [Proxy(typeof(MailboxSettingsRequestBuilder), true)]
    public partial interface IMailboxSettingsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.List.LastModifiedByUser.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.List.LastModifiedByUser.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.List.Operations
{
    [Proxy(typeof(OperationsRequestBuilder), true)]
    public partial interface IOperationsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.List.Operations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.List.Operations.Item
{
    [Proxy(typeof(RichLongRunningOperationItemRequestBuilder), true)]
    public partial interface IRichLongRunningOperationItemRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.List.Subscriptions
{
    [Proxy(typeof(SubscriptionsRequestBuilder), true)]
    public partial interface ISubscriptionsRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.List.Subscriptions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.List.Subscriptions.Item
{
    [Proxy(typeof(SubscriptionItemRequestBuilder), true)]
    public partial interface ISubscriptionItemRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.List.Subscriptions.Item.Reauthorize
{
    [Proxy(typeof(ReauthorizeRequestBuilder), true)]
    public partial interface IReauthorizeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Recent
{
    [Proxy(typeof(RecentRequestBuilder), true)]
    public partial interface IRecentRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Root
{
    [Proxy(typeof(RootRequestBuilder), true)]
    public partial interface IRootRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Root.Content
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.SearchWithQ
{
    [Proxy(typeof(SearchWithQRequestBuilder), true)]
    public partial interface ISearchWithQRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.SharedWithMe
{
    [Proxy(typeof(SharedWithMeRequestBuilder), true)]
    public partial interface ISharedWithMeRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Special
{
    [Proxy(typeof(SpecialRequestBuilder), true)]
    public partial interface ISpecialRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Special.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Special.Item
{
    [Proxy(typeof(DriveItemItemRequestBuilder), true)]
    public partial interface IDriveItemItemRequestBuilder;
}

namespace Microsoft.Graph.Drives.Item.Special.Item.Content
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Education
{
    [Proxy(typeof(EducationRequestBuilder), true)]
    public partial interface IEducationRequestBuilder;
}

namespace Microsoft.Graph.Education.Classes
{
    [Proxy(typeof(ClassesRequestBuilder), true)]
    public partial interface IClassesRequestBuilder;
}

namespace Microsoft.Graph.Education.Classes.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Education.Classes.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Education.Classes.Item
{
    [Proxy(typeof(EducationClassItemRequestBuilder), true)]
    public partial interface IEducationClassItemRequestBuilder;
}

namespace Microsoft.Graph.Education.Classes.Item.AssignmentCategories
{
    [Proxy(typeof(AssignmentCategoriesRequestBuilder), true)]
    public partial interface IAssignmentCategoriesRequestBuilder;
}

namespace Microsoft.Graph.Education.Classes.Item.AssignmentCategories.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Education.Classes.Item.AssignmentCategories.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Education.Classes.Item.AssignmentCategories.Item
{
    [Proxy(typeof(EducationCategoryItemRequestBuilder), true)]
    public partial interface IEducationCategoryItemRequestBuilder;
}

namespace Microsoft.Graph.Education.Classes.Item.AssignmentDefaults
{
    [Proxy(typeof(AssignmentDefaultsRequestBuilder), true)]
    public partial interface IAssignmentDefaultsRequestBuilder;
}

namespace Microsoft.Graph.Education.Classes.Item.Assignments
{
    [Proxy(typeof(AssignmentsRequestBuilder), true)]
    public partial interface IAssignmentsRequestBuilder;
}

namespace Microsoft.Graph.Education.Classes.Item.Assignments.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Education.Classes.Item.Assignments.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Education.Classes.Item.Assignments.Item
{
    [Proxy(typeof(EducationAssignmentItemRequestBuilder), true)]
    public partial interface IEducationAssignmentItemRequestBuilder;
}

namespace Microsoft.Graph.Education.Classes.Item.Assignments.Item.Activate
{
    [Proxy(typeof(ActivateRequestBuilder), true)]
    public partial interface IActivateRequestBuilder;
}

namespace Microsoft.Graph.Education.Classes.Item.Assignments.Item.Categories
{
    [Proxy(typeof(CategoriesRequestBuilder), true)]
    public partial interface ICategoriesRequestBuilder;
}

namespace Microsoft.Graph.Education.Classes.Item.Assignments.Item.Categories.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Education.Classes.Item.Assignments.Item.Categories.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Education.Classes.Item.Assignments.Item.Categories.Item
{
    [Proxy(typeof(EducationCategoryItemRequestBuilder), true)]
    public partial interface IEducationCategoryItemRequestBuilder;
}

namespace Microsoft.Graph.Education.Classes.Item.Assignments.Item.Categories.Item.Ref
{
    [Proxy(typeof(RefRequestBuilder), true)]
    public partial interface IRefRequestBuilder;
}

namespace Microsoft.Graph.Education.Classes.Item.Assignments.Item.Categories.Ref
{
    [Proxy(typeof(RefRequestBuilder), true)]
    public partial interface IRefRequestBuilder;
}

namespace Microsoft.Graph.Education.Classes.Item.Assignments.Item.Deactivate
{
    [Proxy(typeof(DeactivateRequestBuilder), true)]
    public partial interface IDeactivateRequestBuilder;
}

namespace Microsoft.Graph.Education.Classes.Item.Assignments.Item.GradingCategory
{
    [Proxy(typeof(GradingCategoryRequestBuilder), true)]
    public partial interface IGradingCategoryRequestBuilder;
}

namespace Microsoft.Graph.Education.Classes.Item.Assignments.Item.Publish
{
    [Proxy(typeof(PublishRequestBuilder), true)]
    public partial interface IPublishRequestBuilder;
}

namespace Microsoft.Graph.Education.Classes.Item.Assignments.Item.Resources
{
    [Proxy(typeof(ResourcesRequestBuilder), true)]
    public partial interface IResourcesRequestBuilder;
}

namespace Microsoft.Graph.Education.Classes.Item.Assignments.Item.Resources.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Education.Classes.Item.Assignments.Item.Resources.Item
{
    [Proxy(typeof(EducationAssignmentResourceItemRequestBuilder), true)]
    public partial interface IEducationAssignmentResourceItemRequestBuilder;
}

namespace Microsoft.Graph.Education.Classes.Item.Assignments.Item.Rubric
{
    [Proxy(typeof(RubricRequestBuilder), true)]
    public partial interface IRubricRequestBuilder;
}

namespace Microsoft.Graph.Education.Classes.Item.Assignments.Item.Rubric.Ref
{
    [Proxy(typeof(RefRequestBuilder), true)]
    public partial interface IRefRequestBuilder;
}

namespace Microsoft.Graph.Education.Classes.Item.Assignments.Item.SetUpFeedbackResourcesFolder
{
    [Proxy(typeof(SetUpFeedbackResourcesFolderRequestBuilder), true)]
    public partial interface ISetUpFeedbackResourcesFolderRequestBuilder;
}

namespace Microsoft.Graph.Education.Classes.Item.Assignments.Item.SetUpResourcesFolder
{
    [Proxy(typeof(SetUpResourcesFolderRequestBuilder), true)]
    public partial interface ISetUpResourcesFolderRequestBuilder;
}

namespace Microsoft.Graph.Education.Classes.Item.Assignments.Item.Submissions
{
    [Proxy(typeof(SubmissionsRequestBuilder), true)]
    public partial interface ISubmissionsRequestBuilder;
}

namespace Microsoft.Graph.Education.Classes.Item.Assignments.Item.Submissions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Education.Classes.Item.Assignments.Item.Submissions.Item
{
    [Proxy(typeof(EducationSubmissionItemRequestBuilder), true)]
    public partial interface IEducationSubmissionItemRequestBuilder;
}

namespace Microsoft.Graph.Education.Classes.Item.Assignments.Item.Submissions.Item.Excuse
{
    [Proxy(typeof(ExcuseRequestBuilder), true)]
    public partial interface IExcuseRequestBuilder;
}

namespace Microsoft.Graph.Education.Classes.Item.Assignments.Item.Submissions.Item.Outcomes
{
    [Proxy(typeof(OutcomesRequestBuilder), true)]
    public partial interface IOutcomesRequestBuilder;
}

namespace Microsoft.Graph.Education.Classes.Item.Assignments.Item.Submissions.Item.Outcomes.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Education.Classes.Item.Assignments.Item.Submissions.Item.Outcomes.Item
{
    [Proxy(typeof(EducationOutcomeItemRequestBuilder), true)]
    public partial interface IEducationOutcomeItemRequestBuilder;
}

namespace Microsoft.Graph.Education.Classes.Item.Assignments.Item.Submissions.Item.Reassign
{
    [Proxy(typeof(ReassignRequestBuilder), true)]
    public partial interface IReassignRequestBuilder;
}

namespace Microsoft.Graph.Education.Classes.Item.Assignments.Item.Submissions.Item.Resources
{
    [Proxy(typeof(ResourcesRequestBuilder), true)]
    public partial interface IResourcesRequestBuilder;
}

namespace Microsoft.Graph.Education.Classes.Item.Assignments.Item.Submissions.Item.Resources.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Education.Classes.Item.Assignments.Item.Submissions.Item.Resources.Item
{
    [Proxy(typeof(EducationSubmissionResourceItemRequestBuilder), true)]
    public partial interface IEducationSubmissionResourceItemRequestBuilder;
}

namespace Microsoft.Graph.Education.Classes.Item.Assignments.Item.Submissions.Item.Return
{
    [Proxy(typeof(ReturnRequestBuilder), true)]
    public partial interface IReturnRequestBuilder;
}

namespace Microsoft.Graph.Education.Classes.Item.Assignments.Item.Submissions.Item.SetUpResourcesFolder
{
    [Proxy(typeof(SetUpResourcesFolderRequestBuilder), true)]
    public partial interface ISetUpResourcesFolderRequestBuilder;
}

namespace Microsoft.Graph.Education.Classes.Item.Assignments.Item.Submissions.Item.Submit
{
    [Proxy(typeof(SubmitRequestBuilder), true)]
    public partial interface ISubmitRequestBuilder;
}

namespace Microsoft.Graph.Education.Classes.Item.Assignments.Item.Submissions.Item.SubmittedResources
{
    [Proxy(typeof(SubmittedResourcesRequestBuilder), true)]
    public partial interface ISubmittedResourcesRequestBuilder;
}

namespace Microsoft.Graph.Education.Classes.Item.Assignments.Item.Submissions.Item.SubmittedResources.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Education.Classes.Item.Assignments.Item.Submissions.Item.SubmittedResources.Item
{
    [Proxy(typeof(EducationSubmissionResourceItemRequestBuilder), true)]
    public partial interface IEducationSubmissionResourceItemRequestBuilder;
}

namespace Microsoft.Graph.Education.Classes.Item.Assignments.Item.Submissions.Item.Unsubmit
{
    [Proxy(typeof(UnsubmitRequestBuilder), true)]
    public partial interface IUnsubmitRequestBuilder;
}

namespace Microsoft.Graph.Education.Classes.Item.AssignmentSettings
{
    [Proxy(typeof(AssignmentSettingsRequestBuilder), true)]
    public partial interface IAssignmentSettingsRequestBuilder;
}

namespace Microsoft.Graph.Education.Classes.Item.AssignmentSettings.GradingCategories
{
    [Proxy(typeof(GradingCategoriesRequestBuilder), true)]
    public partial interface IGradingCategoriesRequestBuilder;
}

namespace Microsoft.Graph.Education.Classes.Item.AssignmentSettings.GradingCategories.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Education.Classes.Item.AssignmentSettings.GradingCategories.Item
{
    [Proxy(typeof(EducationGradingCategoryItemRequestBuilder), true)]
    public partial interface IEducationGradingCategoryItemRequestBuilder;
}

namespace Microsoft.Graph.Education.Classes.Item.GetRecentlyModifiedSubmissions
{
    [Proxy(typeof(GetRecentlyModifiedSubmissionsRequestBuilder), true)]
    public partial interface IGetRecentlyModifiedSubmissionsRequestBuilder;
}

namespace Microsoft.Graph.Education.Classes.Item.Group
{
    [Proxy(typeof(GroupRequestBuilder), true)]
    public partial interface IGroupRequestBuilder;
}

namespace Microsoft.Graph.Education.Classes.Item.Group.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.Education.Classes.Item.Group.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Education.Classes.Item.Members
{
    [Proxy(typeof(MembersRequestBuilder), true)]
    public partial interface IMembersRequestBuilder;
}

namespace Microsoft.Graph.Education.Classes.Item.Members.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Education.Classes.Item.Members.Item
{
    [Proxy(typeof(EducationUserItemRequestBuilder), true)]
    public partial interface IEducationUserItemRequestBuilder;
}

namespace Microsoft.Graph.Education.Classes.Item.Members.Item.Ref
{
    [Proxy(typeof(RefRequestBuilder), true)]
    public partial interface IRefRequestBuilder;
}

namespace Microsoft.Graph.Education.Classes.Item.Members.Ref
{
    [Proxy(typeof(RefRequestBuilder), true)]
    public partial interface IRefRequestBuilder;
}

namespace Microsoft.Graph.Education.Classes.Item.Modules
{
    [Proxy(typeof(ModulesRequestBuilder), true)]
    public partial interface IModulesRequestBuilder;
}

namespace Microsoft.Graph.Education.Classes.Item.Modules.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Education.Classes.Item.Modules.Item
{
    [Proxy(typeof(EducationModuleItemRequestBuilder), true)]
    public partial interface IEducationModuleItemRequestBuilder;
}

namespace Microsoft.Graph.Education.Classes.Item.Modules.Item.Pin
{
    [Proxy(typeof(PinRequestBuilder), true)]
    public partial interface IPinRequestBuilder;
}

namespace Microsoft.Graph.Education.Classes.Item.Modules.Item.Publish
{
    [Proxy(typeof(PublishRequestBuilder), true)]
    public partial interface IPublishRequestBuilder;
}

namespace Microsoft.Graph.Education.Classes.Item.Modules.Item.Resources
{
    [Proxy(typeof(ResourcesRequestBuilder), true)]
    public partial interface IResourcesRequestBuilder;
}

namespace Microsoft.Graph.Education.Classes.Item.Modules.Item.Resources.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Education.Classes.Item.Modules.Item.Resources.Item
{
    [Proxy(typeof(EducationModuleResourceItemRequestBuilder), true)]
    public partial interface IEducationModuleResourceItemRequestBuilder;
}

namespace Microsoft.Graph.Education.Classes.Item.Modules.Item.SetUpResourcesFolder
{
    [Proxy(typeof(SetUpResourcesFolderRequestBuilder), true)]
    public partial interface ISetUpResourcesFolderRequestBuilder;
}

namespace Microsoft.Graph.Education.Classes.Item.Modules.Item.Unpin
{
    [Proxy(typeof(UnpinRequestBuilder), true)]
    public partial interface IUnpinRequestBuilder;
}

namespace Microsoft.Graph.Education.Classes.Item.Schools
{
    [Proxy(typeof(SchoolsRequestBuilder), true)]
    public partial interface ISchoolsRequestBuilder;
}

namespace Microsoft.Graph.Education.Classes.Item.Schools.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Education.Classes.Item.Schools.Item
{
    [Proxy(typeof(EducationSchoolItemRequestBuilder), true)]
    public partial interface IEducationSchoolItemRequestBuilder;
}

namespace Microsoft.Graph.Education.Classes.Item.Teachers
{
    [Proxy(typeof(TeachersRequestBuilder), true)]
    public partial interface ITeachersRequestBuilder;
}

namespace Microsoft.Graph.Education.Classes.Item.Teachers.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Education.Classes.Item.Teachers.Item
{
    [Proxy(typeof(EducationUserItemRequestBuilder), true)]
    public partial interface IEducationUserItemRequestBuilder;
}

namespace Microsoft.Graph.Education.Classes.Item.Teachers.Item.Ref
{
    [Proxy(typeof(RefRequestBuilder), true)]
    public partial interface IRefRequestBuilder;
}

namespace Microsoft.Graph.Education.Classes.Item.Teachers.Ref
{
    [Proxy(typeof(RefRequestBuilder), true)]
    public partial interface IRefRequestBuilder;
}

namespace Microsoft.Graph.Education.Me
{
    [Proxy(typeof(MeRequestBuilder), true)]
    public partial interface IMeRequestBuilder;
}

namespace Microsoft.Graph.Education.Me.Assignments
{
    [Proxy(typeof(AssignmentsRequestBuilder), true)]
    public partial interface IAssignmentsRequestBuilder;
}

namespace Microsoft.Graph.Education.Me.Assignments.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Education.Me.Assignments.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Education.Me.Assignments.Item
{
    [Proxy(typeof(EducationAssignmentItemRequestBuilder), true)]
    public partial interface IEducationAssignmentItemRequestBuilder;
}

namespace Microsoft.Graph.Education.Me.Assignments.Item.Activate
{
    [Proxy(typeof(ActivateRequestBuilder), true)]
    public partial interface IActivateRequestBuilder;
}

namespace Microsoft.Graph.Education.Me.Assignments.Item.Categories
{
    [Proxy(typeof(CategoriesRequestBuilder), true)]
    public partial interface ICategoriesRequestBuilder;
}

namespace Microsoft.Graph.Education.Me.Assignments.Item.Categories.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Education.Me.Assignments.Item.Categories.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Education.Me.Assignments.Item.Categories.Item
{
    [Proxy(typeof(EducationCategoryItemRequestBuilder), true)]
    public partial interface IEducationCategoryItemRequestBuilder;
}

namespace Microsoft.Graph.Education.Me.Assignments.Item.Categories.Item.Ref
{
    [Proxy(typeof(RefRequestBuilder), true)]
    public partial interface IRefRequestBuilder;
}

namespace Microsoft.Graph.Education.Me.Assignments.Item.Categories.Ref
{
    [Proxy(typeof(RefRequestBuilder), true)]
    public partial interface IRefRequestBuilder;
}

namespace Microsoft.Graph.Education.Me.Assignments.Item.Deactivate
{
    [Proxy(typeof(DeactivateRequestBuilder), true)]
    public partial interface IDeactivateRequestBuilder;
}

namespace Microsoft.Graph.Education.Me.Assignments.Item.GradingCategory
{
    [Proxy(typeof(GradingCategoryRequestBuilder), true)]
    public partial interface IGradingCategoryRequestBuilder;
}

namespace Microsoft.Graph.Education.Me.Assignments.Item.Publish
{
    [Proxy(typeof(PublishRequestBuilder), true)]
    public partial interface IPublishRequestBuilder;
}

namespace Microsoft.Graph.Education.Me.Assignments.Item.Resources
{
    [Proxy(typeof(ResourcesRequestBuilder), true)]
    public partial interface IResourcesRequestBuilder;
}

namespace Microsoft.Graph.Education.Me.Assignments.Item.Resources.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Education.Me.Assignments.Item.Resources.Item
{
    [Proxy(typeof(EducationAssignmentResourceItemRequestBuilder), true)]
    public partial interface IEducationAssignmentResourceItemRequestBuilder;
}

namespace Microsoft.Graph.Education.Me.Assignments.Item.Rubric
{
    [Proxy(typeof(RubricRequestBuilder), true)]
    public partial interface IRubricRequestBuilder;
}

namespace Microsoft.Graph.Education.Me.Assignments.Item.Rubric.Ref
{
    [Proxy(typeof(RefRequestBuilder), true)]
    public partial interface IRefRequestBuilder;
}

namespace Microsoft.Graph.Education.Me.Assignments.Item.SetUpFeedbackResourcesFolder
{
    [Proxy(typeof(SetUpFeedbackResourcesFolderRequestBuilder), true)]
    public partial interface ISetUpFeedbackResourcesFolderRequestBuilder;
}

namespace Microsoft.Graph.Education.Me.Assignments.Item.SetUpResourcesFolder
{
    [Proxy(typeof(SetUpResourcesFolderRequestBuilder), true)]
    public partial interface ISetUpResourcesFolderRequestBuilder;
}

namespace Microsoft.Graph.Education.Me.Assignments.Item.Submissions
{
    [Proxy(typeof(SubmissionsRequestBuilder), true)]
    public partial interface ISubmissionsRequestBuilder;
}

namespace Microsoft.Graph.Education.Me.Assignments.Item.Submissions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Education.Me.Assignments.Item.Submissions.Item
{
    [Proxy(typeof(EducationSubmissionItemRequestBuilder), true)]
    public partial interface IEducationSubmissionItemRequestBuilder;
}

namespace Microsoft.Graph.Education.Me.Assignments.Item.Submissions.Item.Excuse
{
    [Proxy(typeof(ExcuseRequestBuilder), true)]
    public partial interface IExcuseRequestBuilder;
}

namespace Microsoft.Graph.Education.Me.Assignments.Item.Submissions.Item.Outcomes
{
    [Proxy(typeof(OutcomesRequestBuilder), true)]
    public partial interface IOutcomesRequestBuilder;
}

namespace Microsoft.Graph.Education.Me.Assignments.Item.Submissions.Item.Outcomes.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Education.Me.Assignments.Item.Submissions.Item.Outcomes.Item
{
    [Proxy(typeof(EducationOutcomeItemRequestBuilder), true)]
    public partial interface IEducationOutcomeItemRequestBuilder;
}

namespace Microsoft.Graph.Education.Me.Assignments.Item.Submissions.Item.Reassign
{
    [Proxy(typeof(ReassignRequestBuilder), true)]
    public partial interface IReassignRequestBuilder;
}

namespace Microsoft.Graph.Education.Me.Assignments.Item.Submissions.Item.Resources
{
    [Proxy(typeof(ResourcesRequestBuilder), true)]
    public partial interface IResourcesRequestBuilder;
}

namespace Microsoft.Graph.Education.Me.Assignments.Item.Submissions.Item.Resources.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Education.Me.Assignments.Item.Submissions.Item.Resources.Item
{
    [Proxy(typeof(EducationSubmissionResourceItemRequestBuilder), true)]
    public partial interface IEducationSubmissionResourceItemRequestBuilder;
}

namespace Microsoft.Graph.Education.Me.Assignments.Item.Submissions.Item.Return
{
    [Proxy(typeof(ReturnRequestBuilder), true)]
    public partial interface IReturnRequestBuilder;
}

namespace Microsoft.Graph.Education.Me.Assignments.Item.Submissions.Item.SetUpResourcesFolder
{
    [Proxy(typeof(SetUpResourcesFolderRequestBuilder), true)]
    public partial interface ISetUpResourcesFolderRequestBuilder;
}

namespace Microsoft.Graph.Education.Me.Assignments.Item.Submissions.Item.Submit
{
    [Proxy(typeof(SubmitRequestBuilder), true)]
    public partial interface ISubmitRequestBuilder;
}

namespace Microsoft.Graph.Education.Me.Assignments.Item.Submissions.Item.SubmittedResources
{
    [Proxy(typeof(SubmittedResourcesRequestBuilder), true)]
    public partial interface ISubmittedResourcesRequestBuilder;
}

namespace Microsoft.Graph.Education.Me.Assignments.Item.Submissions.Item.SubmittedResources.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Education.Me.Assignments.Item.Submissions.Item.SubmittedResources.Item
{
    [Proxy(typeof(EducationSubmissionResourceItemRequestBuilder), true)]
    public partial interface IEducationSubmissionResourceItemRequestBuilder;
}

namespace Microsoft.Graph.Education.Me.Assignments.Item.Submissions.Item.Unsubmit
{
    [Proxy(typeof(UnsubmitRequestBuilder), true)]
    public partial interface IUnsubmitRequestBuilder;
}

namespace Microsoft.Graph.Education.Me.Classes
{
    [Proxy(typeof(ClassesRequestBuilder), true)]
    public partial interface IClassesRequestBuilder;
}

namespace Microsoft.Graph.Education.Me.Classes.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Education.Me.Classes.Item
{
    [Proxy(typeof(EducationClassItemRequestBuilder), true)]
    public partial interface IEducationClassItemRequestBuilder;
}

namespace Microsoft.Graph.Education.Me.Rubrics
{
    [Proxy(typeof(RubricsRequestBuilder), true)]
    public partial interface IRubricsRequestBuilder;
}

namespace Microsoft.Graph.Education.Me.Rubrics.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Education.Me.Rubrics.Item
{
    [Proxy(typeof(EducationRubricItemRequestBuilder), true)]
    public partial interface IEducationRubricItemRequestBuilder;
}

namespace Microsoft.Graph.Education.Me.Schools
{
    [Proxy(typeof(SchoolsRequestBuilder), true)]
    public partial interface ISchoolsRequestBuilder;
}

namespace Microsoft.Graph.Education.Me.Schools.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Education.Me.Schools.Item
{
    [Proxy(typeof(EducationSchoolItemRequestBuilder), true)]
    public partial interface IEducationSchoolItemRequestBuilder;
}

namespace Microsoft.Graph.Education.Me.TaughtClasses
{
    [Proxy(typeof(TaughtClassesRequestBuilder), true)]
    public partial interface ITaughtClassesRequestBuilder;
}

namespace Microsoft.Graph.Education.Me.TaughtClasses.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Education.Me.TaughtClasses.Item
{
    [Proxy(typeof(EducationClassItemRequestBuilder), true)]
    public partial interface IEducationClassItemRequestBuilder;
}

namespace Microsoft.Graph.Education.Me.User
{
    [Proxy(typeof(UserRequestBuilder), true)]
    public partial interface IUserRequestBuilder;
}

namespace Microsoft.Graph.Education.Me.User.MailboxSettings
{
    [Proxy(typeof(MailboxSettingsRequestBuilder), true)]
    public partial interface IMailboxSettingsRequestBuilder;
}

namespace Microsoft.Graph.Education.Me.User.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.Education.Me.User.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Education.Schools
{
    [Proxy(typeof(SchoolsRequestBuilder), true)]
    public partial interface ISchoolsRequestBuilder;
}

namespace Microsoft.Graph.Education.Schools.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Education.Schools.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Education.Schools.Item
{
    [Proxy(typeof(EducationSchoolItemRequestBuilder), true)]
    public partial interface IEducationSchoolItemRequestBuilder;
}

namespace Microsoft.Graph.Education.Schools.Item.AdministrativeUnit
{
    [Proxy(typeof(AdministrativeUnitRequestBuilder), true)]
    public partial interface IAdministrativeUnitRequestBuilder;
}

namespace Microsoft.Graph.Education.Schools.Item.Classes
{
    [Proxy(typeof(ClassesRequestBuilder), true)]
    public partial interface IClassesRequestBuilder;
}

namespace Microsoft.Graph.Education.Schools.Item.Classes.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Education.Schools.Item.Classes.Item
{
    [Proxy(typeof(EducationClassItemRequestBuilder), true)]
    public partial interface IEducationClassItemRequestBuilder;
}

namespace Microsoft.Graph.Education.Schools.Item.Classes.Item.Ref
{
    [Proxy(typeof(RefRequestBuilder), true)]
    public partial interface IRefRequestBuilder;
}

namespace Microsoft.Graph.Education.Schools.Item.Classes.Ref
{
    [Proxy(typeof(RefRequestBuilder), true)]
    public partial interface IRefRequestBuilder;
}

namespace Microsoft.Graph.Education.Schools.Item.Users
{
    [Proxy(typeof(UsersRequestBuilder), true)]
    public partial interface IUsersRequestBuilder;
}

namespace Microsoft.Graph.Education.Schools.Item.Users.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Education.Schools.Item.Users.Item
{
    [Proxy(typeof(EducationUserItemRequestBuilder), true)]
    public partial interface IEducationUserItemRequestBuilder;
}

namespace Microsoft.Graph.Education.Schools.Item.Users.Item.Ref
{
    [Proxy(typeof(RefRequestBuilder), true)]
    public partial interface IRefRequestBuilder;
}

namespace Microsoft.Graph.Education.Schools.Item.Users.Ref
{
    [Proxy(typeof(RefRequestBuilder), true)]
    public partial interface IRefRequestBuilder;
}

namespace Microsoft.Graph.Education.Users
{
    [Proxy(typeof(UsersRequestBuilder), true)]
    public partial interface IUsersRequestBuilder;
}

namespace Microsoft.Graph.Education.Users.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Education.Users.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Education.Users.Item
{
    [Proxy(typeof(EducationUserItemRequestBuilder), true)]
    public partial interface IEducationUserItemRequestBuilder;
}

namespace Microsoft.Graph.Education.Users.Item.Assignments
{
    [Proxy(typeof(AssignmentsRequestBuilder), true)]
    public partial interface IAssignmentsRequestBuilder;
}

namespace Microsoft.Graph.Education.Users.Item.Assignments.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Education.Users.Item.Assignments.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Education.Users.Item.Assignments.Item
{
    [Proxy(typeof(EducationAssignmentItemRequestBuilder), true)]
    public partial interface IEducationAssignmentItemRequestBuilder;
}

namespace Microsoft.Graph.Education.Users.Item.Assignments.Item.Activate
{
    [Proxy(typeof(ActivateRequestBuilder), true)]
    public partial interface IActivateRequestBuilder;
}

namespace Microsoft.Graph.Education.Users.Item.Assignments.Item.Categories
{
    [Proxy(typeof(CategoriesRequestBuilder), true)]
    public partial interface ICategoriesRequestBuilder;
}

namespace Microsoft.Graph.Education.Users.Item.Assignments.Item.Categories.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Education.Users.Item.Assignments.Item.Categories.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Education.Users.Item.Assignments.Item.Categories.Item
{
    [Proxy(typeof(EducationCategoryItemRequestBuilder), true)]
    public partial interface IEducationCategoryItemRequestBuilder;
}

namespace Microsoft.Graph.Education.Users.Item.Assignments.Item.Categories.Item.Ref
{
    [Proxy(typeof(RefRequestBuilder), true)]
    public partial interface IRefRequestBuilder;
}

namespace Microsoft.Graph.Education.Users.Item.Assignments.Item.Categories.Ref
{
    [Proxy(typeof(RefRequestBuilder), true)]
    public partial interface IRefRequestBuilder;
}

namespace Microsoft.Graph.Education.Users.Item.Assignments.Item.Deactivate
{
    [Proxy(typeof(DeactivateRequestBuilder), true)]
    public partial interface IDeactivateRequestBuilder;
}

namespace Microsoft.Graph.Education.Users.Item.Assignments.Item.GradingCategory
{
    [Proxy(typeof(GradingCategoryRequestBuilder), true)]
    public partial interface IGradingCategoryRequestBuilder;
}

namespace Microsoft.Graph.Education.Users.Item.Assignments.Item.Publish
{
    [Proxy(typeof(PublishRequestBuilder), true)]
    public partial interface IPublishRequestBuilder;
}

namespace Microsoft.Graph.Education.Users.Item.Assignments.Item.Resources
{
    [Proxy(typeof(ResourcesRequestBuilder), true)]
    public partial interface IResourcesRequestBuilder;
}

namespace Microsoft.Graph.Education.Users.Item.Assignments.Item.Resources.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Education.Users.Item.Assignments.Item.Resources.Item
{
    [Proxy(typeof(EducationAssignmentResourceItemRequestBuilder), true)]
    public partial interface IEducationAssignmentResourceItemRequestBuilder;
}

namespace Microsoft.Graph.Education.Users.Item.Assignments.Item.Rubric
{
    [Proxy(typeof(RubricRequestBuilder), true)]
    public partial interface IRubricRequestBuilder;
}

namespace Microsoft.Graph.Education.Users.Item.Assignments.Item.Rubric.Ref
{
    [Proxy(typeof(RefRequestBuilder), true)]
    public partial interface IRefRequestBuilder;
}

namespace Microsoft.Graph.Education.Users.Item.Assignments.Item.SetUpFeedbackResourcesFolder
{
    [Proxy(typeof(SetUpFeedbackResourcesFolderRequestBuilder), true)]
    public partial interface ISetUpFeedbackResourcesFolderRequestBuilder;
}

namespace Microsoft.Graph.Education.Users.Item.Assignments.Item.SetUpResourcesFolder
{
    [Proxy(typeof(SetUpResourcesFolderRequestBuilder), true)]
    public partial interface ISetUpResourcesFolderRequestBuilder;
}

namespace Microsoft.Graph.Education.Users.Item.Assignments.Item.Submissions
{
    [Proxy(typeof(SubmissionsRequestBuilder), true)]
    public partial interface ISubmissionsRequestBuilder;
}

namespace Microsoft.Graph.Education.Users.Item.Assignments.Item.Submissions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Education.Users.Item.Assignments.Item.Submissions.Item
{
    [Proxy(typeof(EducationSubmissionItemRequestBuilder), true)]
    public partial interface IEducationSubmissionItemRequestBuilder;
}

namespace Microsoft.Graph.Education.Users.Item.Assignments.Item.Submissions.Item.Excuse
{
    [Proxy(typeof(ExcuseRequestBuilder), true)]
    public partial interface IExcuseRequestBuilder;
}

namespace Microsoft.Graph.Education.Users.Item.Assignments.Item.Submissions.Item.Outcomes
{
    [Proxy(typeof(OutcomesRequestBuilder), true)]
    public partial interface IOutcomesRequestBuilder;
}

namespace Microsoft.Graph.Education.Users.Item.Assignments.Item.Submissions.Item.Outcomes.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Education.Users.Item.Assignments.Item.Submissions.Item.Outcomes.Item
{
    [Proxy(typeof(EducationOutcomeItemRequestBuilder), true)]
    public partial interface IEducationOutcomeItemRequestBuilder;
}

namespace Microsoft.Graph.Education.Users.Item.Assignments.Item.Submissions.Item.Reassign
{
    [Proxy(typeof(ReassignRequestBuilder), true)]
    public partial interface IReassignRequestBuilder;
}

namespace Microsoft.Graph.Education.Users.Item.Assignments.Item.Submissions.Item.Resources
{
    [Proxy(typeof(ResourcesRequestBuilder), true)]
    public partial interface IResourcesRequestBuilder;
}

namespace Microsoft.Graph.Education.Users.Item.Assignments.Item.Submissions.Item.Resources.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Education.Users.Item.Assignments.Item.Submissions.Item.Resources.Item
{
    [Proxy(typeof(EducationSubmissionResourceItemRequestBuilder), true)]
    public partial interface IEducationSubmissionResourceItemRequestBuilder;
}

namespace Microsoft.Graph.Education.Users.Item.Assignments.Item.Submissions.Item.Return
{
    [Proxy(typeof(ReturnRequestBuilder), true)]
    public partial interface IReturnRequestBuilder;
}

namespace Microsoft.Graph.Education.Users.Item.Assignments.Item.Submissions.Item.SetUpResourcesFolder
{
    [Proxy(typeof(SetUpResourcesFolderRequestBuilder), true)]
    public partial interface ISetUpResourcesFolderRequestBuilder;
}

namespace Microsoft.Graph.Education.Users.Item.Assignments.Item.Submissions.Item.Submit
{
    [Proxy(typeof(SubmitRequestBuilder), true)]
    public partial interface ISubmitRequestBuilder;
}

namespace Microsoft.Graph.Education.Users.Item.Assignments.Item.Submissions.Item.SubmittedResources
{
    [Proxy(typeof(SubmittedResourcesRequestBuilder), true)]
    public partial interface ISubmittedResourcesRequestBuilder;
}

namespace Microsoft.Graph.Education.Users.Item.Assignments.Item.Submissions.Item.SubmittedResources.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Education.Users.Item.Assignments.Item.Submissions.Item.SubmittedResources.Item
{
    [Proxy(typeof(EducationSubmissionResourceItemRequestBuilder), true)]
    public partial interface IEducationSubmissionResourceItemRequestBuilder;
}

namespace Microsoft.Graph.Education.Users.Item.Assignments.Item.Submissions.Item.Unsubmit
{
    [Proxy(typeof(UnsubmitRequestBuilder), true)]
    public partial interface IUnsubmitRequestBuilder;
}

namespace Microsoft.Graph.Education.Users.Item.Classes
{
    [Proxy(typeof(ClassesRequestBuilder), true)]
    public partial interface IClassesRequestBuilder;
}

namespace Microsoft.Graph.Education.Users.Item.Classes.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Education.Users.Item.Classes.Item
{
    [Proxy(typeof(EducationClassItemRequestBuilder), true)]
    public partial interface IEducationClassItemRequestBuilder;
}

namespace Microsoft.Graph.Education.Users.Item.Rubrics
{
    [Proxy(typeof(RubricsRequestBuilder), true)]
    public partial interface IRubricsRequestBuilder;
}

namespace Microsoft.Graph.Education.Users.Item.Rubrics.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Education.Users.Item.Rubrics.Item
{
    [Proxy(typeof(EducationRubricItemRequestBuilder), true)]
    public partial interface IEducationRubricItemRequestBuilder;
}

namespace Microsoft.Graph.Education.Users.Item.Schools
{
    [Proxy(typeof(SchoolsRequestBuilder), true)]
    public partial interface ISchoolsRequestBuilder;
}

namespace Microsoft.Graph.Education.Users.Item.Schools.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Education.Users.Item.Schools.Item
{
    [Proxy(typeof(EducationSchoolItemRequestBuilder), true)]
    public partial interface IEducationSchoolItemRequestBuilder;
}

namespace Microsoft.Graph.Education.Users.Item.TaughtClasses
{
    [Proxy(typeof(TaughtClassesRequestBuilder), true)]
    public partial interface ITaughtClassesRequestBuilder;
}

namespace Microsoft.Graph.Education.Users.Item.TaughtClasses.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Education.Users.Item.TaughtClasses.Item
{
    [Proxy(typeof(EducationClassItemRequestBuilder), true)]
    public partial interface IEducationClassItemRequestBuilder;
}

namespace Microsoft.Graph.Education.Users.Item.User
{
    [Proxy(typeof(UserRequestBuilder), true)]
    public partial interface IUserRequestBuilder;
}

namespace Microsoft.Graph.Education.Users.Item.User.MailboxSettings
{
    [Proxy(typeof(MailboxSettingsRequestBuilder), true)]
    public partial interface IMailboxSettingsRequestBuilder;
}

namespace Microsoft.Graph.Education.Users.Item.User.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.Education.Users.Item.User.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.EmployeeExperience
{
    [Proxy(typeof(EmployeeExperienceRequestBuilder), true)]
    public partial interface IEmployeeExperienceRequestBuilder;
}

namespace Microsoft.Graph.EmployeeExperience.Communities
{
    [Proxy(typeof(CommunitiesRequestBuilder), true)]
    public partial interface ICommunitiesRequestBuilder;
}

namespace Microsoft.Graph.EmployeeExperience.Communities.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.EmployeeExperience.Communities.Item
{
    [Proxy(typeof(CommunityItemRequestBuilder), true)]
    public partial interface ICommunityItemRequestBuilder;
}

namespace Microsoft.Graph.EmployeeExperience.Communities.Item.Group
{
    [Proxy(typeof(GroupRequestBuilder), true)]
    public partial interface IGroupRequestBuilder;
}

namespace Microsoft.Graph.EmployeeExperience.Communities.Item.Group.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.EmployeeExperience.Communities.Item.Group.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.EmployeeExperience.Communities.Item.Owners
{
    [Proxy(typeof(OwnersRequestBuilder), true)]
    public partial interface IOwnersRequestBuilder;
}

namespace Microsoft.Graph.EmployeeExperience.Communities.Item.Owners.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.EmployeeExperience.Communities.Item.Owners.Item
{
    [Proxy(typeof(UserItemRequestBuilder), true)]
    public partial interface IUserItemRequestBuilder;
}

namespace Microsoft.Graph.EmployeeExperience.Communities.Item.Owners.Item.MailboxSettings
{
    [Proxy(typeof(MailboxSettingsRequestBuilder), true)]
    public partial interface IMailboxSettingsRequestBuilder;
}

namespace Microsoft.Graph.EmployeeExperience.Communities.Item.Owners.Item.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.EmployeeExperience.Communities.Item.Owners.Item.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.EmployeeExperience.Communities.Item.OwnersWithUserPrincipalName
{
    [Proxy(typeof(OwnersWithUserPrincipalNameRequestBuilder), true)]
    public partial interface IOwnersWithUserPrincipalNameRequestBuilder;
}

namespace Microsoft.Graph.EmployeeExperience.EngagementAsyncOperations
{
    [Proxy(typeof(EngagementAsyncOperationsRequestBuilder), true)]
    public partial interface IEngagementAsyncOperationsRequestBuilder;
}

namespace Microsoft.Graph.EmployeeExperience.EngagementAsyncOperations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.EmployeeExperience.EngagementAsyncOperations.Item
{
    [Proxy(typeof(EngagementAsyncOperationItemRequestBuilder), true)]
    public partial interface IEngagementAsyncOperationItemRequestBuilder;
}

namespace Microsoft.Graph.EmployeeExperience.LearningCourseActivities
{
    [Proxy(typeof(LearningCourseActivitiesRequestBuilder), true)]
    public partial interface ILearningCourseActivitiesRequestBuilder;
}

namespace Microsoft.Graph.EmployeeExperience.LearningCourseActivities.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.EmployeeExperience.LearningCourseActivities.Item
{
    [Proxy(typeof(LearningCourseActivityItemRequestBuilder), true)]
    public partial interface ILearningCourseActivityItemRequestBuilder;
}

namespace Microsoft.Graph.EmployeeExperience.LearningCourseActivitiesWithExternalcourseActivityId
{
    [Proxy(typeof(LearningCourseActivitiesWithExternalcourseActivityIdRequestBuilder), true)]
    public partial interface ILearningCourseActivitiesWithExternalcourseActivityIdRequestBuilder;
}

namespace Microsoft.Graph.EmployeeExperience.LearningProviders
{
    [Proxy(typeof(LearningProvidersRequestBuilder), true)]
    public partial interface ILearningProvidersRequestBuilder;
}

namespace Microsoft.Graph.EmployeeExperience.LearningProviders.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.EmployeeExperience.LearningProviders.Item
{
    [Proxy(typeof(LearningProviderItemRequestBuilder), true)]
    public partial interface ILearningProviderItemRequestBuilder;
}

namespace Microsoft.Graph.EmployeeExperience.LearningProviders.Item.LearningContents
{
    [Proxy(typeof(LearningContentsRequestBuilder), true)]
    public partial interface ILearningContentsRequestBuilder;
}

namespace Microsoft.Graph.EmployeeExperience.LearningProviders.Item.LearningContents.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.EmployeeExperience.LearningProviders.Item.LearningContents.Item
{
    [Proxy(typeof(LearningContentItemRequestBuilder), true)]
    public partial interface ILearningContentItemRequestBuilder;
}

namespace Microsoft.Graph.EmployeeExperience.LearningProviders.Item.LearningContentsWithExternalId
{
    [Proxy(typeof(LearningContentsWithExternalIdRequestBuilder), true)]
    public partial interface ILearningContentsWithExternalIdRequestBuilder;
}

namespace Microsoft.Graph.EmployeeExperience.LearningProviders.Item.LearningCourseActivities
{
    [Proxy(typeof(LearningCourseActivitiesRequestBuilder), true)]
    public partial interface ILearningCourseActivitiesRequestBuilder;
}

namespace Microsoft.Graph.EmployeeExperience.LearningProviders.Item.LearningCourseActivities.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.EmployeeExperience.LearningProviders.Item.LearningCourseActivities.Item
{
    [Proxy(typeof(LearningCourseActivityItemRequestBuilder), true)]
    public partial interface ILearningCourseActivityItemRequestBuilder;
}

namespace Microsoft.Graph.EmployeeExperience.LearningProviders.Item.LearningCourseActivitiesWithExternalcourseActivityId
{
    [Proxy(typeof(LearningCourseActivitiesWithExternalcourseActivityIdRequestBuilder), true)]
    public partial interface ILearningCourseActivitiesWithExternalcourseActivityIdRequestBuilder;
}

namespace Microsoft.Graph.External
{
    [Proxy(typeof(ExternalRequestBuilder), true)]
    public partial interface IExternalRequestBuilder;
}

namespace Microsoft.Graph.External.Connections
{
    [Proxy(typeof(ConnectionsRequestBuilder), true)]
    public partial interface IConnectionsRequestBuilder;
}

namespace Microsoft.Graph.External.Connections.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.External.Connections.Item
{
    [Proxy(typeof(ExternalConnectionItemRequestBuilder), true)]
    public partial interface IExternalConnectionItemRequestBuilder;
}

namespace Microsoft.Graph.External.Connections.Item.Groups
{
    [Proxy(typeof(GroupsRequestBuilder), true)]
    public partial interface IGroupsRequestBuilder;
}

namespace Microsoft.Graph.External.Connections.Item.Groups.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.External.Connections.Item.Groups.Item
{
    [Proxy(typeof(ExternalGroupItemRequestBuilder), true)]
    public partial interface IExternalGroupItemRequestBuilder;
}

namespace Microsoft.Graph.External.Connections.Item.Groups.Item.Members
{
    [Proxy(typeof(MembersRequestBuilder), true)]
    public partial interface IMembersRequestBuilder;
}

namespace Microsoft.Graph.External.Connections.Item.Groups.Item.Members.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.External.Connections.Item.Groups.Item.Members.Item
{
    [Proxy(typeof(IdentityItemRequestBuilder), true)]
    public partial interface IIdentityItemRequestBuilder;
}

namespace Microsoft.Graph.External.Connections.Item.Items
{
    [Proxy(typeof(ItemsRequestBuilder), true)]
    public partial interface IItemsRequestBuilder;
}

namespace Microsoft.Graph.External.Connections.Item.Items.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.External.Connections.Item.Items.Item
{
    [Proxy(typeof(ExternalItemItemRequestBuilder), true)]
    public partial interface IExternalItemItemRequestBuilder;
}

namespace Microsoft.Graph.External.Connections.Item.Items.Item.Activities
{
    [Proxy(typeof(ActivitiesRequestBuilder), true)]
    public partial interface IActivitiesRequestBuilder;
}

namespace Microsoft.Graph.External.Connections.Item.Items.Item.Activities.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.External.Connections.Item.Items.Item.Activities.Item
{
    [Proxy(typeof(ExternalActivityItemRequestBuilder), true)]
    public partial interface IExternalActivityItemRequestBuilder;
}

namespace Microsoft.Graph.External.Connections.Item.Items.Item.Activities.Item.PerformedBy
{
    [Proxy(typeof(PerformedByRequestBuilder), true)]
    public partial interface IPerformedByRequestBuilder;
}

namespace Microsoft.Graph.External.Connections.Item.Items.Item.MicrosoftGraphExternalConnectorsAddActivities
{
    [Proxy(typeof(MicrosoftGraphExternalConnectorsAddActivitiesRequestBuilder), true)]
    public partial interface IMicrosoftGraphExternalConnectorsAddActivitiesRequestBuilder;
}

namespace Microsoft.Graph.External.Connections.Item.Operations
{
    [Proxy(typeof(OperationsRequestBuilder), true)]
    public partial interface IOperationsRequestBuilder;
}

namespace Microsoft.Graph.External.Connections.Item.Operations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.External.Connections.Item.Operations.Item
{
    [Proxy(typeof(ConnectionOperationItemRequestBuilder), true)]
    public partial interface IConnectionOperationItemRequestBuilder;
}

namespace Microsoft.Graph.External.Connections.Item.Schema
{
    [Proxy(typeof(SchemaRequestBuilder), true)]
    public partial interface ISchemaRequestBuilder;
}

namespace Microsoft.Graph.FilterOperators
{
    [Proxy(typeof(FilterOperatorsRequestBuilder), true)]
    public partial interface IFilterOperatorsRequestBuilder;
}

namespace Microsoft.Graph.FilterOperators.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.FilterOperators.Item
{
    [Proxy(typeof(FilterOperatorSchemaItemRequestBuilder), true)]
    public partial interface IFilterOperatorSchemaItemRequestBuilder;
}

namespace Microsoft.Graph.Functions
{
    [Proxy(typeof(FunctionsRequestBuilder), true)]
    public partial interface IFunctionsRequestBuilder;
}

namespace Microsoft.Graph.Functions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Functions.Item
{
    [Proxy(typeof(AttributeMappingFunctionSchemaItemRequestBuilder), true)]
    public partial interface IAttributeMappingFunctionSchemaItemRequestBuilder;
}

namespace Microsoft.Graph.GroupLifecyclePolicies
{
    [Proxy(typeof(GroupLifecyclePoliciesRequestBuilder), true)]
    public partial interface IGroupLifecyclePoliciesRequestBuilder;
}

namespace Microsoft.Graph.GroupLifecyclePolicies.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.GroupLifecyclePolicies.Item
{
    [Proxy(typeof(GroupLifecyclePolicyItemRequestBuilder), true)]
    public partial interface IGroupLifecyclePolicyItemRequestBuilder;
}

namespace Microsoft.Graph.GroupLifecyclePolicies.Item.AddGroup
{
    [Proxy(typeof(AddGroupRequestBuilder), true)]
    public partial interface IAddGroupRequestBuilder;
}

namespace Microsoft.Graph.GroupLifecyclePolicies.Item.RemoveGroup
{
    [Proxy(typeof(RemoveGroupRequestBuilder), true)]
    public partial interface IRemoveGroupRequestBuilder;
}

namespace Microsoft.Graph.Groups
{
    [Proxy(typeof(GroupsRequestBuilder), true)]
    public partial interface IGroupsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Groups.GetAvailableExtensionProperties
{
    [Proxy(typeof(GetAvailableExtensionPropertiesRequestBuilder), true)]
    public partial interface IGetAvailableExtensionPropertiesRequestBuilder;
}

namespace Microsoft.Graph.Groups.GetByIds
{
    [Proxy(typeof(GetByIdsRequestBuilder), true)]
    public partial interface IGetByIdsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item
{
    [Proxy(typeof(GroupItemRequestBuilder), true)]
    public partial interface IGroupItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.AcceptedSenders
{
    [Proxy(typeof(AcceptedSendersRequestBuilder), true)]
    public partial interface IAcceptedSendersRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.AcceptedSenders.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.AcceptedSenders.Item
{
    [Proxy(typeof(DirectoryObjectItemRequestBuilder), true)]
    public partial interface IDirectoryObjectItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.AcceptedSenders.Item.Ref
{
    [Proxy(typeof(RefRequestBuilder), true)]
    public partial interface IRefRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.AcceptedSenders.Ref
{
    [Proxy(typeof(RefRequestBuilder), true)]
    public partial interface IRefRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.AddFavorite
{
    [Proxy(typeof(AddFavoriteRequestBuilder), true)]
    public partial interface IAddFavoriteRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.AppRoleAssignments
{
    [Proxy(typeof(AppRoleAssignmentsRequestBuilder), true)]
    public partial interface IAppRoleAssignmentsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.AppRoleAssignments.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.AppRoleAssignments.Item
{
    [Proxy(typeof(AppRoleAssignmentItemRequestBuilder), true)]
    public partial interface IAppRoleAssignmentItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.AssignLicense
{
    [Proxy(typeof(AssignLicenseRequestBuilder), true)]
    public partial interface IAssignLicenseRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Calendar
{
    [Proxy(typeof(CalendarRequestBuilder), true)]
    public partial interface ICalendarRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Calendar.AllowedCalendarSharingRolesWithUser
{
    [Proxy(typeof(AllowedCalendarSharingRolesWithUserRequestBuilder), true)]
    public partial interface IAllowedCalendarSharingRolesWithUserRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Calendar.CalendarPermissions
{
    [Proxy(typeof(CalendarPermissionsRequestBuilder), true)]
    public partial interface ICalendarPermissionsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Calendar.CalendarPermissions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Calendar.CalendarPermissions.Item
{
    [Proxy(typeof(CalendarPermissionItemRequestBuilder), true)]
    public partial interface ICalendarPermissionItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Calendar.CalendarView
{
    [Proxy(typeof(CalendarViewRequestBuilder), true)]
    public partial interface ICalendarViewRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Calendar.CalendarView.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Calendar.Events
{
    [Proxy(typeof(EventsRequestBuilder), true)]
    public partial interface IEventsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Calendar.Events.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Calendar.Events.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Calendar.Events.Item
{
    [Proxy(typeof(EventItemRequestBuilder), true)]
    public partial interface IEventItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Calendar.Events.Item.Accept
{
    [Proxy(typeof(AcceptRequestBuilder), true)]
    public partial interface IAcceptRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Calendar.Events.Item.Attachments
{
    [Proxy(typeof(AttachmentsRequestBuilder), true)]
    public partial interface IAttachmentsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Calendar.Events.Item.Attachments.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Calendar.Events.Item.Attachments.CreateUploadSession
{
    [Proxy(typeof(CreateUploadSessionRequestBuilder), true)]
    public partial interface ICreateUploadSessionRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Calendar.Events.Item.Attachments.Item
{
    [Proxy(typeof(AttachmentItemRequestBuilder), true)]
    public partial interface IAttachmentItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Calendar.Events.Item.Calendar
{
    [Proxy(typeof(CalendarRequestBuilder), true)]
    public partial interface ICalendarRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Calendar.Events.Item.Cancel
{
    [Proxy(typeof(CancelRequestBuilder), true)]
    public partial interface ICancelRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Calendar.Events.Item.Decline
{
    [Proxy(typeof(DeclineRequestBuilder), true)]
    public partial interface IDeclineRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Calendar.Events.Item.DismissReminder
{
    [Proxy(typeof(DismissReminderRequestBuilder), true)]
    public partial interface IDismissReminderRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Calendar.Events.Item.Extensions
{
    [Proxy(typeof(ExtensionsRequestBuilder), true)]
    public partial interface IExtensionsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Calendar.Events.Item.Extensions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Calendar.Events.Item.Extensions.Item
{
    [Proxy(typeof(ExtensionItemRequestBuilder), true)]
    public partial interface IExtensionItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Calendar.Events.Item.Forward
{
    [Proxy(typeof(ForwardRequestBuilder), true)]
    public partial interface IForwardRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Calendar.Events.Item.Instances
{
    [Proxy(typeof(InstancesRequestBuilder), true)]
    public partial interface IInstancesRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Calendar.Events.Item.Instances.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Calendar.Events.Item.PermanentDelete
{
    [Proxy(typeof(PermanentDeleteRequestBuilder), true)]
    public partial interface IPermanentDeleteRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Calendar.Events.Item.SnoozeReminder
{
    [Proxy(typeof(SnoozeReminderRequestBuilder), true)]
    public partial interface ISnoozeReminderRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Calendar.Events.Item.TentativelyAccept
{
    [Proxy(typeof(TentativelyAcceptRequestBuilder), true)]
    public partial interface ITentativelyAcceptRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Calendar.GetSchedule
{
    [Proxy(typeof(GetScheduleRequestBuilder), true)]
    public partial interface IGetScheduleRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Calendar.PermanentDelete
{
    [Proxy(typeof(PermanentDeleteRequestBuilder), true)]
    public partial interface IPermanentDeleteRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.CalendarView
{
    [Proxy(typeof(CalendarViewRequestBuilder), true)]
    public partial interface ICalendarViewRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.CalendarView.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.CheckGrantedPermissionsForApp
{
    [Proxy(typeof(CheckGrantedPermissionsForAppRequestBuilder), true)]
    public partial interface ICheckGrantedPermissionsForAppRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.CheckMemberGroups
{
    [Proxy(typeof(CheckMemberGroupsRequestBuilder), true)]
    public partial interface ICheckMemberGroupsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.CheckMemberObjects
{
    [Proxy(typeof(CheckMemberObjectsRequestBuilder), true)]
    public partial interface ICheckMemberObjectsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Conversations
{
    [Proxy(typeof(ConversationsRequestBuilder), true)]
    public partial interface IConversationsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Conversations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Conversations.Item
{
    [Proxy(typeof(ConversationItemRequestBuilder), true)]
    public partial interface IConversationItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Conversations.Item.Threads
{
    [Proxy(typeof(ThreadsRequestBuilder), true)]
    public partial interface IThreadsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Conversations.Item.Threads.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Conversations.Item.Threads.Item
{
    [Proxy(typeof(ConversationThreadItemRequestBuilder), true)]
    public partial interface IConversationThreadItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Conversations.Item.Threads.Item.Posts
{
    [Proxy(typeof(PostsRequestBuilder), true)]
    public partial interface IPostsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Conversations.Item.Threads.Item.Posts.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Conversations.Item.Threads.Item.Posts.Item
{
    [Proxy(typeof(PostItemRequestBuilder), true)]
    public partial interface IPostItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Conversations.Item.Threads.Item.Posts.Item.Attachments
{
    [Proxy(typeof(AttachmentsRequestBuilder), true)]
    public partial interface IAttachmentsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Conversations.Item.Threads.Item.Posts.Item.Attachments.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Conversations.Item.Threads.Item.Posts.Item.Attachments.CreateUploadSession
{
    [Proxy(typeof(CreateUploadSessionRequestBuilder), true)]
    public partial interface ICreateUploadSessionRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Conversations.Item.Threads.Item.Posts.Item.Attachments.Item
{
    [Proxy(typeof(AttachmentItemRequestBuilder), true)]
    public partial interface IAttachmentItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Conversations.Item.Threads.Item.Posts.Item.Extensions
{
    [Proxy(typeof(ExtensionsRequestBuilder), true)]
    public partial interface IExtensionsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Conversations.Item.Threads.Item.Posts.Item.Extensions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Conversations.Item.Threads.Item.Posts.Item.Extensions.Item
{
    [Proxy(typeof(ExtensionItemRequestBuilder), true)]
    public partial interface IExtensionItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Conversations.Item.Threads.Item.Posts.Item.Forward
{
    [Proxy(typeof(ForwardRequestBuilder), true)]
    public partial interface IForwardRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Conversations.Item.Threads.Item.Posts.Item.InReplyTo
{
    [Proxy(typeof(InReplyToRequestBuilder), true)]
    public partial interface IInReplyToRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Conversations.Item.Threads.Item.Posts.Item.InReplyTo.Attachments
{
    [Proxy(typeof(AttachmentsRequestBuilder), true)]
    public partial interface IAttachmentsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Conversations.Item.Threads.Item.Posts.Item.InReplyTo.Attachments.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Conversations.Item.Threads.Item.Posts.Item.InReplyTo.Attachments.CreateUploadSession
{
    [Proxy(typeof(CreateUploadSessionRequestBuilder), true)]
    public partial interface ICreateUploadSessionRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Conversations.Item.Threads.Item.Posts.Item.InReplyTo.Attachments.Item
{
    [Proxy(typeof(AttachmentItemRequestBuilder), true)]
    public partial interface IAttachmentItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Conversations.Item.Threads.Item.Posts.Item.InReplyTo.Extensions
{
    [Proxy(typeof(ExtensionsRequestBuilder), true)]
    public partial interface IExtensionsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Conversations.Item.Threads.Item.Posts.Item.InReplyTo.Extensions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Conversations.Item.Threads.Item.Posts.Item.InReplyTo.Extensions.Item
{
    [Proxy(typeof(ExtensionItemRequestBuilder), true)]
    public partial interface IExtensionItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Conversations.Item.Threads.Item.Posts.Item.InReplyTo.Forward
{
    [Proxy(typeof(ForwardRequestBuilder), true)]
    public partial interface IForwardRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Conversations.Item.Threads.Item.Posts.Item.InReplyTo.Reply
{
    [Proxy(typeof(ReplyRequestBuilder), true)]
    public partial interface IReplyRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Conversations.Item.Threads.Item.Posts.Item.Reply
{
    [Proxy(typeof(ReplyRequestBuilder), true)]
    public partial interface IReplyRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Conversations.Item.Threads.Item.Reply
{
    [Proxy(typeof(ReplyRequestBuilder), true)]
    public partial interface IReplyRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.CreatedOnBehalfOf
{
    [Proxy(typeof(CreatedOnBehalfOfRequestBuilder), true)]
    public partial interface ICreatedOnBehalfOfRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Drive
{
    [Proxy(typeof(DriveRequestBuilder), true)]
    public partial interface IDriveRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Drives
{
    [Proxy(typeof(DrivesRequestBuilder), true)]
    public partial interface IDrivesRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Drives.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Drives.Item
{
    [Proxy(typeof(DriveItemRequestBuilder), true)]
    public partial interface IDriveItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Events
{
    [Proxy(typeof(EventsRequestBuilder), true)]
    public partial interface IEventsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Events.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Events.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Events.Item
{
    [Proxy(typeof(EventItemRequestBuilder), true)]
    public partial interface IEventItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Events.Item.Accept
{
    [Proxy(typeof(AcceptRequestBuilder), true)]
    public partial interface IAcceptRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Events.Item.Attachments
{
    [Proxy(typeof(AttachmentsRequestBuilder), true)]
    public partial interface IAttachmentsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Events.Item.Attachments.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Events.Item.Attachments.CreateUploadSession
{
    [Proxy(typeof(CreateUploadSessionRequestBuilder), true)]
    public partial interface ICreateUploadSessionRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Events.Item.Attachments.Item
{
    [Proxy(typeof(AttachmentItemRequestBuilder), true)]
    public partial interface IAttachmentItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Events.Item.Calendar
{
    [Proxy(typeof(CalendarRequestBuilder), true)]
    public partial interface ICalendarRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Events.Item.Cancel
{
    [Proxy(typeof(CancelRequestBuilder), true)]
    public partial interface ICancelRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Events.Item.Decline
{
    [Proxy(typeof(DeclineRequestBuilder), true)]
    public partial interface IDeclineRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Events.Item.DismissReminder
{
    [Proxy(typeof(DismissReminderRequestBuilder), true)]
    public partial interface IDismissReminderRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Events.Item.Extensions
{
    [Proxy(typeof(ExtensionsRequestBuilder), true)]
    public partial interface IExtensionsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Events.Item.Extensions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Events.Item.Extensions.Item
{
    [Proxy(typeof(ExtensionItemRequestBuilder), true)]
    public partial interface IExtensionItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Events.Item.Forward
{
    [Proxy(typeof(ForwardRequestBuilder), true)]
    public partial interface IForwardRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Events.Item.Instances
{
    [Proxy(typeof(InstancesRequestBuilder), true)]
    public partial interface IInstancesRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Events.Item.Instances.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Events.Item.PermanentDelete
{
    [Proxy(typeof(PermanentDeleteRequestBuilder), true)]
    public partial interface IPermanentDeleteRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Events.Item.SnoozeReminder
{
    [Proxy(typeof(SnoozeReminderRequestBuilder), true)]
    public partial interface ISnoozeReminderRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Events.Item.TentativelyAccept
{
    [Proxy(typeof(TentativelyAcceptRequestBuilder), true)]
    public partial interface ITentativelyAcceptRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Extensions
{
    [Proxy(typeof(ExtensionsRequestBuilder), true)]
    public partial interface IExtensionsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Extensions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Extensions.Item
{
    [Proxy(typeof(ExtensionItemRequestBuilder), true)]
    public partial interface IExtensionItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.GetMemberGroups
{
    [Proxy(typeof(GetMemberGroupsRequestBuilder), true)]
    public partial interface IGetMemberGroupsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.GetMemberObjects
{
    [Proxy(typeof(GetMemberObjectsRequestBuilder), true)]
    public partial interface IGetMemberObjectsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.GroupLifecyclePolicies
{
    [Proxy(typeof(GroupLifecyclePoliciesRequestBuilder), true)]
    public partial interface IGroupLifecyclePoliciesRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.GroupLifecyclePolicies.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.GroupLifecyclePolicies.Item
{
    [Proxy(typeof(GroupLifecyclePolicyItemRequestBuilder), true)]
    public partial interface IGroupLifecyclePolicyItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.GroupLifecyclePolicies.Item.AddGroup
{
    [Proxy(typeof(AddGroupRequestBuilder), true)]
    public partial interface IAddGroupRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.GroupLifecyclePolicies.Item.RemoveGroup
{
    [Proxy(typeof(RemoveGroupRequestBuilder), true)]
    public partial interface IRemoveGroupRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.MemberOf
{
    [Proxy(typeof(MemberOfRequestBuilder), true)]
    public partial interface IMemberOfRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.MemberOf.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.MemberOf.GraphAdministrativeUnit
{
    [Proxy(typeof(GraphAdministrativeUnitRequestBuilder), true)]
    public partial interface IGraphAdministrativeUnitRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.MemberOf.GraphAdministrativeUnit.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.MemberOf.GraphGroup
{
    [Proxy(typeof(GraphGroupRequestBuilder), true)]
    public partial interface IGraphGroupRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.MemberOf.GraphGroup.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.MemberOf.Item
{
    [Proxy(typeof(DirectoryObjectItemRequestBuilder), true)]
    public partial interface IDirectoryObjectItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.MemberOf.Item.GraphAdministrativeUnit
{
    [Proxy(typeof(GraphAdministrativeUnitRequestBuilder), true)]
    public partial interface IGraphAdministrativeUnitRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.MemberOf.Item.GraphGroup
{
    [Proxy(typeof(GraphGroupRequestBuilder), true)]
    public partial interface IGraphGroupRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Members
{
    [Proxy(typeof(MembersRequestBuilder), true)]
    public partial interface IMembersRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Members.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Members.GraphApplication
{
    [Proxy(typeof(GraphApplicationRequestBuilder), true)]
    public partial interface IGraphApplicationRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Members.GraphApplication.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Members.GraphDevice
{
    [Proxy(typeof(GraphDeviceRequestBuilder), true)]
    public partial interface IGraphDeviceRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Members.GraphDevice.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Members.GraphGroup
{
    [Proxy(typeof(GraphGroupRequestBuilder), true)]
    public partial interface IGraphGroupRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Members.GraphGroup.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Members.GraphOrgContact
{
    [Proxy(typeof(GraphOrgContactRequestBuilder), true)]
    public partial interface IGraphOrgContactRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Members.GraphOrgContact.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Members.GraphServicePrincipal
{
    [Proxy(typeof(GraphServicePrincipalRequestBuilder), true)]
    public partial interface IGraphServicePrincipalRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Members.GraphServicePrincipal.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Members.GraphUser
{
    [Proxy(typeof(GraphUserRequestBuilder), true)]
    public partial interface IGraphUserRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Members.GraphUser.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Members.Item
{
    [Proxy(typeof(DirectoryObjectItemRequestBuilder), true)]
    public partial interface IDirectoryObjectItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Members.Item.GraphApplication
{
    [Proxy(typeof(GraphApplicationRequestBuilder), true)]
    public partial interface IGraphApplicationRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Members.Item.GraphDevice
{
    [Proxy(typeof(GraphDeviceRequestBuilder), true)]
    public partial interface IGraphDeviceRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Members.Item.GraphGroup
{
    [Proxy(typeof(GraphGroupRequestBuilder), true)]
    public partial interface IGraphGroupRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Members.Item.GraphOrgContact
{
    [Proxy(typeof(GraphOrgContactRequestBuilder), true)]
    public partial interface IGraphOrgContactRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Members.Item.GraphServicePrincipal
{
    [Proxy(typeof(GraphServicePrincipalRequestBuilder), true)]
    public partial interface IGraphServicePrincipalRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Members.Item.GraphUser
{
    [Proxy(typeof(GraphUserRequestBuilder), true)]
    public partial interface IGraphUserRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Members.Item.Ref
{
    [Proxy(typeof(RefRequestBuilder), true)]
    public partial interface IRefRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Members.Ref
{
    [Proxy(typeof(RefRequestBuilder), true)]
    public partial interface IRefRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.MembersWithLicenseErrors
{
    [Proxy(typeof(MembersWithLicenseErrorsRequestBuilder), true)]
    public partial interface IMembersWithLicenseErrorsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.MembersWithLicenseErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.MembersWithLicenseErrors.GraphApplication
{
    [Proxy(typeof(GraphApplicationRequestBuilder), true)]
    public partial interface IGraphApplicationRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.MembersWithLicenseErrors.GraphApplication.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.MembersWithLicenseErrors.GraphDevice
{
    [Proxy(typeof(GraphDeviceRequestBuilder), true)]
    public partial interface IGraphDeviceRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.MembersWithLicenseErrors.GraphDevice.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.MembersWithLicenseErrors.GraphGroup
{
    [Proxy(typeof(GraphGroupRequestBuilder), true)]
    public partial interface IGraphGroupRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.MembersWithLicenseErrors.GraphGroup.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.MembersWithLicenseErrors.GraphOrgContact
{
    [Proxy(typeof(GraphOrgContactRequestBuilder), true)]
    public partial interface IGraphOrgContactRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.MembersWithLicenseErrors.GraphOrgContact.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.MembersWithLicenseErrors.GraphServicePrincipal
{
    [Proxy(typeof(GraphServicePrincipalRequestBuilder), true)]
    public partial interface IGraphServicePrincipalRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.MembersWithLicenseErrors.GraphServicePrincipal.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.MembersWithLicenseErrors.GraphUser
{
    [Proxy(typeof(GraphUserRequestBuilder), true)]
    public partial interface IGraphUserRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.MembersWithLicenseErrors.GraphUser.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.MembersWithLicenseErrors.Item
{
    [Proxy(typeof(DirectoryObjectItemRequestBuilder), true)]
    public partial interface IDirectoryObjectItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.MembersWithLicenseErrors.Item.GraphApplication
{
    [Proxy(typeof(GraphApplicationRequestBuilder), true)]
    public partial interface IGraphApplicationRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.MembersWithLicenseErrors.Item.GraphDevice
{
    [Proxy(typeof(GraphDeviceRequestBuilder), true)]
    public partial interface IGraphDeviceRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.MembersWithLicenseErrors.Item.GraphGroup
{
    [Proxy(typeof(GraphGroupRequestBuilder), true)]
    public partial interface IGraphGroupRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.MembersWithLicenseErrors.Item.GraphOrgContact
{
    [Proxy(typeof(GraphOrgContactRequestBuilder), true)]
    public partial interface IGraphOrgContactRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.MembersWithLicenseErrors.Item.GraphServicePrincipal
{
    [Proxy(typeof(GraphServicePrincipalRequestBuilder), true)]
    public partial interface IGraphServicePrincipalRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.MembersWithLicenseErrors.Item.GraphUser
{
    [Proxy(typeof(GraphUserRequestBuilder), true)]
    public partial interface IGraphUserRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote
{
    [Proxy(typeof(OnenoteRequestBuilder), true)]
    public partial interface IOnenoteRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.Notebooks
{
    [Proxy(typeof(NotebooksRequestBuilder), true)]
    public partial interface INotebooksRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.Notebooks.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.Notebooks.GetNotebookFromWebUrl
{
    [Proxy(typeof(GetNotebookFromWebUrlRequestBuilder), true)]
    public partial interface IGetNotebookFromWebUrlRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.Notebooks.GetRecentNotebooksWithIncludePersonalNotebooks
{
    [Proxy(typeof(GetRecentNotebooksWithIncludePersonalNotebooksRequestBuilder), true)]
    public partial interface IGetRecentNotebooksWithIncludePersonalNotebooksRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.Notebooks.Item
{
    [Proxy(typeof(NotebookItemRequestBuilder), true)]
    public partial interface INotebookItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.Notebooks.Item.CopyNotebook
{
    [Proxy(typeof(CopyNotebookRequestBuilder), true)]
    public partial interface ICopyNotebookRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.Notebooks.Item.SectionGroups
{
    [Proxy(typeof(SectionGroupsRequestBuilder), true)]
    public partial interface ISectionGroupsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.Notebooks.Item.SectionGroups.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.Notebooks.Item.SectionGroups.Item
{
    [Proxy(typeof(SectionGroupItemRequestBuilder), true)]
    public partial interface ISectionGroupItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.Notebooks.Item.SectionGroups.Item.ParentNotebook
{
    [Proxy(typeof(ParentNotebookRequestBuilder), true)]
    public partial interface IParentNotebookRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.Notebooks.Item.SectionGroups.Item.ParentSectionGroup
{
    [Proxy(typeof(ParentSectionGroupRequestBuilder), true)]
    public partial interface IParentSectionGroupRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.Notebooks.Item.SectionGroups.Item.SectionGroups
{
    [Proxy(typeof(SectionGroupsRequestBuilder), true)]
    public partial interface ISectionGroupsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.Notebooks.Item.SectionGroups.Item.SectionGroups.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.Notebooks.Item.SectionGroups.Item.SectionGroups.Item
{
    [Proxy(typeof(SectionGroupItemRequestBuilder), true)]
    public partial interface ISectionGroupItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.Notebooks.Item.SectionGroups.Item.Sections
{
    [Proxy(typeof(SectionsRequestBuilder), true)]
    public partial interface ISectionsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.Notebooks.Item.SectionGroups.Item.Sections.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.Notebooks.Item.SectionGroups.Item.Sections.Item
{
    [Proxy(typeof(OnenoteSectionItemRequestBuilder), true)]
    public partial interface IOnenoteSectionItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.Notebooks.Item.SectionGroups.Item.Sections.Item.CopyToNotebook
{
    [Proxy(typeof(CopyToNotebookRequestBuilder), true)]
    public partial interface ICopyToNotebookRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.Notebooks.Item.SectionGroups.Item.Sections.Item.CopyToSectionGroup
{
    [Proxy(typeof(CopyToSectionGroupRequestBuilder), true)]
    public partial interface ICopyToSectionGroupRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.Notebooks.Item.SectionGroups.Item.Sections.Item.Pages
{
    [Proxy(typeof(PagesRequestBuilder), true)]
    public partial interface IPagesRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.Notebooks.Item.SectionGroups.Item.Sections.Item.Pages.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.Notebooks.Item.SectionGroups.Item.Sections.Item.Pages.Item
{
    [Proxy(typeof(OnenotePageItemRequestBuilder), true)]
    public partial interface IOnenotePageItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.Notebooks.Item.SectionGroups.Item.Sections.Item.Pages.Item.Content
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.Notebooks.Item.SectionGroups.Item.Sections.Item.Pages.Item.CopyToSection
{
    [Proxy(typeof(CopyToSectionRequestBuilder), true)]
    public partial interface ICopyToSectionRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.Notebooks.Item.SectionGroups.Item.Sections.Item.Pages.Item.OnenotePatchContent
{
    [Proxy(typeof(OnenotePatchContentRequestBuilder), true)]
    public partial interface IOnenotePatchContentRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.Notebooks.Item.SectionGroups.Item.Sections.Item.Pages.Item.ParentNotebook
{
    [Proxy(typeof(ParentNotebookRequestBuilder), true)]
    public partial interface IParentNotebookRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.Notebooks.Item.SectionGroups.Item.Sections.Item.Pages.Item.ParentSection
{
    [Proxy(typeof(ParentSectionRequestBuilder), true)]
    public partial interface IParentSectionRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.Notebooks.Item.SectionGroups.Item.Sections.Item.Pages.Item.Preview
{
    [Proxy(typeof(PreviewRequestBuilder), true)]
    public partial interface IPreviewRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.Notebooks.Item.SectionGroups.Item.Sections.Item.ParentNotebook
{
    [Proxy(typeof(ParentNotebookRequestBuilder), true)]
    public partial interface IParentNotebookRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.Notebooks.Item.SectionGroups.Item.Sections.Item.ParentSectionGroup
{
    [Proxy(typeof(ParentSectionGroupRequestBuilder), true)]
    public partial interface IParentSectionGroupRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.Notebooks.Item.Sections
{
    [Proxy(typeof(SectionsRequestBuilder), true)]
    public partial interface ISectionsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.Notebooks.Item.Sections.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.Notebooks.Item.Sections.Item
{
    [Proxy(typeof(OnenoteSectionItemRequestBuilder), true)]
    public partial interface IOnenoteSectionItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.Notebooks.Item.Sections.Item.CopyToNotebook
{
    [Proxy(typeof(CopyToNotebookRequestBuilder), true)]
    public partial interface ICopyToNotebookRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.Notebooks.Item.Sections.Item.CopyToSectionGroup
{
    [Proxy(typeof(CopyToSectionGroupRequestBuilder), true)]
    public partial interface ICopyToSectionGroupRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.Notebooks.Item.Sections.Item.Pages
{
    [Proxy(typeof(PagesRequestBuilder), true)]
    public partial interface IPagesRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.Notebooks.Item.Sections.Item.Pages.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.Notebooks.Item.Sections.Item.Pages.Item
{
    [Proxy(typeof(OnenotePageItemRequestBuilder), true)]
    public partial interface IOnenotePageItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.Notebooks.Item.Sections.Item.Pages.Item.Content
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.Notebooks.Item.Sections.Item.Pages.Item.CopyToSection
{
    [Proxy(typeof(CopyToSectionRequestBuilder), true)]
    public partial interface ICopyToSectionRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.Notebooks.Item.Sections.Item.Pages.Item.OnenotePatchContent
{
    [Proxy(typeof(OnenotePatchContentRequestBuilder), true)]
    public partial interface IOnenotePatchContentRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.Notebooks.Item.Sections.Item.Pages.Item.ParentNotebook
{
    [Proxy(typeof(ParentNotebookRequestBuilder), true)]
    public partial interface IParentNotebookRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.Notebooks.Item.Sections.Item.Pages.Item.ParentSection
{
    [Proxy(typeof(ParentSectionRequestBuilder), true)]
    public partial interface IParentSectionRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.Notebooks.Item.Sections.Item.Pages.Item.Preview
{
    [Proxy(typeof(PreviewRequestBuilder), true)]
    public partial interface IPreviewRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.Notebooks.Item.Sections.Item.ParentNotebook
{
    [Proxy(typeof(ParentNotebookRequestBuilder), true)]
    public partial interface IParentNotebookRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.Notebooks.Item.Sections.Item.ParentSectionGroup
{
    [Proxy(typeof(ParentSectionGroupRequestBuilder), true)]
    public partial interface IParentSectionGroupRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.Operations
{
    [Proxy(typeof(OperationsRequestBuilder), true)]
    public partial interface IOperationsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.Operations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.Operations.Item
{
    [Proxy(typeof(OnenoteOperationItemRequestBuilder), true)]
    public partial interface IOnenoteOperationItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.Pages
{
    [Proxy(typeof(PagesRequestBuilder), true)]
    public partial interface IPagesRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.Pages.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.Pages.Item
{
    [Proxy(typeof(OnenotePageItemRequestBuilder), true)]
    public partial interface IOnenotePageItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.Pages.Item.Content
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.Pages.Item.CopyToSection
{
    [Proxy(typeof(CopyToSectionRequestBuilder), true)]
    public partial interface ICopyToSectionRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.Pages.Item.OnenotePatchContent
{
    [Proxy(typeof(OnenotePatchContentRequestBuilder), true)]
    public partial interface IOnenotePatchContentRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.Pages.Item.ParentNotebook
{
    [Proxy(typeof(ParentNotebookRequestBuilder), true)]
    public partial interface IParentNotebookRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.Pages.Item.ParentSection
{
    [Proxy(typeof(ParentSectionRequestBuilder), true)]
    public partial interface IParentSectionRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.Pages.Item.Preview
{
    [Proxy(typeof(PreviewRequestBuilder), true)]
    public partial interface IPreviewRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.Resources
{
    [Proxy(typeof(ResourcesRequestBuilder), true)]
    public partial interface IResourcesRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.Resources.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.Resources.Item
{
    [Proxy(typeof(OnenoteResourceItemRequestBuilder), true)]
    public partial interface IOnenoteResourceItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.Resources.Item.Content
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.SectionGroups
{
    [Proxy(typeof(SectionGroupsRequestBuilder), true)]
    public partial interface ISectionGroupsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.SectionGroups.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.SectionGroups.Item
{
    [Proxy(typeof(SectionGroupItemRequestBuilder), true)]
    public partial interface ISectionGroupItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.SectionGroups.Item.ParentNotebook
{
    [Proxy(typeof(ParentNotebookRequestBuilder), true)]
    public partial interface IParentNotebookRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.SectionGroups.Item.ParentSectionGroup
{
    [Proxy(typeof(ParentSectionGroupRequestBuilder), true)]
    public partial interface IParentSectionGroupRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.SectionGroups.Item.SectionGroups
{
    [Proxy(typeof(SectionGroupsRequestBuilder), true)]
    public partial interface ISectionGroupsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.SectionGroups.Item.SectionGroups.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.SectionGroups.Item.SectionGroups.Item
{
    [Proxy(typeof(SectionGroupItemRequestBuilder), true)]
    public partial interface ISectionGroupItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.SectionGroups.Item.Sections
{
    [Proxy(typeof(SectionsRequestBuilder), true)]
    public partial interface ISectionsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.SectionGroups.Item.Sections.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.SectionGroups.Item.Sections.Item
{
    [Proxy(typeof(OnenoteSectionItemRequestBuilder), true)]
    public partial interface IOnenoteSectionItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.SectionGroups.Item.Sections.Item.CopyToNotebook
{
    [Proxy(typeof(CopyToNotebookRequestBuilder), true)]
    public partial interface ICopyToNotebookRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.SectionGroups.Item.Sections.Item.CopyToSectionGroup
{
    [Proxy(typeof(CopyToSectionGroupRequestBuilder), true)]
    public partial interface ICopyToSectionGroupRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.SectionGroups.Item.Sections.Item.Pages
{
    [Proxy(typeof(PagesRequestBuilder), true)]
    public partial interface IPagesRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.SectionGroups.Item.Sections.Item.Pages.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.SectionGroups.Item.Sections.Item.Pages.Item
{
    [Proxy(typeof(OnenotePageItemRequestBuilder), true)]
    public partial interface IOnenotePageItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.SectionGroups.Item.Sections.Item.Pages.Item.Content
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.SectionGroups.Item.Sections.Item.Pages.Item.CopyToSection
{
    [Proxy(typeof(CopyToSectionRequestBuilder), true)]
    public partial interface ICopyToSectionRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.SectionGroups.Item.Sections.Item.Pages.Item.OnenotePatchContent
{
    [Proxy(typeof(OnenotePatchContentRequestBuilder), true)]
    public partial interface IOnenotePatchContentRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.SectionGroups.Item.Sections.Item.Pages.Item.ParentNotebook
{
    [Proxy(typeof(ParentNotebookRequestBuilder), true)]
    public partial interface IParentNotebookRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.SectionGroups.Item.Sections.Item.Pages.Item.ParentSection
{
    [Proxy(typeof(ParentSectionRequestBuilder), true)]
    public partial interface IParentSectionRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.SectionGroups.Item.Sections.Item.Pages.Item.Preview
{
    [Proxy(typeof(PreviewRequestBuilder), true)]
    public partial interface IPreviewRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.SectionGroups.Item.Sections.Item.ParentNotebook
{
    [Proxy(typeof(ParentNotebookRequestBuilder), true)]
    public partial interface IParentNotebookRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.SectionGroups.Item.Sections.Item.ParentSectionGroup
{
    [Proxy(typeof(ParentSectionGroupRequestBuilder), true)]
    public partial interface IParentSectionGroupRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.Sections
{
    [Proxy(typeof(SectionsRequestBuilder), true)]
    public partial interface ISectionsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.Sections.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.Sections.Item
{
    [Proxy(typeof(OnenoteSectionItemRequestBuilder), true)]
    public partial interface IOnenoteSectionItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.Sections.Item.CopyToNotebook
{
    [Proxy(typeof(CopyToNotebookRequestBuilder), true)]
    public partial interface ICopyToNotebookRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.Sections.Item.CopyToSectionGroup
{
    [Proxy(typeof(CopyToSectionGroupRequestBuilder), true)]
    public partial interface ICopyToSectionGroupRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.Sections.Item.Pages
{
    [Proxy(typeof(PagesRequestBuilder), true)]
    public partial interface IPagesRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.Sections.Item.Pages.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.Sections.Item.Pages.Item
{
    [Proxy(typeof(OnenotePageItemRequestBuilder), true)]
    public partial interface IOnenotePageItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.Sections.Item.Pages.Item.Content
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.Sections.Item.Pages.Item.CopyToSection
{
    [Proxy(typeof(CopyToSectionRequestBuilder), true)]
    public partial interface ICopyToSectionRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.Sections.Item.Pages.Item.OnenotePatchContent
{
    [Proxy(typeof(OnenotePatchContentRequestBuilder), true)]
    public partial interface IOnenotePatchContentRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.Sections.Item.Pages.Item.ParentNotebook
{
    [Proxy(typeof(ParentNotebookRequestBuilder), true)]
    public partial interface IParentNotebookRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.Sections.Item.Pages.Item.ParentSection
{
    [Proxy(typeof(ParentSectionRequestBuilder), true)]
    public partial interface IParentSectionRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.Sections.Item.Pages.Item.Preview
{
    [Proxy(typeof(PreviewRequestBuilder), true)]
    public partial interface IPreviewRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.Sections.Item.ParentNotebook
{
    [Proxy(typeof(ParentNotebookRequestBuilder), true)]
    public partial interface IParentNotebookRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Onenote.Sections.Item.ParentSectionGroup
{
    [Proxy(typeof(ParentSectionGroupRequestBuilder), true)]
    public partial interface IParentSectionGroupRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Owners
{
    [Proxy(typeof(OwnersRequestBuilder), true)]
    public partial interface IOwnersRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Owners.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Owners.GraphApplication
{
    [Proxy(typeof(GraphApplicationRequestBuilder), true)]
    public partial interface IGraphApplicationRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Owners.GraphApplication.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Owners.GraphDevice
{
    [Proxy(typeof(GraphDeviceRequestBuilder), true)]
    public partial interface IGraphDeviceRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Owners.GraphDevice.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Owners.GraphGroup
{
    [Proxy(typeof(GraphGroupRequestBuilder), true)]
    public partial interface IGraphGroupRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Owners.GraphGroup.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Owners.GraphOrgContact
{
    [Proxy(typeof(GraphOrgContactRequestBuilder), true)]
    public partial interface IGraphOrgContactRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Owners.GraphOrgContact.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Owners.GraphServicePrincipal
{
    [Proxy(typeof(GraphServicePrincipalRequestBuilder), true)]
    public partial interface IGraphServicePrincipalRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Owners.GraphServicePrincipal.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Owners.GraphUser
{
    [Proxy(typeof(GraphUserRequestBuilder), true)]
    public partial interface IGraphUserRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Owners.GraphUser.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Owners.Item
{
    [Proxy(typeof(DirectoryObjectItemRequestBuilder), true)]
    public partial interface IDirectoryObjectItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Owners.Item.GraphApplication
{
    [Proxy(typeof(GraphApplicationRequestBuilder), true)]
    public partial interface IGraphApplicationRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Owners.Item.GraphDevice
{
    [Proxy(typeof(GraphDeviceRequestBuilder), true)]
    public partial interface IGraphDeviceRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Owners.Item.GraphGroup
{
    [Proxy(typeof(GraphGroupRequestBuilder), true)]
    public partial interface IGraphGroupRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Owners.Item.GraphOrgContact
{
    [Proxy(typeof(GraphOrgContactRequestBuilder), true)]
    public partial interface IGraphOrgContactRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Owners.Item.GraphServicePrincipal
{
    [Proxy(typeof(GraphServicePrincipalRequestBuilder), true)]
    public partial interface IGraphServicePrincipalRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Owners.Item.GraphUser
{
    [Proxy(typeof(GraphUserRequestBuilder), true)]
    public partial interface IGraphUserRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Owners.Item.Ref
{
    [Proxy(typeof(RefRequestBuilder), true)]
    public partial interface IRefRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Owners.Ref
{
    [Proxy(typeof(RefRequestBuilder), true)]
    public partial interface IRefRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.PermissionGrants
{
    [Proxy(typeof(PermissionGrantsRequestBuilder), true)]
    public partial interface IPermissionGrantsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.PermissionGrants.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.PermissionGrants.Item
{
    [Proxy(typeof(ResourceSpecificPermissionGrantItemRequestBuilder), true)]
    public partial interface IResourceSpecificPermissionGrantItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Photo
{
    [Proxy(typeof(PhotoRequestBuilder), true)]
    public partial interface IPhotoRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Photo.Value
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Photos
{
    [Proxy(typeof(PhotosRequestBuilder), true)]
    public partial interface IPhotosRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Photos.Item
{
    [Proxy(typeof(ProfilePhotoItemRequestBuilder), true)]
    public partial interface IProfilePhotoItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Photos.Item.Value
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Planner
{
    [Proxy(typeof(PlannerRequestBuilder), true)]
    public partial interface IPlannerRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Planner.Plans
{
    [Proxy(typeof(PlansRequestBuilder), true)]
    public partial interface IPlansRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Planner.Plans.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Planner.Plans.Item
{
    [Proxy(typeof(PlannerPlanItemRequestBuilder), true)]
    public partial interface IPlannerPlanItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Planner.Plans.Item.Buckets
{
    [Proxy(typeof(BucketsRequestBuilder), true)]
    public partial interface IBucketsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Planner.Plans.Item.Buckets.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Planner.Plans.Item.Buckets.Item
{
    [Proxy(typeof(PlannerBucketItemRequestBuilder), true)]
    public partial interface IPlannerBucketItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Planner.Plans.Item.Buckets.Item.Tasks
{
    [Proxy(typeof(TasksRequestBuilder), true)]
    public partial interface ITasksRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Planner.Plans.Item.Buckets.Item.Tasks.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Planner.Plans.Item.Buckets.Item.Tasks.Item
{
    [Proxy(typeof(PlannerTaskItemRequestBuilder), true)]
    public partial interface IPlannerTaskItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Planner.Plans.Item.Buckets.Item.Tasks.Item.AssignedToTaskBoardFormat
{
    [Proxy(typeof(AssignedToTaskBoardFormatRequestBuilder), true)]
    public partial interface IAssignedToTaskBoardFormatRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Planner.Plans.Item.Buckets.Item.Tasks.Item.BucketTaskBoardFormat
{
    [Proxy(typeof(BucketTaskBoardFormatRequestBuilder), true)]
    public partial interface IBucketTaskBoardFormatRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Planner.Plans.Item.Buckets.Item.Tasks.Item.Details
{
    [Proxy(typeof(DetailsRequestBuilder), true)]
    public partial interface IDetailsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Planner.Plans.Item.Buckets.Item.Tasks.Item.ProgressTaskBoardFormat
{
    [Proxy(typeof(ProgressTaskBoardFormatRequestBuilder), true)]
    public partial interface IProgressTaskBoardFormatRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Planner.Plans.Item.Details
{
    [Proxy(typeof(DetailsRequestBuilder), true)]
    public partial interface IDetailsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Planner.Plans.Item.Tasks
{
    [Proxy(typeof(TasksRequestBuilder), true)]
    public partial interface ITasksRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Planner.Plans.Item.Tasks.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Planner.Plans.Item.Tasks.Item
{
    [Proxy(typeof(PlannerTaskItemRequestBuilder), true)]
    public partial interface IPlannerTaskItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Planner.Plans.Item.Tasks.Item.AssignedToTaskBoardFormat
{
    [Proxy(typeof(AssignedToTaskBoardFormatRequestBuilder), true)]
    public partial interface IAssignedToTaskBoardFormatRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Planner.Plans.Item.Tasks.Item.BucketTaskBoardFormat
{
    [Proxy(typeof(BucketTaskBoardFormatRequestBuilder), true)]
    public partial interface IBucketTaskBoardFormatRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Planner.Plans.Item.Tasks.Item.Details
{
    [Proxy(typeof(DetailsRequestBuilder), true)]
    public partial interface IDetailsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Planner.Plans.Item.Tasks.Item.ProgressTaskBoardFormat
{
    [Proxy(typeof(ProgressTaskBoardFormatRequestBuilder), true)]
    public partial interface IProgressTaskBoardFormatRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.RejectedSenders
{
    [Proxy(typeof(RejectedSendersRequestBuilder), true)]
    public partial interface IRejectedSendersRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.RejectedSenders.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.RejectedSenders.Item
{
    [Proxy(typeof(DirectoryObjectItemRequestBuilder), true)]
    public partial interface IDirectoryObjectItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.RejectedSenders.Item.Ref
{
    [Proxy(typeof(RefRequestBuilder), true)]
    public partial interface IRefRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.RejectedSenders.Ref
{
    [Proxy(typeof(RefRequestBuilder), true)]
    public partial interface IRefRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.RemoveFavorite
{
    [Proxy(typeof(RemoveFavoriteRequestBuilder), true)]
    public partial interface IRemoveFavoriteRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Renew
{
    [Proxy(typeof(RenewRequestBuilder), true)]
    public partial interface IRenewRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.ResetUnseenCount
{
    [Proxy(typeof(ResetUnseenCountRequestBuilder), true)]
    public partial interface IResetUnseenCountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Restore
{
    [Proxy(typeof(RestoreRequestBuilder), true)]
    public partial interface IRestoreRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.RetryServiceProvisioning
{
    [Proxy(typeof(RetryServiceProvisioningRequestBuilder), true)]
    public partial interface IRetryServiceProvisioningRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Settings
{
    [Proxy(typeof(SettingsRequestBuilder), true)]
    public partial interface ISettingsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Settings.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Settings.Item
{
    [Proxy(typeof(GroupSettingItemRequestBuilder), true)]
    public partial interface IGroupSettingItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites
{
    [Proxy(typeof(SitesRequestBuilder), true)]
    public partial interface ISitesRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Add
{
    [Proxy(typeof(AddRequestBuilder), true)]
    public partial interface IAddRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.GetAllSites
{
    [Proxy(typeof(GetAllSitesRequestBuilder), true)]
    public partial interface IGetAllSitesRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item
{
    [Proxy(typeof(SiteItemRequestBuilder), true)]
    public partial interface ISiteItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Analytics
{
    [Proxy(typeof(AnalyticsRequestBuilder), true)]
    public partial interface IAnalyticsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Analytics.AllTime
{
    [Proxy(typeof(AllTimeRequestBuilder), true)]
    public partial interface IAllTimeRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Analytics.ItemActivityStats
{
    [Proxy(typeof(ItemActivityStatsRequestBuilder), true)]
    public partial interface IItemActivityStatsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Analytics.ItemActivityStats.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Analytics.ItemActivityStats.Item
{
    [Proxy(typeof(ItemActivityStatItemRequestBuilder), true)]
    public partial interface IItemActivityStatItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Analytics.ItemActivityStats.Item.Activities
{
    [Proxy(typeof(ActivitiesRequestBuilder), true)]
    public partial interface IActivitiesRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Analytics.ItemActivityStats.Item.Activities.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Analytics.ItemActivityStats.Item.Activities.Item
{
    [Proxy(typeof(ItemActivityItemRequestBuilder), true)]
    public partial interface IItemActivityItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Analytics.ItemActivityStats.Item.Activities.Item.DriveItem
{
    [Proxy(typeof(DriveItemRequestBuilder), true)]
    public partial interface IDriveItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Analytics.ItemActivityStats.Item.Activities.Item.DriveItem.Content
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Analytics.LastSevenDays
{
    [Proxy(typeof(LastSevenDaysRequestBuilder), true)]
    public partial interface ILastSevenDaysRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Columns
{
    [Proxy(typeof(ColumnsRequestBuilder), true)]
    public partial interface IColumnsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Columns.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Columns.Item
{
    [Proxy(typeof(ColumnDefinitionItemRequestBuilder), true)]
    public partial interface IColumnDefinitionItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Columns.Item.SourceColumn
{
    [Proxy(typeof(SourceColumnRequestBuilder), true)]
    public partial interface ISourceColumnRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.ContentTypes
{
    [Proxy(typeof(ContentTypesRequestBuilder), true)]
    public partial interface IContentTypesRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.ContentTypes.AddCopy
{
    [Proxy(typeof(AddCopyRequestBuilder), true)]
    public partial interface IAddCopyRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.ContentTypes.AddCopyFromContentTypeHub
{
    [Proxy(typeof(AddCopyFromContentTypeHubRequestBuilder), true)]
    public partial interface IAddCopyFromContentTypeHubRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.ContentTypes.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.ContentTypes.GetCompatibleHubContentTypes
{
    [Proxy(typeof(GetCompatibleHubContentTypesRequestBuilder), true)]
    public partial interface IGetCompatibleHubContentTypesRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.ContentTypes.Item
{
    [Proxy(typeof(ContentTypeItemRequestBuilder), true)]
    public partial interface IContentTypeItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.ContentTypes.Item.AssociateWithHubSites
{
    [Proxy(typeof(AssociateWithHubSitesRequestBuilder), true)]
    public partial interface IAssociateWithHubSitesRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.ContentTypes.Item.BaseTypes
{
    [Proxy(typeof(BaseTypesRequestBuilder), true)]
    public partial interface IBaseTypesRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.ContentTypes.Item.BaseTypes.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.ContentTypes.Item.BaseTypes.Item
{
    [Proxy(typeof(ContentTypeItemRequestBuilder), true)]
    public partial interface IContentTypeItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.ContentTypes.Item.ColumnLinks
{
    [Proxy(typeof(ColumnLinksRequestBuilder), true)]
    public partial interface IColumnLinksRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.ContentTypes.Item.ColumnLinks.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.ContentTypes.Item.ColumnLinks.Item
{
    [Proxy(typeof(ColumnLinkItemRequestBuilder), true)]
    public partial interface IColumnLinkItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.ContentTypes.Item.ColumnPositions
{
    [Proxy(typeof(ColumnPositionsRequestBuilder), true)]
    public partial interface IColumnPositionsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.ContentTypes.Item.ColumnPositions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.ContentTypes.Item.ColumnPositions.Item
{
    [Proxy(typeof(ColumnDefinitionItemRequestBuilder), true)]
    public partial interface IColumnDefinitionItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.ContentTypes.Item.Columns
{
    [Proxy(typeof(ColumnsRequestBuilder), true)]
    public partial interface IColumnsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.ContentTypes.Item.Columns.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.ContentTypes.Item.Columns.Item
{
    [Proxy(typeof(ColumnDefinitionItemRequestBuilder), true)]
    public partial interface IColumnDefinitionItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.ContentTypes.Item.Columns.Item.SourceColumn
{
    [Proxy(typeof(SourceColumnRequestBuilder), true)]
    public partial interface ISourceColumnRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.ContentTypes.Item.CopyToDefaultContentLocation
{
    [Proxy(typeof(CopyToDefaultContentLocationRequestBuilder), true)]
    public partial interface ICopyToDefaultContentLocationRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.ContentTypes.Item.IsPublished
{
    [Proxy(typeof(IsPublishedRequestBuilder), true)]
    public partial interface IIsPublishedRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.ContentTypes.Item.Publish
{
    [Proxy(typeof(PublishRequestBuilder), true)]
    public partial interface IPublishRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.ContentTypes.Item.Unpublish
{
    [Proxy(typeof(UnpublishRequestBuilder), true)]
    public partial interface IUnpublishRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.CreatedByUser
{
    [Proxy(typeof(CreatedByUserRequestBuilder), true)]
    public partial interface ICreatedByUserRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.CreatedByUser.MailboxSettings
{
    [Proxy(typeof(MailboxSettingsRequestBuilder), true)]
    public partial interface IMailboxSettingsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.CreatedByUser.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.CreatedByUser.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Drive
{
    [Proxy(typeof(DriveRequestBuilder), true)]
    public partial interface IDriveRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Drives
{
    [Proxy(typeof(DrivesRequestBuilder), true)]
    public partial interface IDrivesRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Drives.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Drives.Item
{
    [Proxy(typeof(DriveItemRequestBuilder), true)]
    public partial interface IDriveItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.ExternalColumns
{
    [Proxy(typeof(ExternalColumnsRequestBuilder), true)]
    public partial interface IExternalColumnsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.ExternalColumns.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.ExternalColumns.Item
{
    [Proxy(typeof(ColumnDefinitionItemRequestBuilder), true)]
    public partial interface IColumnDefinitionItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.GetActivitiesByInterval
{
    [Proxy(typeof(GetActivitiesByIntervalRequestBuilder), true)]
    public partial interface IGetActivitiesByIntervalRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.GetActivitiesByIntervalWithStartDateTimeWithEndDateTimeWithInterval
{
    [Proxy(typeof(GetActivitiesByIntervalWithStartDateTimeWithEndDateTimeWithIntervalRequestBuilder), true)]
    public partial interface IGetActivitiesByIntervalWithStartDateTimeWithEndDateTimeWithIntervalRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.GetApplicableContentTypesForListWithListId
{
    [Proxy(typeof(GetApplicableContentTypesForListWithListIdRequestBuilder), true)]
    public partial interface IGetApplicableContentTypesForListWithListIdRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.GetByPathWithPath
{
    [Proxy(typeof(GetByPathWithPathRequestBuilder), true)]
    public partial interface IGetByPathWithPathRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.GetByPathWithPath.Analytics
{
    [Proxy(typeof(AnalyticsRequestBuilder), true)]
    public partial interface IAnalyticsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.GetByPathWithPath.Columns
{
    [Proxy(typeof(ColumnsRequestBuilder), true)]
    public partial interface IColumnsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.GetByPathWithPath.ContentTypes
{
    [Proxy(typeof(ContentTypesRequestBuilder), true)]
    public partial interface IContentTypesRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.GetByPathWithPath.CreatedByUser
{
    [Proxy(typeof(CreatedByUserRequestBuilder), true)]
    public partial interface ICreatedByUserRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.GetByPathWithPath.Drive
{
    [Proxy(typeof(DriveRequestBuilder), true)]
    public partial interface IDriveRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.GetByPathWithPath.Drives
{
    [Proxy(typeof(DrivesRequestBuilder), true)]
    public partial interface IDrivesRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.GetByPathWithPath.ExternalColumns
{
    [Proxy(typeof(ExternalColumnsRequestBuilder), true)]
    public partial interface IExternalColumnsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.GetByPathWithPath.GetActivitiesByInterval
{
    [Proxy(typeof(GetActivitiesByIntervalRequestBuilder), true)]
    public partial interface IGetActivitiesByIntervalRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.GetByPathWithPath.GetActivitiesByIntervalWithStartDateTimeWithEndDateTimeWithInterval
{
    [Proxy(typeof(GetActivitiesByIntervalWithStartDateTimeWithEndDateTimeWithIntervalRequestBuilder), true)]
    public partial interface IGetActivitiesByIntervalWithStartDateTimeWithEndDateTimeWithIntervalRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.GetByPathWithPath.GetApplicableContentTypesForListWithListId
{
    [Proxy(typeof(GetApplicableContentTypesForListWithListIdRequestBuilder), true)]
    public partial interface IGetApplicableContentTypesForListWithListIdRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.GetByPathWithPath.Items
{
    [Proxy(typeof(ItemsRequestBuilder), true)]
    public partial interface IItemsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.GetByPathWithPath.LastModifiedByUser
{
    [Proxy(typeof(LastModifiedByUserRequestBuilder), true)]
    public partial interface ILastModifiedByUserRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.GetByPathWithPath.Lists
{
    [Proxy(typeof(ListsRequestBuilder), true)]
    public partial interface IListsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.GetByPathWithPath.Onenote
{
    [Proxy(typeof(OnenoteRequestBuilder), true)]
    public partial interface IOnenoteRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.GetByPathWithPath.Operations
{
    [Proxy(typeof(OperationsRequestBuilder), true)]
    public partial interface IOperationsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.GetByPathWithPath.Pages
{
    [Proxy(typeof(PagesRequestBuilder), true)]
    public partial interface IPagesRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.GetByPathWithPath.Permissions
{
    [Proxy(typeof(PermissionsRequestBuilder), true)]
    public partial interface IPermissionsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.GetByPathWithPath.Sites
{
    [Proxy(typeof(SitesRequestBuilder), true)]
    public partial interface ISitesRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.GetByPathWithPath.TermStore
{
    [Proxy(typeof(TermStoreRequestBuilder), true)]
    public partial interface ITermStoreRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.GetByPathWithPath.TermStores
{
    [Proxy(typeof(TermStoresRequestBuilder), true)]
    public partial interface ITermStoresRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Items
{
    [Proxy(typeof(ItemsRequestBuilder), true)]
    public partial interface IItemsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Items.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Items.Item
{
    [Proxy(typeof(BaseItemItemRequestBuilder), true)]
    public partial interface IBaseItemItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.LastModifiedByUser
{
    [Proxy(typeof(LastModifiedByUserRequestBuilder), true)]
    public partial interface ILastModifiedByUserRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.LastModifiedByUser.MailboxSettings
{
    [Proxy(typeof(MailboxSettingsRequestBuilder), true)]
    public partial interface IMailboxSettingsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.LastModifiedByUser.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.LastModifiedByUser.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Lists
{
    [Proxy(typeof(ListsRequestBuilder), true)]
    public partial interface IListsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Lists.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Lists.Item
{
    [Proxy(typeof(ListItemRequestBuilder), true)]
    public partial interface IListItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Lists.Item.Columns
{
    [Proxy(typeof(ColumnsRequestBuilder), true)]
    public partial interface IColumnsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Lists.Item.Columns.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Lists.Item.Columns.Item
{
    [Proxy(typeof(ColumnDefinitionItemRequestBuilder), true)]
    public partial interface IColumnDefinitionItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Lists.Item.Columns.Item.SourceColumn
{
    [Proxy(typeof(SourceColumnRequestBuilder), true)]
    public partial interface ISourceColumnRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Lists.Item.ContentTypes
{
    [Proxy(typeof(ContentTypesRequestBuilder), true)]
    public partial interface IContentTypesRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Lists.Item.ContentTypes.AddCopy
{
    [Proxy(typeof(AddCopyRequestBuilder), true)]
    public partial interface IAddCopyRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Lists.Item.ContentTypes.AddCopyFromContentTypeHub
{
    [Proxy(typeof(AddCopyFromContentTypeHubRequestBuilder), true)]
    public partial interface IAddCopyFromContentTypeHubRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Lists.Item.ContentTypes.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Lists.Item.ContentTypes.GetCompatibleHubContentTypes
{
    [Proxy(typeof(GetCompatibleHubContentTypesRequestBuilder), true)]
    public partial interface IGetCompatibleHubContentTypesRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Lists.Item.ContentTypes.Item
{
    [Proxy(typeof(ContentTypeItemRequestBuilder), true)]
    public partial interface IContentTypeItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Lists.Item.ContentTypes.Item.AssociateWithHubSites
{
    [Proxy(typeof(AssociateWithHubSitesRequestBuilder), true)]
    public partial interface IAssociateWithHubSitesRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Lists.Item.ContentTypes.Item.BaseTypes
{
    [Proxy(typeof(BaseTypesRequestBuilder), true)]
    public partial interface IBaseTypesRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Lists.Item.ContentTypes.Item.BaseTypes.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Lists.Item.ContentTypes.Item.BaseTypes.Item
{
    [Proxy(typeof(ContentTypeItemRequestBuilder), true)]
    public partial interface IContentTypeItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Lists.Item.ContentTypes.Item.ColumnLinks
{
    [Proxy(typeof(ColumnLinksRequestBuilder), true)]
    public partial interface IColumnLinksRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Lists.Item.ContentTypes.Item.ColumnLinks.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Lists.Item.ContentTypes.Item.ColumnLinks.Item
{
    [Proxy(typeof(ColumnLinkItemRequestBuilder), true)]
    public partial interface IColumnLinkItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Lists.Item.ContentTypes.Item.ColumnPositions
{
    [Proxy(typeof(ColumnPositionsRequestBuilder), true)]
    public partial interface IColumnPositionsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Lists.Item.ContentTypes.Item.ColumnPositions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Lists.Item.ContentTypes.Item.ColumnPositions.Item
{
    [Proxy(typeof(ColumnDefinitionItemRequestBuilder), true)]
    public partial interface IColumnDefinitionItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Lists.Item.ContentTypes.Item.Columns
{
    [Proxy(typeof(ColumnsRequestBuilder), true)]
    public partial interface IColumnsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Lists.Item.ContentTypes.Item.Columns.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Lists.Item.ContentTypes.Item.Columns.Item
{
    [Proxy(typeof(ColumnDefinitionItemRequestBuilder), true)]
    public partial interface IColumnDefinitionItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Lists.Item.ContentTypes.Item.Columns.Item.SourceColumn
{
    [Proxy(typeof(SourceColumnRequestBuilder), true)]
    public partial interface ISourceColumnRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Lists.Item.ContentTypes.Item.CopyToDefaultContentLocation
{
    [Proxy(typeof(CopyToDefaultContentLocationRequestBuilder), true)]
    public partial interface ICopyToDefaultContentLocationRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Lists.Item.ContentTypes.Item.IsPublished
{
    [Proxy(typeof(IsPublishedRequestBuilder), true)]
    public partial interface IIsPublishedRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Lists.Item.ContentTypes.Item.Publish
{
    [Proxy(typeof(PublishRequestBuilder), true)]
    public partial interface IPublishRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Lists.Item.ContentTypes.Item.Unpublish
{
    [Proxy(typeof(UnpublishRequestBuilder), true)]
    public partial interface IUnpublishRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Lists.Item.CreatedByUser
{
    [Proxy(typeof(CreatedByUserRequestBuilder), true)]
    public partial interface ICreatedByUserRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Lists.Item.CreatedByUser.MailboxSettings
{
    [Proxy(typeof(MailboxSettingsRequestBuilder), true)]
    public partial interface IMailboxSettingsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Lists.Item.CreatedByUser.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Lists.Item.CreatedByUser.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Lists.Item.Drive
{
    [Proxy(typeof(DriveRequestBuilder), true)]
    public partial interface IDriveRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Lists.Item.Items
{
    [Proxy(typeof(ItemsRequestBuilder), true)]
    public partial interface IItemsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Lists.Item.Items.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Lists.Item.Items.DeltaWithToken
{
    [Proxy(typeof(DeltaWithTokenRequestBuilder), true)]
    public partial interface IDeltaWithTokenRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Lists.Item.Items.Item
{
    [Proxy(typeof(ListItemItemRequestBuilder), true)]
    public partial interface IListItemItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Lists.Item.Items.Item.Analytics
{
    [Proxy(typeof(AnalyticsRequestBuilder), true)]
    public partial interface IAnalyticsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Lists.Item.Items.Item.CreatedByUser
{
    [Proxy(typeof(CreatedByUserRequestBuilder), true)]
    public partial interface ICreatedByUserRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Lists.Item.Items.Item.CreatedByUser.MailboxSettings
{
    [Proxy(typeof(MailboxSettingsRequestBuilder), true)]
    public partial interface IMailboxSettingsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Lists.Item.Items.Item.CreatedByUser.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Lists.Item.Items.Item.CreatedByUser.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Lists.Item.Items.Item.CreateLink
{
    [Proxy(typeof(CreateLinkRequestBuilder), true)]
    public partial interface ICreateLinkRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Lists.Item.Items.Item.DocumentSetVersions
{
    [Proxy(typeof(DocumentSetVersionsRequestBuilder), true)]
    public partial interface IDocumentSetVersionsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Lists.Item.Items.Item.DocumentSetVersions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Lists.Item.Items.Item.DocumentSetVersions.Item
{
    [Proxy(typeof(DocumentSetVersionItemRequestBuilder), true)]
    public partial interface IDocumentSetVersionItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Lists.Item.Items.Item.DocumentSetVersions.Item.Fields
{
    [Proxy(typeof(FieldsRequestBuilder), true)]
    public partial interface IFieldsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Lists.Item.Items.Item.DocumentSetVersions.Item.Restore
{
    [Proxy(typeof(RestoreRequestBuilder), true)]
    public partial interface IRestoreRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Lists.Item.Items.Item.DriveItem
{
    [Proxy(typeof(DriveItemRequestBuilder), true)]
    public partial interface IDriveItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Lists.Item.Items.Item.DriveItem.Content
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Lists.Item.Items.Item.Fields
{
    [Proxy(typeof(FieldsRequestBuilder), true)]
    public partial interface IFieldsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Lists.Item.Items.Item.GetActivitiesByInterval
{
    [Proxy(typeof(GetActivitiesByIntervalRequestBuilder), true)]
    public partial interface IGetActivitiesByIntervalRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Lists.Item.Items.Item.GetActivitiesByIntervalWithStartDateTimeWithEndDateTimeWithInterval
{
    [Proxy(typeof(GetActivitiesByIntervalWithStartDateTimeWithEndDateTimeWithIntervalRequestBuilder), true)]
    public partial interface IGetActivitiesByIntervalWithStartDateTimeWithEndDateTimeWithIntervalRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Lists.Item.Items.Item.LastModifiedByUser
{
    [Proxy(typeof(LastModifiedByUserRequestBuilder), true)]
    public partial interface ILastModifiedByUserRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Lists.Item.Items.Item.LastModifiedByUser.MailboxSettings
{
    [Proxy(typeof(MailboxSettingsRequestBuilder), true)]
    public partial interface IMailboxSettingsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Lists.Item.Items.Item.LastModifiedByUser.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Lists.Item.Items.Item.LastModifiedByUser.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Lists.Item.Items.Item.Versions
{
    [Proxy(typeof(VersionsRequestBuilder), true)]
    public partial interface IVersionsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Lists.Item.Items.Item.Versions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Lists.Item.Items.Item.Versions.Item
{
    [Proxy(typeof(ListItemVersionItemRequestBuilder), true)]
    public partial interface IListItemVersionItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Lists.Item.Items.Item.Versions.Item.Fields
{
    [Proxy(typeof(FieldsRequestBuilder), true)]
    public partial interface IFieldsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Lists.Item.Items.Item.Versions.Item.RestoreVersion
{
    [Proxy(typeof(RestoreVersionRequestBuilder), true)]
    public partial interface IRestoreVersionRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Lists.Item.LastModifiedByUser
{
    [Proxy(typeof(LastModifiedByUserRequestBuilder), true)]
    public partial interface ILastModifiedByUserRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Lists.Item.LastModifiedByUser.MailboxSettings
{
    [Proxy(typeof(MailboxSettingsRequestBuilder), true)]
    public partial interface IMailboxSettingsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Lists.Item.LastModifiedByUser.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Lists.Item.LastModifiedByUser.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Lists.Item.Operations
{
    [Proxy(typeof(OperationsRequestBuilder), true)]
    public partial interface IOperationsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Lists.Item.Operations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Lists.Item.Operations.Item
{
    [Proxy(typeof(RichLongRunningOperationItemRequestBuilder), true)]
    public partial interface IRichLongRunningOperationItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Lists.Item.Subscriptions
{
    [Proxy(typeof(SubscriptionsRequestBuilder), true)]
    public partial interface ISubscriptionsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Lists.Item.Subscriptions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Lists.Item.Subscriptions.Item
{
    [Proxy(typeof(SubscriptionItemRequestBuilder), true)]
    public partial interface ISubscriptionItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Lists.Item.Subscriptions.Item.Reauthorize
{
    [Proxy(typeof(ReauthorizeRequestBuilder), true)]
    public partial interface IReauthorizeRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote
{
    [Proxy(typeof(OnenoteRequestBuilder), true)]
    public partial interface IOnenoteRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.Notebooks
{
    [Proxy(typeof(NotebooksRequestBuilder), true)]
    public partial interface INotebooksRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.Notebooks.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.Notebooks.GetNotebookFromWebUrl
{
    [Proxy(typeof(GetNotebookFromWebUrlRequestBuilder), true)]
    public partial interface IGetNotebookFromWebUrlRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.Notebooks.GetRecentNotebooksWithIncludePersonalNotebooks
{
    [Proxy(typeof(GetRecentNotebooksWithIncludePersonalNotebooksRequestBuilder), true)]
    public partial interface IGetRecentNotebooksWithIncludePersonalNotebooksRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.Notebooks.Item
{
    [Proxy(typeof(NotebookItemRequestBuilder), true)]
    public partial interface INotebookItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.Notebooks.Item.CopyNotebook
{
    [Proxy(typeof(CopyNotebookRequestBuilder), true)]
    public partial interface ICopyNotebookRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.Notebooks.Item.SectionGroups
{
    [Proxy(typeof(SectionGroupsRequestBuilder), true)]
    public partial interface ISectionGroupsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.Notebooks.Item.SectionGroups.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.Notebooks.Item.SectionGroups.Item
{
    [Proxy(typeof(SectionGroupItemRequestBuilder), true)]
    public partial interface ISectionGroupItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.Notebooks.Item.SectionGroups.Item.ParentNotebook
{
    [Proxy(typeof(ParentNotebookRequestBuilder), true)]
    public partial interface IParentNotebookRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.Notebooks.Item.SectionGroups.Item.ParentSectionGroup
{
    [Proxy(typeof(ParentSectionGroupRequestBuilder), true)]
    public partial interface IParentSectionGroupRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.Notebooks.Item.SectionGroups.Item.SectionGroups
{
    [Proxy(typeof(SectionGroupsRequestBuilder), true)]
    public partial interface ISectionGroupsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.Notebooks.Item.SectionGroups.Item.SectionGroups.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.Notebooks.Item.SectionGroups.Item.SectionGroups.Item
{
    [Proxy(typeof(SectionGroupItemRequestBuilder), true)]
    public partial interface ISectionGroupItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.Notebooks.Item.SectionGroups.Item.Sections
{
    [Proxy(typeof(SectionsRequestBuilder), true)]
    public partial interface ISectionsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.Notebooks.Item.SectionGroups.Item.Sections.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.Notebooks.Item.SectionGroups.Item.Sections.Item
{
    [Proxy(typeof(OnenoteSectionItemRequestBuilder), true)]
    public partial interface IOnenoteSectionItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.Notebooks.Item.SectionGroups.Item.Sections.Item.CopyToNotebook
{
    [Proxy(typeof(CopyToNotebookRequestBuilder), true)]
    public partial interface ICopyToNotebookRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.Notebooks.Item.SectionGroups.Item.Sections.Item.CopyToSectionGroup
{
    [Proxy(typeof(CopyToSectionGroupRequestBuilder), true)]
    public partial interface ICopyToSectionGroupRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.Notebooks.Item.SectionGroups.Item.Sections.Item.Pages
{
    [Proxy(typeof(PagesRequestBuilder), true)]
    public partial interface IPagesRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.Notebooks.Item.SectionGroups.Item.Sections.Item.Pages.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.Notebooks.Item.SectionGroups.Item.Sections.Item.Pages.Item
{
    [Proxy(typeof(OnenotePageItemRequestBuilder), true)]
    public partial interface IOnenotePageItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.Notebooks.Item.SectionGroups.Item.Sections.Item.Pages.Item.Content
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.Notebooks.Item.SectionGroups.Item.Sections.Item.Pages.Item.CopyToSection
{
    [Proxy(typeof(CopyToSectionRequestBuilder), true)]
    public partial interface ICopyToSectionRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.Notebooks.Item.SectionGroups.Item.Sections.Item.Pages.Item.OnenotePatchContent
{
    [Proxy(typeof(OnenotePatchContentRequestBuilder), true)]
    public partial interface IOnenotePatchContentRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.Notebooks.Item.SectionGroups.Item.Sections.Item.Pages.Item.ParentNotebook
{
    [Proxy(typeof(ParentNotebookRequestBuilder), true)]
    public partial interface IParentNotebookRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.Notebooks.Item.SectionGroups.Item.Sections.Item.Pages.Item.ParentSection
{
    [Proxy(typeof(ParentSectionRequestBuilder), true)]
    public partial interface IParentSectionRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.Notebooks.Item.SectionGroups.Item.Sections.Item.Pages.Item.Preview
{
    [Proxy(typeof(PreviewRequestBuilder), true)]
    public partial interface IPreviewRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.Notebooks.Item.SectionGroups.Item.Sections.Item.ParentNotebook
{
    [Proxy(typeof(ParentNotebookRequestBuilder), true)]
    public partial interface IParentNotebookRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.Notebooks.Item.SectionGroups.Item.Sections.Item.ParentSectionGroup
{
    [Proxy(typeof(ParentSectionGroupRequestBuilder), true)]
    public partial interface IParentSectionGroupRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.Notebooks.Item.Sections
{
    [Proxy(typeof(SectionsRequestBuilder), true)]
    public partial interface ISectionsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.Notebooks.Item.Sections.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.Notebooks.Item.Sections.Item
{
    [Proxy(typeof(OnenoteSectionItemRequestBuilder), true)]
    public partial interface IOnenoteSectionItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.Notebooks.Item.Sections.Item.CopyToNotebook
{
    [Proxy(typeof(CopyToNotebookRequestBuilder), true)]
    public partial interface ICopyToNotebookRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.Notebooks.Item.Sections.Item.CopyToSectionGroup
{
    [Proxy(typeof(CopyToSectionGroupRequestBuilder), true)]
    public partial interface ICopyToSectionGroupRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.Notebooks.Item.Sections.Item.Pages
{
    [Proxy(typeof(PagesRequestBuilder), true)]
    public partial interface IPagesRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.Notebooks.Item.Sections.Item.Pages.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.Notebooks.Item.Sections.Item.Pages.Item
{
    [Proxy(typeof(OnenotePageItemRequestBuilder), true)]
    public partial interface IOnenotePageItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.Notebooks.Item.Sections.Item.Pages.Item.Content
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.Notebooks.Item.Sections.Item.Pages.Item.CopyToSection
{
    [Proxy(typeof(CopyToSectionRequestBuilder), true)]
    public partial interface ICopyToSectionRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.Notebooks.Item.Sections.Item.Pages.Item.OnenotePatchContent
{
    [Proxy(typeof(OnenotePatchContentRequestBuilder), true)]
    public partial interface IOnenotePatchContentRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.Notebooks.Item.Sections.Item.Pages.Item.ParentNotebook
{
    [Proxy(typeof(ParentNotebookRequestBuilder), true)]
    public partial interface IParentNotebookRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.Notebooks.Item.Sections.Item.Pages.Item.ParentSection
{
    [Proxy(typeof(ParentSectionRequestBuilder), true)]
    public partial interface IParentSectionRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.Notebooks.Item.Sections.Item.Pages.Item.Preview
{
    [Proxy(typeof(PreviewRequestBuilder), true)]
    public partial interface IPreviewRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.Notebooks.Item.Sections.Item.ParentNotebook
{
    [Proxy(typeof(ParentNotebookRequestBuilder), true)]
    public partial interface IParentNotebookRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.Notebooks.Item.Sections.Item.ParentSectionGroup
{
    [Proxy(typeof(ParentSectionGroupRequestBuilder), true)]
    public partial interface IParentSectionGroupRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.Operations
{
    [Proxy(typeof(OperationsRequestBuilder), true)]
    public partial interface IOperationsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.Operations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.Operations.Item
{
    [Proxy(typeof(OnenoteOperationItemRequestBuilder), true)]
    public partial interface IOnenoteOperationItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.Pages
{
    [Proxy(typeof(PagesRequestBuilder), true)]
    public partial interface IPagesRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.Pages.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.Pages.Item
{
    [Proxy(typeof(OnenotePageItemRequestBuilder), true)]
    public partial interface IOnenotePageItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.Pages.Item.Content
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.Pages.Item.CopyToSection
{
    [Proxy(typeof(CopyToSectionRequestBuilder), true)]
    public partial interface ICopyToSectionRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.Pages.Item.OnenotePatchContent
{
    [Proxy(typeof(OnenotePatchContentRequestBuilder), true)]
    public partial interface IOnenotePatchContentRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.Pages.Item.ParentNotebook
{
    [Proxy(typeof(ParentNotebookRequestBuilder), true)]
    public partial interface IParentNotebookRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.Pages.Item.ParentSection
{
    [Proxy(typeof(ParentSectionRequestBuilder), true)]
    public partial interface IParentSectionRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.Pages.Item.Preview
{
    [Proxy(typeof(PreviewRequestBuilder), true)]
    public partial interface IPreviewRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.Resources
{
    [Proxy(typeof(ResourcesRequestBuilder), true)]
    public partial interface IResourcesRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.Resources.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.Resources.Item
{
    [Proxy(typeof(OnenoteResourceItemRequestBuilder), true)]
    public partial interface IOnenoteResourceItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.Resources.Item.Content
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.SectionGroups
{
    [Proxy(typeof(SectionGroupsRequestBuilder), true)]
    public partial interface ISectionGroupsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.SectionGroups.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.SectionGroups.Item
{
    [Proxy(typeof(SectionGroupItemRequestBuilder), true)]
    public partial interface ISectionGroupItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.SectionGroups.Item.ParentNotebook
{
    [Proxy(typeof(ParentNotebookRequestBuilder), true)]
    public partial interface IParentNotebookRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.SectionGroups.Item.ParentSectionGroup
{
    [Proxy(typeof(ParentSectionGroupRequestBuilder), true)]
    public partial interface IParentSectionGroupRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.SectionGroups.Item.SectionGroups
{
    [Proxy(typeof(SectionGroupsRequestBuilder), true)]
    public partial interface ISectionGroupsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.SectionGroups.Item.SectionGroups.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.SectionGroups.Item.SectionGroups.Item
{
    [Proxy(typeof(SectionGroupItemRequestBuilder), true)]
    public partial interface ISectionGroupItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.SectionGroups.Item.Sections
{
    [Proxy(typeof(SectionsRequestBuilder), true)]
    public partial interface ISectionsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.SectionGroups.Item.Sections.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.SectionGroups.Item.Sections.Item
{
    [Proxy(typeof(OnenoteSectionItemRequestBuilder), true)]
    public partial interface IOnenoteSectionItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.SectionGroups.Item.Sections.Item.CopyToNotebook
{
    [Proxy(typeof(CopyToNotebookRequestBuilder), true)]
    public partial interface ICopyToNotebookRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.SectionGroups.Item.Sections.Item.CopyToSectionGroup
{
    [Proxy(typeof(CopyToSectionGroupRequestBuilder), true)]
    public partial interface ICopyToSectionGroupRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.SectionGroups.Item.Sections.Item.Pages
{
    [Proxy(typeof(PagesRequestBuilder), true)]
    public partial interface IPagesRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.SectionGroups.Item.Sections.Item.Pages.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.SectionGroups.Item.Sections.Item.Pages.Item
{
    [Proxy(typeof(OnenotePageItemRequestBuilder), true)]
    public partial interface IOnenotePageItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.SectionGroups.Item.Sections.Item.Pages.Item.Content
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.SectionGroups.Item.Sections.Item.Pages.Item.CopyToSection
{
    [Proxy(typeof(CopyToSectionRequestBuilder), true)]
    public partial interface ICopyToSectionRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.SectionGroups.Item.Sections.Item.Pages.Item.OnenotePatchContent
{
    [Proxy(typeof(OnenotePatchContentRequestBuilder), true)]
    public partial interface IOnenotePatchContentRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.SectionGroups.Item.Sections.Item.Pages.Item.ParentNotebook
{
    [Proxy(typeof(ParentNotebookRequestBuilder), true)]
    public partial interface IParentNotebookRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.SectionGroups.Item.Sections.Item.Pages.Item.ParentSection
{
    [Proxy(typeof(ParentSectionRequestBuilder), true)]
    public partial interface IParentSectionRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.SectionGroups.Item.Sections.Item.Pages.Item.Preview
{
    [Proxy(typeof(PreviewRequestBuilder), true)]
    public partial interface IPreviewRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.SectionGroups.Item.Sections.Item.ParentNotebook
{
    [Proxy(typeof(ParentNotebookRequestBuilder), true)]
    public partial interface IParentNotebookRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.SectionGroups.Item.Sections.Item.ParentSectionGroup
{
    [Proxy(typeof(ParentSectionGroupRequestBuilder), true)]
    public partial interface IParentSectionGroupRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.Sections
{
    [Proxy(typeof(SectionsRequestBuilder), true)]
    public partial interface ISectionsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.Sections.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.Sections.Item
{
    [Proxy(typeof(OnenoteSectionItemRequestBuilder), true)]
    public partial interface IOnenoteSectionItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.Sections.Item.CopyToNotebook
{
    [Proxy(typeof(CopyToNotebookRequestBuilder), true)]
    public partial interface ICopyToNotebookRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.Sections.Item.CopyToSectionGroup
{
    [Proxy(typeof(CopyToSectionGroupRequestBuilder), true)]
    public partial interface ICopyToSectionGroupRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.Sections.Item.Pages
{
    [Proxy(typeof(PagesRequestBuilder), true)]
    public partial interface IPagesRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.Sections.Item.Pages.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.Sections.Item.Pages.Item
{
    [Proxy(typeof(OnenotePageItemRequestBuilder), true)]
    public partial interface IOnenotePageItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.Sections.Item.Pages.Item.Content
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.Sections.Item.Pages.Item.CopyToSection
{
    [Proxy(typeof(CopyToSectionRequestBuilder), true)]
    public partial interface ICopyToSectionRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.Sections.Item.Pages.Item.OnenotePatchContent
{
    [Proxy(typeof(OnenotePatchContentRequestBuilder), true)]
    public partial interface IOnenotePatchContentRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.Sections.Item.Pages.Item.ParentNotebook
{
    [Proxy(typeof(ParentNotebookRequestBuilder), true)]
    public partial interface IParentNotebookRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.Sections.Item.Pages.Item.ParentSection
{
    [Proxy(typeof(ParentSectionRequestBuilder), true)]
    public partial interface IParentSectionRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.Sections.Item.Pages.Item.Preview
{
    [Proxy(typeof(PreviewRequestBuilder), true)]
    public partial interface IPreviewRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.Sections.Item.ParentNotebook
{
    [Proxy(typeof(ParentNotebookRequestBuilder), true)]
    public partial interface IParentNotebookRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Onenote.Sections.Item.ParentSectionGroup
{
    [Proxy(typeof(ParentSectionGroupRequestBuilder), true)]
    public partial interface IParentSectionGroupRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Operations
{
    [Proxy(typeof(OperationsRequestBuilder), true)]
    public partial interface IOperationsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Operations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Operations.Item
{
    [Proxy(typeof(RichLongRunningOperationItemRequestBuilder), true)]
    public partial interface IRichLongRunningOperationItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Pages
{
    [Proxy(typeof(PagesRequestBuilder), true)]
    public partial interface IPagesRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Pages.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Pages.GraphSitePage
{
    [Proxy(typeof(GraphSitePageRequestBuilder), true)]
    public partial interface IGraphSitePageRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Pages.GraphSitePage.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Pages.Item
{
    [Proxy(typeof(BaseSitePageItemRequestBuilder), true)]
    public partial interface IBaseSitePageItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Pages.Item.CreatedByUser
{
    [Proxy(typeof(CreatedByUserRequestBuilder), true)]
    public partial interface ICreatedByUserRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Pages.Item.CreatedByUser.MailboxSettings
{
    [Proxy(typeof(MailboxSettingsRequestBuilder), true)]
    public partial interface IMailboxSettingsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Pages.Item.CreatedByUser.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Pages.Item.CreatedByUser.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Pages.Item.GraphSitePage
{
    [Proxy(typeof(GraphSitePageRequestBuilder), true)]
    public partial interface IGraphSitePageRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Pages.Item.GraphSitePage.CanvasLayout
{
    [Proxy(typeof(CanvasLayoutRequestBuilder), true)]
    public partial interface ICanvasLayoutRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Pages.Item.GraphSitePage.CanvasLayout.HorizontalSections
{
    [Proxy(typeof(HorizontalSectionsRequestBuilder), true)]
    public partial interface IHorizontalSectionsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Pages.Item.GraphSitePage.CanvasLayout.HorizontalSections.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Pages.Item.GraphSitePage.CanvasLayout.HorizontalSections.Item
{
    [Proxy(typeof(HorizontalSectionItemRequestBuilder), true)]
    public partial interface IHorizontalSectionItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Pages.Item.GraphSitePage.CanvasLayout.HorizontalSections.Item.Columns
{
    [Proxy(typeof(ColumnsRequestBuilder), true)]
    public partial interface IColumnsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Pages.Item.GraphSitePage.CanvasLayout.HorizontalSections.Item.Columns.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Pages.Item.GraphSitePage.CanvasLayout.HorizontalSections.Item.Columns.Item
{
    [Proxy(typeof(HorizontalSectionColumnItemRequestBuilder), true)]
    public partial interface IHorizontalSectionColumnItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Pages.Item.GraphSitePage.CanvasLayout.HorizontalSections.Item.Columns.Item.Webparts
{
    [Proxy(typeof(WebpartsRequestBuilder), true)]
    public partial interface IWebpartsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Pages.Item.GraphSitePage.CanvasLayout.HorizontalSections.Item.Columns.Item.Webparts.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Pages.Item.GraphSitePage.CanvasLayout.HorizontalSections.Item.Columns.Item.Webparts.Item
{
    [Proxy(typeof(WebPartItemRequestBuilder), true)]
    public partial interface IWebPartItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Pages.Item.GraphSitePage.CanvasLayout.HorizontalSections.Item.Columns.Item.Webparts.Item.GetPositionOfWebPart
{
    [Proxy(typeof(GetPositionOfWebPartRequestBuilder), true)]
    public partial interface IGetPositionOfWebPartRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Pages.Item.GraphSitePage.CanvasLayout.VerticalSection
{
    [Proxy(typeof(VerticalSectionRequestBuilder), true)]
    public partial interface IVerticalSectionRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Pages.Item.GraphSitePage.CanvasLayout.VerticalSection.Webparts
{
    [Proxy(typeof(WebpartsRequestBuilder), true)]
    public partial interface IWebpartsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Pages.Item.GraphSitePage.CanvasLayout.VerticalSection.Webparts.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Pages.Item.GraphSitePage.CanvasLayout.VerticalSection.Webparts.Item
{
    [Proxy(typeof(WebPartItemRequestBuilder), true)]
    public partial interface IWebPartItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Pages.Item.GraphSitePage.CanvasLayout.VerticalSection.Webparts.Item.GetPositionOfWebPart
{
    [Proxy(typeof(GetPositionOfWebPartRequestBuilder), true)]
    public partial interface IGetPositionOfWebPartRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Pages.Item.GraphSitePage.CreatedByUser
{
    [Proxy(typeof(CreatedByUserRequestBuilder), true)]
    public partial interface ICreatedByUserRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Pages.Item.GraphSitePage.CreatedByUser.MailboxSettings
{
    [Proxy(typeof(MailboxSettingsRequestBuilder), true)]
    public partial interface IMailboxSettingsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Pages.Item.GraphSitePage.CreatedByUser.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Pages.Item.GraphSitePage.CreatedByUser.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Pages.Item.GraphSitePage.LastModifiedByUser
{
    [Proxy(typeof(LastModifiedByUserRequestBuilder), true)]
    public partial interface ILastModifiedByUserRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Pages.Item.GraphSitePage.LastModifiedByUser.MailboxSettings
{
    [Proxy(typeof(MailboxSettingsRequestBuilder), true)]
    public partial interface IMailboxSettingsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Pages.Item.GraphSitePage.LastModifiedByUser.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Pages.Item.GraphSitePage.LastModifiedByUser.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Pages.Item.GraphSitePage.WebParts
{
    [Proxy(typeof(WebPartsRequestBuilder), true)]
    public partial interface IWebPartsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Pages.Item.GraphSitePage.WebParts.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Pages.Item.GraphSitePage.WebParts.Item
{
    [Proxy(typeof(WebPartItemRequestBuilder), true)]
    public partial interface IWebPartItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Pages.Item.GraphSitePage.WebParts.Item.GetPositionOfWebPart
{
    [Proxy(typeof(GetPositionOfWebPartRequestBuilder), true)]
    public partial interface IGetPositionOfWebPartRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Pages.Item.LastModifiedByUser
{
    [Proxy(typeof(LastModifiedByUserRequestBuilder), true)]
    public partial interface ILastModifiedByUserRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Pages.Item.LastModifiedByUser.MailboxSettings
{
    [Proxy(typeof(MailboxSettingsRequestBuilder), true)]
    public partial interface IMailboxSettingsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Pages.Item.LastModifiedByUser.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Pages.Item.LastModifiedByUser.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Permissions
{
    [Proxy(typeof(PermissionsRequestBuilder), true)]
    public partial interface IPermissionsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Permissions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Permissions.Item
{
    [Proxy(typeof(PermissionItemRequestBuilder), true)]
    public partial interface IPermissionItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Permissions.Item.Grant
{
    [Proxy(typeof(GrantRequestBuilder), true)]
    public partial interface IGrantRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Sites
{
    [Proxy(typeof(SitesRequestBuilder), true)]
    public partial interface ISitesRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Sites.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.Sites.Item
{
    [Proxy(typeof(SiteItemRequestBuilder), true)]
    public partial interface ISiteItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore
{
    [Proxy(typeof(TermStoreRequestBuilder), true)]
    public partial interface ITermStoreRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Groups
{
    [Proxy(typeof(GroupsRequestBuilder), true)]
    public partial interface IGroupsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Groups.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Groups.Item
{
    [Proxy(typeof(GroupItemRequestBuilder), true)]
    public partial interface IGroupItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Groups.Item.Sets
{
    [Proxy(typeof(SetsRequestBuilder), true)]
    public partial interface ISetsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Groups.Item.Sets.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Groups.Item.Sets.Item
{
    [Proxy(typeof(SetItemRequestBuilder), true)]
    public partial interface ISetItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Groups.Item.Sets.Item.Children
{
    [Proxy(typeof(ChildrenRequestBuilder), true)]
    public partial interface IChildrenRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Groups.Item.Sets.Item.Children.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Groups.Item.Sets.Item.Children.Item
{
    [Proxy(typeof(TermItemRequestBuilder), true)]
    public partial interface ITermItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Groups.Item.Sets.Item.Children.Item.Children
{
    [Proxy(typeof(ChildrenRequestBuilder), true)]
    public partial interface IChildrenRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Groups.Item.Sets.Item.Children.Item.Children.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Groups.Item.Sets.Item.Children.Item.Children.Item
{
    [Proxy(typeof(TermItemRequestBuilder), true)]
    public partial interface ITermItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Groups.Item.Sets.Item.Children.Item.Children.Item.Relations
{
    [Proxy(typeof(RelationsRequestBuilder), true)]
    public partial interface IRelationsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Groups.Item.Sets.Item.Children.Item.Children.Item.Relations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Groups.Item.Sets.Item.Children.Item.Children.Item.Relations.Item
{
    [Proxy(typeof(RelationItemRequestBuilder), true)]
    public partial interface IRelationItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Groups.Item.Sets.Item.Children.Item.Children.Item.Relations.Item.FromTerm
{
    [Proxy(typeof(FromTermRequestBuilder), true)]
    public partial interface IFromTermRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Groups.Item.Sets.Item.Children.Item.Children.Item.Relations.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Groups.Item.Sets.Item.Children.Item.Children.Item.Relations.Item.ToTerm
{
    [Proxy(typeof(ToTermRequestBuilder), true)]
    public partial interface IToTermRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Groups.Item.Sets.Item.Children.Item.Children.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Groups.Item.Sets.Item.Children.Item.Relations
{
    [Proxy(typeof(RelationsRequestBuilder), true)]
    public partial interface IRelationsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Groups.Item.Sets.Item.Children.Item.Relations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Groups.Item.Sets.Item.Children.Item.Relations.Item
{
    [Proxy(typeof(RelationItemRequestBuilder), true)]
    public partial interface IRelationItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Groups.Item.Sets.Item.Children.Item.Relations.Item.FromTerm
{
    [Proxy(typeof(FromTermRequestBuilder), true)]
    public partial interface IFromTermRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Groups.Item.Sets.Item.Children.Item.Relations.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Groups.Item.Sets.Item.Children.Item.Relations.Item.ToTerm
{
    [Proxy(typeof(ToTermRequestBuilder), true)]
    public partial interface IToTermRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Groups.Item.Sets.Item.Children.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Groups.Item.Sets.Item.ParentGroup
{
    [Proxy(typeof(ParentGroupRequestBuilder), true)]
    public partial interface IParentGroupRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Groups.Item.Sets.Item.Relations
{
    [Proxy(typeof(RelationsRequestBuilder), true)]
    public partial interface IRelationsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Groups.Item.Sets.Item.Relations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Groups.Item.Sets.Item.Relations.Item
{
    [Proxy(typeof(RelationItemRequestBuilder), true)]
    public partial interface IRelationItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Groups.Item.Sets.Item.Relations.Item.FromTerm
{
    [Proxy(typeof(FromTermRequestBuilder), true)]
    public partial interface IFromTermRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Groups.Item.Sets.Item.Relations.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Groups.Item.Sets.Item.Relations.Item.ToTerm
{
    [Proxy(typeof(ToTermRequestBuilder), true)]
    public partial interface IToTermRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Groups.Item.Sets.Item.Terms
{
    [Proxy(typeof(TermsRequestBuilder), true)]
    public partial interface ITermsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Groups.Item.Sets.Item.Terms.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Groups.Item.Sets.Item.Terms.Item
{
    [Proxy(typeof(TermItemRequestBuilder), true)]
    public partial interface ITermItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Groups.Item.Sets.Item.Terms.Item.Children
{
    [Proxy(typeof(ChildrenRequestBuilder), true)]
    public partial interface IChildrenRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Groups.Item.Sets.Item.Terms.Item.Children.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Groups.Item.Sets.Item.Terms.Item.Children.Item
{
    [Proxy(typeof(TermItemRequestBuilder), true)]
    public partial interface ITermItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Groups.Item.Sets.Item.Terms.Item.Children.Item.Relations
{
    [Proxy(typeof(RelationsRequestBuilder), true)]
    public partial interface IRelationsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Groups.Item.Sets.Item.Terms.Item.Children.Item.Relations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Groups.Item.Sets.Item.Terms.Item.Children.Item.Relations.Item
{
    [Proxy(typeof(RelationItemRequestBuilder), true)]
    public partial interface IRelationItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Groups.Item.Sets.Item.Terms.Item.Children.Item.Relations.Item.FromTerm
{
    [Proxy(typeof(FromTermRequestBuilder), true)]
    public partial interface IFromTermRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Groups.Item.Sets.Item.Terms.Item.Children.Item.Relations.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Groups.Item.Sets.Item.Terms.Item.Children.Item.Relations.Item.ToTerm
{
    [Proxy(typeof(ToTermRequestBuilder), true)]
    public partial interface IToTermRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Groups.Item.Sets.Item.Terms.Item.Children.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Groups.Item.Sets.Item.Terms.Item.Relations
{
    [Proxy(typeof(RelationsRequestBuilder), true)]
    public partial interface IRelationsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Groups.Item.Sets.Item.Terms.Item.Relations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Groups.Item.Sets.Item.Terms.Item.Relations.Item
{
    [Proxy(typeof(RelationItemRequestBuilder), true)]
    public partial interface IRelationItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Groups.Item.Sets.Item.Terms.Item.Relations.Item.FromTerm
{
    [Proxy(typeof(FromTermRequestBuilder), true)]
    public partial interface IFromTermRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Groups.Item.Sets.Item.Terms.Item.Relations.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Groups.Item.Sets.Item.Terms.Item.Relations.Item.ToTerm
{
    [Proxy(typeof(ToTermRequestBuilder), true)]
    public partial interface IToTermRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Groups.Item.Sets.Item.Terms.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets
{
    [Proxy(typeof(SetsRequestBuilder), true)]
    public partial interface ISetsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item
{
    [Proxy(typeof(SetItemRequestBuilder), true)]
    public partial interface ISetItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.Children
{
    [Proxy(typeof(ChildrenRequestBuilder), true)]
    public partial interface IChildrenRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.Children.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.Children.Item
{
    [Proxy(typeof(TermItemRequestBuilder), true)]
    public partial interface ITermItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.Children.Item.Children
{
    [Proxy(typeof(ChildrenRequestBuilder), true)]
    public partial interface IChildrenRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.Children.Item.Children.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.Children.Item.Children.Item
{
    [Proxy(typeof(TermItemRequestBuilder), true)]
    public partial interface ITermItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.Children.Item.Children.Item.Relations
{
    [Proxy(typeof(RelationsRequestBuilder), true)]
    public partial interface IRelationsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.Children.Item.Children.Item.Relations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.Children.Item.Children.Item.Relations.Item
{
    [Proxy(typeof(RelationItemRequestBuilder), true)]
    public partial interface IRelationItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.Children.Item.Children.Item.Relations.Item.FromTerm
{
    [Proxy(typeof(FromTermRequestBuilder), true)]
    public partial interface IFromTermRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.Children.Item.Children.Item.Relations.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.Children.Item.Children.Item.Relations.Item.ToTerm
{
    [Proxy(typeof(ToTermRequestBuilder), true)]
    public partial interface IToTermRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.Children.Item.Children.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.Children.Item.Relations
{
    [Proxy(typeof(RelationsRequestBuilder), true)]
    public partial interface IRelationsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.Children.Item.Relations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.Children.Item.Relations.Item
{
    [Proxy(typeof(RelationItemRequestBuilder), true)]
    public partial interface IRelationItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.Children.Item.Relations.Item.FromTerm
{
    [Proxy(typeof(FromTermRequestBuilder), true)]
    public partial interface IFromTermRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.Children.Item.Relations.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.Children.Item.Relations.Item.ToTerm
{
    [Proxy(typeof(ToTermRequestBuilder), true)]
    public partial interface IToTermRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.Children.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.ParentGroup
{
    [Proxy(typeof(ParentGroupRequestBuilder), true)]
    public partial interface IParentGroupRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets
{
    [Proxy(typeof(SetsRequestBuilder), true)]
    public partial interface ISetsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item
{
    [Proxy(typeof(SetItemRequestBuilder), true)]
    public partial interface ISetItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Children
{
    [Proxy(typeof(ChildrenRequestBuilder), true)]
    public partial interface IChildrenRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Children.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Children.Item
{
    [Proxy(typeof(TermItemRequestBuilder), true)]
    public partial interface ITermItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Children.Item.Children
{
    [Proxy(typeof(ChildrenRequestBuilder), true)]
    public partial interface IChildrenRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Children.Item.Children.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Children.Item.Children.Item
{
    [Proxy(typeof(TermItemRequestBuilder), true)]
    public partial interface ITermItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Children.Item.Children.Item.Relations
{
    [Proxy(typeof(RelationsRequestBuilder), true)]
    public partial interface IRelationsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Children.Item.Children.Item.Relations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Children.Item.Children.Item.Relations.Item
{
    [Proxy(typeof(RelationItemRequestBuilder), true)]
    public partial interface IRelationItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Children.Item.Children.Item.Relations.Item.FromTerm
{
    [Proxy(typeof(FromTermRequestBuilder), true)]
    public partial interface IFromTermRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Children.Item.Children.Item.Relations.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Children.Item.Children.Item.Relations.Item.ToTerm
{
    [Proxy(typeof(ToTermRequestBuilder), true)]
    public partial interface IToTermRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Children.Item.Children.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Children.Item.Relations
{
    [Proxy(typeof(RelationsRequestBuilder), true)]
    public partial interface IRelationsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Children.Item.Relations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Children.Item.Relations.Item
{
    [Proxy(typeof(RelationItemRequestBuilder), true)]
    public partial interface IRelationItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Children.Item.Relations.Item.FromTerm
{
    [Proxy(typeof(FromTermRequestBuilder), true)]
    public partial interface IFromTermRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Children.Item.Relations.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Children.Item.Relations.Item.ToTerm
{
    [Proxy(typeof(ToTermRequestBuilder), true)]
    public partial interface IToTermRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Children.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Relations
{
    [Proxy(typeof(RelationsRequestBuilder), true)]
    public partial interface IRelationsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Relations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Relations.Item
{
    [Proxy(typeof(RelationItemRequestBuilder), true)]
    public partial interface IRelationItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Relations.Item.FromTerm
{
    [Proxy(typeof(FromTermRequestBuilder), true)]
    public partial interface IFromTermRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Relations.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Relations.Item.ToTerm
{
    [Proxy(typeof(ToTermRequestBuilder), true)]
    public partial interface IToTermRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Terms
{
    [Proxy(typeof(TermsRequestBuilder), true)]
    public partial interface ITermsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Terms.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Terms.Item
{
    [Proxy(typeof(TermItemRequestBuilder), true)]
    public partial interface ITermItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Terms.Item.Children
{
    [Proxy(typeof(ChildrenRequestBuilder), true)]
    public partial interface IChildrenRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Terms.Item.Children.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Terms.Item.Children.Item
{
    [Proxy(typeof(TermItemRequestBuilder), true)]
    public partial interface ITermItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Terms.Item.Children.Item.Relations
{
    [Proxy(typeof(RelationsRequestBuilder), true)]
    public partial interface IRelationsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Terms.Item.Children.Item.Relations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Terms.Item.Children.Item.Relations.Item
{
    [Proxy(typeof(RelationItemRequestBuilder), true)]
    public partial interface IRelationItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Terms.Item.Children.Item.Relations.Item.FromTerm
{
    [Proxy(typeof(FromTermRequestBuilder), true)]
    public partial interface IFromTermRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Terms.Item.Children.Item.Relations.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Terms.Item.Children.Item.Relations.Item.ToTerm
{
    [Proxy(typeof(ToTermRequestBuilder), true)]
    public partial interface IToTermRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Terms.Item.Children.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Terms.Item.Relations
{
    [Proxy(typeof(RelationsRequestBuilder), true)]
    public partial interface IRelationsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Terms.Item.Relations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Terms.Item.Relations.Item
{
    [Proxy(typeof(RelationItemRequestBuilder), true)]
    public partial interface IRelationItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Terms.Item.Relations.Item.FromTerm
{
    [Proxy(typeof(FromTermRequestBuilder), true)]
    public partial interface IFromTermRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Terms.Item.Relations.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Terms.Item.Relations.Item.ToTerm
{
    [Proxy(typeof(ToTermRequestBuilder), true)]
    public partial interface IToTermRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Terms.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.Relations
{
    [Proxy(typeof(RelationsRequestBuilder), true)]
    public partial interface IRelationsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.Relations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.Relations.Item
{
    [Proxy(typeof(RelationItemRequestBuilder), true)]
    public partial interface IRelationItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.Relations.Item.FromTerm
{
    [Proxy(typeof(FromTermRequestBuilder), true)]
    public partial interface IFromTermRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.Relations.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.Relations.Item.ToTerm
{
    [Proxy(typeof(ToTermRequestBuilder), true)]
    public partial interface IToTermRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.Terms
{
    [Proxy(typeof(TermsRequestBuilder), true)]
    public partial interface ITermsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.Terms.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.Terms.Item
{
    [Proxy(typeof(TermItemRequestBuilder), true)]
    public partial interface ITermItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.Terms.Item.Children
{
    [Proxy(typeof(ChildrenRequestBuilder), true)]
    public partial interface IChildrenRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.Terms.Item.Children.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.Terms.Item.Children.Item
{
    [Proxy(typeof(TermItemRequestBuilder), true)]
    public partial interface ITermItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.Terms.Item.Children.Item.Relations
{
    [Proxy(typeof(RelationsRequestBuilder), true)]
    public partial interface IRelationsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.Terms.Item.Children.Item.Relations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.Terms.Item.Children.Item.Relations.Item
{
    [Proxy(typeof(RelationItemRequestBuilder), true)]
    public partial interface IRelationItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.Terms.Item.Children.Item.Relations.Item.FromTerm
{
    [Proxy(typeof(FromTermRequestBuilder), true)]
    public partial interface IFromTermRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.Terms.Item.Children.Item.Relations.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.Terms.Item.Children.Item.Relations.Item.ToTerm
{
    [Proxy(typeof(ToTermRequestBuilder), true)]
    public partial interface IToTermRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.Terms.Item.Children.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.Terms.Item.Relations
{
    [Proxy(typeof(RelationsRequestBuilder), true)]
    public partial interface IRelationsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.Terms.Item.Relations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.Terms.Item.Relations.Item
{
    [Proxy(typeof(RelationItemRequestBuilder), true)]
    public partial interface IRelationItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.Terms.Item.Relations.Item.FromTerm
{
    [Proxy(typeof(FromTermRequestBuilder), true)]
    public partial interface IFromTermRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.Terms.Item.Relations.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.Terms.Item.Relations.Item.ToTerm
{
    [Proxy(typeof(ToTermRequestBuilder), true)]
    public partial interface IToTermRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStore.Sets.Item.Terms.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores
{
    [Proxy(typeof(TermStoresRequestBuilder), true)]
    public partial interface ITermStoresRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item
{
    [Proxy(typeof(StoreItemRequestBuilder), true)]
    public partial interface IStoreItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Groups
{
    [Proxy(typeof(GroupsRequestBuilder), true)]
    public partial interface IGroupsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Groups.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Groups.Item
{
    [Proxy(typeof(GroupItemRequestBuilder), true)]
    public partial interface IGroupItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Groups.Item.Sets
{
    [Proxy(typeof(SetsRequestBuilder), true)]
    public partial interface ISetsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Groups.Item.Sets.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Groups.Item.Sets.Item
{
    [Proxy(typeof(SetItemRequestBuilder), true)]
    public partial interface ISetItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Children
{
    [Proxy(typeof(ChildrenRequestBuilder), true)]
    public partial interface IChildrenRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Children.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Children.Item
{
    [Proxy(typeof(TermItemRequestBuilder), true)]
    public partial interface ITermItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Children.Item.Children
{
    [Proxy(typeof(ChildrenRequestBuilder), true)]
    public partial interface IChildrenRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Children.Item.Children.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Children.Item.Children.Item
{
    [Proxy(typeof(TermItemRequestBuilder), true)]
    public partial interface ITermItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Children.Item.Children.Item.Relations
{
    [Proxy(typeof(RelationsRequestBuilder), true)]
    public partial interface IRelationsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Children.Item.Children.Item.Relations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Children.Item.Children.Item.Relations.Item
{
    [Proxy(typeof(RelationItemRequestBuilder), true)]
    public partial interface IRelationItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Children.Item.Children.Item.Relations.Item.FromTerm
{
    [Proxy(typeof(FromTermRequestBuilder), true)]
    public partial interface IFromTermRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Children.Item.Children.Item.Relations.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Children.Item.Children.Item.Relations.Item.ToTerm
{
    [Proxy(typeof(ToTermRequestBuilder), true)]
    public partial interface IToTermRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Children.Item.Children.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Children.Item.Relations
{
    [Proxy(typeof(RelationsRequestBuilder), true)]
    public partial interface IRelationsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Children.Item.Relations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Children.Item.Relations.Item
{
    [Proxy(typeof(RelationItemRequestBuilder), true)]
    public partial interface IRelationItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Children.Item.Relations.Item.FromTerm
{
    [Proxy(typeof(FromTermRequestBuilder), true)]
    public partial interface IFromTermRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Children.Item.Relations.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Children.Item.Relations.Item.ToTerm
{
    [Proxy(typeof(ToTermRequestBuilder), true)]
    public partial interface IToTermRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Children.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.ParentGroup
{
    [Proxy(typeof(ParentGroupRequestBuilder), true)]
    public partial interface IParentGroupRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Relations
{
    [Proxy(typeof(RelationsRequestBuilder), true)]
    public partial interface IRelationsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Relations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Relations.Item
{
    [Proxy(typeof(RelationItemRequestBuilder), true)]
    public partial interface IRelationItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Relations.Item.FromTerm
{
    [Proxy(typeof(FromTermRequestBuilder), true)]
    public partial interface IFromTermRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Relations.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Relations.Item.ToTerm
{
    [Proxy(typeof(ToTermRequestBuilder), true)]
    public partial interface IToTermRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Terms
{
    [Proxy(typeof(TermsRequestBuilder), true)]
    public partial interface ITermsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Terms.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Terms.Item
{
    [Proxy(typeof(TermItemRequestBuilder), true)]
    public partial interface ITermItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Terms.Item.Children
{
    [Proxy(typeof(ChildrenRequestBuilder), true)]
    public partial interface IChildrenRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Terms.Item.Children.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Terms.Item.Children.Item
{
    [Proxy(typeof(TermItemRequestBuilder), true)]
    public partial interface ITermItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Terms.Item.Children.Item.Relations
{
    [Proxy(typeof(RelationsRequestBuilder), true)]
    public partial interface IRelationsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Terms.Item.Children.Item.Relations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Terms.Item.Children.Item.Relations.Item
{
    [Proxy(typeof(RelationItemRequestBuilder), true)]
    public partial interface IRelationItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Terms.Item.Children.Item.Relations.Item.FromTerm
{
    [Proxy(typeof(FromTermRequestBuilder), true)]
    public partial interface IFromTermRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Terms.Item.Children.Item.Relations.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Terms.Item.Children.Item.Relations.Item.ToTerm
{
    [Proxy(typeof(ToTermRequestBuilder), true)]
    public partial interface IToTermRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Terms.Item.Children.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Terms.Item.Relations
{
    [Proxy(typeof(RelationsRequestBuilder), true)]
    public partial interface IRelationsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Terms.Item.Relations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Terms.Item.Relations.Item
{
    [Proxy(typeof(RelationItemRequestBuilder), true)]
    public partial interface IRelationItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Terms.Item.Relations.Item.FromTerm
{
    [Proxy(typeof(FromTermRequestBuilder), true)]
    public partial interface IFromTermRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Terms.Item.Relations.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Terms.Item.Relations.Item.ToTerm
{
    [Proxy(typeof(ToTermRequestBuilder), true)]
    public partial interface IToTermRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Terms.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets
{
    [Proxy(typeof(SetsRequestBuilder), true)]
    public partial interface ISetsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item
{
    [Proxy(typeof(SetItemRequestBuilder), true)]
    public partial interface ISetItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.Children
{
    [Proxy(typeof(ChildrenRequestBuilder), true)]
    public partial interface IChildrenRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.Children.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.Children.Item
{
    [Proxy(typeof(TermItemRequestBuilder), true)]
    public partial interface ITermItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.Children.Item.Children
{
    [Proxy(typeof(ChildrenRequestBuilder), true)]
    public partial interface IChildrenRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.Children.Item.Children.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.Children.Item.Children.Item
{
    [Proxy(typeof(TermItemRequestBuilder), true)]
    public partial interface ITermItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.Children.Item.Children.Item.Relations
{
    [Proxy(typeof(RelationsRequestBuilder), true)]
    public partial interface IRelationsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.Children.Item.Children.Item.Relations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.Children.Item.Children.Item.Relations.Item
{
    [Proxy(typeof(RelationItemRequestBuilder), true)]
    public partial interface IRelationItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.Children.Item.Children.Item.Relations.Item.FromTerm
{
    [Proxy(typeof(FromTermRequestBuilder), true)]
    public partial interface IFromTermRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.Children.Item.Children.Item.Relations.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.Children.Item.Children.Item.Relations.Item.ToTerm
{
    [Proxy(typeof(ToTermRequestBuilder), true)]
    public partial interface IToTermRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.Children.Item.Children.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.Children.Item.Relations
{
    [Proxy(typeof(RelationsRequestBuilder), true)]
    public partial interface IRelationsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.Children.Item.Relations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.Children.Item.Relations.Item
{
    [Proxy(typeof(RelationItemRequestBuilder), true)]
    public partial interface IRelationItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.Children.Item.Relations.Item.FromTerm
{
    [Proxy(typeof(FromTermRequestBuilder), true)]
    public partial interface IFromTermRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.Children.Item.Relations.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.Children.Item.Relations.Item.ToTerm
{
    [Proxy(typeof(ToTermRequestBuilder), true)]
    public partial interface IToTermRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.Children.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.ParentGroup
{
    [Proxy(typeof(ParentGroupRequestBuilder), true)]
    public partial interface IParentGroupRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets
{
    [Proxy(typeof(SetsRequestBuilder), true)]
    public partial interface ISetsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item
{
    [Proxy(typeof(SetItemRequestBuilder), true)]
    public partial interface ISetItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Children
{
    [Proxy(typeof(ChildrenRequestBuilder), true)]
    public partial interface IChildrenRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Children.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Children.Item
{
    [Proxy(typeof(TermItemRequestBuilder), true)]
    public partial interface ITermItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Children.Item.Children
{
    [Proxy(typeof(ChildrenRequestBuilder), true)]
    public partial interface IChildrenRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Children.Item.Children.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Children.Item.Children.Item
{
    [Proxy(typeof(TermItemRequestBuilder), true)]
    public partial interface ITermItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Children.Item.Children.Item.Relations
{
    [Proxy(typeof(RelationsRequestBuilder), true)]
    public partial interface IRelationsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Children.Item.Children.Item.Relations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Children.Item.Children.Item.Relations.Item
{
    [Proxy(typeof(RelationItemRequestBuilder), true)]
    public partial interface IRelationItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Children.Item.Children.Item.Relations.Item.FromTerm
{
    [Proxy(typeof(FromTermRequestBuilder), true)]
    public partial interface IFromTermRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Children.Item.Children.Item.Relations.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Children.Item.Children.Item.Relations.Item.ToTerm
{
    [Proxy(typeof(ToTermRequestBuilder), true)]
    public partial interface IToTermRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Children.Item.Children.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Children.Item.Relations
{
    [Proxy(typeof(RelationsRequestBuilder), true)]
    public partial interface IRelationsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Children.Item.Relations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Children.Item.Relations.Item
{
    [Proxy(typeof(RelationItemRequestBuilder), true)]
    public partial interface IRelationItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Children.Item.Relations.Item.FromTerm
{
    [Proxy(typeof(FromTermRequestBuilder), true)]
    public partial interface IFromTermRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Children.Item.Relations.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Children.Item.Relations.Item.ToTerm
{
    [Proxy(typeof(ToTermRequestBuilder), true)]
    public partial interface IToTermRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Children.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Relations
{
    [Proxy(typeof(RelationsRequestBuilder), true)]
    public partial interface IRelationsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Relations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Relations.Item
{
    [Proxy(typeof(RelationItemRequestBuilder), true)]
    public partial interface IRelationItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Relations.Item.FromTerm
{
    [Proxy(typeof(FromTermRequestBuilder), true)]
    public partial interface IFromTermRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Relations.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Relations.Item.ToTerm
{
    [Proxy(typeof(ToTermRequestBuilder), true)]
    public partial interface IToTermRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Terms
{
    [Proxy(typeof(TermsRequestBuilder), true)]
    public partial interface ITermsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Terms.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Terms.Item
{
    [Proxy(typeof(TermItemRequestBuilder), true)]
    public partial interface ITermItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Terms.Item.Children
{
    [Proxy(typeof(ChildrenRequestBuilder), true)]
    public partial interface IChildrenRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Terms.Item.Children.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Terms.Item.Children.Item
{
    [Proxy(typeof(TermItemRequestBuilder), true)]
    public partial interface ITermItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Terms.Item.Children.Item.Relations
{
    [Proxy(typeof(RelationsRequestBuilder), true)]
    public partial interface IRelationsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Terms.Item.Children.Item.Relations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Terms.Item.Children.Item.Relations.Item
{
    [Proxy(typeof(RelationItemRequestBuilder), true)]
    public partial interface IRelationItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Terms.Item.Children.Item.Relations.Item.FromTerm
{
    [Proxy(typeof(FromTermRequestBuilder), true)]
    public partial interface IFromTermRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Terms.Item.Children.Item.Relations.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Terms.Item.Children.Item.Relations.Item.ToTerm
{
    [Proxy(typeof(ToTermRequestBuilder), true)]
    public partial interface IToTermRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Terms.Item.Children.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Terms.Item.Relations
{
    [Proxy(typeof(RelationsRequestBuilder), true)]
    public partial interface IRelationsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Terms.Item.Relations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Terms.Item.Relations.Item
{
    [Proxy(typeof(RelationItemRequestBuilder), true)]
    public partial interface IRelationItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Terms.Item.Relations.Item.FromTerm
{
    [Proxy(typeof(FromTermRequestBuilder), true)]
    public partial interface IFromTermRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Terms.Item.Relations.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Terms.Item.Relations.Item.ToTerm
{
    [Proxy(typeof(ToTermRequestBuilder), true)]
    public partial interface IToTermRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Terms.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.Relations
{
    [Proxy(typeof(RelationsRequestBuilder), true)]
    public partial interface IRelationsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.Relations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.Relations.Item
{
    [Proxy(typeof(RelationItemRequestBuilder), true)]
    public partial interface IRelationItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.Relations.Item.FromTerm
{
    [Proxy(typeof(FromTermRequestBuilder), true)]
    public partial interface IFromTermRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.Relations.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.Relations.Item.ToTerm
{
    [Proxy(typeof(ToTermRequestBuilder), true)]
    public partial interface IToTermRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.Terms
{
    [Proxy(typeof(TermsRequestBuilder), true)]
    public partial interface ITermsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.Terms.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.Terms.Item
{
    [Proxy(typeof(TermItemRequestBuilder), true)]
    public partial interface ITermItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.Terms.Item.Children
{
    [Proxy(typeof(ChildrenRequestBuilder), true)]
    public partial interface IChildrenRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.Terms.Item.Children.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.Terms.Item.Children.Item
{
    [Proxy(typeof(TermItemRequestBuilder), true)]
    public partial interface ITermItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.Terms.Item.Children.Item.Relations
{
    [Proxy(typeof(RelationsRequestBuilder), true)]
    public partial interface IRelationsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.Terms.Item.Children.Item.Relations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.Terms.Item.Children.Item.Relations.Item
{
    [Proxy(typeof(RelationItemRequestBuilder), true)]
    public partial interface IRelationItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.Terms.Item.Children.Item.Relations.Item.FromTerm
{
    [Proxy(typeof(FromTermRequestBuilder), true)]
    public partial interface IFromTermRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.Terms.Item.Children.Item.Relations.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.Terms.Item.Children.Item.Relations.Item.ToTerm
{
    [Proxy(typeof(ToTermRequestBuilder), true)]
    public partial interface IToTermRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.Terms.Item.Children.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.Terms.Item.Relations
{
    [Proxy(typeof(RelationsRequestBuilder), true)]
    public partial interface IRelationsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.Terms.Item.Relations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.Terms.Item.Relations.Item
{
    [Proxy(typeof(RelationItemRequestBuilder), true)]
    public partial interface IRelationItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.Terms.Item.Relations.Item.FromTerm
{
    [Proxy(typeof(FromTermRequestBuilder), true)]
    public partial interface IFromTermRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.Terms.Item.Relations.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.Terms.Item.Relations.Item.ToTerm
{
    [Proxy(typeof(ToTermRequestBuilder), true)]
    public partial interface IToTermRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Item.TermStores.Item.Sets.Item.Terms.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Sites.Remove
{
    [Proxy(typeof(RemoveRequestBuilder), true)]
    public partial interface IRemoveRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.SubscribeByMail
{
    [Proxy(typeof(SubscribeByMailRequestBuilder), true)]
    public partial interface ISubscribeByMailRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team
{
    [Proxy(typeof(TeamRequestBuilder), true)]
    public partial interface ITeamRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.AllChannels
{
    [Proxy(typeof(AllChannelsRequestBuilder), true)]
    public partial interface IAllChannelsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.AllChannels.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.AllChannels.Item
{
    [Proxy(typeof(ChannelItemRequestBuilder), true)]
    public partial interface IChannelItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Archive
{
    [Proxy(typeof(ArchiveRequestBuilder), true)]
    public partial interface IArchiveRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Channels
{
    [Proxy(typeof(ChannelsRequestBuilder), true)]
    public partial interface IChannelsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Channels.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Channels.GetAllMessages
{
    [Proxy(typeof(GetAllMessagesRequestBuilder), true)]
    public partial interface IGetAllMessagesRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Channels.GetAllRetainedMessages
{
    [Proxy(typeof(GetAllRetainedMessagesRequestBuilder), true)]
    public partial interface IGetAllRetainedMessagesRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Channels.Item
{
    [Proxy(typeof(ChannelItemRequestBuilder), true)]
    public partial interface IChannelItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Channels.Item.AllMembers
{
    [Proxy(typeof(AllMembersRequestBuilder), true)]
    public partial interface IAllMembersRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Channels.Item.AllMembers.Add
{
    [Proxy(typeof(AddRequestBuilder), true)]
    public partial interface IAddRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Channels.Item.AllMembers.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Channels.Item.AllMembers.Item
{
    [Proxy(typeof(ConversationMemberItemRequestBuilder), true)]
    public partial interface IConversationMemberItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Channels.Item.AllMembers.Remove
{
    [Proxy(typeof(RemoveRequestBuilder), true)]
    public partial interface IRemoveRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Channels.Item.Archive
{
    [Proxy(typeof(ArchiveRequestBuilder), true)]
    public partial interface IArchiveRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Channels.Item.CompleteMigration
{
    [Proxy(typeof(CompleteMigrationRequestBuilder), true)]
    public partial interface ICompleteMigrationRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Channels.Item.DoesUserHaveAccessuserIdUserIdTenantIdTenantIdUserPrincipalNameUserPrincipalName
{
    [Proxy(typeof(DoesUserHaveAccessuserIdUserIdTenantIdTenantIdUserPrincipalNameUserPrincipalNameRequestBuilder), true)]
    public partial interface IDoesUserHaveAccessuserIdUserIdTenantIdTenantIdUserPrincipalNameUserPrincipalNameRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Channels.Item.FilesFolder
{
    [Proxy(typeof(FilesFolderRequestBuilder), true)]
    public partial interface IFilesFolderRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Channels.Item.FilesFolder.Content
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Channels.Item.Members
{
    [Proxy(typeof(MembersRequestBuilder), true)]
    public partial interface IMembersRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Channels.Item.Members.Add
{
    [Proxy(typeof(AddRequestBuilder), true)]
    public partial interface IAddRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Channels.Item.Members.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Channels.Item.Members.Item
{
    [Proxy(typeof(ConversationMemberItemRequestBuilder), true)]
    public partial interface IConversationMemberItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Channels.Item.Members.Remove
{
    [Proxy(typeof(RemoveRequestBuilder), true)]
    public partial interface IRemoveRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Channels.Item.Messages
{
    [Proxy(typeof(MessagesRequestBuilder), true)]
    public partial interface IMessagesRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Channels.Item.Messages.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Channels.Item.Messages.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Channels.Item.Messages.Item
{
    [Proxy(typeof(ChatMessageItemRequestBuilder), true)]
    public partial interface IChatMessageItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Channels.Item.Messages.Item.HostedContents
{
    [Proxy(typeof(HostedContentsRequestBuilder), true)]
    public partial interface IHostedContentsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Channels.Item.Messages.Item.HostedContents.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Channels.Item.Messages.Item.HostedContents.Item
{
    [Proxy(typeof(ChatMessageHostedContentItemRequestBuilder), true)]
    public partial interface IChatMessageHostedContentItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Channels.Item.Messages.Item.HostedContents.Item.Value
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Channels.Item.Messages.Item.Replies
{
    [Proxy(typeof(RepliesRequestBuilder), true)]
    public partial interface IRepliesRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Channels.Item.Messages.Item.Replies.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Channels.Item.Messages.Item.Replies.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Channels.Item.Messages.Item.Replies.Item
{
    [Proxy(typeof(ChatMessageItemRequestBuilder), true)]
    public partial interface IChatMessageItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Channels.Item.Messages.Item.Replies.Item.HostedContents
{
    [Proxy(typeof(HostedContentsRequestBuilder), true)]
    public partial interface IHostedContentsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Channels.Item.Messages.Item.Replies.Item.HostedContents.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Channels.Item.Messages.Item.Replies.Item.HostedContents.Item
{
    [Proxy(typeof(ChatMessageHostedContentItemRequestBuilder), true)]
    public partial interface IChatMessageHostedContentItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Channels.Item.Messages.Item.Replies.Item.HostedContents.Item.Value
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Channels.Item.Messages.Item.Replies.Item.SetReaction
{
    [Proxy(typeof(SetReactionRequestBuilder), true)]
    public partial interface ISetReactionRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Channels.Item.Messages.Item.Replies.Item.SoftDelete
{
    [Proxy(typeof(SoftDeleteRequestBuilder), true)]
    public partial interface ISoftDeleteRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Channels.Item.Messages.Item.Replies.Item.UndoSoftDelete
{
    [Proxy(typeof(UndoSoftDeleteRequestBuilder), true)]
    public partial interface IUndoSoftDeleteRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Channels.Item.Messages.Item.Replies.Item.UnsetReaction
{
    [Proxy(typeof(UnsetReactionRequestBuilder), true)]
    public partial interface IUnsetReactionRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Channels.Item.Messages.Item.SetReaction
{
    [Proxy(typeof(SetReactionRequestBuilder), true)]
    public partial interface ISetReactionRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Channels.Item.Messages.Item.SoftDelete
{
    [Proxy(typeof(SoftDeleteRequestBuilder), true)]
    public partial interface ISoftDeleteRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Channels.Item.Messages.Item.UndoSoftDelete
{
    [Proxy(typeof(UndoSoftDeleteRequestBuilder), true)]
    public partial interface IUndoSoftDeleteRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Channels.Item.Messages.Item.UnsetReaction
{
    [Proxy(typeof(UnsetReactionRequestBuilder), true)]
    public partial interface IUnsetReactionRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Channels.Item.ProvisionEmail
{
    [Proxy(typeof(ProvisionEmailRequestBuilder), true)]
    public partial interface IProvisionEmailRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Channels.Item.RemoveEmail
{
    [Proxy(typeof(RemoveEmailRequestBuilder), true)]
    public partial interface IRemoveEmailRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Channels.Item.SharedWithTeams
{
    [Proxy(typeof(SharedWithTeamsRequestBuilder), true)]
    public partial interface ISharedWithTeamsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Channels.Item.SharedWithTeams.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Channels.Item.SharedWithTeams.Item
{
    [Proxy(typeof(SharedWithChannelTeamInfoItemRequestBuilder), true)]
    public partial interface ISharedWithChannelTeamInfoItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Channels.Item.SharedWithTeams.Item.AllowedMembers
{
    [Proxy(typeof(AllowedMembersRequestBuilder), true)]
    public partial interface IAllowedMembersRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Channels.Item.SharedWithTeams.Item.AllowedMembers.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Channels.Item.SharedWithTeams.Item.AllowedMembers.Item
{
    [Proxy(typeof(ConversationMemberItemRequestBuilder), true)]
    public partial interface IConversationMemberItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Channels.Item.SharedWithTeams.Item.Team
{
    [Proxy(typeof(TeamRequestBuilder), true)]
    public partial interface ITeamRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Channels.Item.Tabs
{
    [Proxy(typeof(TabsRequestBuilder), true)]
    public partial interface ITabsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Channels.Item.Tabs.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Channels.Item.Tabs.Item
{
    [Proxy(typeof(TeamsTabItemRequestBuilder), true)]
    public partial interface ITeamsTabItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Channels.Item.Tabs.Item.TeamsApp
{
    [Proxy(typeof(TeamsAppRequestBuilder), true)]
    public partial interface ITeamsAppRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Channels.Item.Unarchive
{
    [Proxy(typeof(UnarchiveRequestBuilder), true)]
    public partial interface IUnarchiveRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Clone
{
    [Proxy(typeof(CloneRequestBuilder), true)]
    public partial interface ICloneRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.CompleteMigration
{
    [Proxy(typeof(CompleteMigrationRequestBuilder), true)]
    public partial interface ICompleteMigrationRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Group
{
    [Proxy(typeof(GroupRequestBuilder), true)]
    public partial interface IGroupRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Group.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Group.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.IncomingChannels
{
    [Proxy(typeof(IncomingChannelsRequestBuilder), true)]
    public partial interface IIncomingChannelsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.IncomingChannels.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.IncomingChannels.Item
{
    [Proxy(typeof(ChannelItemRequestBuilder), true)]
    public partial interface IChannelItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.InstalledApps
{
    [Proxy(typeof(InstalledAppsRequestBuilder), true)]
    public partial interface IInstalledAppsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.InstalledApps.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.InstalledApps.Item
{
    [Proxy(typeof(TeamsAppInstallationItemRequestBuilder), true)]
    public partial interface ITeamsAppInstallationItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.InstalledApps.Item.TeamsApp
{
    [Proxy(typeof(TeamsAppRequestBuilder), true)]
    public partial interface ITeamsAppRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.InstalledApps.Item.TeamsAppDefinition
{
    [Proxy(typeof(TeamsAppDefinitionRequestBuilder), true)]
    public partial interface ITeamsAppDefinitionRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.InstalledApps.Item.Upgrade
{
    [Proxy(typeof(UpgradeRequestBuilder), true)]
    public partial interface IUpgradeRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Members
{
    [Proxy(typeof(MembersRequestBuilder), true)]
    public partial interface IMembersRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Members.Add
{
    [Proxy(typeof(AddRequestBuilder), true)]
    public partial interface IAddRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Members.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Members.Item
{
    [Proxy(typeof(ConversationMemberItemRequestBuilder), true)]
    public partial interface IConversationMemberItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Members.Remove
{
    [Proxy(typeof(RemoveRequestBuilder), true)]
    public partial interface IRemoveRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Operations
{
    [Proxy(typeof(OperationsRequestBuilder), true)]
    public partial interface IOperationsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Operations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Operations.Item
{
    [Proxy(typeof(TeamsAsyncOperationItemRequestBuilder), true)]
    public partial interface ITeamsAsyncOperationItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.PermissionGrants
{
    [Proxy(typeof(PermissionGrantsRequestBuilder), true)]
    public partial interface IPermissionGrantsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.PermissionGrants.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.PermissionGrants.Item
{
    [Proxy(typeof(ResourceSpecificPermissionGrantItemRequestBuilder), true)]
    public partial interface IResourceSpecificPermissionGrantItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Photo
{
    [Proxy(typeof(PhotoRequestBuilder), true)]
    public partial interface IPhotoRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Photo.Value
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.PrimaryChannel
{
    [Proxy(typeof(PrimaryChannelRequestBuilder), true)]
    public partial interface IPrimaryChannelRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.PrimaryChannel.AllMembers
{
    [Proxy(typeof(AllMembersRequestBuilder), true)]
    public partial interface IAllMembersRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.PrimaryChannel.AllMembers.Add
{
    [Proxy(typeof(AddRequestBuilder), true)]
    public partial interface IAddRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.PrimaryChannel.AllMembers.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.PrimaryChannel.AllMembers.Item
{
    [Proxy(typeof(ConversationMemberItemRequestBuilder), true)]
    public partial interface IConversationMemberItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.PrimaryChannel.AllMembers.Remove
{
    [Proxy(typeof(RemoveRequestBuilder), true)]
    public partial interface IRemoveRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.PrimaryChannel.Archive
{
    [Proxy(typeof(ArchiveRequestBuilder), true)]
    public partial interface IArchiveRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.PrimaryChannel.CompleteMigration
{
    [Proxy(typeof(CompleteMigrationRequestBuilder), true)]
    public partial interface ICompleteMigrationRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.PrimaryChannel.DoesUserHaveAccessuserIdUserIdTenantIdTenantIdUserPrincipalNameUserPrincipalName
{
    [Proxy(typeof(DoesUserHaveAccessuserIdUserIdTenantIdTenantIdUserPrincipalNameUserPrincipalNameRequestBuilder), true)]
    public partial interface IDoesUserHaveAccessuserIdUserIdTenantIdTenantIdUserPrincipalNameUserPrincipalNameRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.PrimaryChannel.FilesFolder
{
    [Proxy(typeof(FilesFolderRequestBuilder), true)]
    public partial interface IFilesFolderRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.PrimaryChannel.FilesFolder.Content
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.PrimaryChannel.Members
{
    [Proxy(typeof(MembersRequestBuilder), true)]
    public partial interface IMembersRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.PrimaryChannel.Members.Add
{
    [Proxy(typeof(AddRequestBuilder), true)]
    public partial interface IAddRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.PrimaryChannel.Members.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.PrimaryChannel.Members.Item
{
    [Proxy(typeof(ConversationMemberItemRequestBuilder), true)]
    public partial interface IConversationMemberItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.PrimaryChannel.Members.Remove
{
    [Proxy(typeof(RemoveRequestBuilder), true)]
    public partial interface IRemoveRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.PrimaryChannel.Messages
{
    [Proxy(typeof(MessagesRequestBuilder), true)]
    public partial interface IMessagesRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.PrimaryChannel.Messages.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.PrimaryChannel.Messages.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.PrimaryChannel.Messages.Item
{
    [Proxy(typeof(ChatMessageItemRequestBuilder), true)]
    public partial interface IChatMessageItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.PrimaryChannel.Messages.Item.HostedContents
{
    [Proxy(typeof(HostedContentsRequestBuilder), true)]
    public partial interface IHostedContentsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.PrimaryChannel.Messages.Item.HostedContents.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.PrimaryChannel.Messages.Item.HostedContents.Item
{
    [Proxy(typeof(ChatMessageHostedContentItemRequestBuilder), true)]
    public partial interface IChatMessageHostedContentItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.PrimaryChannel.Messages.Item.HostedContents.Item.Value
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.PrimaryChannel.Messages.Item.Replies
{
    [Proxy(typeof(RepliesRequestBuilder), true)]
    public partial interface IRepliesRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.PrimaryChannel.Messages.Item.Replies.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.PrimaryChannel.Messages.Item.Replies.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.PrimaryChannel.Messages.Item.Replies.Item
{
    [Proxy(typeof(ChatMessageItemRequestBuilder), true)]
    public partial interface IChatMessageItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.PrimaryChannel.Messages.Item.Replies.Item.HostedContents
{
    [Proxy(typeof(HostedContentsRequestBuilder), true)]
    public partial interface IHostedContentsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.PrimaryChannel.Messages.Item.Replies.Item.HostedContents.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.PrimaryChannel.Messages.Item.Replies.Item.HostedContents.Item
{
    [Proxy(typeof(ChatMessageHostedContentItemRequestBuilder), true)]
    public partial interface IChatMessageHostedContentItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.PrimaryChannel.Messages.Item.Replies.Item.HostedContents.Item.Value
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.PrimaryChannel.Messages.Item.Replies.Item.SetReaction
{
    [Proxy(typeof(SetReactionRequestBuilder), true)]
    public partial interface ISetReactionRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.PrimaryChannel.Messages.Item.Replies.Item.SoftDelete
{
    [Proxy(typeof(SoftDeleteRequestBuilder), true)]
    public partial interface ISoftDeleteRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.PrimaryChannel.Messages.Item.Replies.Item.UndoSoftDelete
{
    [Proxy(typeof(UndoSoftDeleteRequestBuilder), true)]
    public partial interface IUndoSoftDeleteRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.PrimaryChannel.Messages.Item.Replies.Item.UnsetReaction
{
    [Proxy(typeof(UnsetReactionRequestBuilder), true)]
    public partial interface IUnsetReactionRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.PrimaryChannel.Messages.Item.SetReaction
{
    [Proxy(typeof(SetReactionRequestBuilder), true)]
    public partial interface ISetReactionRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.PrimaryChannel.Messages.Item.SoftDelete
{
    [Proxy(typeof(SoftDeleteRequestBuilder), true)]
    public partial interface ISoftDeleteRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.PrimaryChannel.Messages.Item.UndoSoftDelete
{
    [Proxy(typeof(UndoSoftDeleteRequestBuilder), true)]
    public partial interface IUndoSoftDeleteRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.PrimaryChannel.Messages.Item.UnsetReaction
{
    [Proxy(typeof(UnsetReactionRequestBuilder), true)]
    public partial interface IUnsetReactionRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.PrimaryChannel.ProvisionEmail
{
    [Proxy(typeof(ProvisionEmailRequestBuilder), true)]
    public partial interface IProvisionEmailRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.PrimaryChannel.RemoveEmail
{
    [Proxy(typeof(RemoveEmailRequestBuilder), true)]
    public partial interface IRemoveEmailRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.PrimaryChannel.SharedWithTeams
{
    [Proxy(typeof(SharedWithTeamsRequestBuilder), true)]
    public partial interface ISharedWithTeamsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.PrimaryChannel.SharedWithTeams.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.PrimaryChannel.SharedWithTeams.Item
{
    [Proxy(typeof(SharedWithChannelTeamInfoItemRequestBuilder), true)]
    public partial interface ISharedWithChannelTeamInfoItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.PrimaryChannel.SharedWithTeams.Item.AllowedMembers
{
    [Proxy(typeof(AllowedMembersRequestBuilder), true)]
    public partial interface IAllowedMembersRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.PrimaryChannel.SharedWithTeams.Item.AllowedMembers.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.PrimaryChannel.SharedWithTeams.Item.AllowedMembers.Item
{
    [Proxy(typeof(ConversationMemberItemRequestBuilder), true)]
    public partial interface IConversationMemberItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.PrimaryChannel.SharedWithTeams.Item.Team
{
    [Proxy(typeof(TeamRequestBuilder), true)]
    public partial interface ITeamRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.PrimaryChannel.Tabs
{
    [Proxy(typeof(TabsRequestBuilder), true)]
    public partial interface ITabsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.PrimaryChannel.Tabs.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.PrimaryChannel.Tabs.Item
{
    [Proxy(typeof(TeamsTabItemRequestBuilder), true)]
    public partial interface ITeamsTabItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.PrimaryChannel.Tabs.Item.TeamsApp
{
    [Proxy(typeof(TeamsAppRequestBuilder), true)]
    public partial interface ITeamsAppRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.PrimaryChannel.Unarchive
{
    [Proxy(typeof(UnarchiveRequestBuilder), true)]
    public partial interface IUnarchiveRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Schedule
{
    [Proxy(typeof(ScheduleRequestBuilder), true)]
    public partial interface IScheduleRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Schedule.DayNotes
{
    [Proxy(typeof(DayNotesRequestBuilder), true)]
    public partial interface IDayNotesRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Schedule.DayNotes.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Schedule.DayNotes.Item
{
    [Proxy(typeof(DayNoteItemRequestBuilder), true)]
    public partial interface IDayNoteItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Schedule.OfferShiftRequests
{
    [Proxy(typeof(OfferShiftRequestsRequestBuilder), true)]
    public partial interface IOfferShiftRequestsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Schedule.OfferShiftRequests.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Schedule.OfferShiftRequests.Item
{
    [Proxy(typeof(OfferShiftRequestItemRequestBuilder), true)]
    public partial interface IOfferShiftRequestItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Schedule.OpenShiftChangeRequests
{
    [Proxy(typeof(OpenShiftChangeRequestsRequestBuilder), true)]
    public partial interface IOpenShiftChangeRequestsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Schedule.OpenShiftChangeRequests.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Schedule.OpenShiftChangeRequests.Item
{
    [Proxy(typeof(OpenShiftChangeRequestItemRequestBuilder), true)]
    public partial interface IOpenShiftChangeRequestItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Schedule.OpenShifts
{
    [Proxy(typeof(OpenShiftsRequestBuilder), true)]
    public partial interface IOpenShiftsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Schedule.OpenShifts.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Schedule.OpenShifts.Item
{
    [Proxy(typeof(OpenShiftItemRequestBuilder), true)]
    public partial interface IOpenShiftItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Schedule.SchedulingGroups
{
    [Proxy(typeof(SchedulingGroupsRequestBuilder), true)]
    public partial interface ISchedulingGroupsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Schedule.SchedulingGroups.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Schedule.SchedulingGroups.Item
{
    [Proxy(typeof(SchedulingGroupItemRequestBuilder), true)]
    public partial interface ISchedulingGroupItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Schedule.Share
{
    [Proxy(typeof(ShareRequestBuilder), true)]
    public partial interface IShareRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Schedule.Shifts
{
    [Proxy(typeof(ShiftsRequestBuilder), true)]
    public partial interface IShiftsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Schedule.Shifts.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Schedule.Shifts.Item
{
    [Proxy(typeof(ShiftItemRequestBuilder), true)]
    public partial interface IShiftItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Schedule.SwapShiftsChangeRequests
{
    [Proxy(typeof(SwapShiftsChangeRequestsRequestBuilder), true)]
    public partial interface ISwapShiftsChangeRequestsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Schedule.SwapShiftsChangeRequests.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Schedule.SwapShiftsChangeRequests.Item
{
    [Proxy(typeof(SwapShiftsChangeRequestItemRequestBuilder), true)]
    public partial interface ISwapShiftsChangeRequestItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Schedule.TimeCards
{
    [Proxy(typeof(TimeCardsRequestBuilder), true)]
    public partial interface ITimeCardsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Schedule.TimeCards.ClockIn
{
    [Proxy(typeof(ClockInRequestBuilder), true)]
    public partial interface IClockInRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Schedule.TimeCards.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Schedule.TimeCards.Item
{
    [Proxy(typeof(TimeCardItemRequestBuilder), true)]
    public partial interface ITimeCardItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Schedule.TimeCards.Item.ClockOut
{
    [Proxy(typeof(ClockOutRequestBuilder), true)]
    public partial interface IClockOutRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Schedule.TimeCards.Item.Confirm
{
    [Proxy(typeof(ConfirmRequestBuilder), true)]
    public partial interface IConfirmRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Schedule.TimeCards.Item.EndBreak
{
    [Proxy(typeof(EndBreakRequestBuilder), true)]
    public partial interface IEndBreakRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Schedule.TimeCards.Item.StartBreak
{
    [Proxy(typeof(StartBreakRequestBuilder), true)]
    public partial interface IStartBreakRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Schedule.TimeOffReasons
{
    [Proxy(typeof(TimeOffReasonsRequestBuilder), true)]
    public partial interface ITimeOffReasonsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Schedule.TimeOffReasons.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Schedule.TimeOffReasons.Item
{
    [Proxy(typeof(TimeOffReasonItemRequestBuilder), true)]
    public partial interface ITimeOffReasonItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Schedule.TimeOffRequests
{
    [Proxy(typeof(TimeOffRequestsRequestBuilder), true)]
    public partial interface ITimeOffRequestsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Schedule.TimeOffRequests.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Schedule.TimeOffRequests.Item
{
    [Proxy(typeof(TimeOffRequestItemRequestBuilder), true)]
    public partial interface ITimeOffRequestItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Schedule.TimesOff
{
    [Proxy(typeof(TimesOffRequestBuilder), true)]
    public partial interface ITimesOffRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Schedule.TimesOff.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Schedule.TimesOff.Item
{
    [Proxy(typeof(TimeOffItemRequestBuilder), true)]
    public partial interface ITimeOffItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.SendActivityNotification
{
    [Proxy(typeof(SendActivityNotificationRequestBuilder), true)]
    public partial interface ISendActivityNotificationRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Tags
{
    [Proxy(typeof(TagsRequestBuilder), true)]
    public partial interface ITagsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Tags.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Tags.Item
{
    [Proxy(typeof(TeamworkTagItemRequestBuilder), true)]
    public partial interface ITeamworkTagItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Tags.Item.Members
{
    [Proxy(typeof(MembersRequestBuilder), true)]
    public partial interface IMembersRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Tags.Item.Members.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Tags.Item.Members.Item
{
    [Proxy(typeof(TeamworkTagMemberItemRequestBuilder), true)]
    public partial interface ITeamworkTagMemberItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Template
{
    [Proxy(typeof(TemplateRequestBuilder), true)]
    public partial interface ITemplateRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Team.Unarchive
{
    [Proxy(typeof(UnarchiveRequestBuilder), true)]
    public partial interface IUnarchiveRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Threads
{
    [Proxy(typeof(ThreadsRequestBuilder), true)]
    public partial interface IThreadsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Threads.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Threads.Item
{
    [Proxy(typeof(ConversationThreadItemRequestBuilder), true)]
    public partial interface IConversationThreadItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Threads.Item.Posts
{
    [Proxy(typeof(PostsRequestBuilder), true)]
    public partial interface IPostsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Threads.Item.Posts.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Threads.Item.Posts.Item
{
    [Proxy(typeof(PostItemRequestBuilder), true)]
    public partial interface IPostItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Threads.Item.Posts.Item.Attachments
{
    [Proxy(typeof(AttachmentsRequestBuilder), true)]
    public partial interface IAttachmentsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Threads.Item.Posts.Item.Attachments.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Threads.Item.Posts.Item.Attachments.CreateUploadSession
{
    [Proxy(typeof(CreateUploadSessionRequestBuilder), true)]
    public partial interface ICreateUploadSessionRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Threads.Item.Posts.Item.Attachments.Item
{
    [Proxy(typeof(AttachmentItemRequestBuilder), true)]
    public partial interface IAttachmentItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Threads.Item.Posts.Item.Extensions
{
    [Proxy(typeof(ExtensionsRequestBuilder), true)]
    public partial interface IExtensionsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Threads.Item.Posts.Item.Extensions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Threads.Item.Posts.Item.Extensions.Item
{
    [Proxy(typeof(ExtensionItemRequestBuilder), true)]
    public partial interface IExtensionItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Threads.Item.Posts.Item.Forward
{
    [Proxy(typeof(ForwardRequestBuilder), true)]
    public partial interface IForwardRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Threads.Item.Posts.Item.InReplyTo
{
    [Proxy(typeof(InReplyToRequestBuilder), true)]
    public partial interface IInReplyToRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Threads.Item.Posts.Item.InReplyTo.Attachments
{
    [Proxy(typeof(AttachmentsRequestBuilder), true)]
    public partial interface IAttachmentsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Threads.Item.Posts.Item.InReplyTo.Attachments.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Threads.Item.Posts.Item.InReplyTo.Attachments.CreateUploadSession
{
    [Proxy(typeof(CreateUploadSessionRequestBuilder), true)]
    public partial interface ICreateUploadSessionRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Threads.Item.Posts.Item.InReplyTo.Attachments.Item
{
    [Proxy(typeof(AttachmentItemRequestBuilder), true)]
    public partial interface IAttachmentItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Threads.Item.Posts.Item.InReplyTo.Extensions
{
    [Proxy(typeof(ExtensionsRequestBuilder), true)]
    public partial interface IExtensionsRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Threads.Item.Posts.Item.InReplyTo.Extensions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Threads.Item.Posts.Item.InReplyTo.Extensions.Item
{
    [Proxy(typeof(ExtensionItemRequestBuilder), true)]
    public partial interface IExtensionItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Threads.Item.Posts.Item.InReplyTo.Forward
{
    [Proxy(typeof(ForwardRequestBuilder), true)]
    public partial interface IForwardRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Threads.Item.Posts.Item.InReplyTo.Reply
{
    [Proxy(typeof(ReplyRequestBuilder), true)]
    public partial interface IReplyRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Threads.Item.Posts.Item.Reply
{
    [Proxy(typeof(ReplyRequestBuilder), true)]
    public partial interface IReplyRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.Threads.Item.Reply
{
    [Proxy(typeof(ReplyRequestBuilder), true)]
    public partial interface IReplyRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.TransitiveMemberOf
{
    [Proxy(typeof(TransitiveMemberOfRequestBuilder), true)]
    public partial interface ITransitiveMemberOfRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.TransitiveMemberOf.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.TransitiveMemberOf.GraphAdministrativeUnit
{
    [Proxy(typeof(GraphAdministrativeUnitRequestBuilder), true)]
    public partial interface IGraphAdministrativeUnitRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.TransitiveMemberOf.GraphAdministrativeUnit.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.TransitiveMemberOf.GraphGroup
{
    [Proxy(typeof(GraphGroupRequestBuilder), true)]
    public partial interface IGraphGroupRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.TransitiveMemberOf.GraphGroup.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.TransitiveMemberOf.Item
{
    [Proxy(typeof(DirectoryObjectItemRequestBuilder), true)]
    public partial interface IDirectoryObjectItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.TransitiveMemberOf.Item.GraphAdministrativeUnit
{
    [Proxy(typeof(GraphAdministrativeUnitRequestBuilder), true)]
    public partial interface IGraphAdministrativeUnitRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.TransitiveMemberOf.Item.GraphGroup
{
    [Proxy(typeof(GraphGroupRequestBuilder), true)]
    public partial interface IGraphGroupRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.TransitiveMembers
{
    [Proxy(typeof(TransitiveMembersRequestBuilder), true)]
    public partial interface ITransitiveMembersRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.TransitiveMembers.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.TransitiveMembers.GraphApplication
{
    [Proxy(typeof(GraphApplicationRequestBuilder), true)]
    public partial interface IGraphApplicationRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.TransitiveMembers.GraphApplication.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.TransitiveMembers.GraphDevice
{
    [Proxy(typeof(GraphDeviceRequestBuilder), true)]
    public partial interface IGraphDeviceRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.TransitiveMembers.GraphDevice.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.TransitiveMembers.GraphGroup
{
    [Proxy(typeof(GraphGroupRequestBuilder), true)]
    public partial interface IGraphGroupRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.TransitiveMembers.GraphGroup.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.TransitiveMembers.GraphOrgContact
{
    [Proxy(typeof(GraphOrgContactRequestBuilder), true)]
    public partial interface IGraphOrgContactRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.TransitiveMembers.GraphOrgContact.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.TransitiveMembers.GraphServicePrincipal
{
    [Proxy(typeof(GraphServicePrincipalRequestBuilder), true)]
    public partial interface IGraphServicePrincipalRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.TransitiveMembers.GraphServicePrincipal.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.TransitiveMembers.GraphUser
{
    [Proxy(typeof(GraphUserRequestBuilder), true)]
    public partial interface IGraphUserRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.TransitiveMembers.GraphUser.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.TransitiveMembers.Item
{
    [Proxy(typeof(DirectoryObjectItemRequestBuilder), true)]
    public partial interface IDirectoryObjectItemRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.TransitiveMembers.Item.GraphApplication
{
    [Proxy(typeof(GraphApplicationRequestBuilder), true)]
    public partial interface IGraphApplicationRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.TransitiveMembers.Item.GraphDevice
{
    [Proxy(typeof(GraphDeviceRequestBuilder), true)]
    public partial interface IGraphDeviceRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.TransitiveMembers.Item.GraphGroup
{
    [Proxy(typeof(GraphGroupRequestBuilder), true)]
    public partial interface IGraphGroupRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.TransitiveMembers.Item.GraphOrgContact
{
    [Proxy(typeof(GraphOrgContactRequestBuilder), true)]
    public partial interface IGraphOrgContactRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.TransitiveMembers.Item.GraphServicePrincipal
{
    [Proxy(typeof(GraphServicePrincipalRequestBuilder), true)]
    public partial interface IGraphServicePrincipalRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.TransitiveMembers.Item.GraphUser
{
    [Proxy(typeof(GraphUserRequestBuilder), true)]
    public partial interface IGraphUserRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.UnsubscribeByMail
{
    [Proxy(typeof(UnsubscribeByMailRequestBuilder), true)]
    public partial interface IUnsubscribeByMailRequestBuilder;
}

namespace Microsoft.Graph.Groups.Item.ValidateProperties
{
    [Proxy(typeof(ValidatePropertiesRequestBuilder), true)]
    public partial interface IValidatePropertiesRequestBuilder;
}

namespace Microsoft.Graph.Groups.ValidateProperties
{
    [Proxy(typeof(ValidatePropertiesRequestBuilder), true)]
    public partial interface IValidatePropertiesRequestBuilder;
}

namespace Microsoft.Graph.GroupSettings
{
    [Proxy(typeof(GroupSettingsRequestBuilder), true)]
    public partial interface IGroupSettingsRequestBuilder;
}

namespace Microsoft.Graph.GroupSettings.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.GroupSettings.Item
{
    [Proxy(typeof(GroupSettingItemRequestBuilder), true)]
    public partial interface IGroupSettingItemRequestBuilder;
}

namespace Microsoft.Graph.GroupSettingTemplates
{
    [Proxy(typeof(GroupSettingTemplatesRequestBuilder), true)]
    public partial interface IGroupSettingTemplatesRequestBuilder;
}

namespace Microsoft.Graph.GroupSettingTemplates.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.GroupSettingTemplates.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.GroupSettingTemplates.GetAvailableExtensionProperties
{
    [Proxy(typeof(GetAvailableExtensionPropertiesRequestBuilder), true)]
    public partial interface IGetAvailableExtensionPropertiesRequestBuilder;
}

namespace Microsoft.Graph.GroupSettingTemplates.GetByIds
{
    [Proxy(typeof(GetByIdsRequestBuilder), true)]
    public partial interface IGetByIdsRequestBuilder;
}

namespace Microsoft.Graph.GroupSettingTemplates.Item
{
    [Proxy(typeof(GroupSettingTemplateItemRequestBuilder), true)]
    public partial interface IGroupSettingTemplateItemRequestBuilder;
}

namespace Microsoft.Graph.GroupSettingTemplates.Item.CheckMemberGroups
{
    [Proxy(typeof(CheckMemberGroupsRequestBuilder), true)]
    public partial interface ICheckMemberGroupsRequestBuilder;
}

namespace Microsoft.Graph.GroupSettingTemplates.Item.CheckMemberObjects
{
    [Proxy(typeof(CheckMemberObjectsRequestBuilder), true)]
    public partial interface ICheckMemberObjectsRequestBuilder;
}

namespace Microsoft.Graph.GroupSettingTemplates.Item.GetMemberGroups
{
    [Proxy(typeof(GetMemberGroupsRequestBuilder), true)]
    public partial interface IGetMemberGroupsRequestBuilder;
}

namespace Microsoft.Graph.GroupSettingTemplates.Item.GetMemberObjects
{
    [Proxy(typeof(GetMemberObjectsRequestBuilder), true)]
    public partial interface IGetMemberObjectsRequestBuilder;
}

namespace Microsoft.Graph.GroupSettingTemplates.Item.Restore
{
    [Proxy(typeof(RestoreRequestBuilder), true)]
    public partial interface IRestoreRequestBuilder;
}

namespace Microsoft.Graph.GroupSettingTemplates.ValidateProperties
{
    [Proxy(typeof(ValidatePropertiesRequestBuilder), true)]
    public partial interface IValidatePropertiesRequestBuilder;
}

namespace Microsoft.Graph.GroupsWithUniqueName
{
    [Proxy(typeof(GroupsWithUniqueNameRequestBuilder), true)]
    public partial interface IGroupsWithUniqueNameRequestBuilder;
}

namespace Microsoft.Graph.Identity
{
    [Proxy(typeof(IdentityRequestBuilder), true)]
    public partial interface IIdentityRequestBuilder;
}

namespace Microsoft.Graph.Identity.ApiConnectors
{
    [Proxy(typeof(ApiConnectorsRequestBuilder), true)]
    public partial interface IApiConnectorsRequestBuilder;
}

namespace Microsoft.Graph.Identity.ApiConnectors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Identity.ApiConnectors.Item
{
    [Proxy(typeof(IdentityApiConnectorItemRequestBuilder), true)]
    public partial interface IIdentityApiConnectorItemRequestBuilder;
}

namespace Microsoft.Graph.Identity.ApiConnectors.Item.UploadClientCertificate
{
    [Proxy(typeof(UploadClientCertificateRequestBuilder), true)]
    public partial interface IUploadClientCertificateRequestBuilder;
}

namespace Microsoft.Graph.Identity.AuthenticationEventListeners
{
    [Proxy(typeof(AuthenticationEventListenersRequestBuilder), true)]
    public partial interface IAuthenticationEventListenersRequestBuilder;
}

namespace Microsoft.Graph.Identity.AuthenticationEventListeners.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Identity.AuthenticationEventListeners.Item
{
    [Proxy(typeof(AuthenticationEventListenerItemRequestBuilder), true)]
    public partial interface IAuthenticationEventListenerItemRequestBuilder;
}

namespace Microsoft.Graph.Identity.AuthenticationEventsFlows
{
    [Proxy(typeof(AuthenticationEventsFlowsRequestBuilder), true)]
    public partial interface IAuthenticationEventsFlowsRequestBuilder;
}

namespace Microsoft.Graph.Identity.AuthenticationEventsFlows.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Identity.AuthenticationEventsFlows.GraphExternalUsersSelfServiceSignUpEventsFlow
{
    [Proxy(typeof(GraphExternalUsersSelfServiceSignUpEventsFlowRequestBuilder), true)]
    public partial interface IGraphExternalUsersSelfServiceSignUpEventsFlowRequestBuilder;
}

namespace Microsoft.Graph.Identity.AuthenticationEventsFlows.GraphExternalUsersSelfServiceSignUpEventsFlow.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Identity.AuthenticationEventsFlows.Item
{
    [Proxy(typeof(AuthenticationEventsFlowItemRequestBuilder), true)]
    public partial interface IAuthenticationEventsFlowItemRequestBuilder;
}

namespace Microsoft.Graph.Identity.AuthenticationEventsFlows.Item.Conditions
{
    [Proxy(typeof(ConditionsRequestBuilder), true)]
    public partial interface IConditionsRequestBuilder;
}

namespace Microsoft.Graph.Identity.AuthenticationEventsFlows.Item.Conditions.Applications
{
    [Proxy(typeof(ApplicationsRequestBuilder), true)]
    public partial interface IApplicationsRequestBuilder;
}

namespace Microsoft.Graph.Identity.AuthenticationEventsFlows.Item.Conditions.Applications.IncludeApplications
{
    [Proxy(typeof(IncludeApplicationsRequestBuilder), true)]
    public partial interface IIncludeApplicationsRequestBuilder;
}

namespace Microsoft.Graph.Identity.AuthenticationEventsFlows.Item.Conditions.Applications.IncludeApplications.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Identity.AuthenticationEventsFlows.Item.Conditions.Applications.IncludeApplications.Item
{
    [Proxy(typeof(AuthenticationConditionApplicationAppItemRequestBuilder), true)]
    public partial interface IAuthenticationConditionApplicationAppItemRequestBuilder;
}

namespace Microsoft.Graph.Identity.AuthenticationEventsFlows.Item.GraphExternalUsersSelfServiceSignUpEventsFlow
{
    [Proxy(typeof(GraphExternalUsersSelfServiceSignUpEventsFlowRequestBuilder), true)]
    public partial interface IGraphExternalUsersSelfServiceSignUpEventsFlowRequestBuilder;
}

namespace Microsoft.Graph.Identity.AuthenticationEventsFlows.Item.GraphExternalUsersSelfServiceSignUpEventsFlow.Conditions
{
    [Proxy(typeof(ConditionsRequestBuilder), true)]
    public partial interface IConditionsRequestBuilder;
}

namespace Microsoft.Graph.Identity.AuthenticationEventsFlows.Item.GraphExternalUsersSelfServiceSignUpEventsFlow.Conditions.Applications
{
    [Proxy(typeof(ApplicationsRequestBuilder), true)]
    public partial interface IApplicationsRequestBuilder;
}

namespace Microsoft.Graph.Identity.AuthenticationEventsFlows.Item.GraphExternalUsersSelfServiceSignUpEventsFlow.Conditions.Applications.IncludeApplications
{
    [Proxy(typeof(IncludeApplicationsRequestBuilder), true)]
    public partial interface IIncludeApplicationsRequestBuilder;
}

namespace Microsoft.Graph.Identity.AuthenticationEventsFlows.Item.GraphExternalUsersSelfServiceSignUpEventsFlow.Conditions.Applications.IncludeApplications.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Identity.AuthenticationEventsFlows.Item.GraphExternalUsersSelfServiceSignUpEventsFlow.Conditions.Applications.IncludeApplications.Item
{
    [Proxy(typeof(AuthenticationConditionApplicationAppItemRequestBuilder), true)]
    public partial interface IAuthenticationConditionApplicationAppItemRequestBuilder;
}

namespace Microsoft.Graph.Identity.AuthenticationEventsFlows.Item.GraphExternalUsersSelfServiceSignUpEventsFlow.OnAttributeCollection
{
    [Proxy(typeof(OnAttributeCollectionRequestBuilder), true)]
    public partial interface IOnAttributeCollectionRequestBuilder;
}

namespace Microsoft.Graph.Identity.AuthenticationEventsFlows.Item.GraphExternalUsersSelfServiceSignUpEventsFlow.OnAttributeCollection.GraphOnAttributeCollectionExternalUsersSelfServiceSignUp
{
    [Proxy(typeof(GraphOnAttributeCollectionExternalUsersSelfServiceSignUpRequestBuilder), true)]
    public partial interface IGraphOnAttributeCollectionExternalUsersSelfServiceSignUpRequestBuilder;
}

namespace Microsoft.Graph.Identity.AuthenticationEventsFlows.Item.GraphExternalUsersSelfServiceSignUpEventsFlow.OnAttributeCollection.GraphOnAttributeCollectionExternalUsersSelfServiceSignUp.Attributes
{
    [Proxy(typeof(AttributesRequestBuilder), true)]
    public partial interface IAttributesRequestBuilder;
}

namespace Microsoft.Graph.Identity.AuthenticationEventsFlows.Item.GraphExternalUsersSelfServiceSignUpEventsFlow.OnAttributeCollection.GraphOnAttributeCollectionExternalUsersSelfServiceSignUp.Attributes.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Identity.AuthenticationEventsFlows.Item.GraphExternalUsersSelfServiceSignUpEventsFlow.OnAttributeCollection.GraphOnAttributeCollectionExternalUsersSelfServiceSignUp.Attributes.Item
{
    [Proxy(typeof(IdentityUserFlowAttributeItemRequestBuilder), true)]
    public partial interface IIdentityUserFlowAttributeItemRequestBuilder;
}

namespace Microsoft.Graph.Identity.AuthenticationEventsFlows.Item.GraphExternalUsersSelfServiceSignUpEventsFlow.OnAttributeCollection.GraphOnAttributeCollectionExternalUsersSelfServiceSignUp.Attributes.Item.Ref
{
    [Proxy(typeof(RefRequestBuilder), true)]
    public partial interface IRefRequestBuilder;
}

namespace Microsoft.Graph.Identity.AuthenticationEventsFlows.Item.GraphExternalUsersSelfServiceSignUpEventsFlow.OnAttributeCollection.GraphOnAttributeCollectionExternalUsersSelfServiceSignUp.Attributes.Ref
{
    [Proxy(typeof(RefRequestBuilder), true)]
    public partial interface IRefRequestBuilder;
}

namespace Microsoft.Graph.Identity.AuthenticationEventsFlows.Item.GraphExternalUsersSelfServiceSignUpEventsFlow.OnAuthenticationMethodLoadStart
{
    [Proxy(typeof(OnAuthenticationMethodLoadStartRequestBuilder), true)]
    public partial interface IOnAuthenticationMethodLoadStartRequestBuilder;
}

namespace Microsoft.Graph.Identity.AuthenticationEventsFlows.Item.GraphExternalUsersSelfServiceSignUpEventsFlow.OnAuthenticationMethodLoadStart.GraphOnAuthenticationMethodLoadStartExternalUsersSelfServiceSignUp
{
    [Proxy(typeof(GraphOnAuthenticationMethodLoadStartExternalUsersSelfServiceSignUpRequestBuilder), true)]
    public partial interface IGraphOnAuthenticationMethodLoadStartExternalUsersSelfServiceSignUpRequestBuilder;
}

namespace Microsoft.Graph.Identity.AuthenticationEventsFlows.Item.GraphExternalUsersSelfServiceSignUpEventsFlow.OnAuthenticationMethodLoadStart.GraphOnAuthenticationMethodLoadStartExternalUsersSelfServiceSignUp.IdentityProviders
{
    [Proxy(typeof(IdentityProvidersRequestBuilder), true)]
    public partial interface IIdentityProvidersRequestBuilder;
}

namespace Microsoft.Graph.Identity.AuthenticationEventsFlows.Item.GraphExternalUsersSelfServiceSignUpEventsFlow.OnAuthenticationMethodLoadStart.GraphOnAuthenticationMethodLoadStartExternalUsersSelfServiceSignUp.IdentityProviders.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Identity.AuthenticationEventsFlows.Item.GraphExternalUsersSelfServiceSignUpEventsFlow.OnAuthenticationMethodLoadStart.GraphOnAuthenticationMethodLoadStartExternalUsersSelfServiceSignUp.IdentityProviders.Item
{
    [Proxy(typeof(IdentityProviderBaseItemRequestBuilder), true)]
    public partial interface IIdentityProviderBaseItemRequestBuilder;
}

namespace Microsoft.Graph.Identity.AuthenticationEventsFlows.Item.GraphExternalUsersSelfServiceSignUpEventsFlow.OnAuthenticationMethodLoadStart.GraphOnAuthenticationMethodLoadStartExternalUsersSelfServiceSignUp.IdentityProviders.Item.Ref
{
    [Proxy(typeof(RefRequestBuilder), true)]
    public partial interface IRefRequestBuilder;
}

namespace Microsoft.Graph.Identity.AuthenticationEventsFlows.Item.GraphExternalUsersSelfServiceSignUpEventsFlow.OnAuthenticationMethodLoadStart.GraphOnAuthenticationMethodLoadStartExternalUsersSelfServiceSignUp.IdentityProviders.Ref
{
    [Proxy(typeof(RefRequestBuilder), true)]
    public partial interface IRefRequestBuilder;
}

namespace Microsoft.Graph.Identity.B2xUserFlows
{
    [Proxy(typeof(B2xUserFlowsRequestBuilder), true)]
    public partial interface IB2xUserFlowsRequestBuilder;
}

namespace Microsoft.Graph.Identity.B2xUserFlows.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Identity.B2xUserFlows.Item
{
    [Proxy(typeof(B2xIdentityUserFlowItemRequestBuilder), true)]
    public partial interface IB2xIdentityUserFlowItemRequestBuilder;
}

namespace Microsoft.Graph.Identity.B2xUserFlows.Item.ApiConnectorConfiguration
{
    [Proxy(typeof(ApiConnectorConfigurationRequestBuilder), true)]
    public partial interface IApiConnectorConfigurationRequestBuilder;
}

namespace Microsoft.Graph.Identity.B2xUserFlows.Item.ApiConnectorConfiguration.PostAttributeCollection
{
    [Proxy(typeof(PostAttributeCollectionRequestBuilder), true)]
    public partial interface IPostAttributeCollectionRequestBuilder;
}

namespace Microsoft.Graph.Identity.B2xUserFlows.Item.ApiConnectorConfiguration.PostAttributeCollection.Ref
{
    [Proxy(typeof(RefRequestBuilder), true)]
    public partial interface IRefRequestBuilder;
}

namespace Microsoft.Graph.Identity.B2xUserFlows.Item.ApiConnectorConfiguration.PostAttributeCollection.UploadClientCertificate
{
    [Proxy(typeof(UploadClientCertificateRequestBuilder), true)]
    public partial interface IUploadClientCertificateRequestBuilder;
}

namespace Microsoft.Graph.Identity.B2xUserFlows.Item.ApiConnectorConfiguration.PostFederationSignup
{
    [Proxy(typeof(PostFederationSignupRequestBuilder), true)]
    public partial interface IPostFederationSignupRequestBuilder;
}

namespace Microsoft.Graph.Identity.B2xUserFlows.Item.ApiConnectorConfiguration.PostFederationSignup.Ref
{
    [Proxy(typeof(RefRequestBuilder), true)]
    public partial interface IRefRequestBuilder;
}

namespace Microsoft.Graph.Identity.B2xUserFlows.Item.ApiConnectorConfiguration.PostFederationSignup.UploadClientCertificate
{
    [Proxy(typeof(UploadClientCertificateRequestBuilder), true)]
    public partial interface IUploadClientCertificateRequestBuilder;
}

namespace Microsoft.Graph.Identity.B2xUserFlows.Item.IdentityProviders
{
    [Proxy(typeof(IdentityProvidersRequestBuilder), true)]
    public partial interface IIdentityProvidersRequestBuilder;
}

namespace Microsoft.Graph.Identity.B2xUserFlows.Item.IdentityProviders.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Identity.B2xUserFlows.Item.IdentityProviders.Item
{
    [Proxy(typeof(IdentityProviderItemRequestBuilder), true)]
    public partial interface IIdentityProviderItemRequestBuilder;
}

namespace Microsoft.Graph.Identity.B2xUserFlows.Item.Languages
{
    [Proxy(typeof(LanguagesRequestBuilder), true)]
    public partial interface ILanguagesRequestBuilder;
}

namespace Microsoft.Graph.Identity.B2xUserFlows.Item.Languages.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Identity.B2xUserFlows.Item.Languages.Item
{
    [Proxy(typeof(UserFlowLanguageConfigurationItemRequestBuilder), true)]
    public partial interface IUserFlowLanguageConfigurationItemRequestBuilder;
}

namespace Microsoft.Graph.Identity.B2xUserFlows.Item.Languages.Item.DefaultPages
{
    [Proxy(typeof(DefaultPagesRequestBuilder), true)]
    public partial interface IDefaultPagesRequestBuilder;
}

namespace Microsoft.Graph.Identity.B2xUserFlows.Item.Languages.Item.DefaultPages.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Identity.B2xUserFlows.Item.Languages.Item.DefaultPages.Item
{
    [Proxy(typeof(UserFlowLanguagePageItemRequestBuilder), true)]
    public partial interface IUserFlowLanguagePageItemRequestBuilder;
}

namespace Microsoft.Graph.Identity.B2xUserFlows.Item.Languages.Item.DefaultPages.Item.Value
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Identity.B2xUserFlows.Item.Languages.Item.OverridesPages
{
    [Proxy(typeof(OverridesPagesRequestBuilder), true)]
    public partial interface IOverridesPagesRequestBuilder;
}

namespace Microsoft.Graph.Identity.B2xUserFlows.Item.Languages.Item.OverridesPages.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Identity.B2xUserFlows.Item.Languages.Item.OverridesPages.Item
{
    [Proxy(typeof(UserFlowLanguagePageItemRequestBuilder), true)]
    public partial interface IUserFlowLanguagePageItemRequestBuilder;
}

namespace Microsoft.Graph.Identity.B2xUserFlows.Item.Languages.Item.OverridesPages.Item.Value
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Identity.B2xUserFlows.Item.UserAttributeAssignments
{
    [Proxy(typeof(UserAttributeAssignmentsRequestBuilder), true)]
    public partial interface IUserAttributeAssignmentsRequestBuilder;
}

namespace Microsoft.Graph.Identity.B2xUserFlows.Item.UserAttributeAssignments.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Identity.B2xUserFlows.Item.UserAttributeAssignments.GetOrder
{
    [Proxy(typeof(GetOrderRequestBuilder), true)]
    public partial interface IGetOrderRequestBuilder;
}

namespace Microsoft.Graph.Identity.B2xUserFlows.Item.UserAttributeAssignments.Item
{
    [Proxy(typeof(IdentityUserFlowAttributeAssignmentItemRequestBuilder), true)]
    public partial interface IIdentityUserFlowAttributeAssignmentItemRequestBuilder;
}

namespace Microsoft.Graph.Identity.B2xUserFlows.Item.UserAttributeAssignments.Item.UserAttribute
{
    [Proxy(typeof(UserAttributeRequestBuilder), true)]
    public partial interface IUserAttributeRequestBuilder;
}

namespace Microsoft.Graph.Identity.B2xUserFlows.Item.UserAttributeAssignments.SetOrder
{
    [Proxy(typeof(SetOrderRequestBuilder), true)]
    public partial interface ISetOrderRequestBuilder;
}

namespace Microsoft.Graph.Identity.B2xUserFlows.Item.UserFlowIdentityProviders
{
    [Proxy(typeof(UserFlowIdentityProvidersRequestBuilder), true)]
    public partial interface IUserFlowIdentityProvidersRequestBuilder;
}

namespace Microsoft.Graph.Identity.B2xUserFlows.Item.UserFlowIdentityProviders.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Identity.B2xUserFlows.Item.UserFlowIdentityProviders.Item
{
    [Proxy(typeof(IdentityProviderBaseItemRequestBuilder), true)]
    public partial interface IIdentityProviderBaseItemRequestBuilder;
}

namespace Microsoft.Graph.Identity.B2xUserFlows.Item.UserFlowIdentityProviders.Item.Ref
{
    [Proxy(typeof(RefRequestBuilder), true)]
    public partial interface IRefRequestBuilder;
}

namespace Microsoft.Graph.Identity.B2xUserFlows.Item.UserFlowIdentityProviders.Ref
{
    [Proxy(typeof(RefRequestBuilder), true)]
    public partial interface IRefRequestBuilder;
}

namespace Microsoft.Graph.Identity.ConditionalAccess
{
    [Proxy(typeof(ConditionalAccessRequestBuilder), true)]
    public partial interface IConditionalAccessRequestBuilder;
}

namespace Microsoft.Graph.Identity.ConditionalAccess.AuthenticationContextClassReferences
{
    [Proxy(typeof(AuthenticationContextClassReferencesRequestBuilder), true)]
    public partial interface IAuthenticationContextClassReferencesRequestBuilder;
}

namespace Microsoft.Graph.Identity.ConditionalAccess.AuthenticationContextClassReferences.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Identity.ConditionalAccess.AuthenticationContextClassReferences.Item
{
    [Proxy(typeof(AuthenticationContextClassReferenceItemRequestBuilder), true)]
    public partial interface IAuthenticationContextClassReferenceItemRequestBuilder;
}

namespace Microsoft.Graph.Identity.ConditionalAccess.AuthenticationStrength
{
    [Proxy(typeof(AuthenticationStrengthRequestBuilder), true)]
    public partial interface IAuthenticationStrengthRequestBuilder;
}

namespace Microsoft.Graph.Identity.ConditionalAccess.AuthenticationStrength.AuthenticationMethodModes
{
    [Proxy(typeof(AuthenticationMethodModesRequestBuilder), true)]
    public partial interface IAuthenticationMethodModesRequestBuilder;
}

namespace Microsoft.Graph.Identity.ConditionalAccess.AuthenticationStrength.AuthenticationMethodModes.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Identity.ConditionalAccess.AuthenticationStrength.AuthenticationMethodModes.Item
{
    [Proxy(typeof(AuthenticationMethodModeDetailItemRequestBuilder), true)]
    public partial interface IAuthenticationMethodModeDetailItemRequestBuilder;
}

namespace Microsoft.Graph.Identity.ConditionalAccess.AuthenticationStrength.Policies
{
    [Proxy(typeof(PoliciesRequestBuilder), true)]
    public partial interface IPoliciesRequestBuilder;
}

namespace Microsoft.Graph.Identity.ConditionalAccess.AuthenticationStrength.Policies.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Identity.ConditionalAccess.AuthenticationStrength.Policies.Item
{
    [Proxy(typeof(AuthenticationStrengthPolicyItemRequestBuilder), true)]
    public partial interface IAuthenticationStrengthPolicyItemRequestBuilder;
}

namespace Microsoft.Graph.Identity.ConditionalAccess.AuthenticationStrength.Policies.Item.CombinationConfigurations
{
    [Proxy(typeof(CombinationConfigurationsRequestBuilder), true)]
    public partial interface ICombinationConfigurationsRequestBuilder;
}

namespace Microsoft.Graph.Identity.ConditionalAccess.AuthenticationStrength.Policies.Item.CombinationConfigurations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Identity.ConditionalAccess.AuthenticationStrength.Policies.Item.CombinationConfigurations.Item
{
    [Proxy(typeof(AuthenticationCombinationConfigurationItemRequestBuilder), true)]
    public partial interface IAuthenticationCombinationConfigurationItemRequestBuilder;
}

namespace Microsoft.Graph.Identity.ConditionalAccess.AuthenticationStrength.Policies.Item.UpdateAllowedCombinations
{
    [Proxy(typeof(UpdateAllowedCombinationsRequestBuilder), true)]
    public partial interface IUpdateAllowedCombinationsRequestBuilder;
}

namespace Microsoft.Graph.Identity.ConditionalAccess.AuthenticationStrength.Policies.Item.Usage
{
    [Proxy(typeof(UsageRequestBuilder), true)]
    public partial interface IUsageRequestBuilder;
}

namespace Microsoft.Graph.Identity.ConditionalAccess.NamedLocations
{
    [Proxy(typeof(NamedLocationsRequestBuilder), true)]
    public partial interface INamedLocationsRequestBuilder;
}

namespace Microsoft.Graph.Identity.ConditionalAccess.NamedLocations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Identity.ConditionalAccess.NamedLocations.Item
{
    [Proxy(typeof(NamedLocationItemRequestBuilder), true)]
    public partial interface INamedLocationItemRequestBuilder;
}

namespace Microsoft.Graph.Identity.ConditionalAccess.Policies
{
    [Proxy(typeof(PoliciesRequestBuilder), true)]
    public partial interface IPoliciesRequestBuilder;
}

namespace Microsoft.Graph.Identity.ConditionalAccess.Policies.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Identity.ConditionalAccess.Policies.Item
{
    [Proxy(typeof(ConditionalAccessPolicyItemRequestBuilder), true)]
    public partial interface IConditionalAccessPolicyItemRequestBuilder;
}

namespace Microsoft.Graph.Identity.ConditionalAccess.Templates
{
    [Proxy(typeof(TemplatesRequestBuilder), true)]
    public partial interface ITemplatesRequestBuilder;
}

namespace Microsoft.Graph.Identity.ConditionalAccess.Templates.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Identity.ConditionalAccess.Templates.Item
{
    [Proxy(typeof(ConditionalAccessTemplateItemRequestBuilder), true)]
    public partial interface IConditionalAccessTemplateItemRequestBuilder;
}

namespace Microsoft.Graph.Identity.CustomAuthenticationExtensions
{
    [Proxy(typeof(CustomAuthenticationExtensionsRequestBuilder), true)]
    public partial interface ICustomAuthenticationExtensionsRequestBuilder;
}

namespace Microsoft.Graph.Identity.CustomAuthenticationExtensions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Identity.CustomAuthenticationExtensions.Item
{
    [Proxy(typeof(CustomAuthenticationExtensionItemRequestBuilder), true)]
    public partial interface ICustomAuthenticationExtensionItemRequestBuilder;
}

namespace Microsoft.Graph.Identity.CustomAuthenticationExtensions.Item.ValidateAuthenticationConfiguration
{
    [Proxy(typeof(ValidateAuthenticationConfigurationRequestBuilder), true)]
    public partial interface IValidateAuthenticationConfigurationRequestBuilder;
}

namespace Microsoft.Graph.Identity.CustomAuthenticationExtensions.ValidateAuthenticationConfiguration
{
    [Proxy(typeof(ValidateAuthenticationConfigurationRequestBuilder), true)]
    public partial interface IValidateAuthenticationConfigurationRequestBuilder;
}

namespace Microsoft.Graph.Identity.IdentityProviders
{
    [Proxy(typeof(IdentityProvidersRequestBuilder), true)]
    public partial interface IIdentityProvidersRequestBuilder;
}

namespace Microsoft.Graph.Identity.IdentityProviders.AvailableProviderTypes
{
    [Proxy(typeof(AvailableProviderTypesRequestBuilder), true)]
    public partial interface IAvailableProviderTypesRequestBuilder;
}

namespace Microsoft.Graph.Identity.IdentityProviders.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Identity.IdentityProviders.Item
{
    [Proxy(typeof(IdentityProviderBaseItemRequestBuilder), true)]
    public partial interface IIdentityProviderBaseItemRequestBuilder;
}

namespace Microsoft.Graph.Identity.UserFlowAttributes
{
    [Proxy(typeof(UserFlowAttributesRequestBuilder), true)]
    public partial interface IUserFlowAttributesRequestBuilder;
}

namespace Microsoft.Graph.Identity.UserFlowAttributes.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Identity.UserFlowAttributes.Item
{
    [Proxy(typeof(IdentityUserFlowAttributeItemRequestBuilder), true)]
    public partial interface IIdentityUserFlowAttributeItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance
{
    [Proxy(typeof(IdentityGovernanceRequestBuilder), true)]
    public partial interface IIdentityGovernanceRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.AccessReviews
{
    [Proxy(typeof(AccessReviewsRequestBuilder), true)]
    public partial interface IAccessReviewsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.AccessReviews.Definitions
{
    [Proxy(typeof(DefinitionsRequestBuilder), true)]
    public partial interface IDefinitionsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.AccessReviews.Definitions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.AccessReviews.Definitions.FilterByCurrentUserWithOn
{
    [Proxy(typeof(FilterByCurrentUserWithOnRequestBuilder), true)]
    public partial interface IFilterByCurrentUserWithOnRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.AccessReviews.Definitions.Item
{
    [Proxy(typeof(AccessReviewScheduleDefinitionItemRequestBuilder), true)]
    public partial interface IAccessReviewScheduleDefinitionItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.AccessReviews.Definitions.Item.Instances
{
    [Proxy(typeof(InstancesRequestBuilder), true)]
    public partial interface IInstancesRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.AccessReviews.Definitions.Item.Instances.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.AccessReviews.Definitions.Item.Instances.FilterByCurrentUserWithOn
{
    [Proxy(typeof(FilterByCurrentUserWithOnRequestBuilder), true)]
    public partial interface IFilterByCurrentUserWithOnRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.AccessReviews.Definitions.Item.Instances.Item
{
    [Proxy(typeof(AccessReviewInstanceItemRequestBuilder), true)]
    public partial interface IAccessReviewInstanceItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.AccessReviews.Definitions.Item.Instances.Item.AcceptRecommendations
{
    [Proxy(typeof(AcceptRecommendationsRequestBuilder), true)]
    public partial interface IAcceptRecommendationsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.AccessReviews.Definitions.Item.Instances.Item.ApplyDecisions
{
    [Proxy(typeof(ApplyDecisionsRequestBuilder), true)]
    public partial interface IApplyDecisionsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.AccessReviews.Definitions.Item.Instances.Item.BatchRecordDecisions
{
    [Proxy(typeof(BatchRecordDecisionsRequestBuilder), true)]
    public partial interface IBatchRecordDecisionsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.AccessReviews.Definitions.Item.Instances.Item.ContactedReviewers
{
    [Proxy(typeof(ContactedReviewersRequestBuilder), true)]
    public partial interface IContactedReviewersRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.AccessReviews.Definitions.Item.Instances.Item.ContactedReviewers.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.AccessReviews.Definitions.Item.Instances.Item.ContactedReviewers.Item
{
    [Proxy(typeof(AccessReviewReviewerItemRequestBuilder), true)]
    public partial interface IAccessReviewReviewerItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.AccessReviews.Definitions.Item.Instances.Item.Decisions
{
    [Proxy(typeof(DecisionsRequestBuilder), true)]
    public partial interface IDecisionsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.AccessReviews.Definitions.Item.Instances.Item.Decisions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.AccessReviews.Definitions.Item.Instances.Item.Decisions.FilterByCurrentUserWithOn
{
    [Proxy(typeof(FilterByCurrentUserWithOnRequestBuilder), true)]
    public partial interface IFilterByCurrentUserWithOnRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.AccessReviews.Definitions.Item.Instances.Item.Decisions.Item
{
    [Proxy(typeof(AccessReviewInstanceDecisionItemItemRequestBuilder), true)]
    public partial interface IAccessReviewInstanceDecisionItemItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.AccessReviews.Definitions.Item.Instances.Item.Decisions.Item.Insights
{
    [Proxy(typeof(InsightsRequestBuilder), true)]
    public partial interface IInsightsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.AccessReviews.Definitions.Item.Instances.Item.Decisions.Item.Insights.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.AccessReviews.Definitions.Item.Instances.Item.Decisions.Item.Insights.Item
{
    [Proxy(typeof(GovernanceInsightItemRequestBuilder), true)]
    public partial interface IGovernanceInsightItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.AccessReviews.Definitions.Item.Instances.Item.ResetDecisions
{
    [Proxy(typeof(ResetDecisionsRequestBuilder), true)]
    public partial interface IResetDecisionsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.AccessReviews.Definitions.Item.Instances.Item.SendReminder
{
    [Proxy(typeof(SendReminderRequestBuilder), true)]
    public partial interface ISendReminderRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.AccessReviews.Definitions.Item.Instances.Item.Stages
{
    [Proxy(typeof(StagesRequestBuilder), true)]
    public partial interface IStagesRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.AccessReviews.Definitions.Item.Instances.Item.Stages.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.AccessReviews.Definitions.Item.Instances.Item.Stages.FilterByCurrentUserWithOn
{
    [Proxy(typeof(FilterByCurrentUserWithOnRequestBuilder), true)]
    public partial interface IFilterByCurrentUserWithOnRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.AccessReviews.Definitions.Item.Instances.Item.Stages.Item
{
    [Proxy(typeof(AccessReviewStageItemRequestBuilder), true)]
    public partial interface IAccessReviewStageItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.AccessReviews.Definitions.Item.Instances.Item.Stages.Item.Decisions
{
    [Proxy(typeof(DecisionsRequestBuilder), true)]
    public partial interface IDecisionsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.AccessReviews.Definitions.Item.Instances.Item.Stages.Item.Decisions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.AccessReviews.Definitions.Item.Instances.Item.Stages.Item.Decisions.FilterByCurrentUserWithOn
{
    [Proxy(typeof(FilterByCurrentUserWithOnRequestBuilder), true)]
    public partial interface IFilterByCurrentUserWithOnRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.AccessReviews.Definitions.Item.Instances.Item.Stages.Item.Decisions.Item
{
    [Proxy(typeof(AccessReviewInstanceDecisionItemItemRequestBuilder), true)]
    public partial interface IAccessReviewInstanceDecisionItemItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.AccessReviews.Definitions.Item.Instances.Item.Stages.Item.Decisions.Item.Insights
{
    [Proxy(typeof(InsightsRequestBuilder), true)]
    public partial interface IInsightsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.AccessReviews.Definitions.Item.Instances.Item.Stages.Item.Decisions.Item.Insights.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.AccessReviews.Definitions.Item.Instances.Item.Stages.Item.Decisions.Item.Insights.Item
{
    [Proxy(typeof(GovernanceInsightItemRequestBuilder), true)]
    public partial interface IGovernanceInsightItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.AccessReviews.Definitions.Item.Instances.Item.Stages.Item.Stop
{
    [Proxy(typeof(StopRequestBuilder), true)]
    public partial interface IStopRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.AccessReviews.Definitions.Item.Instances.Item.Stop
{
    [Proxy(typeof(StopRequestBuilder), true)]
    public partial interface IStopRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.AccessReviews.Definitions.Item.Stop
{
    [Proxy(typeof(StopRequestBuilder), true)]
    public partial interface IStopRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.AccessReviews.HistoryDefinitions
{
    [Proxy(typeof(HistoryDefinitionsRequestBuilder), true)]
    public partial interface IHistoryDefinitionsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.AccessReviews.HistoryDefinitions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.AccessReviews.HistoryDefinitions.Item
{
    [Proxy(typeof(AccessReviewHistoryDefinitionItemRequestBuilder), true)]
    public partial interface IAccessReviewHistoryDefinitionItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.AccessReviews.HistoryDefinitions.Item.Instances
{
    [Proxy(typeof(InstancesRequestBuilder), true)]
    public partial interface IInstancesRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.AccessReviews.HistoryDefinitions.Item.Instances.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.AccessReviews.HistoryDefinitions.Item.Instances.Item
{
    [Proxy(typeof(AccessReviewHistoryInstanceItemRequestBuilder), true)]
    public partial interface IAccessReviewHistoryInstanceItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.AccessReviews.HistoryDefinitions.Item.Instances.Item.GenerateDownloadUri
{
    [Proxy(typeof(GenerateDownloadUriRequestBuilder), true)]
    public partial interface IGenerateDownloadUriRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.AppConsent
{
    [Proxy(typeof(AppConsentRequestBuilder), true)]
    public partial interface IAppConsentRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.AppConsent.AppConsentRequests
{
    [Proxy(typeof(AppConsentRequestsRequestBuilder), true)]
    public partial interface IAppConsentRequestsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.AppConsent.AppConsentRequests.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.AppConsent.AppConsentRequests.FilterByCurrentUserWithOn
{
    [Proxy(typeof(FilterByCurrentUserWithOnRequestBuilder), true)]
    public partial interface IFilterByCurrentUserWithOnRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.AppConsent.AppConsentRequests.Item
{
    [Proxy(typeof(AppConsentRequestItemRequestBuilder), true)]
    public partial interface IAppConsentRequestItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.AppConsent.AppConsentRequests.Item.UserConsentRequests
{
    [Proxy(typeof(UserConsentRequestsRequestBuilder), true)]
    public partial interface IUserConsentRequestsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.AppConsent.AppConsentRequests.Item.UserConsentRequests.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.AppConsent.AppConsentRequests.Item.UserConsentRequests.FilterByCurrentUserWithOn
{
    [Proxy(typeof(FilterByCurrentUserWithOnRequestBuilder), true)]
    public partial interface IFilterByCurrentUserWithOnRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.AppConsent.AppConsentRequests.Item.UserConsentRequests.Item
{
    [Proxy(typeof(UserConsentRequestItemRequestBuilder), true)]
    public partial interface IUserConsentRequestItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.AppConsent.AppConsentRequests.Item.UserConsentRequests.Item.Approval
{
    [Proxy(typeof(ApprovalRequestBuilder), true)]
    public partial interface IApprovalRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.AppConsent.AppConsentRequests.Item.UserConsentRequests.Item.Approval.Stages
{
    [Proxy(typeof(StagesRequestBuilder), true)]
    public partial interface IStagesRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.AppConsent.AppConsentRequests.Item.UserConsentRequests.Item.Approval.Stages.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.AppConsent.AppConsentRequests.Item.UserConsentRequests.Item.Approval.Stages.Item
{
    [Proxy(typeof(ApprovalStageItemRequestBuilder), true)]
    public partial interface IApprovalStageItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement
{
    [Proxy(typeof(EntitlementManagementRequestBuilder), true)]
    public partial interface IEntitlementManagementRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AccessPackageAssignmentApprovals
{
    [Proxy(typeof(AccessPackageAssignmentApprovalsRequestBuilder), true)]
    public partial interface IAccessPackageAssignmentApprovalsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AccessPackageAssignmentApprovals.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AccessPackageAssignmentApprovals.FilterByCurrentUserWithOn
{
    [Proxy(typeof(FilterByCurrentUserWithOnRequestBuilder), true)]
    public partial interface IFilterByCurrentUserWithOnRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AccessPackageAssignmentApprovals.Item
{
    [Proxy(typeof(ApprovalItemRequestBuilder), true)]
    public partial interface IApprovalItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AccessPackageAssignmentApprovals.Item.Stages
{
    [Proxy(typeof(StagesRequestBuilder), true)]
    public partial interface IStagesRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AccessPackageAssignmentApprovals.Item.Stages.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AccessPackageAssignmentApprovals.Item.Stages.Item
{
    [Proxy(typeof(ApprovalStageItemRequestBuilder), true)]
    public partial interface IApprovalStageItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AccessPackages
{
    [Proxy(typeof(AccessPackagesRequestBuilder), true)]
    public partial interface IAccessPackagesRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AccessPackages.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AccessPackages.FilterByCurrentUserWithOn
{
    [Proxy(typeof(FilterByCurrentUserWithOnRequestBuilder), true)]
    public partial interface IFilterByCurrentUserWithOnRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AccessPackages.Item
{
    [Proxy(typeof(AccessPackageItemRequestBuilder), true)]
    public partial interface IAccessPackageItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AccessPackages.Item.AccessPackagesIncompatibleWith
{
    [Proxy(typeof(AccessPackagesIncompatibleWithRequestBuilder), true)]
    public partial interface IAccessPackagesIncompatibleWithRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AccessPackages.Item.AccessPackagesIncompatibleWith.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AccessPackages.Item.AccessPackagesIncompatibleWith.Item
{
    [Proxy(typeof(AccessPackageItemRequestBuilder), true)]
    public partial interface IAccessPackageItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AccessPackages.Item.AssignmentPolicies
{
    [Proxy(typeof(AssignmentPoliciesRequestBuilder), true)]
    public partial interface IAssignmentPoliciesRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AccessPackages.Item.AssignmentPolicies.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AccessPackages.Item.AssignmentPolicies.Item
{
    [Proxy(typeof(AccessPackageAssignmentPolicyItemRequestBuilder), true)]
    public partial interface IAccessPackageAssignmentPolicyItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AccessPackages.Item.AssignmentPolicies.Item.AccessPackage
{
    [Proxy(typeof(AccessPackageRequestBuilder), true)]
    public partial interface IAccessPackageRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AccessPackages.Item.AssignmentPolicies.Item.Catalog
{
    [Proxy(typeof(CatalogRequestBuilder), true)]
    public partial interface ICatalogRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AccessPackages.Item.AssignmentPolicies.Item.CustomExtensionStageSettings
{
    [Proxy(typeof(CustomExtensionStageSettingsRequestBuilder), true)]
    public partial interface ICustomExtensionStageSettingsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AccessPackages.Item.AssignmentPolicies.Item.CustomExtensionStageSettings.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AccessPackages.Item.AssignmentPolicies.Item.CustomExtensionStageSettings.Item
{
    [Proxy(typeof(CustomExtensionStageSettingItemRequestBuilder), true)]
    public partial interface ICustomExtensionStageSettingItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AccessPackages.Item.AssignmentPolicies.Item.CustomExtensionStageSettings.Item.CustomExtension
{
    [Proxy(typeof(CustomExtensionRequestBuilder), true)]
    public partial interface ICustomExtensionRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AccessPackages.Item.AssignmentPolicies.Item.Questions
{
    [Proxy(typeof(QuestionsRequestBuilder), true)]
    public partial interface IQuestionsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AccessPackages.Item.AssignmentPolicies.Item.Questions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AccessPackages.Item.AssignmentPolicies.Item.Questions.Item
{
    [Proxy(typeof(AccessPackageQuestionItemRequestBuilder), true)]
    public partial interface IAccessPackageQuestionItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AccessPackages.Item.Catalog
{
    [Proxy(typeof(CatalogRequestBuilder), true)]
    public partial interface ICatalogRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AccessPackages.Item.GetApplicablePolicyRequirements
{
    [Proxy(typeof(GetApplicablePolicyRequirementsRequestBuilder), true)]
    public partial interface IGetApplicablePolicyRequirementsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AccessPackages.Item.IncompatibleAccessPackages
{
    [Proxy(typeof(IncompatibleAccessPackagesRequestBuilder), true)]
    public partial interface IIncompatibleAccessPackagesRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AccessPackages.Item.IncompatibleAccessPackages.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AccessPackages.Item.IncompatibleAccessPackages.Item
{
    [Proxy(typeof(AccessPackageItemRequestBuilder), true)]
    public partial interface IAccessPackageItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AccessPackages.Item.IncompatibleAccessPackages.Item.Ref
{
    [Proxy(typeof(RefRequestBuilder), true)]
    public partial interface IRefRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AccessPackages.Item.IncompatibleAccessPackages.Ref
{
    [Proxy(typeof(RefRequestBuilder), true)]
    public partial interface IRefRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AccessPackages.Item.IncompatibleGroups
{
    [Proxy(typeof(IncompatibleGroupsRequestBuilder), true)]
    public partial interface IIncompatibleGroupsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AccessPackages.Item.IncompatibleGroups.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AccessPackages.Item.IncompatibleGroups.Item
{
    [Proxy(typeof(GroupItemRequestBuilder), true)]
    public partial interface IGroupItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AccessPackages.Item.IncompatibleGroups.Item.Ref
{
    [Proxy(typeof(RefRequestBuilder), true)]
    public partial interface IRefRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AccessPackages.Item.IncompatibleGroups.Item.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AccessPackages.Item.IncompatibleGroups.Item.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AccessPackages.Item.IncompatibleGroups.Ref
{
    [Proxy(typeof(RefRequestBuilder), true)]
    public partial interface IRefRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AccessPackages.Item.ResourceRoleScopes
{
    [Proxy(typeof(ResourceRoleScopesRequestBuilder), true)]
    public partial interface IResourceRoleScopesRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AccessPackages.Item.ResourceRoleScopes.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AccessPackages.Item.ResourceRoleScopes.Item
{
    [Proxy(typeof(AccessPackageResourceRoleScopeItemRequestBuilder), true)]
    public partial interface IAccessPackageResourceRoleScopeItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AccessPackages.Item.ResourceRoleScopes.Item.Role
{
    [Proxy(typeof(RoleRequestBuilder), true)]
    public partial interface IRoleRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AccessPackages.Item.ResourceRoleScopes.Item.Role.Resource
{
    [Proxy(typeof(ResourceRequestBuilder), true)]
    public partial interface IResourceRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AccessPackages.Item.ResourceRoleScopes.Item.Role.Resource.EnvironmentNamespace
{
    [Proxy(typeof(EnvironmentRequestBuilder), true)]
    public partial interface IEnvironmentRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AccessPackages.Item.ResourceRoleScopes.Item.Role.Resource.Refresh
{
    [Proxy(typeof(RefreshRequestBuilder), true)]
    public partial interface IRefreshRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AccessPackages.Item.ResourceRoleScopes.Item.Role.Resource.Roles
{
    [Proxy(typeof(RolesRequestBuilder), true)]
    public partial interface IRolesRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AccessPackages.Item.ResourceRoleScopes.Item.Role.Resource.Roles.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AccessPackages.Item.ResourceRoleScopes.Item.Role.Resource.Roles.Item
{
    [Proxy(typeof(AccessPackageResourceRoleItemRequestBuilder), true)]
    public partial interface IAccessPackageResourceRoleItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AccessPackages.Item.ResourceRoleScopes.Item.Role.Resource.Scopes
{
    [Proxy(typeof(ScopesRequestBuilder), true)]
    public partial interface IScopesRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AccessPackages.Item.ResourceRoleScopes.Item.Role.Resource.Scopes.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AccessPackages.Item.ResourceRoleScopes.Item.Role.Resource.Scopes.Item
{
    [Proxy(typeof(AccessPackageResourceScopeItemRequestBuilder), true)]
    public partial interface IAccessPackageResourceScopeItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AccessPackages.Item.ResourceRoleScopes.Item.Role.Resource.Scopes.Item.Resource
{
    [Proxy(typeof(ResourceRequestBuilder), true)]
    public partial interface IResourceRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AccessPackages.Item.ResourceRoleScopes.Item.Role.Resource.Scopes.Item.Resource.EnvironmentNamespace
{
    [Proxy(typeof(EnvironmentRequestBuilder), true)]
    public partial interface IEnvironmentRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AccessPackages.Item.ResourceRoleScopes.Item.Role.Resource.Scopes.Item.Resource.Refresh
{
    [Proxy(typeof(RefreshRequestBuilder), true)]
    public partial interface IRefreshRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AccessPackages.Item.ResourceRoleScopes.Item.Role.Resource.Scopes.Item.Resource.Roles
{
    [Proxy(typeof(RolesRequestBuilder), true)]
    public partial interface IRolesRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AccessPackages.Item.ResourceRoleScopes.Item.Role.Resource.Scopes.Item.Resource.Roles.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AccessPackages.Item.ResourceRoleScopes.Item.Role.Resource.Scopes.Item.Resource.Roles.Item
{
    [Proxy(typeof(AccessPackageResourceRoleItemRequestBuilder), true)]
    public partial interface IAccessPackageResourceRoleItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AccessPackages.Item.ResourceRoleScopes.Item.Scope
{
    [Proxy(typeof(ScopeRequestBuilder), true)]
    public partial interface IScopeRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AccessPackages.Item.ResourceRoleScopes.Item.Scope.Resource
{
    [Proxy(typeof(ResourceRequestBuilder), true)]
    public partial interface IResourceRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AccessPackages.Item.ResourceRoleScopes.Item.Scope.Resource.EnvironmentNamespace
{
    [Proxy(typeof(EnvironmentRequestBuilder), true)]
    public partial interface IEnvironmentRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AccessPackages.Item.ResourceRoleScopes.Item.Scope.Resource.Refresh
{
    [Proxy(typeof(RefreshRequestBuilder), true)]
    public partial interface IRefreshRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AccessPackages.Item.ResourceRoleScopes.Item.Scope.Resource.Roles
{
    [Proxy(typeof(RolesRequestBuilder), true)]
    public partial interface IRolesRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AccessPackages.Item.ResourceRoleScopes.Item.Scope.Resource.Roles.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AccessPackages.Item.ResourceRoleScopes.Item.Scope.Resource.Roles.Item
{
    [Proxy(typeof(AccessPackageResourceRoleItemRequestBuilder), true)]
    public partial interface IAccessPackageResourceRoleItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AccessPackages.Item.ResourceRoleScopes.Item.Scope.Resource.Roles.Item.Resource
{
    [Proxy(typeof(ResourceRequestBuilder), true)]
    public partial interface IResourceRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AccessPackages.Item.ResourceRoleScopes.Item.Scope.Resource.Roles.Item.Resource.EnvironmentNamespace
{
    [Proxy(typeof(EnvironmentRequestBuilder), true)]
    public partial interface IEnvironmentRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AccessPackages.Item.ResourceRoleScopes.Item.Scope.Resource.Roles.Item.Resource.Refresh
{
    [Proxy(typeof(RefreshRequestBuilder), true)]
    public partial interface IRefreshRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AccessPackages.Item.ResourceRoleScopes.Item.Scope.Resource.Roles.Item.Resource.Scopes
{
    [Proxy(typeof(ScopesRequestBuilder), true)]
    public partial interface IScopesRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AccessPackages.Item.ResourceRoleScopes.Item.Scope.Resource.Roles.Item.Resource.Scopes.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AccessPackages.Item.ResourceRoleScopes.Item.Scope.Resource.Roles.Item.Resource.Scopes.Item
{
    [Proxy(typeof(AccessPackageResourceScopeItemRequestBuilder), true)]
    public partial interface IAccessPackageResourceScopeItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AccessPackages.Item.ResourceRoleScopes.Item.Scope.Resource.Scopes
{
    [Proxy(typeof(ScopesRequestBuilder), true)]
    public partial interface IScopesRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AccessPackages.Item.ResourceRoleScopes.Item.Scope.Resource.Scopes.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AccessPackages.Item.ResourceRoleScopes.Item.Scope.Resource.Scopes.Item
{
    [Proxy(typeof(AccessPackageResourceScopeItemRequestBuilder), true)]
    public partial interface IAccessPackageResourceScopeItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AssignmentPolicies
{
    [Proxy(typeof(AssignmentPoliciesRequestBuilder), true)]
    public partial interface IAssignmentPoliciesRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AssignmentPolicies.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AssignmentPolicies.Item
{
    [Proxy(typeof(AccessPackageAssignmentPolicyItemRequestBuilder), true)]
    public partial interface IAccessPackageAssignmentPolicyItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AssignmentPolicies.Item.AccessPackage
{
    [Proxy(typeof(AccessPackageRequestBuilder), true)]
    public partial interface IAccessPackageRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AssignmentPolicies.Item.Catalog
{
    [Proxy(typeof(CatalogRequestBuilder), true)]
    public partial interface ICatalogRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AssignmentPolicies.Item.CustomExtensionStageSettings
{
    [Proxy(typeof(CustomExtensionStageSettingsRequestBuilder), true)]
    public partial interface ICustomExtensionStageSettingsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AssignmentPolicies.Item.CustomExtensionStageSettings.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AssignmentPolicies.Item.CustomExtensionStageSettings.Item
{
    [Proxy(typeof(CustomExtensionStageSettingItemRequestBuilder), true)]
    public partial interface ICustomExtensionStageSettingItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AssignmentPolicies.Item.CustomExtensionStageSettings.Item.CustomExtension
{
    [Proxy(typeof(CustomExtensionRequestBuilder), true)]
    public partial interface ICustomExtensionRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AssignmentPolicies.Item.Questions
{
    [Proxy(typeof(QuestionsRequestBuilder), true)]
    public partial interface IQuestionsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AssignmentPolicies.Item.Questions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AssignmentPolicies.Item.Questions.Item
{
    [Proxy(typeof(AccessPackageQuestionItemRequestBuilder), true)]
    public partial interface IAccessPackageQuestionItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AssignmentRequests
{
    [Proxy(typeof(AssignmentRequestsRequestBuilder), true)]
    public partial interface IAssignmentRequestsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AssignmentRequests.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AssignmentRequests.FilterByCurrentUserWithOn
{
    [Proxy(typeof(FilterByCurrentUserWithOnRequestBuilder), true)]
    public partial interface IFilterByCurrentUserWithOnRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AssignmentRequests.Item
{
    [Proxy(typeof(AccessPackageAssignmentRequestItemRequestBuilder), true)]
    public partial interface IAccessPackageAssignmentRequestItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AssignmentRequests.Item.AccessPackage
{
    [Proxy(typeof(AccessPackageRequestBuilder), true)]
    public partial interface IAccessPackageRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AssignmentRequests.Item.Assignment
{
    [Proxy(typeof(AssignmentRequestBuilder), true)]
    public partial interface IAssignmentRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AssignmentRequests.Item.Cancel
{
    [Proxy(typeof(CancelRequestBuilder), true)]
    public partial interface ICancelRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AssignmentRequests.Item.Reprocess
{
    [Proxy(typeof(ReprocessRequestBuilder), true)]
    public partial interface IReprocessRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AssignmentRequests.Item.Requestor
{
    [Proxy(typeof(RequestorRequestBuilder), true)]
    public partial interface IRequestorRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.AssignmentRequests.Item.Resume
{
    [Proxy(typeof(ResumeRequestBuilder), true)]
    public partial interface IResumeRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Assignments
{
    [Proxy(typeof(AssignmentsRequestBuilder), true)]
    public partial interface IAssignmentsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Assignments.AdditionalAccess
{
    [Proxy(typeof(AdditionalAccessRequestBuilder), true)]
    public partial interface IAdditionalAccessRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Assignments.AdditionalAccessWithAccessPackageIdWithIncompatibleAccessPackageId
{
    [Proxy(typeof(AdditionalAccessWithAccessPackageIdWithIncompatibleAccessPackageIdRequestBuilder), true)]
    public partial interface IAdditionalAccessWithAccessPackageIdWithIncompatibleAccessPackageIdRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Assignments.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Assignments.FilterByCurrentUserWithOn
{
    [Proxy(typeof(FilterByCurrentUserWithOnRequestBuilder), true)]
    public partial interface IFilterByCurrentUserWithOnRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Assignments.Item
{
    [Proxy(typeof(AccessPackageAssignmentItemRequestBuilder), true)]
    public partial interface IAccessPackageAssignmentItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Assignments.Item.AccessPackage
{
    [Proxy(typeof(AccessPackageRequestBuilder), true)]
    public partial interface IAccessPackageRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Assignments.Item.AssignmentPolicy
{
    [Proxy(typeof(AssignmentPolicyRequestBuilder), true)]
    public partial interface IAssignmentPolicyRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Assignments.Item.Reprocess
{
    [Proxy(typeof(ReprocessRequestBuilder), true)]
    public partial interface IReprocessRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Assignments.Item.Target
{
    [Proxy(typeof(TargetRequestBuilder), true)]
    public partial interface ITargetRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Catalogs
{
    [Proxy(typeof(CatalogsRequestBuilder), true)]
    public partial interface ICatalogsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Catalogs.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Catalogs.Item
{
    [Proxy(typeof(AccessPackageCatalogItemRequestBuilder), true)]
    public partial interface IAccessPackageCatalogItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Catalogs.Item.AccessPackages
{
    [Proxy(typeof(AccessPackagesRequestBuilder), true)]
    public partial interface IAccessPackagesRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Catalogs.Item.AccessPackages.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Catalogs.Item.AccessPackages.Item
{
    [Proxy(typeof(AccessPackageItemRequestBuilder), true)]
    public partial interface IAccessPackageItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Catalogs.Item.CustomWorkflowExtensions
{
    [Proxy(typeof(CustomWorkflowExtensionsRequestBuilder), true)]
    public partial interface ICustomWorkflowExtensionsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Catalogs.Item.CustomWorkflowExtensions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Catalogs.Item.CustomWorkflowExtensions.Item
{
    [Proxy(typeof(CustomCalloutExtensionItemRequestBuilder), true)]
    public partial interface ICustomCalloutExtensionItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Catalogs.Item.ResourceRoles
{
    [Proxy(typeof(ResourceRolesRequestBuilder), true)]
    public partial interface IResourceRolesRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Catalogs.Item.ResourceRoles.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Catalogs.Item.ResourceRoles.Item
{
    [Proxy(typeof(AccessPackageResourceRoleItemRequestBuilder), true)]
    public partial interface IAccessPackageResourceRoleItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Catalogs.Item.ResourceRoles.Item.Resource
{
    [Proxy(typeof(ResourceRequestBuilder), true)]
    public partial interface IResourceRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Catalogs.Item.ResourceRoles.Item.Resource.EnvironmentNamespace
{
    [Proxy(typeof(EnvironmentRequestBuilder), true)]
    public partial interface IEnvironmentRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Catalogs.Item.ResourceRoles.Item.Resource.Refresh
{
    [Proxy(typeof(RefreshRequestBuilder), true)]
    public partial interface IRefreshRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Catalogs.Item.ResourceRoles.Item.Resource.Roles
{
    [Proxy(typeof(RolesRequestBuilder), true)]
    public partial interface IRolesRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Catalogs.Item.ResourceRoles.Item.Resource.Roles.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Catalogs.Item.ResourceRoles.Item.Resource.Roles.Item
{
    [Proxy(typeof(AccessPackageResourceRoleItemRequestBuilder), true)]
    public partial interface IAccessPackageResourceRoleItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Catalogs.Item.ResourceRoles.Item.Resource.Scopes
{
    [Proxy(typeof(ScopesRequestBuilder), true)]
    public partial interface IScopesRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Catalogs.Item.ResourceRoles.Item.Resource.Scopes.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Catalogs.Item.ResourceRoles.Item.Resource.Scopes.Item
{
    [Proxy(typeof(AccessPackageResourceScopeItemRequestBuilder), true)]
    public partial interface IAccessPackageResourceScopeItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Catalogs.Item.ResourceRoles.Item.Resource.Scopes.Item.Resource
{
    [Proxy(typeof(ResourceRequestBuilder), true)]
    public partial interface IResourceRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Catalogs.Item.ResourceRoles.Item.Resource.Scopes.Item.Resource.EnvironmentNamespace
{
    [Proxy(typeof(EnvironmentRequestBuilder), true)]
    public partial interface IEnvironmentRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Catalogs.Item.ResourceRoles.Item.Resource.Scopes.Item.Resource.Refresh
{
    [Proxy(typeof(RefreshRequestBuilder), true)]
    public partial interface IRefreshRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Catalogs.Item.ResourceRoles.Item.Resource.Scopes.Item.Resource.Roles
{
    [Proxy(typeof(RolesRequestBuilder), true)]
    public partial interface IRolesRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Catalogs.Item.ResourceRoles.Item.Resource.Scopes.Item.Resource.Roles.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Catalogs.Item.ResourceRoles.Item.Resource.Scopes.Item.Resource.Roles.Item
{
    [Proxy(typeof(AccessPackageResourceRoleItemRequestBuilder), true)]
    public partial interface IAccessPackageResourceRoleItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Catalogs.Item.Resources
{
    [Proxy(typeof(ResourcesRequestBuilder), true)]
    public partial interface IResourcesRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Catalogs.Item.Resources.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Catalogs.Item.Resources.Item
{
    [Proxy(typeof(AccessPackageResourceItemRequestBuilder), true)]
    public partial interface IAccessPackageResourceItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Catalogs.Item.Resources.Item.EnvironmentNamespace
{
    [Proxy(typeof(EnvironmentRequestBuilder), true)]
    public partial interface IEnvironmentRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Catalogs.Item.Resources.Item.Refresh
{
    [Proxy(typeof(RefreshRequestBuilder), true)]
    public partial interface IRefreshRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Catalogs.Item.Resources.Item.Roles
{
    [Proxy(typeof(RolesRequestBuilder), true)]
    public partial interface IRolesRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Catalogs.Item.Resources.Item.Roles.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Catalogs.Item.Resources.Item.Roles.Item
{
    [Proxy(typeof(AccessPackageResourceRoleItemRequestBuilder), true)]
    public partial interface IAccessPackageResourceRoleItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Catalogs.Item.Resources.Item.Roles.Item.Resource
{
    [Proxy(typeof(ResourceRequestBuilder), true)]
    public partial interface IResourceRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Catalogs.Item.Resources.Item.Roles.Item.Resource.EnvironmentNamespace
{
    [Proxy(typeof(EnvironmentRequestBuilder), true)]
    public partial interface IEnvironmentRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Catalogs.Item.Resources.Item.Roles.Item.Resource.Refresh
{
    [Proxy(typeof(RefreshRequestBuilder), true)]
    public partial interface IRefreshRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Catalogs.Item.Resources.Item.Roles.Item.Resource.Scopes
{
    [Proxy(typeof(ScopesRequestBuilder), true)]
    public partial interface IScopesRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Catalogs.Item.Resources.Item.Roles.Item.Resource.Scopes.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Catalogs.Item.Resources.Item.Roles.Item.Resource.Scopes.Item
{
    [Proxy(typeof(AccessPackageResourceScopeItemRequestBuilder), true)]
    public partial interface IAccessPackageResourceScopeItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Catalogs.Item.Resources.Item.Roles.Item.Resource.Scopes.Item.Resource
{
    [Proxy(typeof(ResourceRequestBuilder), true)]
    public partial interface IResourceRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Catalogs.Item.Resources.Item.Roles.Item.Resource.Scopes.Item.Resource.EnvironmentNamespace
{
    [Proxy(typeof(EnvironmentRequestBuilder), true)]
    public partial interface IEnvironmentRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Catalogs.Item.Resources.Item.Roles.Item.Resource.Scopes.Item.Resource.Refresh
{
    [Proxy(typeof(RefreshRequestBuilder), true)]
    public partial interface IRefreshRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Catalogs.Item.Resources.Item.Scopes
{
    [Proxy(typeof(ScopesRequestBuilder), true)]
    public partial interface IScopesRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Catalogs.Item.Resources.Item.Scopes.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Catalogs.Item.Resources.Item.Scopes.Item
{
    [Proxy(typeof(AccessPackageResourceScopeItemRequestBuilder), true)]
    public partial interface IAccessPackageResourceScopeItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Catalogs.Item.Resources.Item.Scopes.Item.Resource
{
    [Proxy(typeof(ResourceRequestBuilder), true)]
    public partial interface IResourceRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Catalogs.Item.Resources.Item.Scopes.Item.Resource.EnvironmentNamespace
{
    [Proxy(typeof(EnvironmentRequestBuilder), true)]
    public partial interface IEnvironmentRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Catalogs.Item.Resources.Item.Scopes.Item.Resource.Refresh
{
    [Proxy(typeof(RefreshRequestBuilder), true)]
    public partial interface IRefreshRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Catalogs.Item.Resources.Item.Scopes.Item.Resource.Roles
{
    [Proxy(typeof(RolesRequestBuilder), true)]
    public partial interface IRolesRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Catalogs.Item.Resources.Item.Scopes.Item.Resource.Roles.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Catalogs.Item.Resources.Item.Scopes.Item.Resource.Roles.Item
{
    [Proxy(typeof(AccessPackageResourceRoleItemRequestBuilder), true)]
    public partial interface IAccessPackageResourceRoleItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Catalogs.Item.Resources.Item.Scopes.Item.Resource.Roles.Item.Resource
{
    [Proxy(typeof(ResourceRequestBuilder), true)]
    public partial interface IResourceRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Catalogs.Item.Resources.Item.Scopes.Item.Resource.Roles.Item.Resource.EnvironmentNamespace
{
    [Proxy(typeof(EnvironmentRequestBuilder), true)]
    public partial interface IEnvironmentRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Catalogs.Item.Resources.Item.Scopes.Item.Resource.Roles.Item.Resource.Refresh
{
    [Proxy(typeof(RefreshRequestBuilder), true)]
    public partial interface IRefreshRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Catalogs.Item.ResourceScopes
{
    [Proxy(typeof(ResourceScopesRequestBuilder), true)]
    public partial interface IResourceScopesRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Catalogs.Item.ResourceScopes.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Catalogs.Item.ResourceScopes.Item
{
    [Proxy(typeof(AccessPackageResourceScopeItemRequestBuilder), true)]
    public partial interface IAccessPackageResourceScopeItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Catalogs.Item.ResourceScopes.Item.Resource
{
    [Proxy(typeof(ResourceRequestBuilder), true)]
    public partial interface IResourceRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Catalogs.Item.ResourceScopes.Item.Resource.EnvironmentNamespace
{
    [Proxy(typeof(EnvironmentRequestBuilder), true)]
    public partial interface IEnvironmentRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Catalogs.Item.ResourceScopes.Item.Resource.Refresh
{
    [Proxy(typeof(RefreshRequestBuilder), true)]
    public partial interface IRefreshRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Catalogs.Item.ResourceScopes.Item.Resource.Roles
{
    [Proxy(typeof(RolesRequestBuilder), true)]
    public partial interface IRolesRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Catalogs.Item.ResourceScopes.Item.Resource.Roles.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Catalogs.Item.ResourceScopes.Item.Resource.Roles.Item
{
    [Proxy(typeof(AccessPackageResourceRoleItemRequestBuilder), true)]
    public partial interface IAccessPackageResourceRoleItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Catalogs.Item.ResourceScopes.Item.Resource.Roles.Item.Resource
{
    [Proxy(typeof(ResourceRequestBuilder), true)]
    public partial interface IResourceRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Catalogs.Item.ResourceScopes.Item.Resource.Roles.Item.Resource.EnvironmentNamespace
{
    [Proxy(typeof(EnvironmentRequestBuilder), true)]
    public partial interface IEnvironmentRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Catalogs.Item.ResourceScopes.Item.Resource.Roles.Item.Resource.Refresh
{
    [Proxy(typeof(RefreshRequestBuilder), true)]
    public partial interface IRefreshRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Catalogs.Item.ResourceScopes.Item.Resource.Roles.Item.Resource.Scopes
{
    [Proxy(typeof(ScopesRequestBuilder), true)]
    public partial interface IScopesRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Catalogs.Item.ResourceScopes.Item.Resource.Roles.Item.Resource.Scopes.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Catalogs.Item.ResourceScopes.Item.Resource.Roles.Item.Resource.Scopes.Item
{
    [Proxy(typeof(AccessPackageResourceScopeItemRequestBuilder), true)]
    public partial interface IAccessPackageResourceScopeItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Catalogs.Item.ResourceScopes.Item.Resource.Scopes
{
    [Proxy(typeof(ScopesRequestBuilder), true)]
    public partial interface IScopesRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Catalogs.Item.ResourceScopes.Item.Resource.Scopes.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Catalogs.Item.ResourceScopes.Item.Resource.Scopes.Item
{
    [Proxy(typeof(AccessPackageResourceScopeItemRequestBuilder), true)]
    public partial interface IAccessPackageResourceScopeItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ConnectedOrganizations
{
    [Proxy(typeof(ConnectedOrganizationsRequestBuilder), true)]
    public partial interface IConnectedOrganizationsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ConnectedOrganizations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ConnectedOrganizations.Item
{
    [Proxy(typeof(ConnectedOrganizationItemRequestBuilder), true)]
    public partial interface IConnectedOrganizationItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ConnectedOrganizations.Item.ExternalSponsors
{
    [Proxy(typeof(ExternalSponsorsRequestBuilder), true)]
    public partial interface IExternalSponsorsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ConnectedOrganizations.Item.ExternalSponsors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ConnectedOrganizations.Item.ExternalSponsors.Item
{
    [Proxy(typeof(DirectoryObjectItemRequestBuilder), true)]
    public partial interface IDirectoryObjectItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ConnectedOrganizations.Item.ExternalSponsors.Item.Ref
{
    [Proxy(typeof(RefRequestBuilder), true)]
    public partial interface IRefRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ConnectedOrganizations.Item.ExternalSponsors.Ref
{
    [Proxy(typeof(RefRequestBuilder), true)]
    public partial interface IRefRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ConnectedOrganizations.Item.InternalSponsors
{
    [Proxy(typeof(InternalSponsorsRequestBuilder), true)]
    public partial interface IInternalSponsorsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ConnectedOrganizations.Item.InternalSponsors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ConnectedOrganizations.Item.InternalSponsors.Item
{
    [Proxy(typeof(DirectoryObjectItemRequestBuilder), true)]
    public partial interface IDirectoryObjectItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ConnectedOrganizations.Item.InternalSponsors.Item.Ref
{
    [Proxy(typeof(RefRequestBuilder), true)]
    public partial interface IRefRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ConnectedOrganizations.Item.InternalSponsors.Ref
{
    [Proxy(typeof(RefRequestBuilder), true)]
    public partial interface IRefRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceEnvironments
{
    [Proxy(typeof(ResourceEnvironmentsRequestBuilder), true)]
    public partial interface IResourceEnvironmentsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceEnvironments.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceEnvironments.Item
{
    [Proxy(typeof(AccessPackageResourceEnvironmentItemRequestBuilder), true)]
    public partial interface IAccessPackageResourceEnvironmentItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceEnvironments.Item.Resources
{
    [Proxy(typeof(ResourcesRequestBuilder), true)]
    public partial interface IResourcesRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceEnvironments.Item.Resources.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceEnvironments.Item.Resources.Item
{
    [Proxy(typeof(AccessPackageResourceItemRequestBuilder), true)]
    public partial interface IAccessPackageResourceItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceEnvironments.Item.Resources.Item.EnvironmentNamespace
{
    [Proxy(typeof(EnvironmentRequestBuilder), true)]
    public partial interface IEnvironmentRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceEnvironments.Item.Resources.Item.Refresh
{
    [Proxy(typeof(RefreshRequestBuilder), true)]
    public partial interface IRefreshRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceEnvironments.Item.Resources.Item.Roles
{
    [Proxy(typeof(RolesRequestBuilder), true)]
    public partial interface IRolesRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceEnvironments.Item.Resources.Item.Roles.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceEnvironments.Item.Resources.Item.Roles.Item
{
    [Proxy(typeof(AccessPackageResourceRoleItemRequestBuilder), true)]
    public partial interface IAccessPackageResourceRoleItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceEnvironments.Item.Resources.Item.Roles.Item.Resource
{
    [Proxy(typeof(ResourceRequestBuilder), true)]
    public partial interface IResourceRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceEnvironments.Item.Resources.Item.Roles.Item.Resource.EnvironmentNamespace
{
    [Proxy(typeof(EnvironmentRequestBuilder), true)]
    public partial interface IEnvironmentRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceEnvironments.Item.Resources.Item.Roles.Item.Resource.Refresh
{
    [Proxy(typeof(RefreshRequestBuilder), true)]
    public partial interface IRefreshRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceEnvironments.Item.Resources.Item.Roles.Item.Resource.Scopes
{
    [Proxy(typeof(ScopesRequestBuilder), true)]
    public partial interface IScopesRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceEnvironments.Item.Resources.Item.Roles.Item.Resource.Scopes.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceEnvironments.Item.Resources.Item.Roles.Item.Resource.Scopes.Item
{
    [Proxy(typeof(AccessPackageResourceScopeItemRequestBuilder), true)]
    public partial interface IAccessPackageResourceScopeItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceEnvironments.Item.Resources.Item.Roles.Item.Resource.Scopes.Item.Resource
{
    [Proxy(typeof(ResourceRequestBuilder), true)]
    public partial interface IResourceRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceEnvironments.Item.Resources.Item.Roles.Item.Resource.Scopes.Item.Resource.EnvironmentNamespace
{
    [Proxy(typeof(EnvironmentRequestBuilder), true)]
    public partial interface IEnvironmentRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceEnvironments.Item.Resources.Item.Roles.Item.Resource.Scopes.Item.Resource.Refresh
{
    [Proxy(typeof(RefreshRequestBuilder), true)]
    public partial interface IRefreshRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceEnvironments.Item.Resources.Item.Scopes
{
    [Proxy(typeof(ScopesRequestBuilder), true)]
    public partial interface IScopesRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceEnvironments.Item.Resources.Item.Scopes.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceEnvironments.Item.Resources.Item.Scopes.Item
{
    [Proxy(typeof(AccessPackageResourceScopeItemRequestBuilder), true)]
    public partial interface IAccessPackageResourceScopeItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceEnvironments.Item.Resources.Item.Scopes.Item.Resource
{
    [Proxy(typeof(ResourceRequestBuilder), true)]
    public partial interface IResourceRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceEnvironments.Item.Resources.Item.Scopes.Item.Resource.EnvironmentNamespace
{
    [Proxy(typeof(EnvironmentRequestBuilder), true)]
    public partial interface IEnvironmentRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceEnvironments.Item.Resources.Item.Scopes.Item.Resource.Refresh
{
    [Proxy(typeof(RefreshRequestBuilder), true)]
    public partial interface IRefreshRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceEnvironments.Item.Resources.Item.Scopes.Item.Resource.Roles
{
    [Proxy(typeof(RolesRequestBuilder), true)]
    public partial interface IRolesRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceEnvironments.Item.Resources.Item.Scopes.Item.Resource.Roles.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceEnvironments.Item.Resources.Item.Scopes.Item.Resource.Roles.Item
{
    [Proxy(typeof(AccessPackageResourceRoleItemRequestBuilder), true)]
    public partial interface IAccessPackageResourceRoleItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceEnvironments.Item.Resources.Item.Scopes.Item.Resource.Roles.Item.Resource
{
    [Proxy(typeof(ResourceRequestBuilder), true)]
    public partial interface IResourceRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceEnvironments.Item.Resources.Item.Scopes.Item.Resource.Roles.Item.Resource.EnvironmentNamespace
{
    [Proxy(typeof(EnvironmentRequestBuilder), true)]
    public partial interface IEnvironmentRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceEnvironments.Item.Resources.Item.Scopes.Item.Resource.Roles.Item.Resource.Refresh
{
    [Proxy(typeof(RefreshRequestBuilder), true)]
    public partial interface IRefreshRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests
{
    [Proxy(typeof(ResourceRequestsRequestBuilder), true)]
    public partial interface IResourceRequestsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item
{
    [Proxy(typeof(AccessPackageResourceRequestItemRequestBuilder), true)]
    public partial interface IAccessPackageResourceRequestItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Catalog
{
    [Proxy(typeof(CatalogRequestBuilder), true)]
    public partial interface ICatalogRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Catalog.AccessPackages
{
    [Proxy(typeof(AccessPackagesRequestBuilder), true)]
    public partial interface IAccessPackagesRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Catalog.AccessPackages.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Catalog.AccessPackages.Item
{
    [Proxy(typeof(AccessPackageItemRequestBuilder), true)]
    public partial interface IAccessPackageItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Catalog.CustomWorkflowExtensions
{
    [Proxy(typeof(CustomWorkflowExtensionsRequestBuilder), true)]
    public partial interface ICustomWorkflowExtensionsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Catalog.CustomWorkflowExtensions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Catalog.CustomWorkflowExtensions.Item
{
    [Proxy(typeof(CustomCalloutExtensionItemRequestBuilder), true)]
    public partial interface ICustomCalloutExtensionItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Catalog.ResourceRoles
{
    [Proxy(typeof(ResourceRolesRequestBuilder), true)]
    public partial interface IResourceRolesRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Catalog.ResourceRoles.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Catalog.ResourceRoles.Item
{
    [Proxy(typeof(AccessPackageResourceRoleItemRequestBuilder), true)]
    public partial interface IAccessPackageResourceRoleItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Catalog.ResourceRoles.Item.Resource
{
    [Proxy(typeof(ResourceRequestBuilder), true)]
    public partial interface IResourceRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Catalog.ResourceRoles.Item.Resource.EnvironmentNamespace
{
    [Proxy(typeof(EnvironmentRequestBuilder), true)]
    public partial interface IEnvironmentRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Catalog.ResourceRoles.Item.Resource.Refresh
{
    [Proxy(typeof(RefreshRequestBuilder), true)]
    public partial interface IRefreshRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Catalog.ResourceRoles.Item.Resource.Roles
{
    [Proxy(typeof(RolesRequestBuilder), true)]
    public partial interface IRolesRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Catalog.ResourceRoles.Item.Resource.Roles.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Catalog.ResourceRoles.Item.Resource.Roles.Item
{
    [Proxy(typeof(AccessPackageResourceRoleItemRequestBuilder), true)]
    public partial interface IAccessPackageResourceRoleItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Catalog.ResourceRoles.Item.Resource.Scopes
{
    [Proxy(typeof(ScopesRequestBuilder), true)]
    public partial interface IScopesRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Catalog.ResourceRoles.Item.Resource.Scopes.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Catalog.ResourceRoles.Item.Resource.Scopes.Item
{
    [Proxy(typeof(AccessPackageResourceScopeItemRequestBuilder), true)]
    public partial interface IAccessPackageResourceScopeItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Catalog.ResourceRoles.Item.Resource.Scopes.Item.Resource
{
    [Proxy(typeof(ResourceRequestBuilder), true)]
    public partial interface IResourceRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Catalog.ResourceRoles.Item.Resource.Scopes.Item.Resource.EnvironmentNamespace
{
    [Proxy(typeof(EnvironmentRequestBuilder), true)]
    public partial interface IEnvironmentRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Catalog.ResourceRoles.Item.Resource.Scopes.Item.Resource.Refresh
{
    [Proxy(typeof(RefreshRequestBuilder), true)]
    public partial interface IRefreshRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Catalog.ResourceRoles.Item.Resource.Scopes.Item.Resource.Roles
{
    [Proxy(typeof(RolesRequestBuilder), true)]
    public partial interface IRolesRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Catalog.ResourceRoles.Item.Resource.Scopes.Item.Resource.Roles.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Catalog.ResourceRoles.Item.Resource.Scopes.Item.Resource.Roles.Item
{
    [Proxy(typeof(AccessPackageResourceRoleItemRequestBuilder), true)]
    public partial interface IAccessPackageResourceRoleItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Catalog.Resources
{
    [Proxy(typeof(ResourcesRequestBuilder), true)]
    public partial interface IResourcesRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Catalog.Resources.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Catalog.Resources.Item
{
    [Proxy(typeof(AccessPackageResourceItemRequestBuilder), true)]
    public partial interface IAccessPackageResourceItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Catalog.Resources.Item.EnvironmentNamespace
{
    [Proxy(typeof(EnvironmentRequestBuilder), true)]
    public partial interface IEnvironmentRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Catalog.Resources.Item.Refresh
{
    [Proxy(typeof(RefreshRequestBuilder), true)]
    public partial interface IRefreshRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Catalog.Resources.Item.Roles
{
    [Proxy(typeof(RolesRequestBuilder), true)]
    public partial interface IRolesRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Catalog.Resources.Item.Roles.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Catalog.Resources.Item.Roles.Item
{
    [Proxy(typeof(AccessPackageResourceRoleItemRequestBuilder), true)]
    public partial interface IAccessPackageResourceRoleItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Catalog.Resources.Item.Roles.Item.Resource
{
    [Proxy(typeof(ResourceRequestBuilder), true)]
    public partial interface IResourceRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Catalog.Resources.Item.Roles.Item.Resource.EnvironmentNamespace
{
    [Proxy(typeof(EnvironmentRequestBuilder), true)]
    public partial interface IEnvironmentRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Catalog.Resources.Item.Roles.Item.Resource.Refresh
{
    [Proxy(typeof(RefreshRequestBuilder), true)]
    public partial interface IRefreshRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Catalog.Resources.Item.Roles.Item.Resource.Scopes
{
    [Proxy(typeof(ScopesRequestBuilder), true)]
    public partial interface IScopesRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Catalog.Resources.Item.Roles.Item.Resource.Scopes.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Catalog.Resources.Item.Roles.Item.Resource.Scopes.Item
{
    [Proxy(typeof(AccessPackageResourceScopeItemRequestBuilder), true)]
    public partial interface IAccessPackageResourceScopeItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Catalog.Resources.Item.Roles.Item.Resource.Scopes.Item.Resource
{
    [Proxy(typeof(ResourceRequestBuilder), true)]
    public partial interface IResourceRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Catalog.Resources.Item.Roles.Item.Resource.Scopes.Item.Resource.EnvironmentNamespace
{
    [Proxy(typeof(EnvironmentRequestBuilder), true)]
    public partial interface IEnvironmentRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Catalog.Resources.Item.Roles.Item.Resource.Scopes.Item.Resource.Refresh
{
    [Proxy(typeof(RefreshRequestBuilder), true)]
    public partial interface IRefreshRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Catalog.Resources.Item.Scopes
{
    [Proxy(typeof(ScopesRequestBuilder), true)]
    public partial interface IScopesRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Catalog.Resources.Item.Scopes.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Catalog.Resources.Item.Scopes.Item
{
    [Proxy(typeof(AccessPackageResourceScopeItemRequestBuilder), true)]
    public partial interface IAccessPackageResourceScopeItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Catalog.Resources.Item.Scopes.Item.Resource
{
    [Proxy(typeof(ResourceRequestBuilder), true)]
    public partial interface IResourceRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Catalog.Resources.Item.Scopes.Item.Resource.EnvironmentNamespace
{
    [Proxy(typeof(EnvironmentRequestBuilder), true)]
    public partial interface IEnvironmentRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Catalog.Resources.Item.Scopes.Item.Resource.Refresh
{
    [Proxy(typeof(RefreshRequestBuilder), true)]
    public partial interface IRefreshRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Catalog.Resources.Item.Scopes.Item.Resource.Roles
{
    [Proxy(typeof(RolesRequestBuilder), true)]
    public partial interface IRolesRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Catalog.Resources.Item.Scopes.Item.Resource.Roles.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Catalog.Resources.Item.Scopes.Item.Resource.Roles.Item
{
    [Proxy(typeof(AccessPackageResourceRoleItemRequestBuilder), true)]
    public partial interface IAccessPackageResourceRoleItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Catalog.Resources.Item.Scopes.Item.Resource.Roles.Item.Resource
{
    [Proxy(typeof(ResourceRequestBuilder), true)]
    public partial interface IResourceRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Catalog.Resources.Item.Scopes.Item.Resource.Roles.Item.Resource.EnvironmentNamespace
{
    [Proxy(typeof(EnvironmentRequestBuilder), true)]
    public partial interface IEnvironmentRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Catalog.Resources.Item.Scopes.Item.Resource.Roles.Item.Resource.Refresh
{
    [Proxy(typeof(RefreshRequestBuilder), true)]
    public partial interface IRefreshRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Catalog.ResourceScopes
{
    [Proxy(typeof(ResourceScopesRequestBuilder), true)]
    public partial interface IResourceScopesRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Catalog.ResourceScopes.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Catalog.ResourceScopes.Item
{
    [Proxy(typeof(AccessPackageResourceScopeItemRequestBuilder), true)]
    public partial interface IAccessPackageResourceScopeItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Catalog.ResourceScopes.Item.Resource
{
    [Proxy(typeof(ResourceRequestBuilder), true)]
    public partial interface IResourceRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Catalog.ResourceScopes.Item.Resource.EnvironmentNamespace
{
    [Proxy(typeof(EnvironmentRequestBuilder), true)]
    public partial interface IEnvironmentRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Catalog.ResourceScopes.Item.Resource.Refresh
{
    [Proxy(typeof(RefreshRequestBuilder), true)]
    public partial interface IRefreshRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Catalog.ResourceScopes.Item.Resource.Roles
{
    [Proxy(typeof(RolesRequestBuilder), true)]
    public partial interface IRolesRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Catalog.ResourceScopes.Item.Resource.Roles.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Catalog.ResourceScopes.Item.Resource.Roles.Item
{
    [Proxy(typeof(AccessPackageResourceRoleItemRequestBuilder), true)]
    public partial interface IAccessPackageResourceRoleItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Catalog.ResourceScopes.Item.Resource.Roles.Item.Resource
{
    [Proxy(typeof(ResourceRequestBuilder), true)]
    public partial interface IResourceRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Catalog.ResourceScopes.Item.Resource.Roles.Item.Resource.EnvironmentNamespace
{
    [Proxy(typeof(EnvironmentRequestBuilder), true)]
    public partial interface IEnvironmentRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Catalog.ResourceScopes.Item.Resource.Roles.Item.Resource.Refresh
{
    [Proxy(typeof(RefreshRequestBuilder), true)]
    public partial interface IRefreshRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Catalog.ResourceScopes.Item.Resource.Roles.Item.Resource.Scopes
{
    [Proxy(typeof(ScopesRequestBuilder), true)]
    public partial interface IScopesRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Catalog.ResourceScopes.Item.Resource.Roles.Item.Resource.Scopes.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Catalog.ResourceScopes.Item.Resource.Roles.Item.Resource.Scopes.Item
{
    [Proxy(typeof(AccessPackageResourceScopeItemRequestBuilder), true)]
    public partial interface IAccessPackageResourceScopeItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Catalog.ResourceScopes.Item.Resource.Scopes
{
    [Proxy(typeof(ScopesRequestBuilder), true)]
    public partial interface IScopesRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Catalog.ResourceScopes.Item.Resource.Scopes.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Catalog.ResourceScopes.Item.Resource.Scopes.Item
{
    [Proxy(typeof(AccessPackageResourceScopeItemRequestBuilder), true)]
    public partial interface IAccessPackageResourceScopeItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Resource
{
    [Proxy(typeof(ResourceRequestBuilder), true)]
    public partial interface IResourceRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Resource.EnvironmentNamespace
{
    [Proxy(typeof(EnvironmentRequestBuilder), true)]
    public partial interface IEnvironmentRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Resource.Refresh
{
    [Proxy(typeof(RefreshRequestBuilder), true)]
    public partial interface IRefreshRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Resource.Roles
{
    [Proxy(typeof(RolesRequestBuilder), true)]
    public partial interface IRolesRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Resource.Roles.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Resource.Roles.Item
{
    [Proxy(typeof(AccessPackageResourceRoleItemRequestBuilder), true)]
    public partial interface IAccessPackageResourceRoleItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Resource.Roles.Item.Resource
{
    [Proxy(typeof(ResourceRequestBuilder), true)]
    public partial interface IResourceRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Resource.Roles.Item.Resource.EnvironmentNamespace
{
    [Proxy(typeof(EnvironmentRequestBuilder), true)]
    public partial interface IEnvironmentRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Resource.Roles.Item.Resource.Refresh
{
    [Proxy(typeof(RefreshRequestBuilder), true)]
    public partial interface IRefreshRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Resource.Roles.Item.Resource.Scopes
{
    [Proxy(typeof(ScopesRequestBuilder), true)]
    public partial interface IScopesRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Resource.Roles.Item.Resource.Scopes.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Resource.Roles.Item.Resource.Scopes.Item
{
    [Proxy(typeof(AccessPackageResourceScopeItemRequestBuilder), true)]
    public partial interface IAccessPackageResourceScopeItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Resource.Roles.Item.Resource.Scopes.Item.Resource
{
    [Proxy(typeof(ResourceRequestBuilder), true)]
    public partial interface IResourceRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Resource.Roles.Item.Resource.Scopes.Item.Resource.EnvironmentNamespace
{
    [Proxy(typeof(EnvironmentRequestBuilder), true)]
    public partial interface IEnvironmentRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Resource.Roles.Item.Resource.Scopes.Item.Resource.Refresh
{
    [Proxy(typeof(RefreshRequestBuilder), true)]
    public partial interface IRefreshRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Resource.Scopes
{
    [Proxy(typeof(ScopesRequestBuilder), true)]
    public partial interface IScopesRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Resource.Scopes.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Resource.Scopes.Item
{
    [Proxy(typeof(AccessPackageResourceScopeItemRequestBuilder), true)]
    public partial interface IAccessPackageResourceScopeItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Resource.Scopes.Item.Resource
{
    [Proxy(typeof(ResourceRequestBuilder), true)]
    public partial interface IResourceRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Resource.Scopes.Item.Resource.EnvironmentNamespace
{
    [Proxy(typeof(EnvironmentRequestBuilder), true)]
    public partial interface IEnvironmentRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Resource.Scopes.Item.Resource.Refresh
{
    [Proxy(typeof(RefreshRequestBuilder), true)]
    public partial interface IRefreshRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Resource.Scopes.Item.Resource.Roles
{
    [Proxy(typeof(RolesRequestBuilder), true)]
    public partial interface IRolesRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Resource.Scopes.Item.Resource.Roles.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Resource.Scopes.Item.Resource.Roles.Item
{
    [Proxy(typeof(AccessPackageResourceRoleItemRequestBuilder), true)]
    public partial interface IAccessPackageResourceRoleItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Resource.Scopes.Item.Resource.Roles.Item.Resource
{
    [Proxy(typeof(ResourceRequestBuilder), true)]
    public partial interface IResourceRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Resource.Scopes.Item.Resource.Roles.Item.Resource.EnvironmentNamespace
{
    [Proxy(typeof(EnvironmentRequestBuilder), true)]
    public partial interface IEnvironmentRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRequests.Item.Resource.Scopes.Item.Resource.Roles.Item.Resource.Refresh
{
    [Proxy(typeof(RefreshRequestBuilder), true)]
    public partial interface IRefreshRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRoleScopes
{
    [Proxy(typeof(ResourceRoleScopesRequestBuilder), true)]
    public partial interface IResourceRoleScopesRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRoleScopes.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRoleScopes.Item
{
    [Proxy(typeof(AccessPackageResourceRoleScopeItemRequestBuilder), true)]
    public partial interface IAccessPackageResourceRoleScopeItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRoleScopes.Item.Role
{
    [Proxy(typeof(RoleRequestBuilder), true)]
    public partial interface IRoleRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRoleScopes.Item.Role.Resource
{
    [Proxy(typeof(ResourceRequestBuilder), true)]
    public partial interface IResourceRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRoleScopes.Item.Role.Resource.EnvironmentNamespace
{
    [Proxy(typeof(EnvironmentRequestBuilder), true)]
    public partial interface IEnvironmentRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRoleScopes.Item.Role.Resource.Refresh
{
    [Proxy(typeof(RefreshRequestBuilder), true)]
    public partial interface IRefreshRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRoleScopes.Item.Role.Resource.Roles
{
    [Proxy(typeof(RolesRequestBuilder), true)]
    public partial interface IRolesRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRoleScopes.Item.Role.Resource.Roles.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRoleScopes.Item.Role.Resource.Roles.Item
{
    [Proxy(typeof(AccessPackageResourceRoleItemRequestBuilder), true)]
    public partial interface IAccessPackageResourceRoleItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRoleScopes.Item.Role.Resource.Scopes
{
    [Proxy(typeof(ScopesRequestBuilder), true)]
    public partial interface IScopesRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRoleScopes.Item.Role.Resource.Scopes.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRoleScopes.Item.Role.Resource.Scopes.Item
{
    [Proxy(typeof(AccessPackageResourceScopeItemRequestBuilder), true)]
    public partial interface IAccessPackageResourceScopeItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRoleScopes.Item.Role.Resource.Scopes.Item.Resource
{
    [Proxy(typeof(ResourceRequestBuilder), true)]
    public partial interface IResourceRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRoleScopes.Item.Role.Resource.Scopes.Item.Resource.EnvironmentNamespace
{
    [Proxy(typeof(EnvironmentRequestBuilder), true)]
    public partial interface IEnvironmentRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRoleScopes.Item.Role.Resource.Scopes.Item.Resource.Refresh
{
    [Proxy(typeof(RefreshRequestBuilder), true)]
    public partial interface IRefreshRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRoleScopes.Item.Role.Resource.Scopes.Item.Resource.Roles
{
    [Proxy(typeof(RolesRequestBuilder), true)]
    public partial interface IRolesRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRoleScopes.Item.Role.Resource.Scopes.Item.Resource.Roles.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRoleScopes.Item.Role.Resource.Scopes.Item.Resource.Roles.Item
{
    [Proxy(typeof(AccessPackageResourceRoleItemRequestBuilder), true)]
    public partial interface IAccessPackageResourceRoleItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRoleScopes.Item.Scope
{
    [Proxy(typeof(ScopeRequestBuilder), true)]
    public partial interface IScopeRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRoleScopes.Item.Scope.Resource
{
    [Proxy(typeof(ResourceRequestBuilder), true)]
    public partial interface IResourceRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRoleScopes.Item.Scope.Resource.EnvironmentNamespace
{
    [Proxy(typeof(EnvironmentRequestBuilder), true)]
    public partial interface IEnvironmentRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRoleScopes.Item.Scope.Resource.Refresh
{
    [Proxy(typeof(RefreshRequestBuilder), true)]
    public partial interface IRefreshRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRoleScopes.Item.Scope.Resource.Roles
{
    [Proxy(typeof(RolesRequestBuilder), true)]
    public partial interface IRolesRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRoleScopes.Item.Scope.Resource.Roles.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRoleScopes.Item.Scope.Resource.Roles.Item
{
    [Proxy(typeof(AccessPackageResourceRoleItemRequestBuilder), true)]
    public partial interface IAccessPackageResourceRoleItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRoleScopes.Item.Scope.Resource.Roles.Item.Resource
{
    [Proxy(typeof(ResourceRequestBuilder), true)]
    public partial interface IResourceRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRoleScopes.Item.Scope.Resource.Roles.Item.Resource.EnvironmentNamespace
{
    [Proxy(typeof(EnvironmentRequestBuilder), true)]
    public partial interface IEnvironmentRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRoleScopes.Item.Scope.Resource.Roles.Item.Resource.Refresh
{
    [Proxy(typeof(RefreshRequestBuilder), true)]
    public partial interface IRefreshRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRoleScopes.Item.Scope.Resource.Roles.Item.Resource.Scopes
{
    [Proxy(typeof(ScopesRequestBuilder), true)]
    public partial interface IScopesRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRoleScopes.Item.Scope.Resource.Roles.Item.Resource.Scopes.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRoleScopes.Item.Scope.Resource.Roles.Item.Resource.Scopes.Item
{
    [Proxy(typeof(AccessPackageResourceScopeItemRequestBuilder), true)]
    public partial interface IAccessPackageResourceScopeItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRoleScopes.Item.Scope.Resource.Scopes
{
    [Proxy(typeof(ScopesRequestBuilder), true)]
    public partial interface IScopesRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRoleScopes.Item.Scope.Resource.Scopes.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.ResourceRoleScopes.Item.Scope.Resource.Scopes.Item
{
    [Proxy(typeof(AccessPackageResourceScopeItemRequestBuilder), true)]
    public partial interface IAccessPackageResourceScopeItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Resources
{
    [Proxy(typeof(ResourcesRequestBuilder), true)]
    public partial interface IResourcesRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Resources.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Resources.Item
{
    [Proxy(typeof(AccessPackageResourceItemRequestBuilder), true)]
    public partial interface IAccessPackageResourceItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Resources.Item.EnvironmentNamespace
{
    [Proxy(typeof(EnvironmentRequestBuilder), true)]
    public partial interface IEnvironmentRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Resources.Item.Refresh
{
    [Proxy(typeof(RefreshRequestBuilder), true)]
    public partial interface IRefreshRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Resources.Item.Roles
{
    [Proxy(typeof(RolesRequestBuilder), true)]
    public partial interface IRolesRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Resources.Item.Roles.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Resources.Item.Roles.Item
{
    [Proxy(typeof(AccessPackageResourceRoleItemRequestBuilder), true)]
    public partial interface IAccessPackageResourceRoleItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Resources.Item.Roles.Item.Resource
{
    [Proxy(typeof(ResourceRequestBuilder), true)]
    public partial interface IResourceRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Resources.Item.Roles.Item.Resource.EnvironmentNamespace
{
    [Proxy(typeof(EnvironmentRequestBuilder), true)]
    public partial interface IEnvironmentRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Resources.Item.Roles.Item.Resource.Refresh
{
    [Proxy(typeof(RefreshRequestBuilder), true)]
    public partial interface IRefreshRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Resources.Item.Roles.Item.Resource.Scopes
{
    [Proxy(typeof(ScopesRequestBuilder), true)]
    public partial interface IScopesRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Resources.Item.Roles.Item.Resource.Scopes.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Resources.Item.Roles.Item.Resource.Scopes.Item
{
    [Proxy(typeof(AccessPackageResourceScopeItemRequestBuilder), true)]
    public partial interface IAccessPackageResourceScopeItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Resources.Item.Roles.Item.Resource.Scopes.Item.Resource
{
    [Proxy(typeof(ResourceRequestBuilder), true)]
    public partial interface IResourceRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Resources.Item.Roles.Item.Resource.Scopes.Item.Resource.EnvironmentNamespace
{
    [Proxy(typeof(EnvironmentRequestBuilder), true)]
    public partial interface IEnvironmentRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Resources.Item.Roles.Item.Resource.Scopes.Item.Resource.Refresh
{
    [Proxy(typeof(RefreshRequestBuilder), true)]
    public partial interface IRefreshRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Resources.Item.Scopes
{
    [Proxy(typeof(ScopesRequestBuilder), true)]
    public partial interface IScopesRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Resources.Item.Scopes.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Resources.Item.Scopes.Item
{
    [Proxy(typeof(AccessPackageResourceScopeItemRequestBuilder), true)]
    public partial interface IAccessPackageResourceScopeItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Resources.Item.Scopes.Item.Resource
{
    [Proxy(typeof(ResourceRequestBuilder), true)]
    public partial interface IResourceRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Resources.Item.Scopes.Item.Resource.EnvironmentNamespace
{
    [Proxy(typeof(EnvironmentRequestBuilder), true)]
    public partial interface IEnvironmentRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Resources.Item.Scopes.Item.Resource.Refresh
{
    [Proxy(typeof(RefreshRequestBuilder), true)]
    public partial interface IRefreshRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Resources.Item.Scopes.Item.Resource.Roles
{
    [Proxy(typeof(RolesRequestBuilder), true)]
    public partial interface IRolesRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Resources.Item.Scopes.Item.Resource.Roles.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Resources.Item.Scopes.Item.Resource.Roles.Item
{
    [Proxy(typeof(AccessPackageResourceRoleItemRequestBuilder), true)]
    public partial interface IAccessPackageResourceRoleItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Resources.Item.Scopes.Item.Resource.Roles.Item.Resource
{
    [Proxy(typeof(ResourceRequestBuilder), true)]
    public partial interface IResourceRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Resources.Item.Scopes.Item.Resource.Roles.Item.Resource.EnvironmentNamespace
{
    [Proxy(typeof(EnvironmentRequestBuilder), true)]
    public partial interface IEnvironmentRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Resources.Item.Scopes.Item.Resource.Roles.Item.Resource.Refresh
{
    [Proxy(typeof(RefreshRequestBuilder), true)]
    public partial interface IRefreshRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.EntitlementManagement.Settings
{
    [Proxy(typeof(SettingsRequestBuilder), true)]
    public partial interface ISettingsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows
{
    [Proxy(typeof(LifecycleWorkflowsRequestBuilder), true)]
    public partial interface ILifecycleWorkflowsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.CustomTaskExtensions
{
    [Proxy(typeof(CustomTaskExtensionsRequestBuilder), true)]
    public partial interface ICustomTaskExtensionsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.CustomTaskExtensions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.CustomTaskExtensions.Item
{
    [Proxy(typeof(CustomTaskExtensionItemRequestBuilder), true)]
    public partial interface ICustomTaskExtensionItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.CustomTaskExtensions.Item.CreatedBy
{
    [Proxy(typeof(CreatedByRequestBuilder), true)]
    public partial interface ICreatedByRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.CustomTaskExtensions.Item.CreatedBy.MailboxSettings
{
    [Proxy(typeof(MailboxSettingsRequestBuilder), true)]
    public partial interface IMailboxSettingsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.CustomTaskExtensions.Item.CreatedBy.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.CustomTaskExtensions.Item.CreatedBy.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.CustomTaskExtensions.Item.LastModifiedBy
{
    [Proxy(typeof(LastModifiedByRequestBuilder), true)]
    public partial interface ILastModifiedByRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.CustomTaskExtensions.Item.LastModifiedBy.MailboxSettings
{
    [Proxy(typeof(MailboxSettingsRequestBuilder), true)]
    public partial interface IMailboxSettingsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.CustomTaskExtensions.Item.LastModifiedBy.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.CustomTaskExtensions.Item.LastModifiedBy.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems
{
    [Proxy(typeof(DeletedItemsRequestBuilder), true)]
    public partial interface IDeletedItemsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows
{
    [Proxy(typeof(WorkflowsRequestBuilder), true)]
    public partial interface IWorkflowsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item
{
    [Proxy(typeof(WorkflowItemRequestBuilder), true)]
    public partial interface IWorkflowItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.CreatedBy
{
    [Proxy(typeof(CreatedByRequestBuilder), true)]
    public partial interface ICreatedByRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.CreatedBy.MailboxSettings
{
    [Proxy(typeof(MailboxSettingsRequestBuilder), true)]
    public partial interface IMailboxSettingsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.CreatedBy.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.CreatedBy.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.ExecutionScope
{
    [Proxy(typeof(ExecutionScopeRequestBuilder), true)]
    public partial interface IExecutionScopeRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.ExecutionScope.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.ExecutionScope.Item
{
    [Proxy(typeof(UserProcessingResultItemRequestBuilder), true)]
    public partial interface IUserProcessingResultItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.LastModifiedBy
{
    [Proxy(typeof(LastModifiedByRequestBuilder), true)]
    public partial interface ILastModifiedByRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.LastModifiedBy.MailboxSettings
{
    [Proxy(typeof(MailboxSettingsRequestBuilder), true)]
    public partial interface IMailboxSettingsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.LastModifiedBy.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.LastModifiedBy.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.MicrosoftGraphIdentityGovernanceActivate
{
    [Proxy(typeof(MicrosoftGraphIdentityGovernanceActivateRequestBuilder), true)]
    public partial interface IMicrosoftGraphIdentityGovernanceActivateRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.MicrosoftGraphIdentityGovernanceCreateNewVersion
{
    [Proxy(typeof(MicrosoftGraphIdentityGovernanceCreateNewVersionRequestBuilder), true)]
    public partial interface IMicrosoftGraphIdentityGovernanceCreateNewVersionRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.MicrosoftGraphIdentityGovernanceRestore
{
    [Proxy(typeof(MicrosoftGraphIdentityGovernanceRestoreRequestBuilder), true)]
    public partial interface IMicrosoftGraphIdentityGovernanceRestoreRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.Runs
{
    [Proxy(typeof(RunsRequestBuilder), true)]
    public partial interface IRunsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.Runs.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.Runs.Item
{
    [Proxy(typeof(RunItemRequestBuilder), true)]
    public partial interface IRunItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.Runs.Item.TaskProcessingResults
{
    [Proxy(typeof(TaskProcessingResultsRequestBuilder), true)]
    public partial interface ITaskProcessingResultsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.Runs.Item.TaskProcessingResults.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.Runs.Item.TaskProcessingResults.Item
{
    [Proxy(typeof(TaskProcessingResultItemRequestBuilder), true)]
    public partial interface ITaskProcessingResultItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.Runs.Item.TaskProcessingResults.Item.MicrosoftGraphIdentityGovernanceResume
{
    [Proxy(typeof(MicrosoftGraphIdentityGovernanceResumeRequestBuilder), true)]
    public partial interface IMicrosoftGraphIdentityGovernanceResumeRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.Runs.Item.TaskProcessingResults.Item.Subject
{
    [Proxy(typeof(SubjectRequestBuilder), true)]
    public partial interface ISubjectRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.Runs.Item.TaskProcessingResults.Item.Subject.MailboxSettings
{
    [Proxy(typeof(MailboxSettingsRequestBuilder), true)]
    public partial interface IMailboxSettingsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.Runs.Item.TaskProcessingResults.Item.Subject.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.Runs.Item.TaskProcessingResults.Item.Subject.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.Runs.Item.TaskProcessingResults.Item.TaskNamespace
{
    [Proxy(typeof(TaskRequestBuilder), true)]
    public partial interface ITaskRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.Runs.Item.UserProcessingResults
{
    [Proxy(typeof(UserProcessingResultsRequestBuilder), true)]
    public partial interface IUserProcessingResultsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.Runs.Item.UserProcessingResults.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.Runs.Item.UserProcessingResults.Item
{
    [Proxy(typeof(UserProcessingResultItemRequestBuilder), true)]
    public partial interface IUserProcessingResultItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.Runs.Item.UserProcessingResults.Item.Subject
{
    [Proxy(typeof(SubjectRequestBuilder), true)]
    public partial interface ISubjectRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.Runs.Item.UserProcessingResults.Item.Subject.MailboxSettings
{
    [Proxy(typeof(MailboxSettingsRequestBuilder), true)]
    public partial interface IMailboxSettingsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.Runs.Item.UserProcessingResults.Item.Subject.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.Runs.Item.UserProcessingResults.Item.Subject.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.Runs.Item.UserProcessingResults.Item.TaskProcessingResults
{
    [Proxy(typeof(TaskProcessingResultsRequestBuilder), true)]
    public partial interface ITaskProcessingResultsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.Runs.Item.UserProcessingResults.Item.TaskProcessingResults.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.Runs.Item.UserProcessingResults.Item.TaskProcessingResults.Item
{
    [Proxy(typeof(TaskProcessingResultItemRequestBuilder), true)]
    public partial interface ITaskProcessingResultItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.Runs.Item.UserProcessingResults.Item.TaskProcessingResults.Item.MicrosoftGraphIdentityGovernanceResume
{
    [Proxy(typeof(MicrosoftGraphIdentityGovernanceResumeRequestBuilder), true)]
    public partial interface IMicrosoftGraphIdentityGovernanceResumeRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.Runs.Item.UserProcessingResults.Item.TaskProcessingResults.Item.Subject
{
    [Proxy(typeof(SubjectRequestBuilder), true)]
    public partial interface ISubjectRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.Runs.Item.UserProcessingResults.Item.TaskProcessingResults.Item.Subject.MailboxSettings
{
    [Proxy(typeof(MailboxSettingsRequestBuilder), true)]
    public partial interface IMailboxSettingsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.Runs.Item.UserProcessingResults.Item.TaskProcessingResults.Item.Subject.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.Runs.Item.UserProcessingResults.Item.TaskProcessingResults.Item.Subject.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.Runs.Item.UserProcessingResults.Item.TaskProcessingResults.Item.TaskNamespace
{
    [Proxy(typeof(TaskRequestBuilder), true)]
    public partial interface ITaskRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.Runs.Item.UserProcessingResults.MicrosoftGraphIdentityGovernanceSummaryWithStartDateTimeWithEndDateTime
{
    [Proxy(typeof(MicrosoftGraphIdentityGovernanceSummaryWithStartDateTimeWithEndDateTimeRequestBuilder), true)]
    public partial interface IMicrosoftGraphIdentityGovernanceSummaryWithStartDateTimeWithEndDateTimeRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.Runs.MicrosoftGraphIdentityGovernanceSummaryWithStartDateTimeWithEndDateTime
{
    [Proxy(typeof(MicrosoftGraphIdentityGovernanceSummaryWithStartDateTimeWithEndDateTimeRequestBuilder), true)]
    public partial interface IMicrosoftGraphIdentityGovernanceSummaryWithStartDateTimeWithEndDateTimeRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.TaskReports
{
    [Proxy(typeof(TaskReportsRequestBuilder), true)]
    public partial interface ITaskReportsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.TaskReports.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.TaskReports.Item
{
    [Proxy(typeof(TaskReportItemRequestBuilder), true)]
    public partial interface ITaskReportItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.TaskReports.Item.TaskDefinition
{
    [Proxy(typeof(TaskDefinitionRequestBuilder), true)]
    public partial interface ITaskDefinitionRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.TaskReports.Item.TaskNamespace
{
    [Proxy(typeof(TaskRequestBuilder), true)]
    public partial interface ITaskRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.TaskReports.Item.TaskProcessingResults
{
    [Proxy(typeof(TaskProcessingResultsRequestBuilder), true)]
    public partial interface ITaskProcessingResultsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.TaskReports.Item.TaskProcessingResults.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.TaskReports.Item.TaskProcessingResults.Item
{
    [Proxy(typeof(TaskProcessingResultItemRequestBuilder), true)]
    public partial interface ITaskProcessingResultItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.TaskReports.Item.TaskProcessingResults.Item.MicrosoftGraphIdentityGovernanceResume
{
    [Proxy(typeof(MicrosoftGraphIdentityGovernanceResumeRequestBuilder), true)]
    public partial interface IMicrosoftGraphIdentityGovernanceResumeRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.TaskReports.Item.TaskProcessingResults.Item.Subject
{
    [Proxy(typeof(SubjectRequestBuilder), true)]
    public partial interface ISubjectRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.TaskReports.Item.TaskProcessingResults.Item.Subject.MailboxSettings
{
    [Proxy(typeof(MailboxSettingsRequestBuilder), true)]
    public partial interface IMailboxSettingsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.TaskReports.Item.TaskProcessingResults.Item.Subject.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.TaskReports.Item.TaskProcessingResults.Item.Subject.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.TaskReports.Item.TaskProcessingResults.Item.TaskNamespace
{
    [Proxy(typeof(TaskRequestBuilder), true)]
    public partial interface ITaskRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.TaskReports.MicrosoftGraphIdentityGovernanceSummaryWithStartDateTimeWithEndDateTime
{
    [Proxy(typeof(MicrosoftGraphIdentityGovernanceSummaryWithStartDateTimeWithEndDateTimeRequestBuilder), true)]
    public partial interface IMicrosoftGraphIdentityGovernanceSummaryWithStartDateTimeWithEndDateTimeRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.Tasks
{
    [Proxy(typeof(TasksRequestBuilder), true)]
    public partial interface ITasksRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.Tasks.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.Tasks.Item
{
    [Proxy(typeof(TaskItemRequestBuilder), true)]
    public partial interface ITaskItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.Tasks.Item.TaskProcessingResults
{
    [Proxy(typeof(TaskProcessingResultsRequestBuilder), true)]
    public partial interface ITaskProcessingResultsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.Tasks.Item.TaskProcessingResults.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.Tasks.Item.TaskProcessingResults.Item
{
    [Proxy(typeof(TaskProcessingResultItemRequestBuilder), true)]
    public partial interface ITaskProcessingResultItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.Tasks.Item.TaskProcessingResults.Item.MicrosoftGraphIdentityGovernanceResume
{
    [Proxy(typeof(MicrosoftGraphIdentityGovernanceResumeRequestBuilder), true)]
    public partial interface IMicrosoftGraphIdentityGovernanceResumeRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.Tasks.Item.TaskProcessingResults.Item.Subject
{
    [Proxy(typeof(SubjectRequestBuilder), true)]
    public partial interface ISubjectRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.Tasks.Item.TaskProcessingResults.Item.Subject.MailboxSettings
{
    [Proxy(typeof(MailboxSettingsRequestBuilder), true)]
    public partial interface IMailboxSettingsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.Tasks.Item.TaskProcessingResults.Item.Subject.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.Tasks.Item.TaskProcessingResults.Item.Subject.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.Tasks.Item.TaskProcessingResults.Item.TaskNamespace
{
    [Proxy(typeof(TaskRequestBuilder), true)]
    public partial interface ITaskRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.UserProcessingResults
{
    [Proxy(typeof(UserProcessingResultsRequestBuilder), true)]
    public partial interface IUserProcessingResultsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.UserProcessingResults.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.UserProcessingResults.Item
{
    [Proxy(typeof(UserProcessingResultItemRequestBuilder), true)]
    public partial interface IUserProcessingResultItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.UserProcessingResults.Item.Subject
{
    [Proxy(typeof(SubjectRequestBuilder), true)]
    public partial interface ISubjectRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.UserProcessingResults.Item.Subject.MailboxSettings
{
    [Proxy(typeof(MailboxSettingsRequestBuilder), true)]
    public partial interface IMailboxSettingsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.UserProcessingResults.Item.Subject.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.UserProcessingResults.Item.Subject.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.UserProcessingResults.Item.TaskProcessingResults
{
    [Proxy(typeof(TaskProcessingResultsRequestBuilder), true)]
    public partial interface ITaskProcessingResultsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.UserProcessingResults.Item.TaskProcessingResults.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.UserProcessingResults.Item.TaskProcessingResults.Item
{
    [Proxy(typeof(TaskProcessingResultItemRequestBuilder), true)]
    public partial interface ITaskProcessingResultItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.UserProcessingResults.Item.TaskProcessingResults.Item.MicrosoftGraphIdentityGovernanceResume
{
    [Proxy(typeof(MicrosoftGraphIdentityGovernanceResumeRequestBuilder), true)]
    public partial interface IMicrosoftGraphIdentityGovernanceResumeRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.UserProcessingResults.Item.TaskProcessingResults.Item.Subject
{
    [Proxy(typeof(SubjectRequestBuilder), true)]
    public partial interface ISubjectRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.UserProcessingResults.Item.TaskProcessingResults.Item.Subject.MailboxSettings
{
    [Proxy(typeof(MailboxSettingsRequestBuilder), true)]
    public partial interface IMailboxSettingsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.UserProcessingResults.Item.TaskProcessingResults.Item.Subject.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.UserProcessingResults.Item.TaskProcessingResults.Item.Subject.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.UserProcessingResults.Item.TaskProcessingResults.Item.TaskNamespace
{
    [Proxy(typeof(TaskRequestBuilder), true)]
    public partial interface ITaskRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.UserProcessingResults.MicrosoftGraphIdentityGovernanceSummaryWithStartDateTimeWithEndDateTime
{
    [Proxy(typeof(MicrosoftGraphIdentityGovernanceSummaryWithStartDateTimeWithEndDateTimeRequestBuilder), true)]
    public partial interface IMicrosoftGraphIdentityGovernanceSummaryWithStartDateTimeWithEndDateTimeRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.Versions
{
    [Proxy(typeof(VersionsRequestBuilder), true)]
    public partial interface IVersionsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.Versions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.Versions.Item
{
    [Proxy(typeof(WorkflowVersionVersionNumberItemRequestBuilder), true)]
    public partial interface IWorkflowVersionVersionNumberItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.Versions.Item.CreatedBy
{
    [Proxy(typeof(CreatedByRequestBuilder), true)]
    public partial interface ICreatedByRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.Versions.Item.CreatedBy.MailboxSettings
{
    [Proxy(typeof(MailboxSettingsRequestBuilder), true)]
    public partial interface IMailboxSettingsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.Versions.Item.CreatedBy.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.Versions.Item.CreatedBy.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.Versions.Item.LastModifiedBy
{
    [Proxy(typeof(LastModifiedByRequestBuilder), true)]
    public partial interface ILastModifiedByRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.Versions.Item.LastModifiedBy.MailboxSettings
{
    [Proxy(typeof(MailboxSettingsRequestBuilder), true)]
    public partial interface IMailboxSettingsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.Versions.Item.LastModifiedBy.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.Versions.Item.LastModifiedBy.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.Versions.Item.Tasks
{
    [Proxy(typeof(TasksRequestBuilder), true)]
    public partial interface ITasksRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.Versions.Item.Tasks.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.Versions.Item.Tasks.Item
{
    [Proxy(typeof(TaskItemRequestBuilder), true)]
    public partial interface ITaskItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.Versions.Item.Tasks.Item.TaskProcessingResults
{
    [Proxy(typeof(TaskProcessingResultsRequestBuilder), true)]
    public partial interface ITaskProcessingResultsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.Versions.Item.Tasks.Item.TaskProcessingResults.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.Versions.Item.Tasks.Item.TaskProcessingResults.Item
{
    [Proxy(typeof(TaskProcessingResultItemRequestBuilder), true)]
    public partial interface ITaskProcessingResultItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.Versions.Item.Tasks.Item.TaskProcessingResults.Item.MicrosoftGraphIdentityGovernanceResume
{
    [Proxy(typeof(MicrosoftGraphIdentityGovernanceResumeRequestBuilder), true)]
    public partial interface IMicrosoftGraphIdentityGovernanceResumeRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.Versions.Item.Tasks.Item.TaskProcessingResults.Item.Subject
{
    [Proxy(typeof(SubjectRequestBuilder), true)]
    public partial interface ISubjectRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.Versions.Item.Tasks.Item.TaskProcessingResults.Item.Subject.MailboxSettings
{
    [Proxy(typeof(MailboxSettingsRequestBuilder), true)]
    public partial interface IMailboxSettingsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.Versions.Item.Tasks.Item.TaskProcessingResults.Item.Subject.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.Versions.Item.Tasks.Item.TaskProcessingResults.Item.Subject.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.DeletedItems.Workflows.Item.Versions.Item.Tasks.Item.TaskProcessingResults.Item.TaskNamespace
{
    [Proxy(typeof(TaskRequestBuilder), true)]
    public partial interface ITaskRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Insights
{
    [Proxy(typeof(InsightsRequestBuilder), true)]
    public partial interface IInsightsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Insights.MicrosoftGraphIdentityGovernanceTopTasksProcessedSummaryWithStartDateTimeWithEndDateTime
{
    [Proxy(typeof(MicrosoftGraphIdentityGovernanceTopTasksProcessedSummaryWithStartDateTimeWithEndDateTimeRequestBuilder), true)]
    public partial interface IMicrosoftGraphIdentityGovernanceTopTasksProcessedSummaryWithStartDateTimeWithEndDateTimeRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Insights.MicrosoftGraphIdentityGovernanceTopWorkflowsProcessedSummaryWithStartDateTimeWithEndDateTime
{
    [Proxy(typeof(MicrosoftGraphIdentityGovernanceTopWorkflowsProcessedSummaryWithStartDateTimeWithEndDateTimeRequestBuilder), true)]
    public partial interface IMicrosoftGraphIdentityGovernanceTopWorkflowsProcessedSummaryWithStartDateTimeWithEndDateTimeRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Insights.MicrosoftGraphIdentityGovernanceWorkflowsProcessedByCategoryWithStartDateTimeWithEndDateTime
{
    [Proxy(typeof(MicrosoftGraphIdentityGovernanceWorkflowsProcessedByCategoryWithStartDateTimeWithEndDateTimeRequestBuilder), true)]
    public partial interface IMicrosoftGraphIdentityGovernanceWorkflowsProcessedByCategoryWithStartDateTimeWithEndDateTimeRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Insights.MicrosoftGraphIdentityGovernanceWorkflowsProcessedSummaryWithStartDateTimeWithEndDateTime
{
    [Proxy(typeof(MicrosoftGraphIdentityGovernanceWorkflowsProcessedSummaryWithStartDateTimeWithEndDateTimeRequestBuilder), true)]
    public partial interface IMicrosoftGraphIdentityGovernanceWorkflowsProcessedSummaryWithStartDateTimeWithEndDateTimeRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Settings
{
    [Proxy(typeof(SettingsRequestBuilder), true)]
    public partial interface ISettingsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.TaskDefinitions
{
    [Proxy(typeof(TaskDefinitionsRequestBuilder), true)]
    public partial interface ITaskDefinitionsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.TaskDefinitions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.TaskDefinitions.Item
{
    [Proxy(typeof(TaskDefinitionItemRequestBuilder), true)]
    public partial interface ITaskDefinitionItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows
{
    [Proxy(typeof(WorkflowsRequestBuilder), true)]
    public partial interface IWorkflowsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item
{
    [Proxy(typeof(WorkflowItemRequestBuilder), true)]
    public partial interface IWorkflowItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.CreatedBy
{
    [Proxy(typeof(CreatedByRequestBuilder), true)]
    public partial interface ICreatedByRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.CreatedBy.MailboxSettings
{
    [Proxy(typeof(MailboxSettingsRequestBuilder), true)]
    public partial interface IMailboxSettingsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.CreatedBy.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.CreatedBy.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.ExecutionScope
{
    [Proxy(typeof(ExecutionScopeRequestBuilder), true)]
    public partial interface IExecutionScopeRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.ExecutionScope.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.ExecutionScope.Item
{
    [Proxy(typeof(UserProcessingResultItemRequestBuilder), true)]
    public partial interface IUserProcessingResultItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.LastModifiedBy
{
    [Proxy(typeof(LastModifiedByRequestBuilder), true)]
    public partial interface ILastModifiedByRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.LastModifiedBy.MailboxSettings
{
    [Proxy(typeof(MailboxSettingsRequestBuilder), true)]
    public partial interface IMailboxSettingsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.LastModifiedBy.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.LastModifiedBy.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.MicrosoftGraphIdentityGovernanceActivate
{
    [Proxy(typeof(MicrosoftGraphIdentityGovernanceActivateRequestBuilder), true)]
    public partial interface IMicrosoftGraphIdentityGovernanceActivateRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.MicrosoftGraphIdentityGovernanceCreateNewVersion
{
    [Proxy(typeof(MicrosoftGraphIdentityGovernanceCreateNewVersionRequestBuilder), true)]
    public partial interface IMicrosoftGraphIdentityGovernanceCreateNewVersionRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.MicrosoftGraphIdentityGovernanceRestore
{
    [Proxy(typeof(MicrosoftGraphIdentityGovernanceRestoreRequestBuilder), true)]
    public partial interface IMicrosoftGraphIdentityGovernanceRestoreRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.Runs
{
    [Proxy(typeof(RunsRequestBuilder), true)]
    public partial interface IRunsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.Runs.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.Runs.Item
{
    [Proxy(typeof(RunItemRequestBuilder), true)]
    public partial interface IRunItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.Runs.Item.TaskProcessingResults
{
    [Proxy(typeof(TaskProcessingResultsRequestBuilder), true)]
    public partial interface ITaskProcessingResultsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.Runs.Item.TaskProcessingResults.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.Runs.Item.TaskProcessingResults.Item
{
    [Proxy(typeof(TaskProcessingResultItemRequestBuilder), true)]
    public partial interface ITaskProcessingResultItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.Runs.Item.TaskProcessingResults.Item.MicrosoftGraphIdentityGovernanceResume
{
    [Proxy(typeof(MicrosoftGraphIdentityGovernanceResumeRequestBuilder), true)]
    public partial interface IMicrosoftGraphIdentityGovernanceResumeRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.Runs.Item.TaskProcessingResults.Item.Subject
{
    [Proxy(typeof(SubjectRequestBuilder), true)]
    public partial interface ISubjectRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.Runs.Item.TaskProcessingResults.Item.Subject.MailboxSettings
{
    [Proxy(typeof(MailboxSettingsRequestBuilder), true)]
    public partial interface IMailboxSettingsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.Runs.Item.TaskProcessingResults.Item.Subject.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.Runs.Item.TaskProcessingResults.Item.Subject.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.Runs.Item.TaskProcessingResults.Item.TaskNamespace
{
    [Proxy(typeof(TaskRequestBuilder), true)]
    public partial interface ITaskRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.Runs.Item.UserProcessingResults
{
    [Proxy(typeof(UserProcessingResultsRequestBuilder), true)]
    public partial interface IUserProcessingResultsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.Runs.Item.UserProcessingResults.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.Runs.Item.UserProcessingResults.Item
{
    [Proxy(typeof(UserProcessingResultItemRequestBuilder), true)]
    public partial interface IUserProcessingResultItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.Runs.Item.UserProcessingResults.Item.Subject
{
    [Proxy(typeof(SubjectRequestBuilder), true)]
    public partial interface ISubjectRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.Runs.Item.UserProcessingResults.Item.Subject.MailboxSettings
{
    [Proxy(typeof(MailboxSettingsRequestBuilder), true)]
    public partial interface IMailboxSettingsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.Runs.Item.UserProcessingResults.Item.Subject.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.Runs.Item.UserProcessingResults.Item.Subject.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.Runs.Item.UserProcessingResults.Item.TaskProcessingResults
{
    [Proxy(typeof(TaskProcessingResultsRequestBuilder), true)]
    public partial interface ITaskProcessingResultsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.Runs.Item.UserProcessingResults.Item.TaskProcessingResults.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.Runs.Item.UserProcessingResults.Item.TaskProcessingResults.Item
{
    [Proxy(typeof(TaskProcessingResultItemRequestBuilder), true)]
    public partial interface ITaskProcessingResultItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.Runs.Item.UserProcessingResults.Item.TaskProcessingResults.Item.MicrosoftGraphIdentityGovernanceResume
{
    [Proxy(typeof(MicrosoftGraphIdentityGovernanceResumeRequestBuilder), true)]
    public partial interface IMicrosoftGraphIdentityGovernanceResumeRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.Runs.Item.UserProcessingResults.Item.TaskProcessingResults.Item.Subject
{
    [Proxy(typeof(SubjectRequestBuilder), true)]
    public partial interface ISubjectRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.Runs.Item.UserProcessingResults.Item.TaskProcessingResults.Item.Subject.MailboxSettings
{
    [Proxy(typeof(MailboxSettingsRequestBuilder), true)]
    public partial interface IMailboxSettingsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.Runs.Item.UserProcessingResults.Item.TaskProcessingResults.Item.Subject.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.Runs.Item.UserProcessingResults.Item.TaskProcessingResults.Item.Subject.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.Runs.Item.UserProcessingResults.Item.TaskProcessingResults.Item.TaskNamespace
{
    [Proxy(typeof(TaskRequestBuilder), true)]
    public partial interface ITaskRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.Runs.Item.UserProcessingResults.MicrosoftGraphIdentityGovernanceSummaryWithStartDateTimeWithEndDateTime
{
    [Proxy(typeof(MicrosoftGraphIdentityGovernanceSummaryWithStartDateTimeWithEndDateTimeRequestBuilder), true)]
    public partial interface IMicrosoftGraphIdentityGovernanceSummaryWithStartDateTimeWithEndDateTimeRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.Runs.MicrosoftGraphIdentityGovernanceSummaryWithStartDateTimeWithEndDateTime
{
    [Proxy(typeof(MicrosoftGraphIdentityGovernanceSummaryWithStartDateTimeWithEndDateTimeRequestBuilder), true)]
    public partial interface IMicrosoftGraphIdentityGovernanceSummaryWithStartDateTimeWithEndDateTimeRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.TaskReports
{
    [Proxy(typeof(TaskReportsRequestBuilder), true)]
    public partial interface ITaskReportsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.TaskReports.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.TaskReports.Item
{
    [Proxy(typeof(TaskReportItemRequestBuilder), true)]
    public partial interface ITaskReportItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.TaskReports.Item.TaskDefinition
{
    [Proxy(typeof(TaskDefinitionRequestBuilder), true)]
    public partial interface ITaskDefinitionRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.TaskReports.Item.TaskNamespace
{
    [Proxy(typeof(TaskRequestBuilder), true)]
    public partial interface ITaskRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.TaskReports.Item.TaskProcessingResults
{
    [Proxy(typeof(TaskProcessingResultsRequestBuilder), true)]
    public partial interface ITaskProcessingResultsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.TaskReports.Item.TaskProcessingResults.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.TaskReports.Item.TaskProcessingResults.Item
{
    [Proxy(typeof(TaskProcessingResultItemRequestBuilder), true)]
    public partial interface ITaskProcessingResultItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.TaskReports.Item.TaskProcessingResults.Item.MicrosoftGraphIdentityGovernanceResume
{
    [Proxy(typeof(MicrosoftGraphIdentityGovernanceResumeRequestBuilder), true)]
    public partial interface IMicrosoftGraphIdentityGovernanceResumeRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.TaskReports.Item.TaskProcessingResults.Item.Subject
{
    [Proxy(typeof(SubjectRequestBuilder), true)]
    public partial interface ISubjectRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.TaskReports.Item.TaskProcessingResults.Item.Subject.MailboxSettings
{
    [Proxy(typeof(MailboxSettingsRequestBuilder), true)]
    public partial interface IMailboxSettingsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.TaskReports.Item.TaskProcessingResults.Item.Subject.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.TaskReports.Item.TaskProcessingResults.Item.Subject.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.TaskReports.Item.TaskProcessingResults.Item.TaskNamespace
{
    [Proxy(typeof(TaskRequestBuilder), true)]
    public partial interface ITaskRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.TaskReports.MicrosoftGraphIdentityGovernanceSummaryWithStartDateTimeWithEndDateTime
{
    [Proxy(typeof(MicrosoftGraphIdentityGovernanceSummaryWithStartDateTimeWithEndDateTimeRequestBuilder), true)]
    public partial interface IMicrosoftGraphIdentityGovernanceSummaryWithStartDateTimeWithEndDateTimeRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.Tasks
{
    [Proxy(typeof(TasksRequestBuilder), true)]
    public partial interface ITasksRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.Tasks.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.Tasks.Item
{
    [Proxy(typeof(TaskItemRequestBuilder), true)]
    public partial interface ITaskItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.Tasks.Item.TaskProcessingResults
{
    [Proxy(typeof(TaskProcessingResultsRequestBuilder), true)]
    public partial interface ITaskProcessingResultsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.Tasks.Item.TaskProcessingResults.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.Tasks.Item.TaskProcessingResults.Item
{
    [Proxy(typeof(TaskProcessingResultItemRequestBuilder), true)]
    public partial interface ITaskProcessingResultItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.Tasks.Item.TaskProcessingResults.Item.MicrosoftGraphIdentityGovernanceResume
{
    [Proxy(typeof(MicrosoftGraphIdentityGovernanceResumeRequestBuilder), true)]
    public partial interface IMicrosoftGraphIdentityGovernanceResumeRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.Tasks.Item.TaskProcessingResults.Item.Subject
{
    [Proxy(typeof(SubjectRequestBuilder), true)]
    public partial interface ISubjectRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.Tasks.Item.TaskProcessingResults.Item.Subject.MailboxSettings
{
    [Proxy(typeof(MailboxSettingsRequestBuilder), true)]
    public partial interface IMailboxSettingsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.Tasks.Item.TaskProcessingResults.Item.Subject.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.Tasks.Item.TaskProcessingResults.Item.Subject.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.Tasks.Item.TaskProcessingResults.Item.TaskNamespace
{
    [Proxy(typeof(TaskRequestBuilder), true)]
    public partial interface ITaskRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.UserProcessingResults
{
    [Proxy(typeof(UserProcessingResultsRequestBuilder), true)]
    public partial interface IUserProcessingResultsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.UserProcessingResults.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.UserProcessingResults.Item
{
    [Proxy(typeof(UserProcessingResultItemRequestBuilder), true)]
    public partial interface IUserProcessingResultItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.UserProcessingResults.Item.Subject
{
    [Proxy(typeof(SubjectRequestBuilder), true)]
    public partial interface ISubjectRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.UserProcessingResults.Item.Subject.MailboxSettings
{
    [Proxy(typeof(MailboxSettingsRequestBuilder), true)]
    public partial interface IMailboxSettingsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.UserProcessingResults.Item.Subject.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.UserProcessingResults.Item.Subject.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.UserProcessingResults.Item.TaskProcessingResults
{
    [Proxy(typeof(TaskProcessingResultsRequestBuilder), true)]
    public partial interface ITaskProcessingResultsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.UserProcessingResults.Item.TaskProcessingResults.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.UserProcessingResults.Item.TaskProcessingResults.Item
{
    [Proxy(typeof(TaskProcessingResultItemRequestBuilder), true)]
    public partial interface ITaskProcessingResultItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.UserProcessingResults.Item.TaskProcessingResults.Item.MicrosoftGraphIdentityGovernanceResume
{
    [Proxy(typeof(MicrosoftGraphIdentityGovernanceResumeRequestBuilder), true)]
    public partial interface IMicrosoftGraphIdentityGovernanceResumeRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.UserProcessingResults.Item.TaskProcessingResults.Item.Subject
{
    [Proxy(typeof(SubjectRequestBuilder), true)]
    public partial interface ISubjectRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.UserProcessingResults.Item.TaskProcessingResults.Item.Subject.MailboxSettings
{
    [Proxy(typeof(MailboxSettingsRequestBuilder), true)]
    public partial interface IMailboxSettingsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.UserProcessingResults.Item.TaskProcessingResults.Item.Subject.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.UserProcessingResults.Item.TaskProcessingResults.Item.Subject.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.UserProcessingResults.Item.TaskProcessingResults.Item.TaskNamespace
{
    [Proxy(typeof(TaskRequestBuilder), true)]
    public partial interface ITaskRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.UserProcessingResults.MicrosoftGraphIdentityGovernanceSummaryWithStartDateTimeWithEndDateTime
{
    [Proxy(typeof(MicrosoftGraphIdentityGovernanceSummaryWithStartDateTimeWithEndDateTimeRequestBuilder), true)]
    public partial interface IMicrosoftGraphIdentityGovernanceSummaryWithStartDateTimeWithEndDateTimeRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.Versions
{
    [Proxy(typeof(VersionsRequestBuilder), true)]
    public partial interface IVersionsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.Versions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.Versions.Item
{
    [Proxy(typeof(WorkflowVersionVersionNumberItemRequestBuilder), true)]
    public partial interface IWorkflowVersionVersionNumberItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.Versions.Item.CreatedBy
{
    [Proxy(typeof(CreatedByRequestBuilder), true)]
    public partial interface ICreatedByRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.Versions.Item.CreatedBy.MailboxSettings
{
    [Proxy(typeof(MailboxSettingsRequestBuilder), true)]
    public partial interface IMailboxSettingsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.Versions.Item.CreatedBy.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.Versions.Item.CreatedBy.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.Versions.Item.LastModifiedBy
{
    [Proxy(typeof(LastModifiedByRequestBuilder), true)]
    public partial interface ILastModifiedByRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.Versions.Item.LastModifiedBy.MailboxSettings
{
    [Proxy(typeof(MailboxSettingsRequestBuilder), true)]
    public partial interface IMailboxSettingsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.Versions.Item.LastModifiedBy.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.Versions.Item.LastModifiedBy.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.Versions.Item.Tasks
{
    [Proxy(typeof(TasksRequestBuilder), true)]
    public partial interface ITasksRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.Versions.Item.Tasks.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.Versions.Item.Tasks.Item
{
    [Proxy(typeof(TaskItemRequestBuilder), true)]
    public partial interface ITaskItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.Versions.Item.Tasks.Item.TaskProcessingResults
{
    [Proxy(typeof(TaskProcessingResultsRequestBuilder), true)]
    public partial interface ITaskProcessingResultsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.Versions.Item.Tasks.Item.TaskProcessingResults.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.Versions.Item.Tasks.Item.TaskProcessingResults.Item
{
    [Proxy(typeof(TaskProcessingResultItemRequestBuilder), true)]
    public partial interface ITaskProcessingResultItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.Versions.Item.Tasks.Item.TaskProcessingResults.Item.MicrosoftGraphIdentityGovernanceResume
{
    [Proxy(typeof(MicrosoftGraphIdentityGovernanceResumeRequestBuilder), true)]
    public partial interface IMicrosoftGraphIdentityGovernanceResumeRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.Versions.Item.Tasks.Item.TaskProcessingResults.Item.Subject
{
    [Proxy(typeof(SubjectRequestBuilder), true)]
    public partial interface ISubjectRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.Versions.Item.Tasks.Item.TaskProcessingResults.Item.Subject.MailboxSettings
{
    [Proxy(typeof(MailboxSettingsRequestBuilder), true)]
    public partial interface IMailboxSettingsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.Versions.Item.Tasks.Item.TaskProcessingResults.Item.Subject.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.Versions.Item.Tasks.Item.TaskProcessingResults.Item.Subject.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.Workflows.Item.Versions.Item.Tasks.Item.TaskProcessingResults.Item.TaskNamespace
{
    [Proxy(typeof(TaskRequestBuilder), true)]
    public partial interface ITaskRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.WorkflowTemplates
{
    [Proxy(typeof(WorkflowTemplatesRequestBuilder), true)]
    public partial interface IWorkflowTemplatesRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.WorkflowTemplates.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.WorkflowTemplates.Item
{
    [Proxy(typeof(WorkflowTemplateItemRequestBuilder), true)]
    public partial interface IWorkflowTemplateItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.WorkflowTemplates.Item.Tasks
{
    [Proxy(typeof(TasksRequestBuilder), true)]
    public partial interface ITasksRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.WorkflowTemplates.Item.Tasks.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.WorkflowTemplates.Item.Tasks.Item
{
    [Proxy(typeof(TaskItemRequestBuilder), true)]
    public partial interface ITaskItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.WorkflowTemplates.Item.Tasks.Item.TaskProcessingResults
{
    [Proxy(typeof(TaskProcessingResultsRequestBuilder), true)]
    public partial interface ITaskProcessingResultsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.WorkflowTemplates.Item.Tasks.Item.TaskProcessingResults.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.WorkflowTemplates.Item.Tasks.Item.TaskProcessingResults.Item
{
    [Proxy(typeof(TaskProcessingResultItemRequestBuilder), true)]
    public partial interface ITaskProcessingResultItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.WorkflowTemplates.Item.Tasks.Item.TaskProcessingResults.Item.MicrosoftGraphIdentityGovernanceResume
{
    [Proxy(typeof(MicrosoftGraphIdentityGovernanceResumeRequestBuilder), true)]
    public partial interface IMicrosoftGraphIdentityGovernanceResumeRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.WorkflowTemplates.Item.Tasks.Item.TaskProcessingResults.Item.Subject
{
    [Proxy(typeof(SubjectRequestBuilder), true)]
    public partial interface ISubjectRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.WorkflowTemplates.Item.Tasks.Item.TaskProcessingResults.Item.Subject.MailboxSettings
{
    [Proxy(typeof(MailboxSettingsRequestBuilder), true)]
    public partial interface IMailboxSettingsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.WorkflowTemplates.Item.Tasks.Item.TaskProcessingResults.Item.Subject.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.WorkflowTemplates.Item.Tasks.Item.TaskProcessingResults.Item.Subject.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.LifecycleWorkflows.WorkflowTemplates.Item.Tasks.Item.TaskProcessingResults.Item.TaskNamespace
{
    [Proxy(typeof(TaskRequestBuilder), true)]
    public partial interface ITaskRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.PrivilegedAccess
{
    [Proxy(typeof(PrivilegedAccessRequestBuilder), true)]
    public partial interface IPrivilegedAccessRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.PrivilegedAccess.Group
{
    [Proxy(typeof(GroupRequestBuilder), true)]
    public partial interface IGroupRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.PrivilegedAccess.Group.AssignmentApprovals
{
    [Proxy(typeof(AssignmentApprovalsRequestBuilder), true)]
    public partial interface IAssignmentApprovalsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.PrivilegedAccess.Group.AssignmentApprovals.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.PrivilegedAccess.Group.AssignmentApprovals.FilterByCurrentUserWithOn
{
    [Proxy(typeof(FilterByCurrentUserWithOnRequestBuilder), true)]
    public partial interface IFilterByCurrentUserWithOnRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.PrivilegedAccess.Group.AssignmentApprovals.Item
{
    [Proxy(typeof(ApprovalItemRequestBuilder), true)]
    public partial interface IApprovalItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.PrivilegedAccess.Group.AssignmentApprovals.Item.Stages
{
    [Proxy(typeof(StagesRequestBuilder), true)]
    public partial interface IStagesRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.PrivilegedAccess.Group.AssignmentApprovals.Item.Stages.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.PrivilegedAccess.Group.AssignmentApprovals.Item.Stages.Item
{
    [Proxy(typeof(ApprovalStageItemRequestBuilder), true)]
    public partial interface IApprovalStageItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.PrivilegedAccess.Group.AssignmentScheduleInstances
{
    [Proxy(typeof(AssignmentScheduleInstancesRequestBuilder), true)]
    public partial interface IAssignmentScheduleInstancesRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.PrivilegedAccess.Group.AssignmentScheduleInstances.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.PrivilegedAccess.Group.AssignmentScheduleInstances.FilterByCurrentUserWithOn
{
    [Proxy(typeof(FilterByCurrentUserWithOnRequestBuilder), true)]
    public partial interface IFilterByCurrentUserWithOnRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.PrivilegedAccess.Group.AssignmentScheduleInstances.Item
{
    [Proxy(typeof(PrivilegedAccessGroupAssignmentScheduleInstanceItemRequestBuilder), true)]
    public partial interface IPrivilegedAccessGroupAssignmentScheduleInstanceItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.PrivilegedAccess.Group.AssignmentScheduleInstances.Item.ActivatedUsing
{
    [Proxy(typeof(ActivatedUsingRequestBuilder), true)]
    public partial interface IActivatedUsingRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.PrivilegedAccess.Group.AssignmentScheduleInstances.Item.Group
{
    [Proxy(typeof(GroupRequestBuilder), true)]
    public partial interface IGroupRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.PrivilegedAccess.Group.AssignmentScheduleInstances.Item.Group.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.PrivilegedAccess.Group.AssignmentScheduleInstances.Item.Group.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.PrivilegedAccess.Group.AssignmentScheduleInstances.Item.Principal
{
    [Proxy(typeof(PrincipalRequestBuilder), true)]
    public partial interface IPrincipalRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.PrivilegedAccess.Group.AssignmentScheduleRequests
{
    [Proxy(typeof(AssignmentScheduleRequestsRequestBuilder), true)]
    public partial interface IAssignmentScheduleRequestsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.PrivilegedAccess.Group.AssignmentScheduleRequests.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.PrivilegedAccess.Group.AssignmentScheduleRequests.FilterByCurrentUserWithOn
{
    [Proxy(typeof(FilterByCurrentUserWithOnRequestBuilder), true)]
    public partial interface IFilterByCurrentUserWithOnRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.PrivilegedAccess.Group.AssignmentScheduleRequests.Item
{
    [Proxy(typeof(PrivilegedAccessGroupAssignmentScheduleRequestItemRequestBuilder), true)]
    public partial interface IPrivilegedAccessGroupAssignmentScheduleRequestItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.PrivilegedAccess.Group.AssignmentScheduleRequests.Item.ActivatedUsing
{
    [Proxy(typeof(ActivatedUsingRequestBuilder), true)]
    public partial interface IActivatedUsingRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.PrivilegedAccess.Group.AssignmentScheduleRequests.Item.Cancel
{
    [Proxy(typeof(CancelRequestBuilder), true)]
    public partial interface ICancelRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.PrivilegedAccess.Group.AssignmentScheduleRequests.Item.Group
{
    [Proxy(typeof(GroupRequestBuilder), true)]
    public partial interface IGroupRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.PrivilegedAccess.Group.AssignmentScheduleRequests.Item.Group.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.PrivilegedAccess.Group.AssignmentScheduleRequests.Item.Group.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.PrivilegedAccess.Group.AssignmentScheduleRequests.Item.Principal
{
    [Proxy(typeof(PrincipalRequestBuilder), true)]
    public partial interface IPrincipalRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.PrivilegedAccess.Group.AssignmentScheduleRequests.Item.TargetSchedule
{
    [Proxy(typeof(TargetScheduleRequestBuilder), true)]
    public partial interface ITargetScheduleRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.PrivilegedAccess.Group.AssignmentSchedules
{
    [Proxy(typeof(AssignmentSchedulesRequestBuilder), true)]
    public partial interface IAssignmentSchedulesRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.PrivilegedAccess.Group.AssignmentSchedules.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.PrivilegedAccess.Group.AssignmentSchedules.FilterByCurrentUserWithOn
{
    [Proxy(typeof(FilterByCurrentUserWithOnRequestBuilder), true)]
    public partial interface IFilterByCurrentUserWithOnRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.PrivilegedAccess.Group.AssignmentSchedules.Item
{
    [Proxy(typeof(PrivilegedAccessGroupAssignmentScheduleItemRequestBuilder), true)]
    public partial interface IPrivilegedAccessGroupAssignmentScheduleItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.PrivilegedAccess.Group.AssignmentSchedules.Item.ActivatedUsing
{
    [Proxy(typeof(ActivatedUsingRequestBuilder), true)]
    public partial interface IActivatedUsingRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.PrivilegedAccess.Group.AssignmentSchedules.Item.Group
{
    [Proxy(typeof(GroupRequestBuilder), true)]
    public partial interface IGroupRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.PrivilegedAccess.Group.AssignmentSchedules.Item.Group.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.PrivilegedAccess.Group.AssignmentSchedules.Item.Group.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.PrivilegedAccess.Group.AssignmentSchedules.Item.Principal
{
    [Proxy(typeof(PrincipalRequestBuilder), true)]
    public partial interface IPrincipalRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.PrivilegedAccess.Group.EligibilityScheduleInstances
{
    [Proxy(typeof(EligibilityScheduleInstancesRequestBuilder), true)]
    public partial interface IEligibilityScheduleInstancesRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.PrivilegedAccess.Group.EligibilityScheduleInstances.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.PrivilegedAccess.Group.EligibilityScheduleInstances.FilterByCurrentUserWithOn
{
    [Proxy(typeof(FilterByCurrentUserWithOnRequestBuilder), true)]
    public partial interface IFilterByCurrentUserWithOnRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.PrivilegedAccess.Group.EligibilityScheduleInstances.Item
{
    [Proxy(typeof(PrivilegedAccessGroupEligibilityScheduleInstanceItemRequestBuilder), true)]
    public partial interface IPrivilegedAccessGroupEligibilityScheduleInstanceItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.PrivilegedAccess.Group.EligibilityScheduleInstances.Item.Group
{
    [Proxy(typeof(GroupRequestBuilder), true)]
    public partial interface IGroupRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.PrivilegedAccess.Group.EligibilityScheduleInstances.Item.Group.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.PrivilegedAccess.Group.EligibilityScheduleInstances.Item.Group.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.PrivilegedAccess.Group.EligibilityScheduleInstances.Item.Principal
{
    [Proxy(typeof(PrincipalRequestBuilder), true)]
    public partial interface IPrincipalRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.PrivilegedAccess.Group.EligibilityScheduleRequests
{
    [Proxy(typeof(EligibilityScheduleRequestsRequestBuilder), true)]
    public partial interface IEligibilityScheduleRequestsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.PrivilegedAccess.Group.EligibilityScheduleRequests.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.PrivilegedAccess.Group.EligibilityScheduleRequests.FilterByCurrentUserWithOn
{
    [Proxy(typeof(FilterByCurrentUserWithOnRequestBuilder), true)]
    public partial interface IFilterByCurrentUserWithOnRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.PrivilegedAccess.Group.EligibilityScheduleRequests.Item
{
    [Proxy(typeof(PrivilegedAccessGroupEligibilityScheduleRequestItemRequestBuilder), true)]
    public partial interface IPrivilegedAccessGroupEligibilityScheduleRequestItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.PrivilegedAccess.Group.EligibilityScheduleRequests.Item.Cancel
{
    [Proxy(typeof(CancelRequestBuilder), true)]
    public partial interface ICancelRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.PrivilegedAccess.Group.EligibilityScheduleRequests.Item.Group
{
    [Proxy(typeof(GroupRequestBuilder), true)]
    public partial interface IGroupRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.PrivilegedAccess.Group.EligibilityScheduleRequests.Item.Group.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.PrivilegedAccess.Group.EligibilityScheduleRequests.Item.Group.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.PrivilegedAccess.Group.EligibilityScheduleRequests.Item.Principal
{
    [Proxy(typeof(PrincipalRequestBuilder), true)]
    public partial interface IPrincipalRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.PrivilegedAccess.Group.EligibilityScheduleRequests.Item.TargetSchedule
{
    [Proxy(typeof(TargetScheduleRequestBuilder), true)]
    public partial interface ITargetScheduleRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.PrivilegedAccess.Group.EligibilitySchedules
{
    [Proxy(typeof(EligibilitySchedulesRequestBuilder), true)]
    public partial interface IEligibilitySchedulesRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.PrivilegedAccess.Group.EligibilitySchedules.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.PrivilegedAccess.Group.EligibilitySchedules.FilterByCurrentUserWithOn
{
    [Proxy(typeof(FilterByCurrentUserWithOnRequestBuilder), true)]
    public partial interface IFilterByCurrentUserWithOnRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.PrivilegedAccess.Group.EligibilitySchedules.Item
{
    [Proxy(typeof(PrivilegedAccessGroupEligibilityScheduleItemRequestBuilder), true)]
    public partial interface IPrivilegedAccessGroupEligibilityScheduleItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.PrivilegedAccess.Group.EligibilitySchedules.Item.Group
{
    [Proxy(typeof(GroupRequestBuilder), true)]
    public partial interface IGroupRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.PrivilegedAccess.Group.EligibilitySchedules.Item.Group.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.PrivilegedAccess.Group.EligibilitySchedules.Item.Group.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.PrivilegedAccess.Group.EligibilitySchedules.Item.Principal
{
    [Proxy(typeof(PrincipalRequestBuilder), true)]
    public partial interface IPrincipalRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.TermsOfUse
{
    [Proxy(typeof(TermsOfUseRequestBuilder), true)]
    public partial interface ITermsOfUseRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.TermsOfUse.AgreementAcceptances
{
    [Proxy(typeof(AgreementAcceptancesRequestBuilder), true)]
    public partial interface IAgreementAcceptancesRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.TermsOfUse.AgreementAcceptances.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.TermsOfUse.AgreementAcceptances.Item
{
    [Proxy(typeof(AgreementAcceptanceItemRequestBuilder), true)]
    public partial interface IAgreementAcceptanceItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.TermsOfUse.Agreements
{
    [Proxy(typeof(AgreementsRequestBuilder), true)]
    public partial interface IAgreementsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.TermsOfUse.Agreements.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.TermsOfUse.Agreements.Item
{
    [Proxy(typeof(AgreementItemRequestBuilder), true)]
    public partial interface IAgreementItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.TermsOfUse.Agreements.Item.Acceptances
{
    [Proxy(typeof(AcceptancesRequestBuilder), true)]
    public partial interface IAcceptancesRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.TermsOfUse.Agreements.Item.Acceptances.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.TermsOfUse.Agreements.Item.Acceptances.Item
{
    [Proxy(typeof(AgreementAcceptanceItemRequestBuilder), true)]
    public partial interface IAgreementAcceptanceItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.TermsOfUse.Agreements.Item.FileNamespace
{
    [Proxy(typeof(FileRequestBuilder), true)]
    public partial interface IFileRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.TermsOfUse.Agreements.Item.FileNamespace.Localizations
{
    [Proxy(typeof(LocalizationsRequestBuilder), true)]
    public partial interface ILocalizationsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.TermsOfUse.Agreements.Item.FileNamespace.Localizations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.TermsOfUse.Agreements.Item.FileNamespace.Localizations.Item
{
    [Proxy(typeof(AgreementFileLocalizationItemRequestBuilder), true)]
    public partial interface IAgreementFileLocalizationItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.TermsOfUse.Agreements.Item.FileNamespace.Localizations.Item.Versions
{
    [Proxy(typeof(VersionsRequestBuilder), true)]
    public partial interface IVersionsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.TermsOfUse.Agreements.Item.FileNamespace.Localizations.Item.Versions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.TermsOfUse.Agreements.Item.FileNamespace.Localizations.Item.Versions.Item
{
    [Proxy(typeof(AgreementFileVersionItemRequestBuilder), true)]
    public partial interface IAgreementFileVersionItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.TermsOfUse.Agreements.Item.Files
{
    [Proxy(typeof(FilesRequestBuilder), true)]
    public partial interface IFilesRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.TermsOfUse.Agreements.Item.Files.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.TermsOfUse.Agreements.Item.Files.Item
{
    [Proxy(typeof(AgreementFileLocalizationItemRequestBuilder), true)]
    public partial interface IAgreementFileLocalizationItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.TermsOfUse.Agreements.Item.Files.Item.Versions
{
    [Proxy(typeof(VersionsRequestBuilder), true)]
    public partial interface IVersionsRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.TermsOfUse.Agreements.Item.Files.Item.Versions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityGovernance.TermsOfUse.Agreements.Item.Files.Item.Versions.Item
{
    [Proxy(typeof(AgreementFileVersionItemRequestBuilder), true)]
    public partial interface IAgreementFileVersionItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityProtection
{
    [Proxy(typeof(IdentityProtectionRequestBuilder), true)]
    public partial interface IIdentityProtectionRequestBuilder;
}

namespace Microsoft.Graph.IdentityProtection.RiskDetections
{
    [Proxy(typeof(RiskDetectionsRequestBuilder), true)]
    public partial interface IRiskDetectionsRequestBuilder;
}

namespace Microsoft.Graph.IdentityProtection.RiskDetections.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityProtection.RiskDetections.Item
{
    [Proxy(typeof(RiskDetectionItemRequestBuilder), true)]
    public partial interface IRiskDetectionItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityProtection.RiskyServicePrincipals
{
    [Proxy(typeof(RiskyServicePrincipalsRequestBuilder), true)]
    public partial interface IRiskyServicePrincipalsRequestBuilder;
}

namespace Microsoft.Graph.IdentityProtection.RiskyServicePrincipals.ConfirmCompromised
{
    [Proxy(typeof(ConfirmCompromisedRequestBuilder), true)]
    public partial interface IConfirmCompromisedRequestBuilder;
}

namespace Microsoft.Graph.IdentityProtection.RiskyServicePrincipals.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityProtection.RiskyServicePrincipals.Dismiss
{
    [Proxy(typeof(DismissRequestBuilder), true)]
    public partial interface IDismissRequestBuilder;
}

namespace Microsoft.Graph.IdentityProtection.RiskyServicePrincipals.Item
{
    [Proxy(typeof(RiskyServicePrincipalItemRequestBuilder), true)]
    public partial interface IRiskyServicePrincipalItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityProtection.RiskyServicePrincipals.Item.History
{
    [Proxy(typeof(HistoryRequestBuilder), true)]
    public partial interface IHistoryRequestBuilder;
}

namespace Microsoft.Graph.IdentityProtection.RiskyServicePrincipals.Item.History.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityProtection.RiskyServicePrincipals.Item.History.Item
{
    [Proxy(typeof(RiskyServicePrincipalHistoryItemItemRequestBuilder), true)]
    public partial interface IRiskyServicePrincipalHistoryItemItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityProtection.RiskyUsers
{
    [Proxy(typeof(RiskyUsersRequestBuilder), true)]
    public partial interface IRiskyUsersRequestBuilder;
}

namespace Microsoft.Graph.IdentityProtection.RiskyUsers.ConfirmCompromised
{
    [Proxy(typeof(ConfirmCompromisedRequestBuilder), true)]
    public partial interface IConfirmCompromisedRequestBuilder;
}

namespace Microsoft.Graph.IdentityProtection.RiskyUsers.ConfirmSafe
{
    [Proxy(typeof(ConfirmSafeRequestBuilder), true)]
    public partial interface IConfirmSafeRequestBuilder;
}

namespace Microsoft.Graph.IdentityProtection.RiskyUsers.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityProtection.RiskyUsers.Dismiss
{
    [Proxy(typeof(DismissRequestBuilder), true)]
    public partial interface IDismissRequestBuilder;
}

namespace Microsoft.Graph.IdentityProtection.RiskyUsers.Item
{
    [Proxy(typeof(RiskyUserItemRequestBuilder), true)]
    public partial interface IRiskyUserItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityProtection.RiskyUsers.Item.History
{
    [Proxy(typeof(HistoryRequestBuilder), true)]
    public partial interface IHistoryRequestBuilder;
}

namespace Microsoft.Graph.IdentityProtection.RiskyUsers.Item.History.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityProtection.RiskyUsers.Item.History.Item
{
    [Proxy(typeof(RiskyUserHistoryItemItemRequestBuilder), true)]
    public partial interface IRiskyUserHistoryItemItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityProtection.ServicePrincipalRiskDetections
{
    [Proxy(typeof(ServicePrincipalRiskDetectionsRequestBuilder), true)]
    public partial interface IServicePrincipalRiskDetectionsRequestBuilder;
}

namespace Microsoft.Graph.IdentityProtection.ServicePrincipalRiskDetections.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityProtection.ServicePrincipalRiskDetections.Item
{
    [Proxy(typeof(ServicePrincipalRiskDetectionItemRequestBuilder), true)]
    public partial interface IServicePrincipalRiskDetectionItemRequestBuilder;
}

namespace Microsoft.Graph.IdentityProviders
{
    [Proxy(typeof(IdentityProvidersRequestBuilder), true)]
    public partial interface IIdentityProvidersRequestBuilder;
}

namespace Microsoft.Graph.IdentityProviders.AvailableProviderTypes
{
    [Proxy(typeof(AvailableProviderTypesRequestBuilder), true)]
    public partial interface IAvailableProviderTypesRequestBuilder;
}

namespace Microsoft.Graph.IdentityProviders.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.IdentityProviders.Item
{
    [Proxy(typeof(IdentityProviderItemRequestBuilder), true)]
    public partial interface IIdentityProviderItemRequestBuilder;
}

namespace Microsoft.Graph.InformationProtection
{
    [Proxy(typeof(InformationProtectionRequestBuilder), true)]
    public partial interface IInformationProtectionRequestBuilder;
}

namespace Microsoft.Graph.InformationProtection.Bitlocker
{
    [Proxy(typeof(BitlockerRequestBuilder), true)]
    public partial interface IBitlockerRequestBuilder;
}

namespace Microsoft.Graph.InformationProtection.Bitlocker.RecoveryKeys
{
    [Proxy(typeof(RecoveryKeysRequestBuilder), true)]
    public partial interface IRecoveryKeysRequestBuilder;
}

namespace Microsoft.Graph.InformationProtection.Bitlocker.RecoveryKeys.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.InformationProtection.Bitlocker.RecoveryKeys.Item
{
    [Proxy(typeof(BitlockerRecoveryKeyItemRequestBuilder), true)]
    public partial interface IBitlockerRecoveryKeyItemRequestBuilder;
}

namespace Microsoft.Graph.InformationProtection.ThreatAssessmentRequests
{
    [Proxy(typeof(ThreatAssessmentRequestsRequestBuilder), true)]
    public partial interface IThreatAssessmentRequestsRequestBuilder;
}

namespace Microsoft.Graph.InformationProtection.ThreatAssessmentRequests.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.InformationProtection.ThreatAssessmentRequests.Item
{
    [Proxy(typeof(ThreatAssessmentRequestItemRequestBuilder), true)]
    public partial interface IThreatAssessmentRequestItemRequestBuilder;
}

namespace Microsoft.Graph.InformationProtection.ThreatAssessmentRequests.Item.Results
{
    [Proxy(typeof(ResultsRequestBuilder), true)]
    public partial interface IResultsRequestBuilder;
}

namespace Microsoft.Graph.InformationProtection.ThreatAssessmentRequests.Item.Results.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.InformationProtection.ThreatAssessmentRequests.Item.Results.Item
{
    [Proxy(typeof(ThreatAssessmentResultItemRequestBuilder), true)]
    public partial interface IThreatAssessmentResultItemRequestBuilder;
}

namespace Microsoft.Graph.Invitations
{
    [Proxy(typeof(InvitationsRequestBuilder), true)]
    public partial interface IInvitationsRequestBuilder;
}

namespace Microsoft.Graph.Invitations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Invitations.InvitedUser
{
    [Proxy(typeof(InvitedUserRequestBuilder), true)]
    public partial interface IInvitedUserRequestBuilder;
}

namespace Microsoft.Graph.Invitations.InvitedUser.MailboxSettings
{
    [Proxy(typeof(MailboxSettingsRequestBuilder), true)]
    public partial interface IMailboxSettingsRequestBuilder;
}

namespace Microsoft.Graph.Invitations.InvitedUser.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.Invitations.InvitedUser.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Invitations.InvitedUserSponsors
{
    [Proxy(typeof(InvitedUserSponsorsRequestBuilder), true)]
    public partial interface IInvitedUserSponsorsRequestBuilder;
}

namespace Microsoft.Graph.Invitations.InvitedUserSponsors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Invitations.InvitedUserSponsors.Item
{
    [Proxy(typeof(DirectoryObjectItemRequestBuilder), true)]
    public partial interface IDirectoryObjectItemRequestBuilder;
}

namespace Microsoft.Graph.Me
{
    [Proxy(typeof(MeRequestBuilder), true)]
    public partial interface IMeRequestBuilder;
}

namespace Microsoft.Graph.Me.Activities
{
    [Proxy(typeof(ActivitiesRequestBuilder), true)]
    public partial interface IActivitiesRequestBuilder;
}

namespace Microsoft.Graph.Me.Activities.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.Activities.Item
{
    [Proxy(typeof(UserActivityItemRequestBuilder), true)]
    public partial interface IUserActivityItemRequestBuilder;
}

namespace Microsoft.Graph.Me.Activities.Item.HistoryItems
{
    [Proxy(typeof(HistoryItemsRequestBuilder), true)]
    public partial interface IHistoryItemsRequestBuilder;
}

namespace Microsoft.Graph.Me.Activities.Item.HistoryItems.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.Activities.Item.HistoryItems.Item
{
    [Proxy(typeof(ActivityHistoryItemItemRequestBuilder), true)]
    public partial interface IActivityHistoryItemItemRequestBuilder;
}

namespace Microsoft.Graph.Me.Activities.Item.HistoryItems.Item.Activity
{
    [Proxy(typeof(ActivityRequestBuilder), true)]
    public partial interface IActivityRequestBuilder;
}

namespace Microsoft.Graph.Me.Activities.Recent
{
    [Proxy(typeof(RecentRequestBuilder), true)]
    public partial interface IRecentRequestBuilder;
}

namespace Microsoft.Graph.Me.AgreementAcceptances
{
    [Proxy(typeof(AgreementAcceptancesRequestBuilder), true)]
    public partial interface IAgreementAcceptancesRequestBuilder;
}

namespace Microsoft.Graph.Me.AgreementAcceptances.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.AgreementAcceptances.Item
{
    [Proxy(typeof(AgreementAcceptanceItemRequestBuilder), true)]
    public partial interface IAgreementAcceptanceItemRequestBuilder;
}

namespace Microsoft.Graph.Me.AppRoleAssignments
{
    [Proxy(typeof(AppRoleAssignmentsRequestBuilder), true)]
    public partial interface IAppRoleAssignmentsRequestBuilder;
}

namespace Microsoft.Graph.Me.AppRoleAssignments.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.AppRoleAssignments.Item
{
    [Proxy(typeof(AppRoleAssignmentItemRequestBuilder), true)]
    public partial interface IAppRoleAssignmentItemRequestBuilder;
}

namespace Microsoft.Graph.Me.AssignLicense
{
    [Proxy(typeof(AssignLicenseRequestBuilder), true)]
    public partial interface IAssignLicenseRequestBuilder;
}

namespace Microsoft.Graph.Me.Authentication
{
    [Proxy(typeof(AuthenticationRequestBuilder), true)]
    public partial interface IAuthenticationRequestBuilder;
}

namespace Microsoft.Graph.Me.Authentication.EmailMethods
{
    [Proxy(typeof(EmailMethodsRequestBuilder), true)]
    public partial interface IEmailMethodsRequestBuilder;
}

namespace Microsoft.Graph.Me.Authentication.EmailMethods.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.Authentication.EmailMethods.Item
{
    [Proxy(typeof(EmailAuthenticationMethodItemRequestBuilder), true)]
    public partial interface IEmailAuthenticationMethodItemRequestBuilder;
}

namespace Microsoft.Graph.Me.Authentication.Fido2Methods
{
    [Proxy(typeof(Fido2MethodsRequestBuilder), true)]
    public partial interface IFido2MethodsRequestBuilder;
}

namespace Microsoft.Graph.Me.Authentication.Fido2Methods.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.Authentication.Fido2Methods.Item
{
    [Proxy(typeof(Fido2AuthenticationMethodItemRequestBuilder), true)]
    public partial interface IFido2AuthenticationMethodItemRequestBuilder;
}

namespace Microsoft.Graph.Me.Authentication.Methods
{
    [Proxy(typeof(MethodsRequestBuilder), true)]
    public partial interface IMethodsRequestBuilder;
}

namespace Microsoft.Graph.Me.Authentication.Methods.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.Authentication.Methods.Item
{
    [Proxy(typeof(AuthenticationMethodItemRequestBuilder), true)]
    public partial interface IAuthenticationMethodItemRequestBuilder;
}

namespace Microsoft.Graph.Me.Authentication.Methods.Item.ResetPassword
{
    [Proxy(typeof(ResetPasswordRequestBuilder), true)]
    public partial interface IResetPasswordRequestBuilder;
}

namespace Microsoft.Graph.Me.Authentication.MicrosoftAuthenticatorMethods
{
    [Proxy(typeof(MicrosoftAuthenticatorMethodsRequestBuilder), true)]
    public partial interface IMicrosoftAuthenticatorMethodsRequestBuilder;
}

namespace Microsoft.Graph.Me.Authentication.MicrosoftAuthenticatorMethods.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.Authentication.MicrosoftAuthenticatorMethods.Item
{
    [Proxy(typeof(MicrosoftAuthenticatorAuthenticationMethodItemRequestBuilder), true)]
    public partial interface IMicrosoftAuthenticatorAuthenticationMethodItemRequestBuilder;
}

namespace Microsoft.Graph.Me.Authentication.MicrosoftAuthenticatorMethods.Item.Device
{
    [Proxy(typeof(DeviceRequestBuilder), true)]
    public partial interface IDeviceRequestBuilder;
}

namespace Microsoft.Graph.Me.Authentication.Operations
{
    [Proxy(typeof(OperationsRequestBuilder), true)]
    public partial interface IOperationsRequestBuilder;
}

namespace Microsoft.Graph.Me.Authentication.Operations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.Authentication.Operations.Item
{
    [Proxy(typeof(LongRunningOperationItemRequestBuilder), true)]
    public partial interface ILongRunningOperationItemRequestBuilder;
}

namespace Microsoft.Graph.Me.Authentication.PasswordMethods
{
    [Proxy(typeof(PasswordMethodsRequestBuilder), true)]
    public partial interface IPasswordMethodsRequestBuilder;
}

namespace Microsoft.Graph.Me.Authentication.PasswordMethods.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.Authentication.PasswordMethods.Item
{
    [Proxy(typeof(PasswordAuthenticationMethodItemRequestBuilder), true)]
    public partial interface IPasswordAuthenticationMethodItemRequestBuilder;
}

namespace Microsoft.Graph.Me.Authentication.PhoneMethods
{
    [Proxy(typeof(PhoneMethodsRequestBuilder), true)]
    public partial interface IPhoneMethodsRequestBuilder;
}

namespace Microsoft.Graph.Me.Authentication.PhoneMethods.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.Authentication.PhoneMethods.Item
{
    [Proxy(typeof(PhoneAuthenticationMethodItemRequestBuilder), true)]
    public partial interface IPhoneAuthenticationMethodItemRequestBuilder;
}

namespace Microsoft.Graph.Me.Authentication.PhoneMethods.Item.DisableSmsSignIn
{
    [Proxy(typeof(DisableSmsSignInRequestBuilder), true)]
    public partial interface IDisableSmsSignInRequestBuilder;
}

namespace Microsoft.Graph.Me.Authentication.PhoneMethods.Item.EnableSmsSignIn
{
    [Proxy(typeof(EnableSmsSignInRequestBuilder), true)]
    public partial interface IEnableSmsSignInRequestBuilder;
}

namespace Microsoft.Graph.Me.Authentication.PlatformCredentialMethods
{
    [Proxy(typeof(PlatformCredentialMethodsRequestBuilder), true)]
    public partial interface IPlatformCredentialMethodsRequestBuilder;
}

namespace Microsoft.Graph.Me.Authentication.PlatformCredentialMethods.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.Authentication.PlatformCredentialMethods.Item
{
    [Proxy(typeof(PlatformCredentialAuthenticationMethodItemRequestBuilder), true)]
    public partial interface IPlatformCredentialAuthenticationMethodItemRequestBuilder;
}

namespace Microsoft.Graph.Me.Authentication.PlatformCredentialMethods.Item.Device
{
    [Proxy(typeof(DeviceRequestBuilder), true)]
    public partial interface IDeviceRequestBuilder;
}

namespace Microsoft.Graph.Me.Authentication.SoftwareOathMethods
{
    [Proxy(typeof(SoftwareOathMethodsRequestBuilder), true)]
    public partial interface ISoftwareOathMethodsRequestBuilder;
}

namespace Microsoft.Graph.Me.Authentication.SoftwareOathMethods.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.Authentication.SoftwareOathMethods.Item
{
    [Proxy(typeof(SoftwareOathAuthenticationMethodItemRequestBuilder), true)]
    public partial interface ISoftwareOathAuthenticationMethodItemRequestBuilder;
}

namespace Microsoft.Graph.Me.Authentication.TemporaryAccessPassMethods
{
    [Proxy(typeof(TemporaryAccessPassMethodsRequestBuilder), true)]
    public partial interface ITemporaryAccessPassMethodsRequestBuilder;
}

namespace Microsoft.Graph.Me.Authentication.TemporaryAccessPassMethods.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.Authentication.TemporaryAccessPassMethods.Item
{
    [Proxy(typeof(TemporaryAccessPassAuthenticationMethodItemRequestBuilder), true)]
    public partial interface ITemporaryAccessPassAuthenticationMethodItemRequestBuilder;
}

namespace Microsoft.Graph.Me.Authentication.WindowsHelloForBusinessMethods
{
    [Proxy(typeof(WindowsHelloForBusinessMethodsRequestBuilder), true)]
    public partial interface IWindowsHelloForBusinessMethodsRequestBuilder;
}

namespace Microsoft.Graph.Me.Authentication.WindowsHelloForBusinessMethods.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.Authentication.WindowsHelloForBusinessMethods.Item
{
    [Proxy(typeof(WindowsHelloForBusinessAuthenticationMethodItemRequestBuilder), true)]
    public partial interface IWindowsHelloForBusinessAuthenticationMethodItemRequestBuilder;
}

namespace Microsoft.Graph.Me.Authentication.WindowsHelloForBusinessMethods.Item.Device
{
    [Proxy(typeof(DeviceRequestBuilder), true)]
    public partial interface IDeviceRequestBuilder;
}

namespace Microsoft.Graph.Me.Calendar
{
    [Proxy(typeof(CalendarRequestBuilder), true)]
    public partial interface ICalendarRequestBuilder;
}

namespace Microsoft.Graph.Me.Calendar.AllowedCalendarSharingRolesWithUser
{
    [Proxy(typeof(AllowedCalendarSharingRolesWithUserRequestBuilder), true)]
    public partial interface IAllowedCalendarSharingRolesWithUserRequestBuilder;
}

namespace Microsoft.Graph.Me.Calendar.CalendarPermissions
{
    [Proxy(typeof(CalendarPermissionsRequestBuilder), true)]
    public partial interface ICalendarPermissionsRequestBuilder;
}

namespace Microsoft.Graph.Me.Calendar.CalendarPermissions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.Calendar.CalendarPermissions.Item
{
    [Proxy(typeof(CalendarPermissionItemRequestBuilder), true)]
    public partial interface ICalendarPermissionItemRequestBuilder;
}

namespace Microsoft.Graph.Me.Calendar.CalendarView
{
    [Proxy(typeof(CalendarViewRequestBuilder), true)]
    public partial interface ICalendarViewRequestBuilder;
}

namespace Microsoft.Graph.Me.Calendar.CalendarView.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Me.Calendar.Events
{
    [Proxy(typeof(EventsRequestBuilder), true)]
    public partial interface IEventsRequestBuilder;
}

namespace Microsoft.Graph.Me.Calendar.Events.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.Calendar.Events.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Me.Calendar.Events.Item
{
    [Proxy(typeof(EventItemRequestBuilder), true)]
    public partial interface IEventItemRequestBuilder;
}

namespace Microsoft.Graph.Me.Calendar.Events.Item.Accept
{
    [Proxy(typeof(AcceptRequestBuilder), true)]
    public partial interface IAcceptRequestBuilder;
}

namespace Microsoft.Graph.Me.Calendar.Events.Item.Attachments
{
    [Proxy(typeof(AttachmentsRequestBuilder), true)]
    public partial interface IAttachmentsRequestBuilder;
}

namespace Microsoft.Graph.Me.Calendar.Events.Item.Attachments.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.Calendar.Events.Item.Attachments.CreateUploadSession
{
    [Proxy(typeof(CreateUploadSessionRequestBuilder), true)]
    public partial interface ICreateUploadSessionRequestBuilder;
}

namespace Microsoft.Graph.Me.Calendar.Events.Item.Attachments.Item
{
    [Proxy(typeof(AttachmentItemRequestBuilder), true)]
    public partial interface IAttachmentItemRequestBuilder;
}

namespace Microsoft.Graph.Me.Calendar.Events.Item.Calendar
{
    [Proxy(typeof(CalendarRequestBuilder), true)]
    public partial interface ICalendarRequestBuilder;
}

namespace Microsoft.Graph.Me.Calendar.Events.Item.Cancel
{
    [Proxy(typeof(CancelRequestBuilder), true)]
    public partial interface ICancelRequestBuilder;
}

namespace Microsoft.Graph.Me.Calendar.Events.Item.Decline
{
    [Proxy(typeof(DeclineRequestBuilder), true)]
    public partial interface IDeclineRequestBuilder;
}

namespace Microsoft.Graph.Me.Calendar.Events.Item.DismissReminder
{
    [Proxy(typeof(DismissReminderRequestBuilder), true)]
    public partial interface IDismissReminderRequestBuilder;
}

namespace Microsoft.Graph.Me.Calendar.Events.Item.Extensions
{
    [Proxy(typeof(ExtensionsRequestBuilder), true)]
    public partial interface IExtensionsRequestBuilder;
}

namespace Microsoft.Graph.Me.Calendar.Events.Item.Extensions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.Calendar.Events.Item.Extensions.Item
{
    [Proxy(typeof(ExtensionItemRequestBuilder), true)]
    public partial interface IExtensionItemRequestBuilder;
}

namespace Microsoft.Graph.Me.Calendar.Events.Item.Forward
{
    [Proxy(typeof(ForwardRequestBuilder), true)]
    public partial interface IForwardRequestBuilder;
}

namespace Microsoft.Graph.Me.Calendar.Events.Item.Instances
{
    [Proxy(typeof(InstancesRequestBuilder), true)]
    public partial interface IInstancesRequestBuilder;
}

namespace Microsoft.Graph.Me.Calendar.Events.Item.Instances.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Me.Calendar.Events.Item.PermanentDelete
{
    [Proxy(typeof(PermanentDeleteRequestBuilder), true)]
    public partial interface IPermanentDeleteRequestBuilder;
}

namespace Microsoft.Graph.Me.Calendar.Events.Item.SnoozeReminder
{
    [Proxy(typeof(SnoozeReminderRequestBuilder), true)]
    public partial interface ISnoozeReminderRequestBuilder;
}

namespace Microsoft.Graph.Me.Calendar.Events.Item.TentativelyAccept
{
    [Proxy(typeof(TentativelyAcceptRequestBuilder), true)]
    public partial interface ITentativelyAcceptRequestBuilder;
}

namespace Microsoft.Graph.Me.Calendar.GetSchedule
{
    [Proxy(typeof(GetScheduleRequestBuilder), true)]
    public partial interface IGetScheduleRequestBuilder;
}

namespace Microsoft.Graph.Me.Calendar.PermanentDelete
{
    [Proxy(typeof(PermanentDeleteRequestBuilder), true)]
    public partial interface IPermanentDeleteRequestBuilder;
}

namespace Microsoft.Graph.Me.CalendarGroups
{
    [Proxy(typeof(CalendarGroupsRequestBuilder), true)]
    public partial interface ICalendarGroupsRequestBuilder;
}

namespace Microsoft.Graph.Me.CalendarGroups.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.CalendarGroups.Item
{
    [Proxy(typeof(CalendarGroupItemRequestBuilder), true)]
    public partial interface ICalendarGroupItemRequestBuilder;
}

namespace Microsoft.Graph.Me.CalendarGroups.Item.Calendars
{
    [Proxy(typeof(CalendarsRequestBuilder), true)]
    public partial interface ICalendarsRequestBuilder;
}

namespace Microsoft.Graph.Me.CalendarGroups.Item.Calendars.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.CalendarGroups.Item.Calendars.Item
{
    [Proxy(typeof(CalendarItemRequestBuilder), true)]
    public partial interface ICalendarItemRequestBuilder;
}

namespace Microsoft.Graph.Me.CalendarGroups.Item.Calendars.Item.AllowedCalendarSharingRolesWithUser
{
    [Proxy(typeof(AllowedCalendarSharingRolesWithUserRequestBuilder), true)]
    public partial interface IAllowedCalendarSharingRolesWithUserRequestBuilder;
}

namespace Microsoft.Graph.Me.CalendarGroups.Item.Calendars.Item.CalendarPermissions
{
    [Proxy(typeof(CalendarPermissionsRequestBuilder), true)]
    public partial interface ICalendarPermissionsRequestBuilder;
}

namespace Microsoft.Graph.Me.CalendarGroups.Item.Calendars.Item.CalendarPermissions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.CalendarGroups.Item.Calendars.Item.CalendarPermissions.Item
{
    [Proxy(typeof(CalendarPermissionItemRequestBuilder), true)]
    public partial interface ICalendarPermissionItemRequestBuilder;
}

namespace Microsoft.Graph.Me.CalendarGroups.Item.Calendars.Item.CalendarView
{
    [Proxy(typeof(CalendarViewRequestBuilder), true)]
    public partial interface ICalendarViewRequestBuilder;
}

namespace Microsoft.Graph.Me.CalendarGroups.Item.Calendars.Item.CalendarView.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Me.CalendarGroups.Item.Calendars.Item.Events
{
    [Proxy(typeof(EventsRequestBuilder), true)]
    public partial interface IEventsRequestBuilder;
}

namespace Microsoft.Graph.Me.CalendarGroups.Item.Calendars.Item.Events.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.CalendarGroups.Item.Calendars.Item.Events.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Me.CalendarGroups.Item.Calendars.Item.Events.Item
{
    [Proxy(typeof(EventItemRequestBuilder), true)]
    public partial interface IEventItemRequestBuilder;
}

namespace Microsoft.Graph.Me.CalendarGroups.Item.Calendars.Item.Events.Item.Accept
{
    [Proxy(typeof(AcceptRequestBuilder), true)]
    public partial interface IAcceptRequestBuilder;
}

namespace Microsoft.Graph.Me.CalendarGroups.Item.Calendars.Item.Events.Item.Attachments
{
    [Proxy(typeof(AttachmentsRequestBuilder), true)]
    public partial interface IAttachmentsRequestBuilder;
}

namespace Microsoft.Graph.Me.CalendarGroups.Item.Calendars.Item.Events.Item.Attachments.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.CalendarGroups.Item.Calendars.Item.Events.Item.Attachments.CreateUploadSession
{
    [Proxy(typeof(CreateUploadSessionRequestBuilder), true)]
    public partial interface ICreateUploadSessionRequestBuilder;
}

namespace Microsoft.Graph.Me.CalendarGroups.Item.Calendars.Item.Events.Item.Attachments.Item
{
    [Proxy(typeof(AttachmentItemRequestBuilder), true)]
    public partial interface IAttachmentItemRequestBuilder;
}

namespace Microsoft.Graph.Me.CalendarGroups.Item.Calendars.Item.Events.Item.Calendar
{
    [Proxy(typeof(CalendarRequestBuilder), true)]
    public partial interface ICalendarRequestBuilder;
}

namespace Microsoft.Graph.Me.CalendarGroups.Item.Calendars.Item.Events.Item.Cancel
{
    [Proxy(typeof(CancelRequestBuilder), true)]
    public partial interface ICancelRequestBuilder;
}

namespace Microsoft.Graph.Me.CalendarGroups.Item.Calendars.Item.Events.Item.Decline
{
    [Proxy(typeof(DeclineRequestBuilder), true)]
    public partial interface IDeclineRequestBuilder;
}

namespace Microsoft.Graph.Me.CalendarGroups.Item.Calendars.Item.Events.Item.DismissReminder
{
    [Proxy(typeof(DismissReminderRequestBuilder), true)]
    public partial interface IDismissReminderRequestBuilder;
}

namespace Microsoft.Graph.Me.CalendarGroups.Item.Calendars.Item.Events.Item.Extensions
{
    [Proxy(typeof(ExtensionsRequestBuilder), true)]
    public partial interface IExtensionsRequestBuilder;
}

namespace Microsoft.Graph.Me.CalendarGroups.Item.Calendars.Item.Events.Item.Extensions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.CalendarGroups.Item.Calendars.Item.Events.Item.Extensions.Item
{
    [Proxy(typeof(ExtensionItemRequestBuilder), true)]
    public partial interface IExtensionItemRequestBuilder;
}

namespace Microsoft.Graph.Me.CalendarGroups.Item.Calendars.Item.Events.Item.Forward
{
    [Proxy(typeof(ForwardRequestBuilder), true)]
    public partial interface IForwardRequestBuilder;
}

namespace Microsoft.Graph.Me.CalendarGroups.Item.Calendars.Item.Events.Item.Instances
{
    [Proxy(typeof(InstancesRequestBuilder), true)]
    public partial interface IInstancesRequestBuilder;
}

namespace Microsoft.Graph.Me.CalendarGroups.Item.Calendars.Item.Events.Item.Instances.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Me.CalendarGroups.Item.Calendars.Item.Events.Item.PermanentDelete
{
    [Proxy(typeof(PermanentDeleteRequestBuilder), true)]
    public partial interface IPermanentDeleteRequestBuilder;
}

namespace Microsoft.Graph.Me.CalendarGroups.Item.Calendars.Item.Events.Item.SnoozeReminder
{
    [Proxy(typeof(SnoozeReminderRequestBuilder), true)]
    public partial interface ISnoozeReminderRequestBuilder;
}

namespace Microsoft.Graph.Me.CalendarGroups.Item.Calendars.Item.Events.Item.TentativelyAccept
{
    [Proxy(typeof(TentativelyAcceptRequestBuilder), true)]
    public partial interface ITentativelyAcceptRequestBuilder;
}

namespace Microsoft.Graph.Me.CalendarGroups.Item.Calendars.Item.GetSchedule
{
    [Proxy(typeof(GetScheduleRequestBuilder), true)]
    public partial interface IGetScheduleRequestBuilder;
}

namespace Microsoft.Graph.Me.CalendarGroups.Item.Calendars.Item.PermanentDelete
{
    [Proxy(typeof(PermanentDeleteRequestBuilder), true)]
    public partial interface IPermanentDeleteRequestBuilder;
}

namespace Microsoft.Graph.Me.Calendars
{
    [Proxy(typeof(CalendarsRequestBuilder), true)]
    public partial interface ICalendarsRequestBuilder;
}

namespace Microsoft.Graph.Me.Calendars.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.Calendars.Item
{
    [Proxy(typeof(CalendarItemRequestBuilder), true)]
    public partial interface ICalendarItemRequestBuilder;
}

namespace Microsoft.Graph.Me.Calendars.Item.AllowedCalendarSharingRolesWithUser
{
    [Proxy(typeof(AllowedCalendarSharingRolesWithUserRequestBuilder), true)]
    public partial interface IAllowedCalendarSharingRolesWithUserRequestBuilder;
}

namespace Microsoft.Graph.Me.Calendars.Item.CalendarPermissions
{
    [Proxy(typeof(CalendarPermissionsRequestBuilder), true)]
    public partial interface ICalendarPermissionsRequestBuilder;
}

namespace Microsoft.Graph.Me.Calendars.Item.CalendarPermissions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.Calendars.Item.CalendarPermissions.Item
{
    [Proxy(typeof(CalendarPermissionItemRequestBuilder), true)]
    public partial interface ICalendarPermissionItemRequestBuilder;
}

namespace Microsoft.Graph.Me.Calendars.Item.CalendarView
{
    [Proxy(typeof(CalendarViewRequestBuilder), true)]
    public partial interface ICalendarViewRequestBuilder;
}

namespace Microsoft.Graph.Me.Calendars.Item.CalendarView.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Me.Calendars.Item.Events
{
    [Proxy(typeof(EventsRequestBuilder), true)]
    public partial interface IEventsRequestBuilder;
}

namespace Microsoft.Graph.Me.Calendars.Item.Events.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.Calendars.Item.Events.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Me.Calendars.Item.Events.Item
{
    [Proxy(typeof(EventItemRequestBuilder), true)]
    public partial interface IEventItemRequestBuilder;
}

namespace Microsoft.Graph.Me.Calendars.Item.Events.Item.Accept
{
    [Proxy(typeof(AcceptRequestBuilder), true)]
    public partial interface IAcceptRequestBuilder;
}

namespace Microsoft.Graph.Me.Calendars.Item.Events.Item.Attachments
{
    [Proxy(typeof(AttachmentsRequestBuilder), true)]
    public partial interface IAttachmentsRequestBuilder;
}

namespace Microsoft.Graph.Me.Calendars.Item.Events.Item.Attachments.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.Calendars.Item.Events.Item.Attachments.CreateUploadSession
{
    [Proxy(typeof(CreateUploadSessionRequestBuilder), true)]
    public partial interface ICreateUploadSessionRequestBuilder;
}

namespace Microsoft.Graph.Me.Calendars.Item.Events.Item.Attachments.Item
{
    [Proxy(typeof(AttachmentItemRequestBuilder), true)]
    public partial interface IAttachmentItemRequestBuilder;
}

namespace Microsoft.Graph.Me.Calendars.Item.Events.Item.Calendar
{
    [Proxy(typeof(CalendarRequestBuilder), true)]
    public partial interface ICalendarRequestBuilder;
}

namespace Microsoft.Graph.Me.Calendars.Item.Events.Item.Cancel
{
    [Proxy(typeof(CancelRequestBuilder), true)]
    public partial interface ICancelRequestBuilder;
}

namespace Microsoft.Graph.Me.Calendars.Item.Events.Item.Decline
{
    [Proxy(typeof(DeclineRequestBuilder), true)]
    public partial interface IDeclineRequestBuilder;
}

namespace Microsoft.Graph.Me.Calendars.Item.Events.Item.DismissReminder
{
    [Proxy(typeof(DismissReminderRequestBuilder), true)]
    public partial interface IDismissReminderRequestBuilder;
}

namespace Microsoft.Graph.Me.Calendars.Item.Events.Item.Extensions
{
    [Proxy(typeof(ExtensionsRequestBuilder), true)]
    public partial interface IExtensionsRequestBuilder;
}

namespace Microsoft.Graph.Me.Calendars.Item.Events.Item.Extensions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.Calendars.Item.Events.Item.Extensions.Item
{
    [Proxy(typeof(ExtensionItemRequestBuilder), true)]
    public partial interface IExtensionItemRequestBuilder;
}

namespace Microsoft.Graph.Me.Calendars.Item.Events.Item.Forward
{
    [Proxy(typeof(ForwardRequestBuilder), true)]
    public partial interface IForwardRequestBuilder;
}

namespace Microsoft.Graph.Me.Calendars.Item.Events.Item.Instances
{
    [Proxy(typeof(InstancesRequestBuilder), true)]
    public partial interface IInstancesRequestBuilder;
}

namespace Microsoft.Graph.Me.Calendars.Item.Events.Item.Instances.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Me.Calendars.Item.Events.Item.PermanentDelete
{
    [Proxy(typeof(PermanentDeleteRequestBuilder), true)]
    public partial interface IPermanentDeleteRequestBuilder;
}

namespace Microsoft.Graph.Me.Calendars.Item.Events.Item.SnoozeReminder
{
    [Proxy(typeof(SnoozeReminderRequestBuilder), true)]
    public partial interface ISnoozeReminderRequestBuilder;
}

namespace Microsoft.Graph.Me.Calendars.Item.Events.Item.TentativelyAccept
{
    [Proxy(typeof(TentativelyAcceptRequestBuilder), true)]
    public partial interface ITentativelyAcceptRequestBuilder;
}

namespace Microsoft.Graph.Me.Calendars.Item.GetSchedule
{
    [Proxy(typeof(GetScheduleRequestBuilder), true)]
    public partial interface IGetScheduleRequestBuilder;
}

namespace Microsoft.Graph.Me.Calendars.Item.PermanentDelete
{
    [Proxy(typeof(PermanentDeleteRequestBuilder), true)]
    public partial interface IPermanentDeleteRequestBuilder;
}

namespace Microsoft.Graph.Me.CalendarView
{
    [Proxy(typeof(CalendarViewRequestBuilder), true)]
    public partial interface ICalendarViewRequestBuilder;
}

namespace Microsoft.Graph.Me.CalendarView.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Me.ChangePassword
{
    [Proxy(typeof(ChangePasswordRequestBuilder), true)]
    public partial interface IChangePasswordRequestBuilder;
}

namespace Microsoft.Graph.Me.Chats
{
    [Proxy(typeof(ChatsRequestBuilder), true)]
    public partial interface IChatsRequestBuilder;
}

namespace Microsoft.Graph.Me.Chats.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.Chats.GetAllMessages
{
    [Proxy(typeof(GetAllMessagesRequestBuilder), true)]
    public partial interface IGetAllMessagesRequestBuilder;
}

namespace Microsoft.Graph.Me.Chats.GetAllRetainedMessages
{
    [Proxy(typeof(GetAllRetainedMessagesRequestBuilder), true)]
    public partial interface IGetAllRetainedMessagesRequestBuilder;
}

namespace Microsoft.Graph.Me.Chats.Item
{
    [Proxy(typeof(ChatItemRequestBuilder), true)]
    public partial interface IChatItemRequestBuilder;
}

namespace Microsoft.Graph.Me.Chats.Item.HideForUser
{
    [Proxy(typeof(HideForUserRequestBuilder), true)]
    public partial interface IHideForUserRequestBuilder;
}

namespace Microsoft.Graph.Me.Chats.Item.InstalledApps
{
    [Proxy(typeof(InstalledAppsRequestBuilder), true)]
    public partial interface IInstalledAppsRequestBuilder;
}

namespace Microsoft.Graph.Me.Chats.Item.InstalledApps.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.Chats.Item.InstalledApps.Item
{
    [Proxy(typeof(TeamsAppInstallationItemRequestBuilder), true)]
    public partial interface ITeamsAppInstallationItemRequestBuilder;
}

namespace Microsoft.Graph.Me.Chats.Item.InstalledApps.Item.TeamsApp
{
    [Proxy(typeof(TeamsAppRequestBuilder), true)]
    public partial interface ITeamsAppRequestBuilder;
}

namespace Microsoft.Graph.Me.Chats.Item.InstalledApps.Item.TeamsAppDefinition
{
    [Proxy(typeof(TeamsAppDefinitionRequestBuilder), true)]
    public partial interface ITeamsAppDefinitionRequestBuilder;
}

namespace Microsoft.Graph.Me.Chats.Item.InstalledApps.Item.Upgrade
{
    [Proxy(typeof(UpgradeRequestBuilder), true)]
    public partial interface IUpgradeRequestBuilder;
}

namespace Microsoft.Graph.Me.Chats.Item.LastMessagePreview
{
    [Proxy(typeof(LastMessagePreviewRequestBuilder), true)]
    public partial interface ILastMessagePreviewRequestBuilder;
}

namespace Microsoft.Graph.Me.Chats.Item.MarkChatReadForUser
{
    [Proxy(typeof(MarkChatReadForUserRequestBuilder), true)]
    public partial interface IMarkChatReadForUserRequestBuilder;
}

namespace Microsoft.Graph.Me.Chats.Item.MarkChatUnreadForUser
{
    [Proxy(typeof(MarkChatUnreadForUserRequestBuilder), true)]
    public partial interface IMarkChatUnreadForUserRequestBuilder;
}

namespace Microsoft.Graph.Me.Chats.Item.Members
{
    [Proxy(typeof(MembersRequestBuilder), true)]
    public partial interface IMembersRequestBuilder;
}

namespace Microsoft.Graph.Me.Chats.Item.Members.Add
{
    [Proxy(typeof(AddRequestBuilder), true)]
    public partial interface IAddRequestBuilder;
}

namespace Microsoft.Graph.Me.Chats.Item.Members.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.Chats.Item.Members.Item
{
    [Proxy(typeof(ConversationMemberItemRequestBuilder), true)]
    public partial interface IConversationMemberItemRequestBuilder;
}

namespace Microsoft.Graph.Me.Chats.Item.Members.Remove
{
    [Proxy(typeof(RemoveRequestBuilder), true)]
    public partial interface IRemoveRequestBuilder;
}

namespace Microsoft.Graph.Me.Chats.Item.Messages
{
    [Proxy(typeof(MessagesRequestBuilder), true)]
    public partial interface IMessagesRequestBuilder;
}

namespace Microsoft.Graph.Me.Chats.Item.Messages.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.Chats.Item.Messages.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Me.Chats.Item.Messages.Item
{
    [Proxy(typeof(ChatMessageItemRequestBuilder), true)]
    public partial interface IChatMessageItemRequestBuilder;
}

namespace Microsoft.Graph.Me.Chats.Item.Messages.Item.HostedContents
{
    [Proxy(typeof(HostedContentsRequestBuilder), true)]
    public partial interface IHostedContentsRequestBuilder;
}

namespace Microsoft.Graph.Me.Chats.Item.Messages.Item.HostedContents.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.Chats.Item.Messages.Item.HostedContents.Item
{
    [Proxy(typeof(ChatMessageHostedContentItemRequestBuilder), true)]
    public partial interface IChatMessageHostedContentItemRequestBuilder;
}

namespace Microsoft.Graph.Me.Chats.Item.Messages.Item.HostedContents.Item.Value
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Me.Chats.Item.Messages.Item.Replies
{
    [Proxy(typeof(RepliesRequestBuilder), true)]
    public partial interface IRepliesRequestBuilder;
}

namespace Microsoft.Graph.Me.Chats.Item.Messages.Item.Replies.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.Chats.Item.Messages.Item.Replies.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Me.Chats.Item.Messages.Item.Replies.Item
{
    [Proxy(typeof(ChatMessageItemRequestBuilder), true)]
    public partial interface IChatMessageItemRequestBuilder;
}

namespace Microsoft.Graph.Me.Chats.Item.Messages.Item.Replies.Item.HostedContents
{
    [Proxy(typeof(HostedContentsRequestBuilder), true)]
    public partial interface IHostedContentsRequestBuilder;
}

namespace Microsoft.Graph.Me.Chats.Item.Messages.Item.Replies.Item.HostedContents.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.Chats.Item.Messages.Item.Replies.Item.HostedContents.Item
{
    [Proxy(typeof(ChatMessageHostedContentItemRequestBuilder), true)]
    public partial interface IChatMessageHostedContentItemRequestBuilder;
}

namespace Microsoft.Graph.Me.Chats.Item.Messages.Item.Replies.Item.HostedContents.Item.Value
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Me.Chats.Item.Messages.Item.Replies.Item.SetReaction
{
    [Proxy(typeof(SetReactionRequestBuilder), true)]
    public partial interface ISetReactionRequestBuilder;
}

namespace Microsoft.Graph.Me.Chats.Item.Messages.Item.Replies.Item.SoftDelete
{
    [Proxy(typeof(SoftDeleteRequestBuilder), true)]
    public partial interface ISoftDeleteRequestBuilder;
}

namespace Microsoft.Graph.Me.Chats.Item.Messages.Item.Replies.Item.UndoSoftDelete
{
    [Proxy(typeof(UndoSoftDeleteRequestBuilder), true)]
    public partial interface IUndoSoftDeleteRequestBuilder;
}

namespace Microsoft.Graph.Me.Chats.Item.Messages.Item.Replies.Item.UnsetReaction
{
    [Proxy(typeof(UnsetReactionRequestBuilder), true)]
    public partial interface IUnsetReactionRequestBuilder;
}

namespace Microsoft.Graph.Me.Chats.Item.Messages.Item.SetReaction
{
    [Proxy(typeof(SetReactionRequestBuilder), true)]
    public partial interface ISetReactionRequestBuilder;
}

namespace Microsoft.Graph.Me.Chats.Item.Messages.Item.SoftDelete
{
    [Proxy(typeof(SoftDeleteRequestBuilder), true)]
    public partial interface ISoftDeleteRequestBuilder;
}

namespace Microsoft.Graph.Me.Chats.Item.Messages.Item.UndoSoftDelete
{
    [Proxy(typeof(UndoSoftDeleteRequestBuilder), true)]
    public partial interface IUndoSoftDeleteRequestBuilder;
}

namespace Microsoft.Graph.Me.Chats.Item.Messages.Item.UnsetReaction
{
    [Proxy(typeof(UnsetReactionRequestBuilder), true)]
    public partial interface IUnsetReactionRequestBuilder;
}

namespace Microsoft.Graph.Me.Chats.Item.PermissionGrants
{
    [Proxy(typeof(PermissionGrantsRequestBuilder), true)]
    public partial interface IPermissionGrantsRequestBuilder;
}

namespace Microsoft.Graph.Me.Chats.Item.PermissionGrants.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.Chats.Item.PermissionGrants.Item
{
    [Proxy(typeof(ResourceSpecificPermissionGrantItemRequestBuilder), true)]
    public partial interface IResourceSpecificPermissionGrantItemRequestBuilder;
}

namespace Microsoft.Graph.Me.Chats.Item.PinnedMessages
{
    [Proxy(typeof(PinnedMessagesRequestBuilder), true)]
    public partial interface IPinnedMessagesRequestBuilder;
}

namespace Microsoft.Graph.Me.Chats.Item.PinnedMessages.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.Chats.Item.PinnedMessages.Item
{
    [Proxy(typeof(PinnedChatMessageInfoItemRequestBuilder), true)]
    public partial interface IPinnedChatMessageInfoItemRequestBuilder;
}

namespace Microsoft.Graph.Me.Chats.Item.PinnedMessages.Item.Message
{
    [Proxy(typeof(MessageRequestBuilder), true)]
    public partial interface IMessageRequestBuilder;
}

namespace Microsoft.Graph.Me.Chats.Item.SendActivityNotification
{
    [Proxy(typeof(SendActivityNotificationRequestBuilder), true)]
    public partial interface ISendActivityNotificationRequestBuilder;
}

namespace Microsoft.Graph.Me.Chats.Item.Tabs
{
    [Proxy(typeof(TabsRequestBuilder), true)]
    public partial interface ITabsRequestBuilder;
}

namespace Microsoft.Graph.Me.Chats.Item.Tabs.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.Chats.Item.Tabs.Item
{
    [Proxy(typeof(TeamsTabItemRequestBuilder), true)]
    public partial interface ITeamsTabItemRequestBuilder;
}

namespace Microsoft.Graph.Me.Chats.Item.Tabs.Item.TeamsApp
{
    [Proxy(typeof(TeamsAppRequestBuilder), true)]
    public partial interface ITeamsAppRequestBuilder;
}

namespace Microsoft.Graph.Me.Chats.Item.UnhideForUser
{
    [Proxy(typeof(UnhideForUserRequestBuilder), true)]
    public partial interface IUnhideForUserRequestBuilder;
}

namespace Microsoft.Graph.Me.CheckMemberGroups
{
    [Proxy(typeof(CheckMemberGroupsRequestBuilder), true)]
    public partial interface ICheckMemberGroupsRequestBuilder;
}

namespace Microsoft.Graph.Me.CheckMemberObjects
{
    [Proxy(typeof(CheckMemberObjectsRequestBuilder), true)]
    public partial interface ICheckMemberObjectsRequestBuilder;
}

namespace Microsoft.Graph.Me.CloudClipboard
{
    [Proxy(typeof(CloudClipboardRequestBuilder), true)]
    public partial interface ICloudClipboardRequestBuilder;
}

namespace Microsoft.Graph.Me.CloudClipboard.Items
{
    [Proxy(typeof(ItemsRequestBuilder), true)]
    public partial interface IItemsRequestBuilder;
}

namespace Microsoft.Graph.Me.CloudClipboard.Items.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.CloudClipboard.Items.Item
{
    [Proxy(typeof(CloudClipboardItemItemRequestBuilder), true)]
    public partial interface ICloudClipboardItemItemRequestBuilder;
}

namespace Microsoft.Graph.Me.ContactFolders
{
    [Proxy(typeof(ContactFoldersRequestBuilder), true)]
    public partial interface IContactFoldersRequestBuilder;
}

namespace Microsoft.Graph.Me.ContactFolders.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.ContactFolders.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Me.ContactFolders.Item
{
    [Proxy(typeof(ContactFolderItemRequestBuilder), true)]
    public partial interface IContactFolderItemRequestBuilder;
}

namespace Microsoft.Graph.Me.ContactFolders.Item.ChildFolders
{
    [Proxy(typeof(ChildFoldersRequestBuilder), true)]
    public partial interface IChildFoldersRequestBuilder;
}

namespace Microsoft.Graph.Me.ContactFolders.Item.ChildFolders.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.ContactFolders.Item.ChildFolders.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Me.ContactFolders.Item.ChildFolders.Item
{
    [Proxy(typeof(ContactFolderItemRequestBuilder), true)]
    public partial interface IContactFolderItemRequestBuilder;
}

namespace Microsoft.Graph.Me.ContactFolders.Item.ChildFolders.Item.Contacts
{
    [Proxy(typeof(ContactsRequestBuilder), true)]
    public partial interface IContactsRequestBuilder;
}

namespace Microsoft.Graph.Me.ContactFolders.Item.ChildFolders.Item.Contacts.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.ContactFolders.Item.ChildFolders.Item.Contacts.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Me.ContactFolders.Item.ChildFolders.Item.Contacts.Item
{
    [Proxy(typeof(ContactItemRequestBuilder), true)]
    public partial interface IContactItemRequestBuilder;
}

namespace Microsoft.Graph.Me.ContactFolders.Item.ChildFolders.Item.Contacts.Item.Extensions
{
    [Proxy(typeof(ExtensionsRequestBuilder), true)]
    public partial interface IExtensionsRequestBuilder;
}

namespace Microsoft.Graph.Me.ContactFolders.Item.ChildFolders.Item.Contacts.Item.Extensions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.ContactFolders.Item.ChildFolders.Item.Contacts.Item.Extensions.Item
{
    [Proxy(typeof(ExtensionItemRequestBuilder), true)]
    public partial interface IExtensionItemRequestBuilder;
}

namespace Microsoft.Graph.Me.ContactFolders.Item.ChildFolders.Item.Contacts.Item.PermanentDelete
{
    [Proxy(typeof(PermanentDeleteRequestBuilder), true)]
    public partial interface IPermanentDeleteRequestBuilder;
}

namespace Microsoft.Graph.Me.ContactFolders.Item.ChildFolders.Item.Contacts.Item.Photo
{
    [Proxy(typeof(PhotoRequestBuilder), true)]
    public partial interface IPhotoRequestBuilder;
}

namespace Microsoft.Graph.Me.ContactFolders.Item.ChildFolders.Item.Contacts.Item.Photo.Value
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Me.ContactFolders.Item.ChildFolders.Item.PermanentDelete
{
    [Proxy(typeof(PermanentDeleteRequestBuilder), true)]
    public partial interface IPermanentDeleteRequestBuilder;
}

namespace Microsoft.Graph.Me.ContactFolders.Item.Contacts
{
    [Proxy(typeof(ContactsRequestBuilder), true)]
    public partial interface IContactsRequestBuilder;
}

namespace Microsoft.Graph.Me.ContactFolders.Item.Contacts.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.ContactFolders.Item.Contacts.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Me.ContactFolders.Item.Contacts.Item
{
    [Proxy(typeof(ContactItemRequestBuilder), true)]
    public partial interface IContactItemRequestBuilder;
}

namespace Microsoft.Graph.Me.ContactFolders.Item.Contacts.Item.Extensions
{
    [Proxy(typeof(ExtensionsRequestBuilder), true)]
    public partial interface IExtensionsRequestBuilder;
}

namespace Microsoft.Graph.Me.ContactFolders.Item.Contacts.Item.Extensions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.ContactFolders.Item.Contacts.Item.Extensions.Item
{
    [Proxy(typeof(ExtensionItemRequestBuilder), true)]
    public partial interface IExtensionItemRequestBuilder;
}

namespace Microsoft.Graph.Me.ContactFolders.Item.Contacts.Item.PermanentDelete
{
    [Proxy(typeof(PermanentDeleteRequestBuilder), true)]
    public partial interface IPermanentDeleteRequestBuilder;
}

namespace Microsoft.Graph.Me.ContactFolders.Item.Contacts.Item.Photo
{
    [Proxy(typeof(PhotoRequestBuilder), true)]
    public partial interface IPhotoRequestBuilder;
}

namespace Microsoft.Graph.Me.ContactFolders.Item.Contacts.Item.Photo.Value
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Me.ContactFolders.Item.PermanentDelete
{
    [Proxy(typeof(PermanentDeleteRequestBuilder), true)]
    public partial interface IPermanentDeleteRequestBuilder;
}

namespace Microsoft.Graph.Me.Contacts
{
    [Proxy(typeof(ContactsRequestBuilder), true)]
    public partial interface IContactsRequestBuilder;
}

namespace Microsoft.Graph.Me.Contacts.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.Contacts.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Me.Contacts.Item
{
    [Proxy(typeof(ContactItemRequestBuilder), true)]
    public partial interface IContactItemRequestBuilder;
}

namespace Microsoft.Graph.Me.Contacts.Item.Extensions
{
    [Proxy(typeof(ExtensionsRequestBuilder), true)]
    public partial interface IExtensionsRequestBuilder;
}

namespace Microsoft.Graph.Me.Contacts.Item.Extensions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.Contacts.Item.Extensions.Item
{
    [Proxy(typeof(ExtensionItemRequestBuilder), true)]
    public partial interface IExtensionItemRequestBuilder;
}

namespace Microsoft.Graph.Me.Contacts.Item.PermanentDelete
{
    [Proxy(typeof(PermanentDeleteRequestBuilder), true)]
    public partial interface IPermanentDeleteRequestBuilder;
}

namespace Microsoft.Graph.Me.Contacts.Item.Photo
{
    [Proxy(typeof(PhotoRequestBuilder), true)]
    public partial interface IPhotoRequestBuilder;
}

namespace Microsoft.Graph.Me.Contacts.Item.Photo.Value
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Me.CreatedObjects
{
    [Proxy(typeof(CreatedObjectsRequestBuilder), true)]
    public partial interface ICreatedObjectsRequestBuilder;
}

namespace Microsoft.Graph.Me.CreatedObjects.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.CreatedObjects.GraphServicePrincipal
{
    [Proxy(typeof(GraphServicePrincipalRequestBuilder), true)]
    public partial interface IGraphServicePrincipalRequestBuilder;
}

namespace Microsoft.Graph.Me.CreatedObjects.GraphServicePrincipal.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.CreatedObjects.Item
{
    [Proxy(typeof(DirectoryObjectItemRequestBuilder), true)]
    public partial interface IDirectoryObjectItemRequestBuilder;
}

namespace Microsoft.Graph.Me.CreatedObjects.Item.GraphServicePrincipal
{
    [Proxy(typeof(GraphServicePrincipalRequestBuilder), true)]
    public partial interface IGraphServicePrincipalRequestBuilder;
}

namespace Microsoft.Graph.Me.DataSecurityAndGovernance
{
    [Proxy(typeof(DataSecurityAndGovernanceRequestBuilder), true)]
    public partial interface IDataSecurityAndGovernanceRequestBuilder;
}

namespace Microsoft.Graph.Me.DataSecurityAndGovernance.Activities
{
    [Proxy(typeof(ActivitiesRequestBuilder), true)]
    public partial interface IActivitiesRequestBuilder;
}

namespace Microsoft.Graph.Me.DataSecurityAndGovernance.Activities.ContentActivities
{
    [Proxy(typeof(ContentActivitiesRequestBuilder), true)]
    public partial interface IContentActivitiesRequestBuilder;
}

namespace Microsoft.Graph.Me.DataSecurityAndGovernance.Activities.ContentActivities.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.DataSecurityAndGovernance.Activities.ContentActivities.Item
{
    [Proxy(typeof(ContentActivityItemRequestBuilder), true)]
    public partial interface IContentActivityItemRequestBuilder;
}

namespace Microsoft.Graph.Me.DataSecurityAndGovernance.ProcessContent
{
    [Proxy(typeof(ProcessContentRequestBuilder), true)]
    public partial interface IProcessContentRequestBuilder;
}

namespace Microsoft.Graph.Me.DataSecurityAndGovernance.ProtectionScopes
{
    [Proxy(typeof(ProtectionScopesRequestBuilder), true)]
    public partial interface IProtectionScopesRequestBuilder;
}

namespace Microsoft.Graph.Me.DataSecurityAndGovernance.ProtectionScopes.Compute
{
    [Proxy(typeof(ComputeRequestBuilder), true)]
    public partial interface IComputeRequestBuilder;
}

namespace Microsoft.Graph.Me.DataSecurityAndGovernance.SensitivityLabels
{
    [Proxy(typeof(SensitivityLabelsRequestBuilder), true)]
    public partial interface ISensitivityLabelsRequestBuilder;
}

namespace Microsoft.Graph.Me.DataSecurityAndGovernance.SensitivityLabels.ComputeInheritanceWithLabelIdsWithLocaleWithContentFormats
{
    [Proxy(typeof(ComputeInheritanceWithLabelIdsWithLocaleWithContentFormatsRequestBuilder), true)]
    public partial interface IComputeInheritanceWithLabelIdsWithLocaleWithContentFormatsRequestBuilder;
}

namespace Microsoft.Graph.Me.DataSecurityAndGovernance.SensitivityLabels.ComputeRightsAndInheritance
{
    [Proxy(typeof(ComputeRightsAndInheritanceRequestBuilder), true)]
    public partial interface IComputeRightsAndInheritanceRequestBuilder;
}

namespace Microsoft.Graph.Me.DataSecurityAndGovernance.SensitivityLabels.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.DataSecurityAndGovernance.SensitivityLabels.Item
{
    [Proxy(typeof(SensitivityLabelItemRequestBuilder), true)]
    public partial interface ISensitivityLabelItemRequestBuilder;
}

namespace Microsoft.Graph.Me.DataSecurityAndGovernance.SensitivityLabels.Item.Rights
{
    [Proxy(typeof(RightsRequestBuilder), true)]
    public partial interface IRightsRequestBuilder;
}

namespace Microsoft.Graph.Me.DataSecurityAndGovernance.SensitivityLabels.Item.Sublabels
{
    [Proxy(typeof(SublabelsRequestBuilder), true)]
    public partial interface ISublabelsRequestBuilder;
}

namespace Microsoft.Graph.Me.DataSecurityAndGovernance.SensitivityLabels.Item.Sublabels.ComputeInheritanceWithLabelIdsWithLocaleWithContentFormats
{
    [Proxy(typeof(ComputeInheritanceWithLabelIdsWithLocaleWithContentFormatsRequestBuilder), true)]
    public partial interface IComputeInheritanceWithLabelIdsWithLocaleWithContentFormatsRequestBuilder;
}

namespace Microsoft.Graph.Me.DataSecurityAndGovernance.SensitivityLabels.Item.Sublabels.ComputeRightsAndInheritance
{
    [Proxy(typeof(ComputeRightsAndInheritanceRequestBuilder), true)]
    public partial interface IComputeRightsAndInheritanceRequestBuilder;
}

namespace Microsoft.Graph.Me.DataSecurityAndGovernance.SensitivityLabels.Item.Sublabels.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.DataSecurityAndGovernance.SensitivityLabels.Item.Sublabels.Item
{
    [Proxy(typeof(SensitivityLabelItemRequestBuilder), true)]
    public partial interface ISensitivityLabelItemRequestBuilder;
}

namespace Microsoft.Graph.Me.DataSecurityAndGovernance.SensitivityLabels.Item.Sublabels.Item.Rights
{
    [Proxy(typeof(RightsRequestBuilder), true)]
    public partial interface IRightsRequestBuilder;
}

namespace Microsoft.Graph.Me.DeviceManagementTroubleshootingEvents
{
    [Proxy(typeof(DeviceManagementTroubleshootingEventsRequestBuilder), true)]
    public partial interface IDeviceManagementTroubleshootingEventsRequestBuilder;
}

namespace Microsoft.Graph.Me.DeviceManagementTroubleshootingEvents.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.DeviceManagementTroubleshootingEvents.Item
{
    [Proxy(typeof(DeviceManagementTroubleshootingEventItemRequestBuilder), true)]
    public partial interface IDeviceManagementTroubleshootingEventItemRequestBuilder;
}

namespace Microsoft.Graph.Me.DirectReports
{
    [Proxy(typeof(DirectReportsRequestBuilder), true)]
    public partial interface IDirectReportsRequestBuilder;
}

namespace Microsoft.Graph.Me.DirectReports.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.DirectReports.GraphOrgContact
{
    [Proxy(typeof(GraphOrgContactRequestBuilder), true)]
    public partial interface IGraphOrgContactRequestBuilder;
}

namespace Microsoft.Graph.Me.DirectReports.GraphOrgContact.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.DirectReports.GraphUser
{
    [Proxy(typeof(GraphUserRequestBuilder), true)]
    public partial interface IGraphUserRequestBuilder;
}

namespace Microsoft.Graph.Me.DirectReports.GraphUser.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.DirectReports.Item
{
    [Proxy(typeof(DirectoryObjectItemRequestBuilder), true)]
    public partial interface IDirectoryObjectItemRequestBuilder;
}

namespace Microsoft.Graph.Me.DirectReports.Item.GraphOrgContact
{
    [Proxy(typeof(GraphOrgContactRequestBuilder), true)]
    public partial interface IGraphOrgContactRequestBuilder;
}

namespace Microsoft.Graph.Me.DirectReports.Item.GraphUser
{
    [Proxy(typeof(GraphUserRequestBuilder), true)]
    public partial interface IGraphUserRequestBuilder;
}

namespace Microsoft.Graph.Me.Drive
{
    [Proxy(typeof(DriveRequestBuilder), true)]
    public partial interface IDriveRequestBuilder;
}

namespace Microsoft.Graph.Me.Drives
{
    [Proxy(typeof(DrivesRequestBuilder), true)]
    public partial interface IDrivesRequestBuilder;
}

namespace Microsoft.Graph.Me.Drives.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.Drives.Item
{
    [Proxy(typeof(DriveItemRequestBuilder), true)]
    public partial interface IDriveItemRequestBuilder;
}

namespace Microsoft.Graph.Me.EmployeeExperience
{
    [Proxy(typeof(EmployeeExperienceRequestBuilder), true)]
    public partial interface IEmployeeExperienceRequestBuilder;
}

namespace Microsoft.Graph.Me.EmployeeExperience.LearningCourseActivities
{
    [Proxy(typeof(LearningCourseActivitiesRequestBuilder), true)]
    public partial interface ILearningCourseActivitiesRequestBuilder;
}

namespace Microsoft.Graph.Me.EmployeeExperience.LearningCourseActivities.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.EmployeeExperience.LearningCourseActivities.Item
{
    [Proxy(typeof(LearningCourseActivityItemRequestBuilder), true)]
    public partial interface ILearningCourseActivityItemRequestBuilder;
}

namespace Microsoft.Graph.Me.EmployeeExperience.LearningCourseActivitiesWithExternalcourseActivityId
{
    [Proxy(typeof(LearningCourseActivitiesWithExternalcourseActivityIdRequestBuilder), true)]
    public partial interface ILearningCourseActivitiesWithExternalcourseActivityIdRequestBuilder;
}

namespace Microsoft.Graph.Me.Events
{
    [Proxy(typeof(EventsRequestBuilder), true)]
    public partial interface IEventsRequestBuilder;
}

namespace Microsoft.Graph.Me.Events.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.Events.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Me.Events.Item
{
    [Proxy(typeof(EventItemRequestBuilder), true)]
    public partial interface IEventItemRequestBuilder;
}

namespace Microsoft.Graph.Me.Events.Item.Accept
{
    [Proxy(typeof(AcceptRequestBuilder), true)]
    public partial interface IAcceptRequestBuilder;
}

namespace Microsoft.Graph.Me.Events.Item.Attachments
{
    [Proxy(typeof(AttachmentsRequestBuilder), true)]
    public partial interface IAttachmentsRequestBuilder;
}

namespace Microsoft.Graph.Me.Events.Item.Attachments.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.Events.Item.Attachments.CreateUploadSession
{
    [Proxy(typeof(CreateUploadSessionRequestBuilder), true)]
    public partial interface ICreateUploadSessionRequestBuilder;
}

namespace Microsoft.Graph.Me.Events.Item.Attachments.Item
{
    [Proxy(typeof(AttachmentItemRequestBuilder), true)]
    public partial interface IAttachmentItemRequestBuilder;
}

namespace Microsoft.Graph.Me.Events.Item.Calendar
{
    [Proxy(typeof(CalendarRequestBuilder), true)]
    public partial interface ICalendarRequestBuilder;
}

namespace Microsoft.Graph.Me.Events.Item.Cancel
{
    [Proxy(typeof(CancelRequestBuilder), true)]
    public partial interface ICancelRequestBuilder;
}

namespace Microsoft.Graph.Me.Events.Item.Decline
{
    [Proxy(typeof(DeclineRequestBuilder), true)]
    public partial interface IDeclineRequestBuilder;
}

namespace Microsoft.Graph.Me.Events.Item.DismissReminder
{
    [Proxy(typeof(DismissReminderRequestBuilder), true)]
    public partial interface IDismissReminderRequestBuilder;
}

namespace Microsoft.Graph.Me.Events.Item.Extensions
{
    [Proxy(typeof(ExtensionsRequestBuilder), true)]
    public partial interface IExtensionsRequestBuilder;
}

namespace Microsoft.Graph.Me.Events.Item.Extensions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.Events.Item.Extensions.Item
{
    [Proxy(typeof(ExtensionItemRequestBuilder), true)]
    public partial interface IExtensionItemRequestBuilder;
}

namespace Microsoft.Graph.Me.Events.Item.Forward
{
    [Proxy(typeof(ForwardRequestBuilder), true)]
    public partial interface IForwardRequestBuilder;
}

namespace Microsoft.Graph.Me.Events.Item.Instances
{
    [Proxy(typeof(InstancesRequestBuilder), true)]
    public partial interface IInstancesRequestBuilder;
}

namespace Microsoft.Graph.Me.Events.Item.Instances.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Me.Events.Item.PermanentDelete
{
    [Proxy(typeof(PermanentDeleteRequestBuilder), true)]
    public partial interface IPermanentDeleteRequestBuilder;
}

namespace Microsoft.Graph.Me.Events.Item.SnoozeReminder
{
    [Proxy(typeof(SnoozeReminderRequestBuilder), true)]
    public partial interface ISnoozeReminderRequestBuilder;
}

namespace Microsoft.Graph.Me.Events.Item.TentativelyAccept
{
    [Proxy(typeof(TentativelyAcceptRequestBuilder), true)]
    public partial interface ITentativelyAcceptRequestBuilder;
}

namespace Microsoft.Graph.Me.ExportDeviceAndAppManagementData
{
    [Proxy(typeof(ExportDeviceAndAppManagementDataRequestBuilder), true)]
    public partial interface IExportDeviceAndAppManagementDataRequestBuilder;
}

namespace Microsoft.Graph.Me.ExportDeviceAndAppManagementDataWithSkipWithTop
{
    [Proxy(typeof(ExportDeviceAndAppManagementDataWithSkipWithTopRequestBuilder), true)]
    public partial interface IExportDeviceAndAppManagementDataWithSkipWithTopRequestBuilder;
}

namespace Microsoft.Graph.Me.ExportPersonalData
{
    [Proxy(typeof(ExportPersonalDataRequestBuilder), true)]
    public partial interface IExportPersonalDataRequestBuilder;
}

namespace Microsoft.Graph.Me.Extensions
{
    [Proxy(typeof(ExtensionsRequestBuilder), true)]
    public partial interface IExtensionsRequestBuilder;
}

namespace Microsoft.Graph.Me.Extensions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.Extensions.Item
{
    [Proxy(typeof(ExtensionItemRequestBuilder), true)]
    public partial interface IExtensionItemRequestBuilder;
}

namespace Microsoft.Graph.Me.FindMeetingTimes
{
    [Proxy(typeof(FindMeetingTimesRequestBuilder), true)]
    public partial interface IFindMeetingTimesRequestBuilder;
}

namespace Microsoft.Graph.Me.FollowedSites
{
    [Proxy(typeof(FollowedSitesRequestBuilder), true)]
    public partial interface IFollowedSitesRequestBuilder;
}

namespace Microsoft.Graph.Me.FollowedSites.Add
{
    [Proxy(typeof(AddRequestBuilder), true)]
    public partial interface IAddRequestBuilder;
}

namespace Microsoft.Graph.Me.FollowedSites.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.FollowedSites.Item
{
    [Proxy(typeof(SiteItemRequestBuilder), true)]
    public partial interface ISiteItemRequestBuilder;
}

namespace Microsoft.Graph.Me.FollowedSites.Remove
{
    [Proxy(typeof(RemoveRequestBuilder), true)]
    public partial interface IRemoveRequestBuilder;
}

namespace Microsoft.Graph.Me.GetMailTips
{
    [Proxy(typeof(GetMailTipsRequestBuilder), true)]
    public partial interface IGetMailTipsRequestBuilder;
}

namespace Microsoft.Graph.Me.GetManagedAppDiagnosticStatuses
{
    [Proxy(typeof(GetManagedAppDiagnosticStatusesRequestBuilder), true)]
    public partial interface IGetManagedAppDiagnosticStatusesRequestBuilder;
}

namespace Microsoft.Graph.Me.GetManagedAppPolicies
{
    [Proxy(typeof(GetManagedAppPoliciesRequestBuilder), true)]
    public partial interface IGetManagedAppPoliciesRequestBuilder;
}

namespace Microsoft.Graph.Me.GetManagedDevicesWithAppFailures
{
    [Proxy(typeof(GetManagedDevicesWithAppFailuresRequestBuilder), true)]
    public partial interface IGetManagedDevicesWithAppFailuresRequestBuilder;
}

namespace Microsoft.Graph.Me.GetMemberGroups
{
    [Proxy(typeof(GetMemberGroupsRequestBuilder), true)]
    public partial interface IGetMemberGroupsRequestBuilder;
}

namespace Microsoft.Graph.Me.GetMemberObjects
{
    [Proxy(typeof(GetMemberObjectsRequestBuilder), true)]
    public partial interface IGetMemberObjectsRequestBuilder;
}

namespace Microsoft.Graph.Me.InferenceClassification
{
    [Proxy(typeof(InferenceClassificationRequestBuilder), true)]
    public partial interface IInferenceClassificationRequestBuilder;
}

namespace Microsoft.Graph.Me.InferenceClassification.Overrides
{
    [Proxy(typeof(OverridesRequestBuilder), true)]
    public partial interface IOverridesRequestBuilder;
}

namespace Microsoft.Graph.Me.InferenceClassification.Overrides.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.InferenceClassification.Overrides.Item
{
    [Proxy(typeof(InferenceClassificationOverrideItemRequestBuilder), true)]
    public partial interface IInferenceClassificationOverrideItemRequestBuilder;
}

namespace Microsoft.Graph.Me.Insights
{
    [Proxy(typeof(InsightsRequestBuilder), true)]
    public partial interface IInsightsRequestBuilder;
}

namespace Microsoft.Graph.Me.Insights.Shared
{
    [Proxy(typeof(SharedRequestBuilder), true)]
    public partial interface ISharedRequestBuilder;
}

namespace Microsoft.Graph.Me.Insights.Shared.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.Insights.Shared.Item
{
    [Proxy(typeof(SharedInsightItemRequestBuilder), true)]
    public partial interface ISharedInsightItemRequestBuilder;
}

namespace Microsoft.Graph.Me.Insights.Shared.Item.LastSharedMethod
{
    [Proxy(typeof(LastSharedMethodRequestBuilder), true)]
    public partial interface ILastSharedMethodRequestBuilder;
}

namespace Microsoft.Graph.Me.Insights.Shared.Item.Resource
{
    [Proxy(typeof(ResourceRequestBuilder), true)]
    public partial interface IResourceRequestBuilder;
}

namespace Microsoft.Graph.Me.Insights.Trending
{
    [Proxy(typeof(TrendingRequestBuilder), true)]
    public partial interface ITrendingRequestBuilder;
}

namespace Microsoft.Graph.Me.Insights.Trending.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.Insights.Trending.Item
{
    [Proxy(typeof(TrendingItemRequestBuilder), true)]
    public partial interface ITrendingItemRequestBuilder;
}

namespace Microsoft.Graph.Me.Insights.Trending.Item.Resource
{
    [Proxy(typeof(ResourceRequestBuilder), true)]
    public partial interface IResourceRequestBuilder;
}

namespace Microsoft.Graph.Me.Insights.Used
{
    [Proxy(typeof(UsedRequestBuilder), true)]
    public partial interface IUsedRequestBuilder;
}

namespace Microsoft.Graph.Me.Insights.Used.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.Insights.Used.Item
{
    [Proxy(typeof(UsedInsightItemRequestBuilder), true)]
    public partial interface IUsedInsightItemRequestBuilder;
}

namespace Microsoft.Graph.Me.Insights.Used.Item.Resource
{
    [Proxy(typeof(ResourceRequestBuilder), true)]
    public partial interface IResourceRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams
{
    [Proxy(typeof(JoinedTeamsRequestBuilder), true)]
    public partial interface IJoinedTeamsRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.GetAllMessages
{
    [Proxy(typeof(GetAllMessagesRequestBuilder), true)]
    public partial interface IGetAllMessagesRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item
{
    [Proxy(typeof(TeamItemRequestBuilder), true)]
    public partial interface ITeamItemRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.AllChannels
{
    [Proxy(typeof(AllChannelsRequestBuilder), true)]
    public partial interface IAllChannelsRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.AllChannels.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.AllChannels.Item
{
    [Proxy(typeof(ChannelItemRequestBuilder), true)]
    public partial interface IChannelItemRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Archive
{
    [Proxy(typeof(ArchiveRequestBuilder), true)]
    public partial interface IArchiveRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Channels
{
    [Proxy(typeof(ChannelsRequestBuilder), true)]
    public partial interface IChannelsRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Channels.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Channels.GetAllMessages
{
    [Proxy(typeof(GetAllMessagesRequestBuilder), true)]
    public partial interface IGetAllMessagesRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Channels.GetAllRetainedMessages
{
    [Proxy(typeof(GetAllRetainedMessagesRequestBuilder), true)]
    public partial interface IGetAllRetainedMessagesRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Channels.Item
{
    [Proxy(typeof(ChannelItemRequestBuilder), true)]
    public partial interface IChannelItemRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Channels.Item.AllMembers
{
    [Proxy(typeof(AllMembersRequestBuilder), true)]
    public partial interface IAllMembersRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Channels.Item.AllMembers.Add
{
    [Proxy(typeof(AddRequestBuilder), true)]
    public partial interface IAddRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Channels.Item.AllMembers.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Channels.Item.AllMembers.Item
{
    [Proxy(typeof(ConversationMemberItemRequestBuilder), true)]
    public partial interface IConversationMemberItemRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Channels.Item.AllMembers.Remove
{
    [Proxy(typeof(RemoveRequestBuilder), true)]
    public partial interface IRemoveRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Channels.Item.Archive
{
    [Proxy(typeof(ArchiveRequestBuilder), true)]
    public partial interface IArchiveRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Channels.Item.CompleteMigration
{
    [Proxy(typeof(CompleteMigrationRequestBuilder), true)]
    public partial interface ICompleteMigrationRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Channels.Item.DoesUserHaveAccessuserIdUserIdTenantIdTenantIdUserPrincipalNameUserPrincipalName
{
    [Proxy(typeof(DoesUserHaveAccessuserIdUserIdTenantIdTenantIdUserPrincipalNameUserPrincipalNameRequestBuilder), true)]
    public partial interface IDoesUserHaveAccessuserIdUserIdTenantIdTenantIdUserPrincipalNameUserPrincipalNameRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Channels.Item.FilesFolder
{
    [Proxy(typeof(FilesFolderRequestBuilder), true)]
    public partial interface IFilesFolderRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Channels.Item.FilesFolder.Content
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Channels.Item.Members
{
    [Proxy(typeof(MembersRequestBuilder), true)]
    public partial interface IMembersRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Channels.Item.Members.Add
{
    [Proxy(typeof(AddRequestBuilder), true)]
    public partial interface IAddRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Channels.Item.Members.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Channels.Item.Members.Item
{
    [Proxy(typeof(ConversationMemberItemRequestBuilder), true)]
    public partial interface IConversationMemberItemRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Channels.Item.Members.Remove
{
    [Proxy(typeof(RemoveRequestBuilder), true)]
    public partial interface IRemoveRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Channels.Item.Messages
{
    [Proxy(typeof(MessagesRequestBuilder), true)]
    public partial interface IMessagesRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Channels.Item.Messages.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Channels.Item.Messages.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Channels.Item.Messages.Item
{
    [Proxy(typeof(ChatMessageItemRequestBuilder), true)]
    public partial interface IChatMessageItemRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Channels.Item.Messages.Item.HostedContents
{
    [Proxy(typeof(HostedContentsRequestBuilder), true)]
    public partial interface IHostedContentsRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Channels.Item.Messages.Item.HostedContents.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Channels.Item.Messages.Item.HostedContents.Item
{
    [Proxy(typeof(ChatMessageHostedContentItemRequestBuilder), true)]
    public partial interface IChatMessageHostedContentItemRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Channels.Item.Messages.Item.HostedContents.Item.Value
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Channels.Item.Messages.Item.Replies
{
    [Proxy(typeof(RepliesRequestBuilder), true)]
    public partial interface IRepliesRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Channels.Item.Messages.Item.Replies.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Channels.Item.Messages.Item.Replies.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Channels.Item.Messages.Item.Replies.Item
{
    [Proxy(typeof(ChatMessageItemRequestBuilder), true)]
    public partial interface IChatMessageItemRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Channels.Item.Messages.Item.Replies.Item.HostedContents
{
    [Proxy(typeof(HostedContentsRequestBuilder), true)]
    public partial interface IHostedContentsRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Channels.Item.Messages.Item.Replies.Item.HostedContents.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Channels.Item.Messages.Item.Replies.Item.HostedContents.Item
{
    [Proxy(typeof(ChatMessageHostedContentItemRequestBuilder), true)]
    public partial interface IChatMessageHostedContentItemRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Channels.Item.Messages.Item.Replies.Item.HostedContents.Item.Value
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Channels.Item.Messages.Item.Replies.Item.SetReaction
{
    [Proxy(typeof(SetReactionRequestBuilder), true)]
    public partial interface ISetReactionRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Channels.Item.Messages.Item.Replies.Item.SoftDelete
{
    [Proxy(typeof(SoftDeleteRequestBuilder), true)]
    public partial interface ISoftDeleteRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Channels.Item.Messages.Item.Replies.Item.UndoSoftDelete
{
    [Proxy(typeof(UndoSoftDeleteRequestBuilder), true)]
    public partial interface IUndoSoftDeleteRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Channels.Item.Messages.Item.Replies.Item.UnsetReaction
{
    [Proxy(typeof(UnsetReactionRequestBuilder), true)]
    public partial interface IUnsetReactionRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Channels.Item.Messages.Item.SetReaction
{
    [Proxy(typeof(SetReactionRequestBuilder), true)]
    public partial interface ISetReactionRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Channels.Item.Messages.Item.SoftDelete
{
    [Proxy(typeof(SoftDeleteRequestBuilder), true)]
    public partial interface ISoftDeleteRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Channels.Item.Messages.Item.UndoSoftDelete
{
    [Proxy(typeof(UndoSoftDeleteRequestBuilder), true)]
    public partial interface IUndoSoftDeleteRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Channels.Item.Messages.Item.UnsetReaction
{
    [Proxy(typeof(UnsetReactionRequestBuilder), true)]
    public partial interface IUnsetReactionRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Channels.Item.ProvisionEmail
{
    [Proxy(typeof(ProvisionEmailRequestBuilder), true)]
    public partial interface IProvisionEmailRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Channels.Item.RemoveEmail
{
    [Proxy(typeof(RemoveEmailRequestBuilder), true)]
    public partial interface IRemoveEmailRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Channels.Item.SharedWithTeams
{
    [Proxy(typeof(SharedWithTeamsRequestBuilder), true)]
    public partial interface ISharedWithTeamsRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Channels.Item.SharedWithTeams.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Channels.Item.SharedWithTeams.Item
{
    [Proxy(typeof(SharedWithChannelTeamInfoItemRequestBuilder), true)]
    public partial interface ISharedWithChannelTeamInfoItemRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Channels.Item.SharedWithTeams.Item.AllowedMembers
{
    [Proxy(typeof(AllowedMembersRequestBuilder), true)]
    public partial interface IAllowedMembersRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Channels.Item.SharedWithTeams.Item.AllowedMembers.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Channels.Item.SharedWithTeams.Item.AllowedMembers.Item
{
    [Proxy(typeof(ConversationMemberItemRequestBuilder), true)]
    public partial interface IConversationMemberItemRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Channels.Item.SharedWithTeams.Item.Team
{
    [Proxy(typeof(TeamRequestBuilder), true)]
    public partial interface ITeamRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Channels.Item.Tabs
{
    [Proxy(typeof(TabsRequestBuilder), true)]
    public partial interface ITabsRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Channels.Item.Tabs.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Channels.Item.Tabs.Item
{
    [Proxy(typeof(TeamsTabItemRequestBuilder), true)]
    public partial interface ITeamsTabItemRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Channels.Item.Tabs.Item.TeamsApp
{
    [Proxy(typeof(TeamsAppRequestBuilder), true)]
    public partial interface ITeamsAppRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Channels.Item.Unarchive
{
    [Proxy(typeof(UnarchiveRequestBuilder), true)]
    public partial interface IUnarchiveRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Clone
{
    [Proxy(typeof(CloneRequestBuilder), true)]
    public partial interface ICloneRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.CompleteMigration
{
    [Proxy(typeof(CompleteMigrationRequestBuilder), true)]
    public partial interface ICompleteMigrationRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Group
{
    [Proxy(typeof(GroupRequestBuilder), true)]
    public partial interface IGroupRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Group.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Group.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.IncomingChannels
{
    [Proxy(typeof(IncomingChannelsRequestBuilder), true)]
    public partial interface IIncomingChannelsRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.IncomingChannels.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.IncomingChannels.Item
{
    [Proxy(typeof(ChannelItemRequestBuilder), true)]
    public partial interface IChannelItemRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.InstalledApps
{
    [Proxy(typeof(InstalledAppsRequestBuilder), true)]
    public partial interface IInstalledAppsRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.InstalledApps.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.InstalledApps.Item
{
    [Proxy(typeof(TeamsAppInstallationItemRequestBuilder), true)]
    public partial interface ITeamsAppInstallationItemRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.InstalledApps.Item.TeamsApp
{
    [Proxy(typeof(TeamsAppRequestBuilder), true)]
    public partial interface ITeamsAppRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.InstalledApps.Item.TeamsAppDefinition
{
    [Proxy(typeof(TeamsAppDefinitionRequestBuilder), true)]
    public partial interface ITeamsAppDefinitionRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.InstalledApps.Item.Upgrade
{
    [Proxy(typeof(UpgradeRequestBuilder), true)]
    public partial interface IUpgradeRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Members
{
    [Proxy(typeof(MembersRequestBuilder), true)]
    public partial interface IMembersRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Members.Add
{
    [Proxy(typeof(AddRequestBuilder), true)]
    public partial interface IAddRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Members.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Members.Item
{
    [Proxy(typeof(ConversationMemberItemRequestBuilder), true)]
    public partial interface IConversationMemberItemRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Members.Remove
{
    [Proxy(typeof(RemoveRequestBuilder), true)]
    public partial interface IRemoveRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Operations
{
    [Proxy(typeof(OperationsRequestBuilder), true)]
    public partial interface IOperationsRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Operations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Operations.Item
{
    [Proxy(typeof(TeamsAsyncOperationItemRequestBuilder), true)]
    public partial interface ITeamsAsyncOperationItemRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.PermissionGrants
{
    [Proxy(typeof(PermissionGrantsRequestBuilder), true)]
    public partial interface IPermissionGrantsRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.PermissionGrants.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.PermissionGrants.Item
{
    [Proxy(typeof(ResourceSpecificPermissionGrantItemRequestBuilder), true)]
    public partial interface IResourceSpecificPermissionGrantItemRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Photo
{
    [Proxy(typeof(PhotoRequestBuilder), true)]
    public partial interface IPhotoRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Photo.Value
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.PrimaryChannel
{
    [Proxy(typeof(PrimaryChannelRequestBuilder), true)]
    public partial interface IPrimaryChannelRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.PrimaryChannel.AllMembers
{
    [Proxy(typeof(AllMembersRequestBuilder), true)]
    public partial interface IAllMembersRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.PrimaryChannel.AllMembers.Add
{
    [Proxy(typeof(AddRequestBuilder), true)]
    public partial interface IAddRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.PrimaryChannel.AllMembers.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.PrimaryChannel.AllMembers.Item
{
    [Proxy(typeof(ConversationMemberItemRequestBuilder), true)]
    public partial interface IConversationMemberItemRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.PrimaryChannel.AllMembers.Remove
{
    [Proxy(typeof(RemoveRequestBuilder), true)]
    public partial interface IRemoveRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.PrimaryChannel.Archive
{
    [Proxy(typeof(ArchiveRequestBuilder), true)]
    public partial interface IArchiveRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.PrimaryChannel.CompleteMigration
{
    [Proxy(typeof(CompleteMigrationRequestBuilder), true)]
    public partial interface ICompleteMigrationRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.PrimaryChannel.DoesUserHaveAccessuserIdUserIdTenantIdTenantIdUserPrincipalNameUserPrincipalName
{
    [Proxy(typeof(DoesUserHaveAccessuserIdUserIdTenantIdTenantIdUserPrincipalNameUserPrincipalNameRequestBuilder), true)]
    public partial interface IDoesUserHaveAccessuserIdUserIdTenantIdTenantIdUserPrincipalNameUserPrincipalNameRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.PrimaryChannel.FilesFolder
{
    [Proxy(typeof(FilesFolderRequestBuilder), true)]
    public partial interface IFilesFolderRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.PrimaryChannel.FilesFolder.Content
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.PrimaryChannel.Members
{
    [Proxy(typeof(MembersRequestBuilder), true)]
    public partial interface IMembersRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.PrimaryChannel.Members.Add
{
    [Proxy(typeof(AddRequestBuilder), true)]
    public partial interface IAddRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.PrimaryChannel.Members.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.PrimaryChannel.Members.Item
{
    [Proxy(typeof(ConversationMemberItemRequestBuilder), true)]
    public partial interface IConversationMemberItemRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.PrimaryChannel.Members.Remove
{
    [Proxy(typeof(RemoveRequestBuilder), true)]
    public partial interface IRemoveRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.PrimaryChannel.Messages
{
    [Proxy(typeof(MessagesRequestBuilder), true)]
    public partial interface IMessagesRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.PrimaryChannel.Messages.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.PrimaryChannel.Messages.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.PrimaryChannel.Messages.Item
{
    [Proxy(typeof(ChatMessageItemRequestBuilder), true)]
    public partial interface IChatMessageItemRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.PrimaryChannel.Messages.Item.HostedContents
{
    [Proxy(typeof(HostedContentsRequestBuilder), true)]
    public partial interface IHostedContentsRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.PrimaryChannel.Messages.Item.HostedContents.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.PrimaryChannel.Messages.Item.HostedContents.Item
{
    [Proxy(typeof(ChatMessageHostedContentItemRequestBuilder), true)]
    public partial interface IChatMessageHostedContentItemRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.PrimaryChannel.Messages.Item.HostedContents.Item.Value
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.PrimaryChannel.Messages.Item.Replies
{
    [Proxy(typeof(RepliesRequestBuilder), true)]
    public partial interface IRepliesRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.PrimaryChannel.Messages.Item.Replies.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.PrimaryChannel.Messages.Item.Replies.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.PrimaryChannel.Messages.Item.Replies.Item
{
    [Proxy(typeof(ChatMessageItemRequestBuilder), true)]
    public partial interface IChatMessageItemRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.PrimaryChannel.Messages.Item.Replies.Item.HostedContents
{
    [Proxy(typeof(HostedContentsRequestBuilder), true)]
    public partial interface IHostedContentsRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.PrimaryChannel.Messages.Item.Replies.Item.HostedContents.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.PrimaryChannel.Messages.Item.Replies.Item.HostedContents.Item
{
    [Proxy(typeof(ChatMessageHostedContentItemRequestBuilder), true)]
    public partial interface IChatMessageHostedContentItemRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.PrimaryChannel.Messages.Item.Replies.Item.HostedContents.Item.Value
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.PrimaryChannel.Messages.Item.Replies.Item.SetReaction
{
    [Proxy(typeof(SetReactionRequestBuilder), true)]
    public partial interface ISetReactionRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.PrimaryChannel.Messages.Item.Replies.Item.SoftDelete
{
    [Proxy(typeof(SoftDeleteRequestBuilder), true)]
    public partial interface ISoftDeleteRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.PrimaryChannel.Messages.Item.Replies.Item.UndoSoftDelete
{
    [Proxy(typeof(UndoSoftDeleteRequestBuilder), true)]
    public partial interface IUndoSoftDeleteRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.PrimaryChannel.Messages.Item.Replies.Item.UnsetReaction
{
    [Proxy(typeof(UnsetReactionRequestBuilder), true)]
    public partial interface IUnsetReactionRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.PrimaryChannel.Messages.Item.SetReaction
{
    [Proxy(typeof(SetReactionRequestBuilder), true)]
    public partial interface ISetReactionRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.PrimaryChannel.Messages.Item.SoftDelete
{
    [Proxy(typeof(SoftDeleteRequestBuilder), true)]
    public partial interface ISoftDeleteRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.PrimaryChannel.Messages.Item.UndoSoftDelete
{
    [Proxy(typeof(UndoSoftDeleteRequestBuilder), true)]
    public partial interface IUndoSoftDeleteRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.PrimaryChannel.Messages.Item.UnsetReaction
{
    [Proxy(typeof(UnsetReactionRequestBuilder), true)]
    public partial interface IUnsetReactionRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.PrimaryChannel.ProvisionEmail
{
    [Proxy(typeof(ProvisionEmailRequestBuilder), true)]
    public partial interface IProvisionEmailRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.PrimaryChannel.RemoveEmail
{
    [Proxy(typeof(RemoveEmailRequestBuilder), true)]
    public partial interface IRemoveEmailRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.PrimaryChannel.SharedWithTeams
{
    [Proxy(typeof(SharedWithTeamsRequestBuilder), true)]
    public partial interface ISharedWithTeamsRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.PrimaryChannel.SharedWithTeams.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.PrimaryChannel.SharedWithTeams.Item
{
    [Proxy(typeof(SharedWithChannelTeamInfoItemRequestBuilder), true)]
    public partial interface ISharedWithChannelTeamInfoItemRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.PrimaryChannel.SharedWithTeams.Item.AllowedMembers
{
    [Proxy(typeof(AllowedMembersRequestBuilder), true)]
    public partial interface IAllowedMembersRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.PrimaryChannel.SharedWithTeams.Item.AllowedMembers.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.PrimaryChannel.SharedWithTeams.Item.AllowedMembers.Item
{
    [Proxy(typeof(ConversationMemberItemRequestBuilder), true)]
    public partial interface IConversationMemberItemRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.PrimaryChannel.SharedWithTeams.Item.Team
{
    [Proxy(typeof(TeamRequestBuilder), true)]
    public partial interface ITeamRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.PrimaryChannel.Tabs
{
    [Proxy(typeof(TabsRequestBuilder), true)]
    public partial interface ITabsRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.PrimaryChannel.Tabs.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.PrimaryChannel.Tabs.Item
{
    [Proxy(typeof(TeamsTabItemRequestBuilder), true)]
    public partial interface ITeamsTabItemRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.PrimaryChannel.Tabs.Item.TeamsApp
{
    [Proxy(typeof(TeamsAppRequestBuilder), true)]
    public partial interface ITeamsAppRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.PrimaryChannel.Unarchive
{
    [Proxy(typeof(UnarchiveRequestBuilder), true)]
    public partial interface IUnarchiveRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Schedule
{
    [Proxy(typeof(ScheduleRequestBuilder), true)]
    public partial interface IScheduleRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Schedule.DayNotes
{
    [Proxy(typeof(DayNotesRequestBuilder), true)]
    public partial interface IDayNotesRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Schedule.DayNotes.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Schedule.DayNotes.Item
{
    [Proxy(typeof(DayNoteItemRequestBuilder), true)]
    public partial interface IDayNoteItemRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Schedule.OfferShiftRequests
{
    [Proxy(typeof(OfferShiftRequestsRequestBuilder), true)]
    public partial interface IOfferShiftRequestsRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Schedule.OfferShiftRequests.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Schedule.OfferShiftRequests.Item
{
    [Proxy(typeof(OfferShiftRequestItemRequestBuilder), true)]
    public partial interface IOfferShiftRequestItemRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Schedule.OpenShiftChangeRequests
{
    [Proxy(typeof(OpenShiftChangeRequestsRequestBuilder), true)]
    public partial interface IOpenShiftChangeRequestsRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Schedule.OpenShiftChangeRequests.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Schedule.OpenShiftChangeRequests.Item
{
    [Proxy(typeof(OpenShiftChangeRequestItemRequestBuilder), true)]
    public partial interface IOpenShiftChangeRequestItemRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Schedule.OpenShifts
{
    [Proxy(typeof(OpenShiftsRequestBuilder), true)]
    public partial interface IOpenShiftsRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Schedule.OpenShifts.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Schedule.OpenShifts.Item
{
    [Proxy(typeof(OpenShiftItemRequestBuilder), true)]
    public partial interface IOpenShiftItemRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Schedule.SchedulingGroups
{
    [Proxy(typeof(SchedulingGroupsRequestBuilder), true)]
    public partial interface ISchedulingGroupsRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Schedule.SchedulingGroups.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Schedule.SchedulingGroups.Item
{
    [Proxy(typeof(SchedulingGroupItemRequestBuilder), true)]
    public partial interface ISchedulingGroupItemRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Schedule.Share
{
    [Proxy(typeof(ShareRequestBuilder), true)]
    public partial interface IShareRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Schedule.Shifts
{
    [Proxy(typeof(ShiftsRequestBuilder), true)]
    public partial interface IShiftsRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Schedule.Shifts.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Schedule.Shifts.Item
{
    [Proxy(typeof(ShiftItemRequestBuilder), true)]
    public partial interface IShiftItemRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Schedule.SwapShiftsChangeRequests
{
    [Proxy(typeof(SwapShiftsChangeRequestsRequestBuilder), true)]
    public partial interface ISwapShiftsChangeRequestsRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Schedule.SwapShiftsChangeRequests.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Schedule.SwapShiftsChangeRequests.Item
{
    [Proxy(typeof(SwapShiftsChangeRequestItemRequestBuilder), true)]
    public partial interface ISwapShiftsChangeRequestItemRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Schedule.TimeCards
{
    [Proxy(typeof(TimeCardsRequestBuilder), true)]
    public partial interface ITimeCardsRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Schedule.TimeCards.ClockIn
{
    [Proxy(typeof(ClockInRequestBuilder), true)]
    public partial interface IClockInRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Schedule.TimeCards.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Schedule.TimeCards.Item
{
    [Proxy(typeof(TimeCardItemRequestBuilder), true)]
    public partial interface ITimeCardItemRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Schedule.TimeCards.Item.ClockOut
{
    [Proxy(typeof(ClockOutRequestBuilder), true)]
    public partial interface IClockOutRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Schedule.TimeCards.Item.Confirm
{
    [Proxy(typeof(ConfirmRequestBuilder), true)]
    public partial interface IConfirmRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Schedule.TimeCards.Item.EndBreak
{
    [Proxy(typeof(EndBreakRequestBuilder), true)]
    public partial interface IEndBreakRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Schedule.TimeCards.Item.StartBreak
{
    [Proxy(typeof(StartBreakRequestBuilder), true)]
    public partial interface IStartBreakRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Schedule.TimeOffReasons
{
    [Proxy(typeof(TimeOffReasonsRequestBuilder), true)]
    public partial interface ITimeOffReasonsRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Schedule.TimeOffReasons.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Schedule.TimeOffReasons.Item
{
    [Proxy(typeof(TimeOffReasonItemRequestBuilder), true)]
    public partial interface ITimeOffReasonItemRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Schedule.TimeOffRequests
{
    [Proxy(typeof(TimeOffRequestsRequestBuilder), true)]
    public partial interface ITimeOffRequestsRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Schedule.TimeOffRequests.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Schedule.TimeOffRequests.Item
{
    [Proxy(typeof(TimeOffRequestItemRequestBuilder), true)]
    public partial interface ITimeOffRequestItemRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Schedule.TimesOff
{
    [Proxy(typeof(TimesOffRequestBuilder), true)]
    public partial interface ITimesOffRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Schedule.TimesOff.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Schedule.TimesOff.Item
{
    [Proxy(typeof(TimeOffItemRequestBuilder), true)]
    public partial interface ITimeOffItemRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.SendActivityNotification
{
    [Proxy(typeof(SendActivityNotificationRequestBuilder), true)]
    public partial interface ISendActivityNotificationRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Tags
{
    [Proxy(typeof(TagsRequestBuilder), true)]
    public partial interface ITagsRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Tags.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Tags.Item
{
    [Proxy(typeof(TeamworkTagItemRequestBuilder), true)]
    public partial interface ITeamworkTagItemRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Tags.Item.Members
{
    [Proxy(typeof(MembersRequestBuilder), true)]
    public partial interface IMembersRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Tags.Item.Members.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Tags.Item.Members.Item
{
    [Proxy(typeof(TeamworkTagMemberItemRequestBuilder), true)]
    public partial interface ITeamworkTagMemberItemRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Template
{
    [Proxy(typeof(TemplateRequestBuilder), true)]
    public partial interface ITemplateRequestBuilder;
}

namespace Microsoft.Graph.Me.JoinedTeams.Item.Unarchive
{
    [Proxy(typeof(UnarchiveRequestBuilder), true)]
    public partial interface IUnarchiveRequestBuilder;
}

namespace Microsoft.Graph.Me.LicenseDetails
{
    [Proxy(typeof(LicenseDetailsRequestBuilder), true)]
    public partial interface ILicenseDetailsRequestBuilder;
}

namespace Microsoft.Graph.Me.LicenseDetails.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.LicenseDetails.GetTeamsLicensingDetails
{
    [Proxy(typeof(GetTeamsLicensingDetailsRequestBuilder), true)]
    public partial interface IGetTeamsLicensingDetailsRequestBuilder;
}

namespace Microsoft.Graph.Me.LicenseDetails.Item
{
    [Proxy(typeof(LicenseDetailsItemRequestBuilder), true)]
    public partial interface ILicenseDetailsItemRequestBuilder;
}

namespace Microsoft.Graph.Me.MailboxSettings
{
    [Proxy(typeof(MailboxSettingsRequestBuilder), true)]
    public partial interface IMailboxSettingsRequestBuilder;
}

namespace Microsoft.Graph.Me.MailFolders
{
    [Proxy(typeof(MailFoldersRequestBuilder), true)]
    public partial interface IMailFoldersRequestBuilder;
}

namespace Microsoft.Graph.Me.MailFolders.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.MailFolders.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Me.MailFolders.Item
{
    [Proxy(typeof(MailFolderItemRequestBuilder), true)]
    public partial interface IMailFolderItemRequestBuilder;
}

namespace Microsoft.Graph.Me.MailFolders.Item.ChildFolders
{
    [Proxy(typeof(ChildFoldersRequestBuilder), true)]
    public partial interface IChildFoldersRequestBuilder;
}

namespace Microsoft.Graph.Me.MailFolders.Item.ChildFolders.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.MailFolders.Item.ChildFolders.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Me.MailFolders.Item.ChildFolders.Item
{
    [Proxy(typeof(MailFolderItemRequestBuilder), true)]
    public partial interface IMailFolderItemRequestBuilder;
}

namespace Microsoft.Graph.Me.MailFolders.Item.ChildFolders.Item.Copy
{
    [Proxy(typeof(CopyRequestBuilder), true)]
    public partial interface ICopyRequestBuilder;
}

namespace Microsoft.Graph.Me.MailFolders.Item.ChildFolders.Item.MessageRules
{
    [Proxy(typeof(MessageRulesRequestBuilder), true)]
    public partial interface IMessageRulesRequestBuilder;
}

namespace Microsoft.Graph.Me.MailFolders.Item.ChildFolders.Item.MessageRules.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.MailFolders.Item.ChildFolders.Item.MessageRules.Item
{
    [Proxy(typeof(MessageRuleItemRequestBuilder), true)]
    public partial interface IMessageRuleItemRequestBuilder;
}

namespace Microsoft.Graph.Me.MailFolders.Item.ChildFolders.Item.Messages
{
    [Proxy(typeof(MessagesRequestBuilder), true)]
    public partial interface IMessagesRequestBuilder;
}

namespace Microsoft.Graph.Me.MailFolders.Item.ChildFolders.Item.Messages.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.MailFolders.Item.ChildFolders.Item.Messages.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Me.MailFolders.Item.ChildFolders.Item.Messages.Item
{
    [Proxy(typeof(MessageItemRequestBuilder), true)]
    public partial interface IMessageItemRequestBuilder;
}

namespace Microsoft.Graph.Me.MailFolders.Item.ChildFolders.Item.Messages.Item.Attachments
{
    [Proxy(typeof(AttachmentsRequestBuilder), true)]
    public partial interface IAttachmentsRequestBuilder;
}

namespace Microsoft.Graph.Me.MailFolders.Item.ChildFolders.Item.Messages.Item.Attachments.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.MailFolders.Item.ChildFolders.Item.Messages.Item.Attachments.CreateUploadSession
{
    [Proxy(typeof(CreateUploadSessionRequestBuilder), true)]
    public partial interface ICreateUploadSessionRequestBuilder;
}

namespace Microsoft.Graph.Me.MailFolders.Item.ChildFolders.Item.Messages.Item.Attachments.Item
{
    [Proxy(typeof(AttachmentItemRequestBuilder), true)]
    public partial interface IAttachmentItemRequestBuilder;
}

namespace Microsoft.Graph.Me.MailFolders.Item.ChildFolders.Item.Messages.Item.Copy
{
    [Proxy(typeof(CopyRequestBuilder), true)]
    public partial interface ICopyRequestBuilder;
}

namespace Microsoft.Graph.Me.MailFolders.Item.ChildFolders.Item.Messages.Item.CreateForward
{
    [Proxy(typeof(CreateForwardRequestBuilder), true)]
    public partial interface ICreateForwardRequestBuilder;
}

namespace Microsoft.Graph.Me.MailFolders.Item.ChildFolders.Item.Messages.Item.CreateReply
{
    [Proxy(typeof(CreateReplyRequestBuilder), true)]
    public partial interface ICreateReplyRequestBuilder;
}

namespace Microsoft.Graph.Me.MailFolders.Item.ChildFolders.Item.Messages.Item.CreateReplyAll
{
    [Proxy(typeof(CreateReplyAllRequestBuilder), true)]
    public partial interface ICreateReplyAllRequestBuilder;
}

namespace Microsoft.Graph.Me.MailFolders.Item.ChildFolders.Item.Messages.Item.Extensions
{
    [Proxy(typeof(ExtensionsRequestBuilder), true)]
    public partial interface IExtensionsRequestBuilder;
}

namespace Microsoft.Graph.Me.MailFolders.Item.ChildFolders.Item.Messages.Item.Extensions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.MailFolders.Item.ChildFolders.Item.Messages.Item.Extensions.Item
{
    [Proxy(typeof(ExtensionItemRequestBuilder), true)]
    public partial interface IExtensionItemRequestBuilder;
}

namespace Microsoft.Graph.Me.MailFolders.Item.ChildFolders.Item.Messages.Item.Forward
{
    [Proxy(typeof(ForwardRequestBuilder), true)]
    public partial interface IForwardRequestBuilder;
}

namespace Microsoft.Graph.Me.MailFolders.Item.ChildFolders.Item.Messages.Item.Move
{
    [Proxy(typeof(MoveRequestBuilder), true)]
    public partial interface IMoveRequestBuilder;
}

namespace Microsoft.Graph.Me.MailFolders.Item.ChildFolders.Item.Messages.Item.PermanentDelete
{
    [Proxy(typeof(PermanentDeleteRequestBuilder), true)]
    public partial interface IPermanentDeleteRequestBuilder;
}

namespace Microsoft.Graph.Me.MailFolders.Item.ChildFolders.Item.Messages.Item.Reply
{
    [Proxy(typeof(ReplyRequestBuilder), true)]
    public partial interface IReplyRequestBuilder;
}

namespace Microsoft.Graph.Me.MailFolders.Item.ChildFolders.Item.Messages.Item.ReplyAll
{
    [Proxy(typeof(ReplyAllRequestBuilder), true)]
    public partial interface IReplyAllRequestBuilder;
}

namespace Microsoft.Graph.Me.MailFolders.Item.ChildFolders.Item.Messages.Item.Send
{
    [Proxy(typeof(SendRequestBuilder), true)]
    public partial interface ISendRequestBuilder;
}

namespace Microsoft.Graph.Me.MailFolders.Item.ChildFolders.Item.Messages.Item.Value
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Me.MailFolders.Item.ChildFolders.Item.Move
{
    [Proxy(typeof(MoveRequestBuilder), true)]
    public partial interface IMoveRequestBuilder;
}

namespace Microsoft.Graph.Me.MailFolders.Item.ChildFolders.Item.PermanentDelete
{
    [Proxy(typeof(PermanentDeleteRequestBuilder), true)]
    public partial interface IPermanentDeleteRequestBuilder;
}

namespace Microsoft.Graph.Me.MailFolders.Item.Copy
{
    [Proxy(typeof(CopyRequestBuilder), true)]
    public partial interface ICopyRequestBuilder;
}

namespace Microsoft.Graph.Me.MailFolders.Item.MessageRules
{
    [Proxy(typeof(MessageRulesRequestBuilder), true)]
    public partial interface IMessageRulesRequestBuilder;
}

namespace Microsoft.Graph.Me.MailFolders.Item.MessageRules.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.MailFolders.Item.MessageRules.Item
{
    [Proxy(typeof(MessageRuleItemRequestBuilder), true)]
    public partial interface IMessageRuleItemRequestBuilder;
}

namespace Microsoft.Graph.Me.MailFolders.Item.Messages
{
    [Proxy(typeof(MessagesRequestBuilder), true)]
    public partial interface IMessagesRequestBuilder;
}

namespace Microsoft.Graph.Me.MailFolders.Item.Messages.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.MailFolders.Item.Messages.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Me.MailFolders.Item.Messages.Item
{
    [Proxy(typeof(MessageItemRequestBuilder), true)]
    public partial interface IMessageItemRequestBuilder;
}

namespace Microsoft.Graph.Me.MailFolders.Item.Messages.Item.Attachments
{
    [Proxy(typeof(AttachmentsRequestBuilder), true)]
    public partial interface IAttachmentsRequestBuilder;
}

namespace Microsoft.Graph.Me.MailFolders.Item.Messages.Item.Attachments.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.MailFolders.Item.Messages.Item.Attachments.CreateUploadSession
{
    [Proxy(typeof(CreateUploadSessionRequestBuilder), true)]
    public partial interface ICreateUploadSessionRequestBuilder;
}

namespace Microsoft.Graph.Me.MailFolders.Item.Messages.Item.Attachments.Item
{
    [Proxy(typeof(AttachmentItemRequestBuilder), true)]
    public partial interface IAttachmentItemRequestBuilder;
}

namespace Microsoft.Graph.Me.MailFolders.Item.Messages.Item.Copy
{
    [Proxy(typeof(CopyRequestBuilder), true)]
    public partial interface ICopyRequestBuilder;
}

namespace Microsoft.Graph.Me.MailFolders.Item.Messages.Item.CreateForward
{
    [Proxy(typeof(CreateForwardRequestBuilder), true)]
    public partial interface ICreateForwardRequestBuilder;
}

namespace Microsoft.Graph.Me.MailFolders.Item.Messages.Item.CreateReply
{
    [Proxy(typeof(CreateReplyRequestBuilder), true)]
    public partial interface ICreateReplyRequestBuilder;
}

namespace Microsoft.Graph.Me.MailFolders.Item.Messages.Item.CreateReplyAll
{
    [Proxy(typeof(CreateReplyAllRequestBuilder), true)]
    public partial interface ICreateReplyAllRequestBuilder;
}

namespace Microsoft.Graph.Me.MailFolders.Item.Messages.Item.Extensions
{
    [Proxy(typeof(ExtensionsRequestBuilder), true)]
    public partial interface IExtensionsRequestBuilder;
}

namespace Microsoft.Graph.Me.MailFolders.Item.Messages.Item.Extensions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.MailFolders.Item.Messages.Item.Extensions.Item
{
    [Proxy(typeof(ExtensionItemRequestBuilder), true)]
    public partial interface IExtensionItemRequestBuilder;
}

namespace Microsoft.Graph.Me.MailFolders.Item.Messages.Item.Forward
{
    [Proxy(typeof(ForwardRequestBuilder), true)]
    public partial interface IForwardRequestBuilder;
}

namespace Microsoft.Graph.Me.MailFolders.Item.Messages.Item.Move
{
    [Proxy(typeof(MoveRequestBuilder), true)]
    public partial interface IMoveRequestBuilder;
}

namespace Microsoft.Graph.Me.MailFolders.Item.Messages.Item.PermanentDelete
{
    [Proxy(typeof(PermanentDeleteRequestBuilder), true)]
    public partial interface IPermanentDeleteRequestBuilder;
}

namespace Microsoft.Graph.Me.MailFolders.Item.Messages.Item.Reply
{
    [Proxy(typeof(ReplyRequestBuilder), true)]
    public partial interface IReplyRequestBuilder;
}

namespace Microsoft.Graph.Me.MailFolders.Item.Messages.Item.ReplyAll
{
    [Proxy(typeof(ReplyAllRequestBuilder), true)]
    public partial interface IReplyAllRequestBuilder;
}

namespace Microsoft.Graph.Me.MailFolders.Item.Messages.Item.Send
{
    [Proxy(typeof(SendRequestBuilder), true)]
    public partial interface ISendRequestBuilder;
}

namespace Microsoft.Graph.Me.MailFolders.Item.Messages.Item.Value
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Me.MailFolders.Item.Move
{
    [Proxy(typeof(MoveRequestBuilder), true)]
    public partial interface IMoveRequestBuilder;
}

namespace Microsoft.Graph.Me.MailFolders.Item.PermanentDelete
{
    [Proxy(typeof(PermanentDeleteRequestBuilder), true)]
    public partial interface IPermanentDeleteRequestBuilder;
}

namespace Microsoft.Graph.Me.ManagedAppRegistrations
{
    [Proxy(typeof(ManagedAppRegistrationsRequestBuilder), true)]
    public partial interface IManagedAppRegistrationsRequestBuilder;
}

namespace Microsoft.Graph.Me.ManagedAppRegistrations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.ManagedAppRegistrations.Item
{
    [Proxy(typeof(ManagedAppRegistrationItemRequestBuilder), true)]
    public partial interface IManagedAppRegistrationItemRequestBuilder;
}

namespace Microsoft.Graph.Me.ManagedDevices
{
    [Proxy(typeof(ManagedDevicesRequestBuilder), true)]
    public partial interface IManagedDevicesRequestBuilder;
}

namespace Microsoft.Graph.Me.ManagedDevices.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.ManagedDevices.Item
{
    [Proxy(typeof(ManagedDeviceItemRequestBuilder), true)]
    public partial interface IManagedDeviceItemRequestBuilder;
}

namespace Microsoft.Graph.Me.ManagedDevices.Item.BypassActivationLock
{
    [Proxy(typeof(BypassActivationLockRequestBuilder), true)]
    public partial interface IBypassActivationLockRequestBuilder;
}

namespace Microsoft.Graph.Me.ManagedDevices.Item.CleanWindowsDevice
{
    [Proxy(typeof(CleanWindowsDeviceRequestBuilder), true)]
    public partial interface ICleanWindowsDeviceRequestBuilder;
}

namespace Microsoft.Graph.Me.ManagedDevices.Item.DeleteUserFromSharedAppleDevice
{
    [Proxy(typeof(DeleteUserFromSharedAppleDeviceRequestBuilder), true)]
    public partial interface IDeleteUserFromSharedAppleDeviceRequestBuilder;
}

namespace Microsoft.Graph.Me.ManagedDevices.Item.DeviceCategory
{
    [Proxy(typeof(DeviceCategoryRequestBuilder), true)]
    public partial interface IDeviceCategoryRequestBuilder;
}

namespace Microsoft.Graph.Me.ManagedDevices.Item.DeviceCategory.Ref
{
    [Proxy(typeof(RefRequestBuilder), true)]
    public partial interface IRefRequestBuilder;
}

namespace Microsoft.Graph.Me.ManagedDevices.Item.DeviceCompliancePolicyStates
{
    [Proxy(typeof(DeviceCompliancePolicyStatesRequestBuilder), true)]
    public partial interface IDeviceCompliancePolicyStatesRequestBuilder;
}

namespace Microsoft.Graph.Me.ManagedDevices.Item.DeviceCompliancePolicyStates.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.ManagedDevices.Item.DeviceCompliancePolicyStates.Item
{
    [Proxy(typeof(DeviceCompliancePolicyStateItemRequestBuilder), true)]
    public partial interface IDeviceCompliancePolicyStateItemRequestBuilder;
}

namespace Microsoft.Graph.Me.ManagedDevices.Item.DeviceConfigurationStates
{
    [Proxy(typeof(DeviceConfigurationStatesRequestBuilder), true)]
    public partial interface IDeviceConfigurationStatesRequestBuilder;
}

namespace Microsoft.Graph.Me.ManagedDevices.Item.DeviceConfigurationStates.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.ManagedDevices.Item.DeviceConfigurationStates.Item
{
    [Proxy(typeof(DeviceConfigurationStateItemRequestBuilder), true)]
    public partial interface IDeviceConfigurationStateItemRequestBuilder;
}

namespace Microsoft.Graph.Me.ManagedDevices.Item.DisableLostMode
{
    [Proxy(typeof(DisableLostModeRequestBuilder), true)]
    public partial interface IDisableLostModeRequestBuilder;
}

namespace Microsoft.Graph.Me.ManagedDevices.Item.LocateDevice
{
    [Proxy(typeof(LocateDeviceRequestBuilder), true)]
    public partial interface ILocateDeviceRequestBuilder;
}

namespace Microsoft.Graph.Me.ManagedDevices.Item.LogCollectionRequests
{
    [Proxy(typeof(LogCollectionRequestsRequestBuilder), true)]
    public partial interface ILogCollectionRequestsRequestBuilder;
}

namespace Microsoft.Graph.Me.ManagedDevices.Item.LogCollectionRequests.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.ManagedDevices.Item.LogCollectionRequests.Item
{
    [Proxy(typeof(DeviceLogCollectionResponseItemRequestBuilder), true)]
    public partial interface IDeviceLogCollectionResponseItemRequestBuilder;
}

namespace Microsoft.Graph.Me.ManagedDevices.Item.LogCollectionRequests.Item.CreateDownloadUrl
{
    [Proxy(typeof(CreateDownloadUrlRequestBuilder), true)]
    public partial interface ICreateDownloadUrlRequestBuilder;
}

namespace Microsoft.Graph.Me.ManagedDevices.Item.LogoutSharedAppleDeviceActiveUser
{
    [Proxy(typeof(LogoutSharedAppleDeviceActiveUserRequestBuilder), true)]
    public partial interface ILogoutSharedAppleDeviceActiveUserRequestBuilder;
}

namespace Microsoft.Graph.Me.ManagedDevices.Item.RebootNow
{
    [Proxy(typeof(RebootNowRequestBuilder), true)]
    public partial interface IRebootNowRequestBuilder;
}

namespace Microsoft.Graph.Me.ManagedDevices.Item.RecoverPasscode
{
    [Proxy(typeof(RecoverPasscodeRequestBuilder), true)]
    public partial interface IRecoverPasscodeRequestBuilder;
}

namespace Microsoft.Graph.Me.ManagedDevices.Item.RemoteLock
{
    [Proxy(typeof(RemoteLockRequestBuilder), true)]
    public partial interface IRemoteLockRequestBuilder;
}

namespace Microsoft.Graph.Me.ManagedDevices.Item.RequestRemoteAssistance
{
    [Proxy(typeof(RequestRemoteAssistanceRequestBuilder), true)]
    public partial interface IRequestRemoteAssistanceRequestBuilder;
}

namespace Microsoft.Graph.Me.ManagedDevices.Item.ResetPasscode
{
    [Proxy(typeof(ResetPasscodeRequestBuilder), true)]
    public partial interface IResetPasscodeRequestBuilder;
}

namespace Microsoft.Graph.Me.ManagedDevices.Item.Retire
{
    [Proxy(typeof(RetireRequestBuilder), true)]
    public partial interface IRetireRequestBuilder;
}

namespace Microsoft.Graph.Me.ManagedDevices.Item.ShutDown
{
    [Proxy(typeof(ShutDownRequestBuilder), true)]
    public partial interface IShutDownRequestBuilder;
}

namespace Microsoft.Graph.Me.ManagedDevices.Item.SyncDevice
{
    [Proxy(typeof(SyncDeviceRequestBuilder), true)]
    public partial interface ISyncDeviceRequestBuilder;
}

namespace Microsoft.Graph.Me.ManagedDevices.Item.UpdateWindowsDeviceAccount
{
    [Proxy(typeof(UpdateWindowsDeviceAccountRequestBuilder), true)]
    public partial interface IUpdateWindowsDeviceAccountRequestBuilder;
}

namespace Microsoft.Graph.Me.ManagedDevices.Item.Users
{
    [Proxy(typeof(UsersRequestBuilder), true)]
    public partial interface IUsersRequestBuilder;
}

namespace Microsoft.Graph.Me.ManagedDevices.Item.WindowsDefenderScan
{
    [Proxy(typeof(WindowsDefenderScanRequestBuilder), true)]
    public partial interface IWindowsDefenderScanRequestBuilder;
}

namespace Microsoft.Graph.Me.ManagedDevices.Item.WindowsDefenderUpdateSignatures
{
    [Proxy(typeof(WindowsDefenderUpdateSignaturesRequestBuilder), true)]
    public partial interface IWindowsDefenderUpdateSignaturesRequestBuilder;
}

namespace Microsoft.Graph.Me.ManagedDevices.Item.WindowsProtectionState
{
    [Proxy(typeof(WindowsProtectionStateRequestBuilder), true)]
    public partial interface IWindowsProtectionStateRequestBuilder;
}

namespace Microsoft.Graph.Me.ManagedDevices.Item.WindowsProtectionState.DetectedMalwareState
{
    [Proxy(typeof(DetectedMalwareStateRequestBuilder), true)]
    public partial interface IDetectedMalwareStateRequestBuilder;
}

namespace Microsoft.Graph.Me.ManagedDevices.Item.WindowsProtectionState.DetectedMalwareState.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.ManagedDevices.Item.WindowsProtectionState.DetectedMalwareState.Item
{
    [Proxy(typeof(WindowsDeviceMalwareStateItemRequestBuilder), true)]
    public partial interface IWindowsDeviceMalwareStateItemRequestBuilder;
}

namespace Microsoft.Graph.Me.ManagedDevices.Item.Wipe
{
    [Proxy(typeof(WipeRequestBuilder), true)]
    public partial interface IWipeRequestBuilder;
}

namespace Microsoft.Graph.Me.Manager
{
    [Proxy(typeof(ManagerRequestBuilder), true)]
    public partial interface IManagerRequestBuilder;
}

namespace Microsoft.Graph.Me.Manager.Ref
{
    [Proxy(typeof(RefRequestBuilder), true)]
    public partial interface IRefRequestBuilder;
}

namespace Microsoft.Graph.Me.MemberOf
{
    [Proxy(typeof(MemberOfRequestBuilder), true)]
    public partial interface IMemberOfRequestBuilder;
}

namespace Microsoft.Graph.Me.MemberOf.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.MemberOf.GraphAdministrativeUnit
{
    [Proxy(typeof(GraphAdministrativeUnitRequestBuilder), true)]
    public partial interface IGraphAdministrativeUnitRequestBuilder;
}

namespace Microsoft.Graph.Me.MemberOf.GraphAdministrativeUnit.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.MemberOf.GraphDirectoryRole
{
    [Proxy(typeof(GraphDirectoryRoleRequestBuilder), true)]
    public partial interface IGraphDirectoryRoleRequestBuilder;
}

namespace Microsoft.Graph.Me.MemberOf.GraphDirectoryRole.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.MemberOf.GraphGroup
{
    [Proxy(typeof(GraphGroupRequestBuilder), true)]
    public partial interface IGraphGroupRequestBuilder;
}

namespace Microsoft.Graph.Me.MemberOf.GraphGroup.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.MemberOf.Item
{
    [Proxy(typeof(DirectoryObjectItemRequestBuilder), true)]
    public partial interface IDirectoryObjectItemRequestBuilder;
}

namespace Microsoft.Graph.Me.MemberOf.Item.GraphAdministrativeUnit
{
    [Proxy(typeof(GraphAdministrativeUnitRequestBuilder), true)]
    public partial interface IGraphAdministrativeUnitRequestBuilder;
}

namespace Microsoft.Graph.Me.MemberOf.Item.GraphDirectoryRole
{
    [Proxy(typeof(GraphDirectoryRoleRequestBuilder), true)]
    public partial interface IGraphDirectoryRoleRequestBuilder;
}

namespace Microsoft.Graph.Me.MemberOf.Item.GraphGroup
{
    [Proxy(typeof(GraphGroupRequestBuilder), true)]
    public partial interface IGraphGroupRequestBuilder;
}

namespace Microsoft.Graph.Me.Messages
{
    [Proxy(typeof(MessagesRequestBuilder), true)]
    public partial interface IMessagesRequestBuilder;
}

namespace Microsoft.Graph.Me.Messages.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.Messages.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Me.Messages.Item
{
    [Proxy(typeof(MessageItemRequestBuilder), true)]
    public partial interface IMessageItemRequestBuilder;
}

namespace Microsoft.Graph.Me.Messages.Item.Attachments
{
    [Proxy(typeof(AttachmentsRequestBuilder), true)]
    public partial interface IAttachmentsRequestBuilder;
}

namespace Microsoft.Graph.Me.Messages.Item.Attachments.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.Messages.Item.Attachments.CreateUploadSession
{
    [Proxy(typeof(CreateUploadSessionRequestBuilder), true)]
    public partial interface ICreateUploadSessionRequestBuilder;
}

namespace Microsoft.Graph.Me.Messages.Item.Attachments.Item
{
    [Proxy(typeof(AttachmentItemRequestBuilder), true)]
    public partial interface IAttachmentItemRequestBuilder;
}

namespace Microsoft.Graph.Me.Messages.Item.Copy
{
    [Proxy(typeof(CopyRequestBuilder), true)]
    public partial interface ICopyRequestBuilder;
}

namespace Microsoft.Graph.Me.Messages.Item.CreateForward
{
    [Proxy(typeof(CreateForwardRequestBuilder), true)]
    public partial interface ICreateForwardRequestBuilder;
}

namespace Microsoft.Graph.Me.Messages.Item.CreateReply
{
    [Proxy(typeof(CreateReplyRequestBuilder), true)]
    public partial interface ICreateReplyRequestBuilder;
}

namespace Microsoft.Graph.Me.Messages.Item.CreateReplyAll
{
    [Proxy(typeof(CreateReplyAllRequestBuilder), true)]
    public partial interface ICreateReplyAllRequestBuilder;
}

namespace Microsoft.Graph.Me.Messages.Item.Extensions
{
    [Proxy(typeof(ExtensionsRequestBuilder), true)]
    public partial interface IExtensionsRequestBuilder;
}

namespace Microsoft.Graph.Me.Messages.Item.Extensions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.Messages.Item.Extensions.Item
{
    [Proxy(typeof(ExtensionItemRequestBuilder), true)]
    public partial interface IExtensionItemRequestBuilder;
}

namespace Microsoft.Graph.Me.Messages.Item.Forward
{
    [Proxy(typeof(ForwardRequestBuilder), true)]
    public partial interface IForwardRequestBuilder;
}

namespace Microsoft.Graph.Me.Messages.Item.Move
{
    [Proxy(typeof(MoveRequestBuilder), true)]
    public partial interface IMoveRequestBuilder;
}

namespace Microsoft.Graph.Me.Messages.Item.PermanentDelete
{
    [Proxy(typeof(PermanentDeleteRequestBuilder), true)]
    public partial interface IPermanentDeleteRequestBuilder;
}

namespace Microsoft.Graph.Me.Messages.Item.Reply
{
    [Proxy(typeof(ReplyRequestBuilder), true)]
    public partial interface IReplyRequestBuilder;
}

namespace Microsoft.Graph.Me.Messages.Item.ReplyAll
{
    [Proxy(typeof(ReplyAllRequestBuilder), true)]
    public partial interface IReplyAllRequestBuilder;
}

namespace Microsoft.Graph.Me.Messages.Item.Send
{
    [Proxy(typeof(SendRequestBuilder), true)]
    public partial interface ISendRequestBuilder;
}

namespace Microsoft.Graph.Me.Messages.Item.Value
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Me.Oauth2PermissionGrants
{
    [Proxy(typeof(Oauth2PermissionGrantsRequestBuilder), true)]
    public partial interface IOauth2PermissionGrantsRequestBuilder;
}

namespace Microsoft.Graph.Me.Oauth2PermissionGrants.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.Oauth2PermissionGrants.Item
{
    [Proxy(typeof(OAuth2PermissionGrantItemRequestBuilder), true)]
    public partial interface IOAuth2PermissionGrantItemRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote
{
    [Proxy(typeof(OnenoteRequestBuilder), true)]
    public partial interface IOnenoteRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.Notebooks
{
    [Proxy(typeof(NotebooksRequestBuilder), true)]
    public partial interface INotebooksRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.Notebooks.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.Notebooks.GetNotebookFromWebUrl
{
    [Proxy(typeof(GetNotebookFromWebUrlRequestBuilder), true)]
    public partial interface IGetNotebookFromWebUrlRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.Notebooks.GetRecentNotebooksWithIncludePersonalNotebooks
{
    [Proxy(typeof(GetRecentNotebooksWithIncludePersonalNotebooksRequestBuilder), true)]
    public partial interface IGetRecentNotebooksWithIncludePersonalNotebooksRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.Notebooks.Item
{
    [Proxy(typeof(NotebookItemRequestBuilder), true)]
    public partial interface INotebookItemRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.Notebooks.Item.CopyNotebook
{
    [Proxy(typeof(CopyNotebookRequestBuilder), true)]
    public partial interface ICopyNotebookRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.Notebooks.Item.SectionGroups
{
    [Proxy(typeof(SectionGroupsRequestBuilder), true)]
    public partial interface ISectionGroupsRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.Notebooks.Item.SectionGroups.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.Notebooks.Item.SectionGroups.Item
{
    [Proxy(typeof(SectionGroupItemRequestBuilder), true)]
    public partial interface ISectionGroupItemRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.Notebooks.Item.SectionGroups.Item.ParentNotebook
{
    [Proxy(typeof(ParentNotebookRequestBuilder), true)]
    public partial interface IParentNotebookRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.Notebooks.Item.SectionGroups.Item.ParentSectionGroup
{
    [Proxy(typeof(ParentSectionGroupRequestBuilder), true)]
    public partial interface IParentSectionGroupRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.Notebooks.Item.SectionGroups.Item.SectionGroups
{
    [Proxy(typeof(SectionGroupsRequestBuilder), true)]
    public partial interface ISectionGroupsRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.Notebooks.Item.SectionGroups.Item.SectionGroups.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.Notebooks.Item.SectionGroups.Item.SectionGroups.Item
{
    [Proxy(typeof(SectionGroupItemRequestBuilder), true)]
    public partial interface ISectionGroupItemRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.Notebooks.Item.SectionGroups.Item.Sections
{
    [Proxy(typeof(SectionsRequestBuilder), true)]
    public partial interface ISectionsRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.Notebooks.Item.SectionGroups.Item.Sections.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.Notebooks.Item.SectionGroups.Item.Sections.Item
{
    [Proxy(typeof(OnenoteSectionItemRequestBuilder), true)]
    public partial interface IOnenoteSectionItemRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.Notebooks.Item.SectionGroups.Item.Sections.Item.CopyToNotebook
{
    [Proxy(typeof(CopyToNotebookRequestBuilder), true)]
    public partial interface ICopyToNotebookRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.Notebooks.Item.SectionGroups.Item.Sections.Item.CopyToSectionGroup
{
    [Proxy(typeof(CopyToSectionGroupRequestBuilder), true)]
    public partial interface ICopyToSectionGroupRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.Notebooks.Item.SectionGroups.Item.Sections.Item.Pages
{
    [Proxy(typeof(PagesRequestBuilder), true)]
    public partial interface IPagesRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.Notebooks.Item.SectionGroups.Item.Sections.Item.Pages.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.Notebooks.Item.SectionGroups.Item.Sections.Item.Pages.Item
{
    [Proxy(typeof(OnenotePageItemRequestBuilder), true)]
    public partial interface IOnenotePageItemRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.Notebooks.Item.SectionGroups.Item.Sections.Item.Pages.Item.Content
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.Notebooks.Item.SectionGroups.Item.Sections.Item.Pages.Item.CopyToSection
{
    [Proxy(typeof(CopyToSectionRequestBuilder), true)]
    public partial interface ICopyToSectionRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.Notebooks.Item.SectionGroups.Item.Sections.Item.Pages.Item.OnenotePatchContent
{
    [Proxy(typeof(OnenotePatchContentRequestBuilder), true)]
    public partial interface IOnenotePatchContentRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.Notebooks.Item.SectionGroups.Item.Sections.Item.Pages.Item.ParentNotebook
{
    [Proxy(typeof(ParentNotebookRequestBuilder), true)]
    public partial interface IParentNotebookRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.Notebooks.Item.SectionGroups.Item.Sections.Item.Pages.Item.ParentSection
{
    [Proxy(typeof(ParentSectionRequestBuilder), true)]
    public partial interface IParentSectionRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.Notebooks.Item.SectionGroups.Item.Sections.Item.Pages.Item.Preview
{
    [Proxy(typeof(PreviewRequestBuilder), true)]
    public partial interface IPreviewRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.Notebooks.Item.SectionGroups.Item.Sections.Item.ParentNotebook
{
    [Proxy(typeof(ParentNotebookRequestBuilder), true)]
    public partial interface IParentNotebookRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.Notebooks.Item.SectionGroups.Item.Sections.Item.ParentSectionGroup
{
    [Proxy(typeof(ParentSectionGroupRequestBuilder), true)]
    public partial interface IParentSectionGroupRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.Notebooks.Item.Sections
{
    [Proxy(typeof(SectionsRequestBuilder), true)]
    public partial interface ISectionsRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.Notebooks.Item.Sections.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.Notebooks.Item.Sections.Item
{
    [Proxy(typeof(OnenoteSectionItemRequestBuilder), true)]
    public partial interface IOnenoteSectionItemRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.Notebooks.Item.Sections.Item.CopyToNotebook
{
    [Proxy(typeof(CopyToNotebookRequestBuilder), true)]
    public partial interface ICopyToNotebookRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.Notebooks.Item.Sections.Item.CopyToSectionGroup
{
    [Proxy(typeof(CopyToSectionGroupRequestBuilder), true)]
    public partial interface ICopyToSectionGroupRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.Notebooks.Item.Sections.Item.Pages
{
    [Proxy(typeof(PagesRequestBuilder), true)]
    public partial interface IPagesRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.Notebooks.Item.Sections.Item.Pages.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.Notebooks.Item.Sections.Item.Pages.Item
{
    [Proxy(typeof(OnenotePageItemRequestBuilder), true)]
    public partial interface IOnenotePageItemRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.Notebooks.Item.Sections.Item.Pages.Item.Content
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.Notebooks.Item.Sections.Item.Pages.Item.CopyToSection
{
    [Proxy(typeof(CopyToSectionRequestBuilder), true)]
    public partial interface ICopyToSectionRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.Notebooks.Item.Sections.Item.Pages.Item.OnenotePatchContent
{
    [Proxy(typeof(OnenotePatchContentRequestBuilder), true)]
    public partial interface IOnenotePatchContentRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.Notebooks.Item.Sections.Item.Pages.Item.ParentNotebook
{
    [Proxy(typeof(ParentNotebookRequestBuilder), true)]
    public partial interface IParentNotebookRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.Notebooks.Item.Sections.Item.Pages.Item.ParentSection
{
    [Proxy(typeof(ParentSectionRequestBuilder), true)]
    public partial interface IParentSectionRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.Notebooks.Item.Sections.Item.Pages.Item.Preview
{
    [Proxy(typeof(PreviewRequestBuilder), true)]
    public partial interface IPreviewRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.Notebooks.Item.Sections.Item.ParentNotebook
{
    [Proxy(typeof(ParentNotebookRequestBuilder), true)]
    public partial interface IParentNotebookRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.Notebooks.Item.Sections.Item.ParentSectionGroup
{
    [Proxy(typeof(ParentSectionGroupRequestBuilder), true)]
    public partial interface IParentSectionGroupRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.Operations
{
    [Proxy(typeof(OperationsRequestBuilder), true)]
    public partial interface IOperationsRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.Operations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.Operations.Item
{
    [Proxy(typeof(OnenoteOperationItemRequestBuilder), true)]
    public partial interface IOnenoteOperationItemRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.Pages
{
    [Proxy(typeof(PagesRequestBuilder), true)]
    public partial interface IPagesRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.Pages.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.Pages.Item
{
    [Proxy(typeof(OnenotePageItemRequestBuilder), true)]
    public partial interface IOnenotePageItemRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.Pages.Item.Content
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.Pages.Item.CopyToSection
{
    [Proxy(typeof(CopyToSectionRequestBuilder), true)]
    public partial interface ICopyToSectionRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.Pages.Item.OnenotePatchContent
{
    [Proxy(typeof(OnenotePatchContentRequestBuilder), true)]
    public partial interface IOnenotePatchContentRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.Pages.Item.ParentNotebook
{
    [Proxy(typeof(ParentNotebookRequestBuilder), true)]
    public partial interface IParentNotebookRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.Pages.Item.ParentSection
{
    [Proxy(typeof(ParentSectionRequestBuilder), true)]
    public partial interface IParentSectionRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.Pages.Item.Preview
{
    [Proxy(typeof(PreviewRequestBuilder), true)]
    public partial interface IPreviewRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.Resources
{
    [Proxy(typeof(ResourcesRequestBuilder), true)]
    public partial interface IResourcesRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.Resources.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.Resources.Item
{
    [Proxy(typeof(OnenoteResourceItemRequestBuilder), true)]
    public partial interface IOnenoteResourceItemRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.Resources.Item.Content
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.SectionGroups
{
    [Proxy(typeof(SectionGroupsRequestBuilder), true)]
    public partial interface ISectionGroupsRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.SectionGroups.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.SectionGroups.Item
{
    [Proxy(typeof(SectionGroupItemRequestBuilder), true)]
    public partial interface ISectionGroupItemRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.SectionGroups.Item.ParentNotebook
{
    [Proxy(typeof(ParentNotebookRequestBuilder), true)]
    public partial interface IParentNotebookRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.SectionGroups.Item.ParentSectionGroup
{
    [Proxy(typeof(ParentSectionGroupRequestBuilder), true)]
    public partial interface IParentSectionGroupRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.SectionGroups.Item.SectionGroups
{
    [Proxy(typeof(SectionGroupsRequestBuilder), true)]
    public partial interface ISectionGroupsRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.SectionGroups.Item.SectionGroups.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.SectionGroups.Item.SectionGroups.Item
{
    [Proxy(typeof(SectionGroupItemRequestBuilder), true)]
    public partial interface ISectionGroupItemRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.SectionGroups.Item.Sections
{
    [Proxy(typeof(SectionsRequestBuilder), true)]
    public partial interface ISectionsRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.SectionGroups.Item.Sections.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.SectionGroups.Item.Sections.Item
{
    [Proxy(typeof(OnenoteSectionItemRequestBuilder), true)]
    public partial interface IOnenoteSectionItemRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.SectionGroups.Item.Sections.Item.CopyToNotebook
{
    [Proxy(typeof(CopyToNotebookRequestBuilder), true)]
    public partial interface ICopyToNotebookRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.SectionGroups.Item.Sections.Item.CopyToSectionGroup
{
    [Proxy(typeof(CopyToSectionGroupRequestBuilder), true)]
    public partial interface ICopyToSectionGroupRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.SectionGroups.Item.Sections.Item.Pages
{
    [Proxy(typeof(PagesRequestBuilder), true)]
    public partial interface IPagesRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.SectionGroups.Item.Sections.Item.Pages.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.SectionGroups.Item.Sections.Item.Pages.Item
{
    [Proxy(typeof(OnenotePageItemRequestBuilder), true)]
    public partial interface IOnenotePageItemRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.SectionGroups.Item.Sections.Item.Pages.Item.Content
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.SectionGroups.Item.Sections.Item.Pages.Item.CopyToSection
{
    [Proxy(typeof(CopyToSectionRequestBuilder), true)]
    public partial interface ICopyToSectionRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.SectionGroups.Item.Sections.Item.Pages.Item.OnenotePatchContent
{
    [Proxy(typeof(OnenotePatchContentRequestBuilder), true)]
    public partial interface IOnenotePatchContentRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.SectionGroups.Item.Sections.Item.Pages.Item.ParentNotebook
{
    [Proxy(typeof(ParentNotebookRequestBuilder), true)]
    public partial interface IParentNotebookRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.SectionGroups.Item.Sections.Item.Pages.Item.ParentSection
{
    [Proxy(typeof(ParentSectionRequestBuilder), true)]
    public partial interface IParentSectionRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.SectionGroups.Item.Sections.Item.Pages.Item.Preview
{
    [Proxy(typeof(PreviewRequestBuilder), true)]
    public partial interface IPreviewRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.SectionGroups.Item.Sections.Item.ParentNotebook
{
    [Proxy(typeof(ParentNotebookRequestBuilder), true)]
    public partial interface IParentNotebookRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.SectionGroups.Item.Sections.Item.ParentSectionGroup
{
    [Proxy(typeof(ParentSectionGroupRequestBuilder), true)]
    public partial interface IParentSectionGroupRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.Sections
{
    [Proxy(typeof(SectionsRequestBuilder), true)]
    public partial interface ISectionsRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.Sections.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.Sections.Item
{
    [Proxy(typeof(OnenoteSectionItemRequestBuilder), true)]
    public partial interface IOnenoteSectionItemRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.Sections.Item.CopyToNotebook
{
    [Proxy(typeof(CopyToNotebookRequestBuilder), true)]
    public partial interface ICopyToNotebookRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.Sections.Item.CopyToSectionGroup
{
    [Proxy(typeof(CopyToSectionGroupRequestBuilder), true)]
    public partial interface ICopyToSectionGroupRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.Sections.Item.Pages
{
    [Proxy(typeof(PagesRequestBuilder), true)]
    public partial interface IPagesRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.Sections.Item.Pages.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.Sections.Item.Pages.Item
{
    [Proxy(typeof(OnenotePageItemRequestBuilder), true)]
    public partial interface IOnenotePageItemRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.Sections.Item.Pages.Item.Content
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.Sections.Item.Pages.Item.CopyToSection
{
    [Proxy(typeof(CopyToSectionRequestBuilder), true)]
    public partial interface ICopyToSectionRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.Sections.Item.Pages.Item.OnenotePatchContent
{
    [Proxy(typeof(OnenotePatchContentRequestBuilder), true)]
    public partial interface IOnenotePatchContentRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.Sections.Item.Pages.Item.ParentNotebook
{
    [Proxy(typeof(ParentNotebookRequestBuilder), true)]
    public partial interface IParentNotebookRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.Sections.Item.Pages.Item.ParentSection
{
    [Proxy(typeof(ParentSectionRequestBuilder), true)]
    public partial interface IParentSectionRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.Sections.Item.Pages.Item.Preview
{
    [Proxy(typeof(PreviewRequestBuilder), true)]
    public partial interface IPreviewRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.Sections.Item.ParentNotebook
{
    [Proxy(typeof(ParentNotebookRequestBuilder), true)]
    public partial interface IParentNotebookRequestBuilder;
}

namespace Microsoft.Graph.Me.Onenote.Sections.Item.ParentSectionGroup
{
    [Proxy(typeof(ParentSectionGroupRequestBuilder), true)]
    public partial interface IParentSectionGroupRequestBuilder;
}

namespace Microsoft.Graph.Me.OnlineMeetings
{
    [Proxy(typeof(OnlineMeetingsRequestBuilder), true)]
    public partial interface IOnlineMeetingsRequestBuilder;
}

namespace Microsoft.Graph.Me.OnlineMeetings.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.OnlineMeetings.CreateOrGet
{
    [Proxy(typeof(CreateOrGetRequestBuilder), true)]
    public partial interface ICreateOrGetRequestBuilder;
}

namespace Microsoft.Graph.Me.OnlineMeetings.GetAllRecordingsmeetingOrganizerUserIdMeetingOrganizerUserIdWithStartDateTimeWithEndDateTime
{
    [Proxy(typeof(GetAllRecordingsmeetingOrganizerUserIdMeetingOrganizerUserIdWithStartDateTimeWithEndDateTimeRequestBuilder), true)]
    public partial interface IGetAllRecordingsmeetingOrganizerUserIdMeetingOrganizerUserIdWithStartDateTimeWithEndDateTimeRequestBuilder;
}

namespace Microsoft.Graph.Me.OnlineMeetings.GetAllTranscriptsmeetingOrganizerUserIdMeetingOrganizerUserIdWithStartDateTimeWithEndDateTime
{
    [Proxy(typeof(GetAllTranscriptsmeetingOrganizerUserIdMeetingOrganizerUserIdWithStartDateTimeWithEndDateTimeRequestBuilder), true)]
    public partial interface IGetAllTranscriptsmeetingOrganizerUserIdMeetingOrganizerUserIdWithStartDateTimeWithEndDateTimeRequestBuilder;
}

namespace Microsoft.Graph.Me.OnlineMeetings.Item
{
    [Proxy(typeof(OnlineMeetingItemRequestBuilder), true)]
    public partial interface IOnlineMeetingItemRequestBuilder;
}

namespace Microsoft.Graph.Me.OnlineMeetings.Item.AttendanceReports
{
    [Proxy(typeof(AttendanceReportsRequestBuilder), true)]
    public partial interface IAttendanceReportsRequestBuilder;
}

namespace Microsoft.Graph.Me.OnlineMeetings.Item.AttendanceReports.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.OnlineMeetings.Item.AttendanceReports.Item
{
    [Proxy(typeof(MeetingAttendanceReportItemRequestBuilder), true)]
    public partial interface IMeetingAttendanceReportItemRequestBuilder;
}

namespace Microsoft.Graph.Me.OnlineMeetings.Item.AttendanceReports.Item.AttendanceRecords
{
    [Proxy(typeof(AttendanceRecordsRequestBuilder), true)]
    public partial interface IAttendanceRecordsRequestBuilder;
}

namespace Microsoft.Graph.Me.OnlineMeetings.Item.AttendanceReports.Item.AttendanceRecords.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.OnlineMeetings.Item.AttendanceReports.Item.AttendanceRecords.Item
{
    [Proxy(typeof(AttendanceRecordItemRequestBuilder), true)]
    public partial interface IAttendanceRecordItemRequestBuilder;
}

namespace Microsoft.Graph.Me.OnlineMeetings.Item.AttendeeReport
{
    [Proxy(typeof(AttendeeReportRequestBuilder), true)]
    public partial interface IAttendeeReportRequestBuilder;
}

namespace Microsoft.Graph.Me.OnlineMeetings.Item.GetVirtualAppointmentJoinWebUrl
{
    [Proxy(typeof(GetVirtualAppointmentJoinWebUrlRequestBuilder), true)]
    public partial interface IGetVirtualAppointmentJoinWebUrlRequestBuilder;
}

namespace Microsoft.Graph.Me.OnlineMeetings.Item.Recordings
{
    [Proxy(typeof(RecordingsRequestBuilder), true)]
    public partial interface IRecordingsRequestBuilder;
}

namespace Microsoft.Graph.Me.OnlineMeetings.Item.Recordings.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.OnlineMeetings.Item.Recordings.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Me.OnlineMeetings.Item.Recordings.Item
{
    [Proxy(typeof(CallRecordingItemRequestBuilder), true)]
    public partial interface ICallRecordingItemRequestBuilder;
}

namespace Microsoft.Graph.Me.OnlineMeetings.Item.Recordings.Item.Content
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Me.OnlineMeetings.Item.SendVirtualAppointmentReminderSms
{
    [Proxy(typeof(SendVirtualAppointmentReminderSmsRequestBuilder), true)]
    public partial interface ISendVirtualAppointmentReminderSmsRequestBuilder;
}

namespace Microsoft.Graph.Me.OnlineMeetings.Item.SendVirtualAppointmentSms
{
    [Proxy(typeof(SendVirtualAppointmentSmsRequestBuilder), true)]
    public partial interface ISendVirtualAppointmentSmsRequestBuilder;
}

namespace Microsoft.Graph.Me.OnlineMeetings.Item.Transcripts
{
    [Proxy(typeof(TranscriptsRequestBuilder), true)]
    public partial interface ITranscriptsRequestBuilder;
}

namespace Microsoft.Graph.Me.OnlineMeetings.Item.Transcripts.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.OnlineMeetings.Item.Transcripts.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Me.OnlineMeetings.Item.Transcripts.Item
{
    [Proxy(typeof(CallTranscriptItemRequestBuilder), true)]
    public partial interface ICallTranscriptItemRequestBuilder;
}

namespace Microsoft.Graph.Me.OnlineMeetings.Item.Transcripts.Item.Content
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Me.OnlineMeetings.Item.Transcripts.Item.MetadataContent
{
    [Proxy(typeof(MetadataContentRequestBuilder), true)]
    public partial interface IMetadataContentRequestBuilder;
}

namespace Microsoft.Graph.Me.Outlook
{
    [Proxy(typeof(OutlookRequestBuilder), true)]
    public partial interface IOutlookRequestBuilder;
}

namespace Microsoft.Graph.Me.Outlook.MasterCategories
{
    [Proxy(typeof(MasterCategoriesRequestBuilder), true)]
    public partial interface IMasterCategoriesRequestBuilder;
}

namespace Microsoft.Graph.Me.Outlook.MasterCategories.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.Outlook.MasterCategories.Item
{
    [Proxy(typeof(OutlookCategoryItemRequestBuilder), true)]
    public partial interface IOutlookCategoryItemRequestBuilder;
}

namespace Microsoft.Graph.Me.Outlook.SupportedLanguages
{
    [Proxy(typeof(SupportedLanguagesRequestBuilder), true)]
    public partial interface ISupportedLanguagesRequestBuilder;
}

namespace Microsoft.Graph.Me.Outlook.SupportedTimeZones
{
    [Proxy(typeof(SupportedTimeZonesRequestBuilder), true)]
    public partial interface ISupportedTimeZonesRequestBuilder;
}

namespace Microsoft.Graph.Me.Outlook.SupportedTimeZonesWithTimeZoneStandard
{
    [Proxy(typeof(SupportedTimeZonesWithTimeZoneStandardRequestBuilder), true)]
    public partial interface ISupportedTimeZonesWithTimeZoneStandardRequestBuilder;
}

namespace Microsoft.Graph.Me.OwnedDevices
{
    [Proxy(typeof(OwnedDevicesRequestBuilder), true)]
    public partial interface IOwnedDevicesRequestBuilder;
}

namespace Microsoft.Graph.Me.OwnedDevices.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.OwnedDevices.GraphAppRoleAssignment
{
    [Proxy(typeof(GraphAppRoleAssignmentRequestBuilder), true)]
    public partial interface IGraphAppRoleAssignmentRequestBuilder;
}

namespace Microsoft.Graph.Me.OwnedDevices.GraphAppRoleAssignment.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.OwnedDevices.GraphDevice
{
    [Proxy(typeof(GraphDeviceRequestBuilder), true)]
    public partial interface IGraphDeviceRequestBuilder;
}

namespace Microsoft.Graph.Me.OwnedDevices.GraphDevice.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.OwnedDevices.GraphEndpoint
{
    [Proxy(typeof(GraphEndpointRequestBuilder), true)]
    public partial interface IGraphEndpointRequestBuilder;
}

namespace Microsoft.Graph.Me.OwnedDevices.GraphEndpoint.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.OwnedDevices.Item
{
    [Proxy(typeof(DirectoryObjectItemRequestBuilder), true)]
    public partial interface IDirectoryObjectItemRequestBuilder;
}

namespace Microsoft.Graph.Me.OwnedDevices.Item.GraphAppRoleAssignment
{
    [Proxy(typeof(GraphAppRoleAssignmentRequestBuilder), true)]
    public partial interface IGraphAppRoleAssignmentRequestBuilder;
}

namespace Microsoft.Graph.Me.OwnedDevices.Item.GraphDevice
{
    [Proxy(typeof(GraphDeviceRequestBuilder), true)]
    public partial interface IGraphDeviceRequestBuilder;
}

namespace Microsoft.Graph.Me.OwnedDevices.Item.GraphEndpoint
{
    [Proxy(typeof(GraphEndpointRequestBuilder), true)]
    public partial interface IGraphEndpointRequestBuilder;
}

namespace Microsoft.Graph.Me.OwnedObjects
{
    [Proxy(typeof(OwnedObjectsRequestBuilder), true)]
    public partial interface IOwnedObjectsRequestBuilder;
}

namespace Microsoft.Graph.Me.OwnedObjects.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.OwnedObjects.GraphApplication
{
    [Proxy(typeof(GraphApplicationRequestBuilder), true)]
    public partial interface IGraphApplicationRequestBuilder;
}

namespace Microsoft.Graph.Me.OwnedObjects.GraphApplication.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.OwnedObjects.GraphGroup
{
    [Proxy(typeof(GraphGroupRequestBuilder), true)]
    public partial interface IGraphGroupRequestBuilder;
}

namespace Microsoft.Graph.Me.OwnedObjects.GraphGroup.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.OwnedObjects.GraphServicePrincipal
{
    [Proxy(typeof(GraphServicePrincipalRequestBuilder), true)]
    public partial interface IGraphServicePrincipalRequestBuilder;
}

namespace Microsoft.Graph.Me.OwnedObjects.GraphServicePrincipal.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.OwnedObjects.Item
{
    [Proxy(typeof(DirectoryObjectItemRequestBuilder), true)]
    public partial interface IDirectoryObjectItemRequestBuilder;
}

namespace Microsoft.Graph.Me.OwnedObjects.Item.GraphApplication
{
    [Proxy(typeof(GraphApplicationRequestBuilder), true)]
    public partial interface IGraphApplicationRequestBuilder;
}

namespace Microsoft.Graph.Me.OwnedObjects.Item.GraphGroup
{
    [Proxy(typeof(GraphGroupRequestBuilder), true)]
    public partial interface IGraphGroupRequestBuilder;
}

namespace Microsoft.Graph.Me.OwnedObjects.Item.GraphServicePrincipal
{
    [Proxy(typeof(GraphServicePrincipalRequestBuilder), true)]
    public partial interface IGraphServicePrincipalRequestBuilder;
}

namespace Microsoft.Graph.Me.People
{
    [Proxy(typeof(PeopleRequestBuilder), true)]
    public partial interface IPeopleRequestBuilder;
}

namespace Microsoft.Graph.Me.People.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.People.Item
{
    [Proxy(typeof(PersonItemRequestBuilder), true)]
    public partial interface IPersonItemRequestBuilder;
}

namespace Microsoft.Graph.Me.PermissionGrants
{
    [Proxy(typeof(PermissionGrantsRequestBuilder), true)]
    public partial interface IPermissionGrantsRequestBuilder;
}

namespace Microsoft.Graph.Me.PermissionGrants.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.PermissionGrants.Item
{
    [Proxy(typeof(ResourceSpecificPermissionGrantItemRequestBuilder), true)]
    public partial interface IResourceSpecificPermissionGrantItemRequestBuilder;
}

namespace Microsoft.Graph.Me.Photo
{
    [Proxy(typeof(PhotoRequestBuilder), true)]
    public partial interface IPhotoRequestBuilder;
}

namespace Microsoft.Graph.Me.Photo.Value
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Me.Photos
{
    [Proxy(typeof(PhotosRequestBuilder), true)]
    public partial interface IPhotosRequestBuilder;
}

namespace Microsoft.Graph.Me.Photos.Item
{
    [Proxy(typeof(ProfilePhotoItemRequestBuilder), true)]
    public partial interface IProfilePhotoItemRequestBuilder;
}

namespace Microsoft.Graph.Me.Photos.Item.Value
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Me.Planner
{
    [Proxy(typeof(PlannerRequestBuilder), true)]
    public partial interface IPlannerRequestBuilder;
}

namespace Microsoft.Graph.Me.Planner.Plans
{
    [Proxy(typeof(PlansRequestBuilder), true)]
    public partial interface IPlansRequestBuilder;
}

namespace Microsoft.Graph.Me.Planner.Plans.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.Planner.Plans.Item
{
    [Proxy(typeof(PlannerPlanItemRequestBuilder), true)]
    public partial interface IPlannerPlanItemRequestBuilder;
}

namespace Microsoft.Graph.Me.Planner.Plans.Item.Buckets
{
    [Proxy(typeof(BucketsRequestBuilder), true)]
    public partial interface IBucketsRequestBuilder;
}

namespace Microsoft.Graph.Me.Planner.Plans.Item.Buckets.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.Planner.Plans.Item.Buckets.Item
{
    [Proxy(typeof(PlannerBucketItemRequestBuilder), true)]
    public partial interface IPlannerBucketItemRequestBuilder;
}

namespace Microsoft.Graph.Me.Planner.Plans.Item.Buckets.Item.Tasks
{
    [Proxy(typeof(TasksRequestBuilder), true)]
    public partial interface ITasksRequestBuilder;
}

namespace Microsoft.Graph.Me.Planner.Plans.Item.Buckets.Item.Tasks.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.Planner.Plans.Item.Buckets.Item.Tasks.Item
{
    [Proxy(typeof(PlannerTaskItemRequestBuilder), true)]
    public partial interface IPlannerTaskItemRequestBuilder;
}

namespace Microsoft.Graph.Me.Planner.Plans.Item.Buckets.Item.Tasks.Item.AssignedToTaskBoardFormat
{
    [Proxy(typeof(AssignedToTaskBoardFormatRequestBuilder), true)]
    public partial interface IAssignedToTaskBoardFormatRequestBuilder;
}

namespace Microsoft.Graph.Me.Planner.Plans.Item.Buckets.Item.Tasks.Item.BucketTaskBoardFormat
{
    [Proxy(typeof(BucketTaskBoardFormatRequestBuilder), true)]
    public partial interface IBucketTaskBoardFormatRequestBuilder;
}

namespace Microsoft.Graph.Me.Planner.Plans.Item.Buckets.Item.Tasks.Item.Details
{
    [Proxy(typeof(DetailsRequestBuilder), true)]
    public partial interface IDetailsRequestBuilder;
}

namespace Microsoft.Graph.Me.Planner.Plans.Item.Buckets.Item.Tasks.Item.ProgressTaskBoardFormat
{
    [Proxy(typeof(ProgressTaskBoardFormatRequestBuilder), true)]
    public partial interface IProgressTaskBoardFormatRequestBuilder;
}

namespace Microsoft.Graph.Me.Planner.Plans.Item.Details
{
    [Proxy(typeof(DetailsRequestBuilder), true)]
    public partial interface IDetailsRequestBuilder;
}

namespace Microsoft.Graph.Me.Planner.Plans.Item.Tasks
{
    [Proxy(typeof(TasksRequestBuilder), true)]
    public partial interface ITasksRequestBuilder;
}

namespace Microsoft.Graph.Me.Planner.Plans.Item.Tasks.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.Planner.Plans.Item.Tasks.Item
{
    [Proxy(typeof(PlannerTaskItemRequestBuilder), true)]
    public partial interface IPlannerTaskItemRequestBuilder;
}

namespace Microsoft.Graph.Me.Planner.Plans.Item.Tasks.Item.AssignedToTaskBoardFormat
{
    [Proxy(typeof(AssignedToTaskBoardFormatRequestBuilder), true)]
    public partial interface IAssignedToTaskBoardFormatRequestBuilder;
}

namespace Microsoft.Graph.Me.Planner.Plans.Item.Tasks.Item.BucketTaskBoardFormat
{
    [Proxy(typeof(BucketTaskBoardFormatRequestBuilder), true)]
    public partial interface IBucketTaskBoardFormatRequestBuilder;
}

namespace Microsoft.Graph.Me.Planner.Plans.Item.Tasks.Item.Details
{
    [Proxy(typeof(DetailsRequestBuilder), true)]
    public partial interface IDetailsRequestBuilder;
}

namespace Microsoft.Graph.Me.Planner.Plans.Item.Tasks.Item.ProgressTaskBoardFormat
{
    [Proxy(typeof(ProgressTaskBoardFormatRequestBuilder), true)]
    public partial interface IProgressTaskBoardFormatRequestBuilder;
}

namespace Microsoft.Graph.Me.Planner.Tasks
{
    [Proxy(typeof(TasksRequestBuilder), true)]
    public partial interface ITasksRequestBuilder;
}

namespace Microsoft.Graph.Me.Planner.Tasks.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.Planner.Tasks.Item
{
    [Proxy(typeof(PlannerTaskItemRequestBuilder), true)]
    public partial interface IPlannerTaskItemRequestBuilder;
}

namespace Microsoft.Graph.Me.Planner.Tasks.Item.AssignedToTaskBoardFormat
{
    [Proxy(typeof(AssignedToTaskBoardFormatRequestBuilder), true)]
    public partial interface IAssignedToTaskBoardFormatRequestBuilder;
}

namespace Microsoft.Graph.Me.Planner.Tasks.Item.BucketTaskBoardFormat
{
    [Proxy(typeof(BucketTaskBoardFormatRequestBuilder), true)]
    public partial interface IBucketTaskBoardFormatRequestBuilder;
}

namespace Microsoft.Graph.Me.Planner.Tasks.Item.Details
{
    [Proxy(typeof(DetailsRequestBuilder), true)]
    public partial interface IDetailsRequestBuilder;
}

namespace Microsoft.Graph.Me.Planner.Tasks.Item.ProgressTaskBoardFormat
{
    [Proxy(typeof(ProgressTaskBoardFormatRequestBuilder), true)]
    public partial interface IProgressTaskBoardFormatRequestBuilder;
}

namespace Microsoft.Graph.Me.Presence
{
    [Proxy(typeof(PresenceRequestBuilder), true)]
    public partial interface IPresenceRequestBuilder;
}

namespace Microsoft.Graph.Me.Presence.ClearPresence
{
    [Proxy(typeof(ClearPresenceRequestBuilder), true)]
    public partial interface IClearPresenceRequestBuilder;
}

namespace Microsoft.Graph.Me.Presence.ClearUserPreferredPresence
{
    [Proxy(typeof(ClearUserPreferredPresenceRequestBuilder), true)]
    public partial interface IClearUserPreferredPresenceRequestBuilder;
}

namespace Microsoft.Graph.Me.Presence.SetPresence
{
    [Proxy(typeof(SetPresenceRequestBuilder), true)]
    public partial interface ISetPresenceRequestBuilder;
}

namespace Microsoft.Graph.Me.Presence.SetStatusMessage
{
    [Proxy(typeof(SetStatusMessageRequestBuilder), true)]
    public partial interface ISetStatusMessageRequestBuilder;
}

namespace Microsoft.Graph.Me.Presence.SetUserPreferredPresence
{
    [Proxy(typeof(SetUserPreferredPresenceRequestBuilder), true)]
    public partial interface ISetUserPreferredPresenceRequestBuilder;
}

namespace Microsoft.Graph.Me.RegisteredDevices
{
    [Proxy(typeof(RegisteredDevicesRequestBuilder), true)]
    public partial interface IRegisteredDevicesRequestBuilder;
}

namespace Microsoft.Graph.Me.RegisteredDevices.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.RegisteredDevices.GraphAppRoleAssignment
{
    [Proxy(typeof(GraphAppRoleAssignmentRequestBuilder), true)]
    public partial interface IGraphAppRoleAssignmentRequestBuilder;
}

namespace Microsoft.Graph.Me.RegisteredDevices.GraphAppRoleAssignment.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.RegisteredDevices.GraphDevice
{
    [Proxy(typeof(GraphDeviceRequestBuilder), true)]
    public partial interface IGraphDeviceRequestBuilder;
}

namespace Microsoft.Graph.Me.RegisteredDevices.GraphDevice.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.RegisteredDevices.GraphEndpoint
{
    [Proxy(typeof(GraphEndpointRequestBuilder), true)]
    public partial interface IGraphEndpointRequestBuilder;
}

namespace Microsoft.Graph.Me.RegisteredDevices.GraphEndpoint.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.RegisteredDevices.Item
{
    [Proxy(typeof(DirectoryObjectItemRequestBuilder), true)]
    public partial interface IDirectoryObjectItemRequestBuilder;
}

namespace Microsoft.Graph.Me.RegisteredDevices.Item.GraphAppRoleAssignment
{
    [Proxy(typeof(GraphAppRoleAssignmentRequestBuilder), true)]
    public partial interface IGraphAppRoleAssignmentRequestBuilder;
}

namespace Microsoft.Graph.Me.RegisteredDevices.Item.GraphDevice
{
    [Proxy(typeof(GraphDeviceRequestBuilder), true)]
    public partial interface IGraphDeviceRequestBuilder;
}

namespace Microsoft.Graph.Me.RegisteredDevices.Item.GraphEndpoint
{
    [Proxy(typeof(GraphEndpointRequestBuilder), true)]
    public partial interface IGraphEndpointRequestBuilder;
}

namespace Microsoft.Graph.Me.ReminderViewWithStartDateTimeWithEndDateTime
{
    [Proxy(typeof(ReminderViewWithStartDateTimeWithEndDateTimeRequestBuilder), true)]
    public partial interface IReminderViewWithStartDateTimeWithEndDateTimeRequestBuilder;
}

namespace Microsoft.Graph.Me.RemoveAllDevicesFromManagement
{
    [Proxy(typeof(RemoveAllDevicesFromManagementRequestBuilder), true)]
    public partial interface IRemoveAllDevicesFromManagementRequestBuilder;
}

namespace Microsoft.Graph.Me.ReprocessLicenseAssignment
{
    [Proxy(typeof(ReprocessLicenseAssignmentRequestBuilder), true)]
    public partial interface IReprocessLicenseAssignmentRequestBuilder;
}

namespace Microsoft.Graph.Me.Restore
{
    [Proxy(typeof(RestoreRequestBuilder), true)]
    public partial interface IRestoreRequestBuilder;
}

namespace Microsoft.Graph.Me.RetryServiceProvisioning
{
    [Proxy(typeof(RetryServiceProvisioningRequestBuilder), true)]
    public partial interface IRetryServiceProvisioningRequestBuilder;
}

namespace Microsoft.Graph.Me.RevokeSignInSessions
{
    [Proxy(typeof(RevokeSignInSessionsRequestBuilder), true)]
    public partial interface IRevokeSignInSessionsRequestBuilder;
}

namespace Microsoft.Graph.Me.ScopedRoleMemberOf
{
    [Proxy(typeof(ScopedRoleMemberOfRequestBuilder), true)]
    public partial interface IScopedRoleMemberOfRequestBuilder;
}

namespace Microsoft.Graph.Me.ScopedRoleMemberOf.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.ScopedRoleMemberOf.Item
{
    [Proxy(typeof(ScopedRoleMembershipItemRequestBuilder), true)]
    public partial interface IScopedRoleMembershipItemRequestBuilder;
}

namespace Microsoft.Graph.Me.SendMail
{
    [Proxy(typeof(SendMailRequestBuilder), true)]
    public partial interface ISendMailRequestBuilder;
}

namespace Microsoft.Graph.Me.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.Me.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.Settings
{
    [Proxy(typeof(SettingsRequestBuilder), true)]
    public partial interface ISettingsRequestBuilder;
}

namespace Microsoft.Graph.Me.Settings.ItemInsights
{
    [Proxy(typeof(ItemInsightsRequestBuilder), true)]
    public partial interface IItemInsightsRequestBuilder;
}

namespace Microsoft.Graph.Me.Settings.ShiftPreferences
{
    [Proxy(typeof(ShiftPreferencesRequestBuilder), true)]
    public partial interface IShiftPreferencesRequestBuilder;
}

namespace Microsoft.Graph.Me.Settings.Storage
{
    [Proxy(typeof(StorageRequestBuilder), true)]
    public partial interface IStorageRequestBuilder;
}

namespace Microsoft.Graph.Me.Settings.Storage.Quota
{
    [Proxy(typeof(QuotaRequestBuilder), true)]
    public partial interface IQuotaRequestBuilder;
}

namespace Microsoft.Graph.Me.Settings.Storage.Quota.Services
{
    [Proxy(typeof(ServicesRequestBuilder), true)]
    public partial interface IServicesRequestBuilder;
}

namespace Microsoft.Graph.Me.Settings.Storage.Quota.Services.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.Settings.Storage.Quota.Services.Item
{
    [Proxy(typeof(ServiceStorageQuotaBreakdownItemRequestBuilder), true)]
    public partial interface IServiceStorageQuotaBreakdownItemRequestBuilder;
}

namespace Microsoft.Graph.Me.Settings.Windows
{
    [Proxy(typeof(WindowsRequestBuilder), true)]
    public partial interface IWindowsRequestBuilder;
}

namespace Microsoft.Graph.Me.Settings.Windows.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.Settings.Windows.Item
{
    [Proxy(typeof(WindowsSettingItemRequestBuilder), true)]
    public partial interface IWindowsSettingItemRequestBuilder;
}

namespace Microsoft.Graph.Me.Settings.Windows.Item.Instances
{
    [Proxy(typeof(InstancesRequestBuilder), true)]
    public partial interface IInstancesRequestBuilder;
}

namespace Microsoft.Graph.Me.Settings.Windows.Item.Instances.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.Settings.Windows.Item.Instances.Item
{
    [Proxy(typeof(WindowsSettingInstanceItemRequestBuilder), true)]
    public partial interface IWindowsSettingInstanceItemRequestBuilder;
}

namespace Microsoft.Graph.Me.Solutions
{
    [Proxy(typeof(SolutionsRequestBuilder), true)]
    public partial interface ISolutionsRequestBuilder;
}

namespace Microsoft.Graph.Me.Solutions.WorkingTimeSchedule
{
    [Proxy(typeof(WorkingTimeScheduleRequestBuilder), true)]
    public partial interface IWorkingTimeScheduleRequestBuilder;
}

namespace Microsoft.Graph.Me.Solutions.WorkingTimeSchedule.EndWorkingTime
{
    [Proxy(typeof(EndWorkingTimeRequestBuilder), true)]
    public partial interface IEndWorkingTimeRequestBuilder;
}

namespace Microsoft.Graph.Me.Solutions.WorkingTimeSchedule.StartWorkingTime
{
    [Proxy(typeof(StartWorkingTimeRequestBuilder), true)]
    public partial interface IStartWorkingTimeRequestBuilder;
}

namespace Microsoft.Graph.Me.Sponsors
{
    [Proxy(typeof(SponsorsRequestBuilder), true)]
    public partial interface ISponsorsRequestBuilder;
}

namespace Microsoft.Graph.Me.Sponsors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.Sponsors.Item
{
    [Proxy(typeof(DirectoryObjectItemRequestBuilder), true)]
    public partial interface IDirectoryObjectItemRequestBuilder;
}

namespace Microsoft.Graph.Me.Teamwork
{
    [Proxy(typeof(TeamworkRequestBuilder), true)]
    public partial interface ITeamworkRequestBuilder;
}

namespace Microsoft.Graph.Me.Teamwork.AssociatedTeams
{
    [Proxy(typeof(AssociatedTeamsRequestBuilder), true)]
    public partial interface IAssociatedTeamsRequestBuilder;
}

namespace Microsoft.Graph.Me.Teamwork.AssociatedTeams.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.Teamwork.AssociatedTeams.Item
{
    [Proxy(typeof(AssociatedTeamInfoItemRequestBuilder), true)]
    public partial interface IAssociatedTeamInfoItemRequestBuilder;
}

namespace Microsoft.Graph.Me.Teamwork.AssociatedTeams.Item.Team
{
    [Proxy(typeof(TeamRequestBuilder), true)]
    public partial interface ITeamRequestBuilder;
}

namespace Microsoft.Graph.Me.Teamwork.InstalledApps
{
    [Proxy(typeof(InstalledAppsRequestBuilder), true)]
    public partial interface IInstalledAppsRequestBuilder;
}

namespace Microsoft.Graph.Me.Teamwork.InstalledApps.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.Teamwork.InstalledApps.Item
{
    [Proxy(typeof(UserScopeTeamsAppInstallationItemRequestBuilder), true)]
    public partial interface IUserScopeTeamsAppInstallationItemRequestBuilder;
}

namespace Microsoft.Graph.Me.Teamwork.InstalledApps.Item.Chat
{
    [Proxy(typeof(ChatRequestBuilder), true)]
    public partial interface IChatRequestBuilder;
}

namespace Microsoft.Graph.Me.Teamwork.InstalledApps.Item.TeamsApp
{
    [Proxy(typeof(TeamsAppRequestBuilder), true)]
    public partial interface ITeamsAppRequestBuilder;
}

namespace Microsoft.Graph.Me.Teamwork.InstalledApps.Item.TeamsAppDefinition
{
    [Proxy(typeof(TeamsAppDefinitionRequestBuilder), true)]
    public partial interface ITeamsAppDefinitionRequestBuilder;
}

namespace Microsoft.Graph.Me.Teamwork.SendActivityNotification
{
    [Proxy(typeof(SendActivityNotificationRequestBuilder), true)]
    public partial interface ISendActivityNotificationRequestBuilder;
}

namespace Microsoft.Graph.Me.Todo
{
    [Proxy(typeof(TodoRequestBuilder), true)]
    public partial interface ITodoRequestBuilder;
}

namespace Microsoft.Graph.Me.Todo.Lists
{
    [Proxy(typeof(ListsRequestBuilder), true)]
    public partial interface IListsRequestBuilder;
}

namespace Microsoft.Graph.Me.Todo.Lists.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.Todo.Lists.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Me.Todo.Lists.Item
{
    [Proxy(typeof(TodoTaskListItemRequestBuilder), true)]
    public partial interface ITodoTaskListItemRequestBuilder;
}

namespace Microsoft.Graph.Me.Todo.Lists.Item.Extensions
{
    [Proxy(typeof(ExtensionsRequestBuilder), true)]
    public partial interface IExtensionsRequestBuilder;
}

namespace Microsoft.Graph.Me.Todo.Lists.Item.Extensions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.Todo.Lists.Item.Extensions.Item
{
    [Proxy(typeof(ExtensionItemRequestBuilder), true)]
    public partial interface IExtensionItemRequestBuilder;
}

namespace Microsoft.Graph.Me.Todo.Lists.Item.Tasks
{
    [Proxy(typeof(TasksRequestBuilder), true)]
    public partial interface ITasksRequestBuilder;
}

namespace Microsoft.Graph.Me.Todo.Lists.Item.Tasks.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.Todo.Lists.Item.Tasks.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Me.Todo.Lists.Item.Tasks.Item
{
    [Proxy(typeof(TodoTaskItemRequestBuilder), true)]
    public partial interface ITodoTaskItemRequestBuilder;
}

namespace Microsoft.Graph.Me.Todo.Lists.Item.Tasks.Item.Attachments
{
    [Proxy(typeof(AttachmentsRequestBuilder), true)]
    public partial interface IAttachmentsRequestBuilder;
}

namespace Microsoft.Graph.Me.Todo.Lists.Item.Tasks.Item.Attachments.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.Todo.Lists.Item.Tasks.Item.Attachments.CreateUploadSession
{
    [Proxy(typeof(CreateUploadSessionRequestBuilder), true)]
    public partial interface ICreateUploadSessionRequestBuilder;
}

namespace Microsoft.Graph.Me.Todo.Lists.Item.Tasks.Item.Attachments.Item
{
    [Proxy(typeof(AttachmentBaseItemRequestBuilder), true)]
    public partial interface IAttachmentBaseItemRequestBuilder;
}

namespace Microsoft.Graph.Me.Todo.Lists.Item.Tasks.Item.Attachments.Item.Value
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Me.Todo.Lists.Item.Tasks.Item.AttachmentSessions
{
    [Proxy(typeof(AttachmentSessionsRequestBuilder), true)]
    public partial interface IAttachmentSessionsRequestBuilder;
}

namespace Microsoft.Graph.Me.Todo.Lists.Item.Tasks.Item.AttachmentSessions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.Todo.Lists.Item.Tasks.Item.AttachmentSessions.Item
{
    [Proxy(typeof(AttachmentSessionItemRequestBuilder), true)]
    public partial interface IAttachmentSessionItemRequestBuilder;
}

namespace Microsoft.Graph.Me.Todo.Lists.Item.Tasks.Item.AttachmentSessions.Item.Content
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Me.Todo.Lists.Item.Tasks.Item.ChecklistItems
{
    [Proxy(typeof(ChecklistItemsRequestBuilder), true)]
    public partial interface IChecklistItemsRequestBuilder;
}

namespace Microsoft.Graph.Me.Todo.Lists.Item.Tasks.Item.ChecklistItems.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.Todo.Lists.Item.Tasks.Item.ChecklistItems.Item
{
    [Proxy(typeof(ChecklistItemItemRequestBuilder), true)]
    public partial interface IChecklistItemItemRequestBuilder;
}

namespace Microsoft.Graph.Me.Todo.Lists.Item.Tasks.Item.Extensions
{
    [Proxy(typeof(ExtensionsRequestBuilder), true)]
    public partial interface IExtensionsRequestBuilder;
}

namespace Microsoft.Graph.Me.Todo.Lists.Item.Tasks.Item.Extensions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.Todo.Lists.Item.Tasks.Item.Extensions.Item
{
    [Proxy(typeof(ExtensionItemRequestBuilder), true)]
    public partial interface IExtensionItemRequestBuilder;
}

namespace Microsoft.Graph.Me.Todo.Lists.Item.Tasks.Item.LinkedResources
{
    [Proxy(typeof(LinkedResourcesRequestBuilder), true)]
    public partial interface ILinkedResourcesRequestBuilder;
}

namespace Microsoft.Graph.Me.Todo.Lists.Item.Tasks.Item.LinkedResources.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.Todo.Lists.Item.Tasks.Item.LinkedResources.Item
{
    [Proxy(typeof(LinkedResourceItemRequestBuilder), true)]
    public partial interface ILinkedResourceItemRequestBuilder;
}

namespace Microsoft.Graph.Me.TransitiveMemberOf
{
    [Proxy(typeof(TransitiveMemberOfRequestBuilder), true)]
    public partial interface ITransitiveMemberOfRequestBuilder;
}

namespace Microsoft.Graph.Me.TransitiveMemberOf.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.TransitiveMemberOf.GraphAdministrativeUnit
{
    [Proxy(typeof(GraphAdministrativeUnitRequestBuilder), true)]
    public partial interface IGraphAdministrativeUnitRequestBuilder;
}

namespace Microsoft.Graph.Me.TransitiveMemberOf.GraphAdministrativeUnit.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.TransitiveMemberOf.GraphDirectoryRole
{
    [Proxy(typeof(GraphDirectoryRoleRequestBuilder), true)]
    public partial interface IGraphDirectoryRoleRequestBuilder;
}

namespace Microsoft.Graph.Me.TransitiveMemberOf.GraphDirectoryRole.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.TransitiveMemberOf.GraphGroup
{
    [Proxy(typeof(GraphGroupRequestBuilder), true)]
    public partial interface IGraphGroupRequestBuilder;
}

namespace Microsoft.Graph.Me.TransitiveMemberOf.GraphGroup.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Me.TransitiveMemberOf.Item
{
    [Proxy(typeof(DirectoryObjectItemRequestBuilder), true)]
    public partial interface IDirectoryObjectItemRequestBuilder;
}

namespace Microsoft.Graph.Me.TransitiveMemberOf.Item.GraphAdministrativeUnit
{
    [Proxy(typeof(GraphAdministrativeUnitRequestBuilder), true)]
    public partial interface IGraphAdministrativeUnitRequestBuilder;
}

namespace Microsoft.Graph.Me.TransitiveMemberOf.Item.GraphDirectoryRole
{
    [Proxy(typeof(GraphDirectoryRoleRequestBuilder), true)]
    public partial interface IGraphDirectoryRoleRequestBuilder;
}

namespace Microsoft.Graph.Me.TransitiveMemberOf.Item.GraphGroup
{
    [Proxy(typeof(GraphGroupRequestBuilder), true)]
    public partial interface IGraphGroupRequestBuilder;
}

namespace Microsoft.Graph.Me.TranslateExchangeIds
{
    [Proxy(typeof(TranslateExchangeIdsRequestBuilder), true)]
    public partial interface ITranslateExchangeIdsRequestBuilder;
}

namespace Microsoft.Graph.Me.WipeManagedAppRegistrationsByDeviceTag
{
    [Proxy(typeof(WipeManagedAppRegistrationsByDeviceTagRequestBuilder), true)]
    public partial interface IWipeManagedAppRegistrationsByDeviceTagRequestBuilder;
}

namespace Microsoft.Graph.Oauth2PermissionGrants
{
    [Proxy(typeof(Oauth2PermissionGrantsRequestBuilder), true)]
    public partial interface IOauth2PermissionGrantsRequestBuilder;
}

namespace Microsoft.Graph.Oauth2PermissionGrants.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Oauth2PermissionGrants.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Oauth2PermissionGrants.Item
{
    [Proxy(typeof(OAuth2PermissionGrantItemRequestBuilder), true)]
    public partial interface IOAuth2PermissionGrantItemRequestBuilder;
}

namespace Microsoft.Graph.Organization
{
    [Proxy(typeof(OrganizationRequestBuilder), true)]
    public partial interface IOrganizationRequestBuilder;
}

namespace Microsoft.Graph.Organization.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Organization.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Organization.GetAvailableExtensionProperties
{
    [Proxy(typeof(GetAvailableExtensionPropertiesRequestBuilder), true)]
    public partial interface IGetAvailableExtensionPropertiesRequestBuilder;
}

namespace Microsoft.Graph.Organization.GetByIds
{
    [Proxy(typeof(GetByIdsRequestBuilder), true)]
    public partial interface IGetByIdsRequestBuilder;
}

namespace Microsoft.Graph.Organization.Item
{
    [Proxy(typeof(OrganizationItemRequestBuilder), true)]
    public partial interface IOrganizationItemRequestBuilder;
}

namespace Microsoft.Graph.Organization.Item.Branding
{
    [Proxy(typeof(BrandingRequestBuilder), true)]
    public partial interface IBrandingRequestBuilder;
}

namespace Microsoft.Graph.Organization.Item.Branding.BackgroundImage
{
    [Proxy(typeof(BackgroundImageRequestBuilder), true)]
    public partial interface IBackgroundImageRequestBuilder;
}

namespace Microsoft.Graph.Organization.Item.Branding.BannerLogo
{
    [Proxy(typeof(BannerLogoRequestBuilder), true)]
    public partial interface IBannerLogoRequestBuilder;
}

namespace Microsoft.Graph.Organization.Item.Branding.CustomCSS
{
    [Proxy(typeof(CustomCSSRequestBuilder), true)]
    public partial interface ICustomCSSRequestBuilder;
}

namespace Microsoft.Graph.Organization.Item.Branding.Favicon
{
    [Proxy(typeof(FaviconRequestBuilder), true)]
    public partial interface IFaviconRequestBuilder;
}

namespace Microsoft.Graph.Organization.Item.Branding.HeaderLogo
{
    [Proxy(typeof(HeaderLogoRequestBuilder), true)]
    public partial interface IHeaderLogoRequestBuilder;
}

namespace Microsoft.Graph.Organization.Item.Branding.Localizations
{
    [Proxy(typeof(LocalizationsRequestBuilder), true)]
    public partial interface ILocalizationsRequestBuilder;
}

namespace Microsoft.Graph.Organization.Item.Branding.Localizations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Organization.Item.Branding.Localizations.Item
{
    [Proxy(typeof(OrganizationalBrandingLocalizationItemRequestBuilder), true)]
    public partial interface IOrganizationalBrandingLocalizationItemRequestBuilder;
}

namespace Microsoft.Graph.Organization.Item.Branding.Localizations.Item.BackgroundImage
{
    [Proxy(typeof(BackgroundImageRequestBuilder), true)]
    public partial interface IBackgroundImageRequestBuilder;
}

namespace Microsoft.Graph.Organization.Item.Branding.Localizations.Item.BannerLogo
{
    [Proxy(typeof(BannerLogoRequestBuilder), true)]
    public partial interface IBannerLogoRequestBuilder;
}

namespace Microsoft.Graph.Organization.Item.Branding.Localizations.Item.CustomCSS
{
    [Proxy(typeof(CustomCSSRequestBuilder), true)]
    public partial interface ICustomCSSRequestBuilder;
}

namespace Microsoft.Graph.Organization.Item.Branding.Localizations.Item.Favicon
{
    [Proxy(typeof(FaviconRequestBuilder), true)]
    public partial interface IFaviconRequestBuilder;
}

namespace Microsoft.Graph.Organization.Item.Branding.Localizations.Item.HeaderLogo
{
    [Proxy(typeof(HeaderLogoRequestBuilder), true)]
    public partial interface IHeaderLogoRequestBuilder;
}

namespace Microsoft.Graph.Organization.Item.Branding.Localizations.Item.SquareLogo
{
    [Proxy(typeof(SquareLogoRequestBuilder), true)]
    public partial interface ISquareLogoRequestBuilder;
}

namespace Microsoft.Graph.Organization.Item.Branding.Localizations.Item.SquareLogoDark
{
    [Proxy(typeof(SquareLogoDarkRequestBuilder), true)]
    public partial interface ISquareLogoDarkRequestBuilder;
}

namespace Microsoft.Graph.Organization.Item.Branding.SquareLogo
{
    [Proxy(typeof(SquareLogoRequestBuilder), true)]
    public partial interface ISquareLogoRequestBuilder;
}

namespace Microsoft.Graph.Organization.Item.Branding.SquareLogoDark
{
    [Proxy(typeof(SquareLogoDarkRequestBuilder), true)]
    public partial interface ISquareLogoDarkRequestBuilder;
}

namespace Microsoft.Graph.Organization.Item.CertificateBasedAuthConfiguration
{
    [Proxy(typeof(CertificateBasedAuthConfigurationRequestBuilder), true)]
    public partial interface ICertificateBasedAuthConfigurationRequestBuilder;
}

namespace Microsoft.Graph.Organization.Item.CertificateBasedAuthConfiguration.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Organization.Item.CertificateBasedAuthConfiguration.Item
{
    [Proxy(typeof(CertificateBasedAuthConfigurationItemRequestBuilder), true)]
    public partial interface ICertificateBasedAuthConfigurationItemRequestBuilder;
}

namespace Microsoft.Graph.Organization.Item.CheckMemberGroups
{
    [Proxy(typeof(CheckMemberGroupsRequestBuilder), true)]
    public partial interface ICheckMemberGroupsRequestBuilder;
}

namespace Microsoft.Graph.Organization.Item.CheckMemberObjects
{
    [Proxy(typeof(CheckMemberObjectsRequestBuilder), true)]
    public partial interface ICheckMemberObjectsRequestBuilder;
}

namespace Microsoft.Graph.Organization.Item.Extensions
{
    [Proxy(typeof(ExtensionsRequestBuilder), true)]
    public partial interface IExtensionsRequestBuilder;
}

namespace Microsoft.Graph.Organization.Item.Extensions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Organization.Item.Extensions.Item
{
    [Proxy(typeof(ExtensionItemRequestBuilder), true)]
    public partial interface IExtensionItemRequestBuilder;
}

namespace Microsoft.Graph.Organization.Item.GetMemberGroups
{
    [Proxy(typeof(GetMemberGroupsRequestBuilder), true)]
    public partial interface IGetMemberGroupsRequestBuilder;
}

namespace Microsoft.Graph.Organization.Item.GetMemberObjects
{
    [Proxy(typeof(GetMemberObjectsRequestBuilder), true)]
    public partial interface IGetMemberObjectsRequestBuilder;
}

namespace Microsoft.Graph.Organization.Item.Restore
{
    [Proxy(typeof(RestoreRequestBuilder), true)]
    public partial interface IRestoreRequestBuilder;
}

namespace Microsoft.Graph.Organization.Item.SetMobileDeviceManagementAuthority
{
    [Proxy(typeof(SetMobileDeviceManagementAuthorityRequestBuilder), true)]
    public partial interface ISetMobileDeviceManagementAuthorityRequestBuilder;
}

namespace Microsoft.Graph.Organization.ValidateProperties
{
    [Proxy(typeof(ValidatePropertiesRequestBuilder), true)]
    public partial interface IValidatePropertiesRequestBuilder;
}

namespace Microsoft.Graph.PermissionGrants
{
    [Proxy(typeof(PermissionGrantsRequestBuilder), true)]
    public partial interface IPermissionGrantsRequestBuilder;
}

namespace Microsoft.Graph.PermissionGrants.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.PermissionGrants.GetAvailableExtensionProperties
{
    [Proxy(typeof(GetAvailableExtensionPropertiesRequestBuilder), true)]
    public partial interface IGetAvailableExtensionPropertiesRequestBuilder;
}

namespace Microsoft.Graph.PermissionGrants.GetByIds
{
    [Proxy(typeof(GetByIdsRequestBuilder), true)]
    public partial interface IGetByIdsRequestBuilder;
}

namespace Microsoft.Graph.PermissionGrants.Item
{
    [Proxy(typeof(ResourceSpecificPermissionGrantItemRequestBuilder), true)]
    public partial interface IResourceSpecificPermissionGrantItemRequestBuilder;
}

namespace Microsoft.Graph.PermissionGrants.Item.CheckMemberGroups
{
    [Proxy(typeof(CheckMemberGroupsRequestBuilder), true)]
    public partial interface ICheckMemberGroupsRequestBuilder;
}

namespace Microsoft.Graph.PermissionGrants.Item.CheckMemberObjects
{
    [Proxy(typeof(CheckMemberObjectsRequestBuilder), true)]
    public partial interface ICheckMemberObjectsRequestBuilder;
}

namespace Microsoft.Graph.PermissionGrants.Item.GetMemberGroups
{
    [Proxy(typeof(GetMemberGroupsRequestBuilder), true)]
    public partial interface IGetMemberGroupsRequestBuilder;
}

namespace Microsoft.Graph.PermissionGrants.Item.GetMemberObjects
{
    [Proxy(typeof(GetMemberObjectsRequestBuilder), true)]
    public partial interface IGetMemberObjectsRequestBuilder;
}

namespace Microsoft.Graph.PermissionGrants.Item.Restore
{
    [Proxy(typeof(RestoreRequestBuilder), true)]
    public partial interface IRestoreRequestBuilder;
}

namespace Microsoft.Graph.PermissionGrants.ValidateProperties
{
    [Proxy(typeof(ValidatePropertiesRequestBuilder), true)]
    public partial interface IValidatePropertiesRequestBuilder;
}

namespace Microsoft.Graph.Places
{
    [Proxy(typeof(PlacesRequestBuilder), true)]
    public partial interface IPlacesRequestBuilder;
}

namespace Microsoft.Graph.Places.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Places.GraphRoom
{
    [Proxy(typeof(GraphRoomRequestBuilder), true)]
    public partial interface IGraphRoomRequestBuilder;
}

namespace Microsoft.Graph.Places.GraphRoom.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Places.GraphRoomList
{
    [Proxy(typeof(GraphRoomListRequestBuilder), true)]
    public partial interface IGraphRoomListRequestBuilder;
}

namespace Microsoft.Graph.Places.GraphRoomList.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Places.Item
{
    [Proxy(typeof(PlaceItemRequestBuilder), true)]
    public partial interface IPlaceItemRequestBuilder;
}

namespace Microsoft.Graph.Places.Item.GraphRoom
{
    [Proxy(typeof(GraphRoomRequestBuilder), true)]
    public partial interface IGraphRoomRequestBuilder;
}

namespace Microsoft.Graph.Places.Item.GraphRoomList
{
    [Proxy(typeof(GraphRoomListRequestBuilder), true)]
    public partial interface IGraphRoomListRequestBuilder;
}

namespace Microsoft.Graph.Places.Item.GraphRoomList.Rooms
{
    [Proxy(typeof(RoomsRequestBuilder), true)]
    public partial interface IRoomsRequestBuilder;
}

namespace Microsoft.Graph.Places.Item.GraphRoomList.Rooms.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Places.Item.GraphRoomList.Rooms.Item
{
    [Proxy(typeof(RoomItemRequestBuilder), true)]
    public partial interface IRoomItemRequestBuilder;
}

namespace Microsoft.Graph.Planner
{
    [Proxy(typeof(PlannerRequestBuilder), true)]
    public partial interface IPlannerRequestBuilder;
}

namespace Microsoft.Graph.Planner.Buckets
{
    [Proxy(typeof(BucketsRequestBuilder), true)]
    public partial interface IBucketsRequestBuilder;
}

namespace Microsoft.Graph.Planner.Buckets.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Planner.Buckets.Item
{
    [Proxy(typeof(PlannerBucketItemRequestBuilder), true)]
    public partial interface IPlannerBucketItemRequestBuilder;
}

namespace Microsoft.Graph.Planner.Buckets.Item.Tasks
{
    [Proxy(typeof(TasksRequestBuilder), true)]
    public partial interface ITasksRequestBuilder;
}

namespace Microsoft.Graph.Planner.Buckets.Item.Tasks.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Planner.Buckets.Item.Tasks.Item
{
    [Proxy(typeof(PlannerTaskItemRequestBuilder), true)]
    public partial interface IPlannerTaskItemRequestBuilder;
}

namespace Microsoft.Graph.Planner.Buckets.Item.Tasks.Item.AssignedToTaskBoardFormat
{
    [Proxy(typeof(AssignedToTaskBoardFormatRequestBuilder), true)]
    public partial interface IAssignedToTaskBoardFormatRequestBuilder;
}

namespace Microsoft.Graph.Planner.Buckets.Item.Tasks.Item.BucketTaskBoardFormat
{
    [Proxy(typeof(BucketTaskBoardFormatRequestBuilder), true)]
    public partial interface IBucketTaskBoardFormatRequestBuilder;
}

namespace Microsoft.Graph.Planner.Buckets.Item.Tasks.Item.Details
{
    [Proxy(typeof(DetailsRequestBuilder), true)]
    public partial interface IDetailsRequestBuilder;
}

namespace Microsoft.Graph.Planner.Buckets.Item.Tasks.Item.ProgressTaskBoardFormat
{
    [Proxy(typeof(ProgressTaskBoardFormatRequestBuilder), true)]
    public partial interface IProgressTaskBoardFormatRequestBuilder;
}

namespace Microsoft.Graph.Planner.Plans
{
    [Proxy(typeof(PlansRequestBuilder), true)]
    public partial interface IPlansRequestBuilder;
}

namespace Microsoft.Graph.Planner.Plans.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Planner.Plans.Item
{
    [Proxy(typeof(PlannerPlanItemRequestBuilder), true)]
    public partial interface IPlannerPlanItemRequestBuilder;
}

namespace Microsoft.Graph.Planner.Plans.Item.Buckets
{
    [Proxy(typeof(BucketsRequestBuilder), true)]
    public partial interface IBucketsRequestBuilder;
}

namespace Microsoft.Graph.Planner.Plans.Item.Buckets.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Planner.Plans.Item.Buckets.Item
{
    [Proxy(typeof(PlannerBucketItemRequestBuilder), true)]
    public partial interface IPlannerBucketItemRequestBuilder;
}

namespace Microsoft.Graph.Planner.Plans.Item.Buckets.Item.Tasks
{
    [Proxy(typeof(TasksRequestBuilder), true)]
    public partial interface ITasksRequestBuilder;
}

namespace Microsoft.Graph.Planner.Plans.Item.Buckets.Item.Tasks.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Planner.Plans.Item.Buckets.Item.Tasks.Item
{
    [Proxy(typeof(PlannerTaskItemRequestBuilder), true)]
    public partial interface IPlannerTaskItemRequestBuilder;
}

namespace Microsoft.Graph.Planner.Plans.Item.Buckets.Item.Tasks.Item.AssignedToTaskBoardFormat
{
    [Proxy(typeof(AssignedToTaskBoardFormatRequestBuilder), true)]
    public partial interface IAssignedToTaskBoardFormatRequestBuilder;
}

namespace Microsoft.Graph.Planner.Plans.Item.Buckets.Item.Tasks.Item.BucketTaskBoardFormat
{
    [Proxy(typeof(BucketTaskBoardFormatRequestBuilder), true)]
    public partial interface IBucketTaskBoardFormatRequestBuilder;
}

namespace Microsoft.Graph.Planner.Plans.Item.Buckets.Item.Tasks.Item.Details
{
    [Proxy(typeof(DetailsRequestBuilder), true)]
    public partial interface IDetailsRequestBuilder;
}

namespace Microsoft.Graph.Planner.Plans.Item.Buckets.Item.Tasks.Item.ProgressTaskBoardFormat
{
    [Proxy(typeof(ProgressTaskBoardFormatRequestBuilder), true)]
    public partial interface IProgressTaskBoardFormatRequestBuilder;
}

namespace Microsoft.Graph.Planner.Plans.Item.Details
{
    [Proxy(typeof(DetailsRequestBuilder), true)]
    public partial interface IDetailsRequestBuilder;
}

namespace Microsoft.Graph.Planner.Plans.Item.Tasks
{
    [Proxy(typeof(TasksRequestBuilder), true)]
    public partial interface ITasksRequestBuilder;
}

namespace Microsoft.Graph.Planner.Plans.Item.Tasks.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Planner.Plans.Item.Tasks.Item
{
    [Proxy(typeof(PlannerTaskItemRequestBuilder), true)]
    public partial interface IPlannerTaskItemRequestBuilder;
}

namespace Microsoft.Graph.Planner.Plans.Item.Tasks.Item.AssignedToTaskBoardFormat
{
    [Proxy(typeof(AssignedToTaskBoardFormatRequestBuilder), true)]
    public partial interface IAssignedToTaskBoardFormatRequestBuilder;
}

namespace Microsoft.Graph.Planner.Plans.Item.Tasks.Item.BucketTaskBoardFormat
{
    [Proxy(typeof(BucketTaskBoardFormatRequestBuilder), true)]
    public partial interface IBucketTaskBoardFormatRequestBuilder;
}

namespace Microsoft.Graph.Planner.Plans.Item.Tasks.Item.Details
{
    [Proxy(typeof(DetailsRequestBuilder), true)]
    public partial interface IDetailsRequestBuilder;
}

namespace Microsoft.Graph.Planner.Plans.Item.Tasks.Item.ProgressTaskBoardFormat
{
    [Proxy(typeof(ProgressTaskBoardFormatRequestBuilder), true)]
    public partial interface IProgressTaskBoardFormatRequestBuilder;
}

namespace Microsoft.Graph.Planner.Tasks
{
    [Proxy(typeof(TasksRequestBuilder), true)]
    public partial interface ITasksRequestBuilder;
}

namespace Microsoft.Graph.Planner.Tasks.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Planner.Tasks.Item
{
    [Proxy(typeof(PlannerTaskItemRequestBuilder), true)]
    public partial interface IPlannerTaskItemRequestBuilder;
}

namespace Microsoft.Graph.Planner.Tasks.Item.AssignedToTaskBoardFormat
{
    [Proxy(typeof(AssignedToTaskBoardFormatRequestBuilder), true)]
    public partial interface IAssignedToTaskBoardFormatRequestBuilder;
}

namespace Microsoft.Graph.Planner.Tasks.Item.BucketTaskBoardFormat
{
    [Proxy(typeof(BucketTaskBoardFormatRequestBuilder), true)]
    public partial interface IBucketTaskBoardFormatRequestBuilder;
}

namespace Microsoft.Graph.Planner.Tasks.Item.Details
{
    [Proxy(typeof(DetailsRequestBuilder), true)]
    public partial interface IDetailsRequestBuilder;
}

namespace Microsoft.Graph.Planner.Tasks.Item.ProgressTaskBoardFormat
{
    [Proxy(typeof(ProgressTaskBoardFormatRequestBuilder), true)]
    public partial interface IProgressTaskBoardFormatRequestBuilder;
}

namespace Microsoft.Graph.Policies
{
    [Proxy(typeof(PoliciesRequestBuilder), true)]
    public partial interface IPoliciesRequestBuilder;
}

namespace Microsoft.Graph.Policies.ActivityBasedTimeoutPolicies
{
    [Proxy(typeof(ActivityBasedTimeoutPoliciesRequestBuilder), true)]
    public partial interface IActivityBasedTimeoutPoliciesRequestBuilder;
}

namespace Microsoft.Graph.Policies.ActivityBasedTimeoutPolicies.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Policies.ActivityBasedTimeoutPolicies.Item
{
    [Proxy(typeof(ActivityBasedTimeoutPolicyItemRequestBuilder), true)]
    public partial interface IActivityBasedTimeoutPolicyItemRequestBuilder;
}

namespace Microsoft.Graph.Policies.ActivityBasedTimeoutPolicies.Item.AppliesTo
{
    [Proxy(typeof(AppliesToRequestBuilder), true)]
    public partial interface IAppliesToRequestBuilder;
}

namespace Microsoft.Graph.Policies.ActivityBasedTimeoutPolicies.Item.AppliesTo.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Policies.ActivityBasedTimeoutPolicies.Item.AppliesTo.Item
{
    [Proxy(typeof(DirectoryObjectItemRequestBuilder), true)]
    public partial interface IDirectoryObjectItemRequestBuilder;
}

namespace Microsoft.Graph.Policies.AdminConsentRequestPolicy
{
    [Proxy(typeof(AdminConsentRequestPolicyRequestBuilder), true)]
    public partial interface IAdminConsentRequestPolicyRequestBuilder;
}

namespace Microsoft.Graph.Policies.AppManagementPolicies
{
    [Proxy(typeof(AppManagementPoliciesRequestBuilder), true)]
    public partial interface IAppManagementPoliciesRequestBuilder;
}

namespace Microsoft.Graph.Policies.AppManagementPolicies.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Policies.AppManagementPolicies.Item
{
    [Proxy(typeof(AppManagementPolicyItemRequestBuilder), true)]
    public partial interface IAppManagementPolicyItemRequestBuilder;
}

namespace Microsoft.Graph.Policies.AppManagementPolicies.Item.AppliesTo
{
    [Proxy(typeof(AppliesToRequestBuilder), true)]
    public partial interface IAppliesToRequestBuilder;
}

namespace Microsoft.Graph.Policies.AppManagementPolicies.Item.AppliesTo.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Policies.AppManagementPolicies.Item.AppliesTo.Item
{
    [Proxy(typeof(DirectoryObjectItemRequestBuilder), true)]
    public partial interface IDirectoryObjectItemRequestBuilder;
}

namespace Microsoft.Graph.Policies.AuthenticationFlowsPolicy
{
    [Proxy(typeof(AuthenticationFlowsPolicyRequestBuilder), true)]
    public partial interface IAuthenticationFlowsPolicyRequestBuilder;
}

namespace Microsoft.Graph.Policies.AuthenticationMethodsPolicy
{
    [Proxy(typeof(AuthenticationMethodsPolicyRequestBuilder), true)]
    public partial interface IAuthenticationMethodsPolicyRequestBuilder;
}

namespace Microsoft.Graph.Policies.AuthenticationMethodsPolicy.AuthenticationMethodConfigurations
{
    [Proxy(typeof(AuthenticationMethodConfigurationsRequestBuilder), true)]
    public partial interface IAuthenticationMethodConfigurationsRequestBuilder;
}

namespace Microsoft.Graph.Policies.AuthenticationMethodsPolicy.AuthenticationMethodConfigurations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Policies.AuthenticationMethodsPolicy.AuthenticationMethodConfigurations.Item
{
    [Proxy(typeof(AuthenticationMethodConfigurationItemRequestBuilder), true)]
    public partial interface IAuthenticationMethodConfigurationItemRequestBuilder;
}

namespace Microsoft.Graph.Policies.AuthenticationStrengthPolicies
{
    [Proxy(typeof(AuthenticationStrengthPoliciesRequestBuilder), true)]
    public partial interface IAuthenticationStrengthPoliciesRequestBuilder;
}

namespace Microsoft.Graph.Policies.AuthenticationStrengthPolicies.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Policies.AuthenticationStrengthPolicies.Item
{
    [Proxy(typeof(AuthenticationStrengthPolicyItemRequestBuilder), true)]
    public partial interface IAuthenticationStrengthPolicyItemRequestBuilder;
}

namespace Microsoft.Graph.Policies.AuthenticationStrengthPolicies.Item.CombinationConfigurations
{
    [Proxy(typeof(CombinationConfigurationsRequestBuilder), true)]
    public partial interface ICombinationConfigurationsRequestBuilder;
}

namespace Microsoft.Graph.Policies.AuthenticationStrengthPolicies.Item.CombinationConfigurations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Policies.AuthenticationStrengthPolicies.Item.CombinationConfigurations.Item
{
    [Proxy(typeof(AuthenticationCombinationConfigurationItemRequestBuilder), true)]
    public partial interface IAuthenticationCombinationConfigurationItemRequestBuilder;
}

namespace Microsoft.Graph.Policies.AuthenticationStrengthPolicies.Item.UpdateAllowedCombinations
{
    [Proxy(typeof(UpdateAllowedCombinationsRequestBuilder), true)]
    public partial interface IUpdateAllowedCombinationsRequestBuilder;
}

namespace Microsoft.Graph.Policies.AuthenticationStrengthPolicies.Item.Usage
{
    [Proxy(typeof(UsageRequestBuilder), true)]
    public partial interface IUsageRequestBuilder;
}

namespace Microsoft.Graph.Policies.AuthorizationPolicy
{
    [Proxy(typeof(AuthorizationPolicyRequestBuilder), true)]
    public partial interface IAuthorizationPolicyRequestBuilder;
}

namespace Microsoft.Graph.Policies.ClaimsMappingPolicies
{
    [Proxy(typeof(ClaimsMappingPoliciesRequestBuilder), true)]
    public partial interface IClaimsMappingPoliciesRequestBuilder;
}

namespace Microsoft.Graph.Policies.ClaimsMappingPolicies.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Policies.ClaimsMappingPolicies.Item
{
    [Proxy(typeof(ClaimsMappingPolicyItemRequestBuilder), true)]
    public partial interface IClaimsMappingPolicyItemRequestBuilder;
}

namespace Microsoft.Graph.Policies.ClaimsMappingPolicies.Item.AppliesTo
{
    [Proxy(typeof(AppliesToRequestBuilder), true)]
    public partial interface IAppliesToRequestBuilder;
}

namespace Microsoft.Graph.Policies.ClaimsMappingPolicies.Item.AppliesTo.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Policies.ClaimsMappingPolicies.Item.AppliesTo.Item
{
    [Proxy(typeof(DirectoryObjectItemRequestBuilder), true)]
    public partial interface IDirectoryObjectItemRequestBuilder;
}

namespace Microsoft.Graph.Policies.ConditionalAccessPolicies
{
    [Proxy(typeof(ConditionalAccessPoliciesRequestBuilder), true)]
    public partial interface IConditionalAccessPoliciesRequestBuilder;
}

namespace Microsoft.Graph.Policies.ConditionalAccessPolicies.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Policies.ConditionalAccessPolicies.Item
{
    [Proxy(typeof(ConditionalAccessPolicyItemRequestBuilder), true)]
    public partial interface IConditionalAccessPolicyItemRequestBuilder;
}

namespace Microsoft.Graph.Policies.CrossTenantAccessPolicy
{
    [Proxy(typeof(CrossTenantAccessPolicyRequestBuilder), true)]
    public partial interface ICrossTenantAccessPolicyRequestBuilder;
}

namespace Microsoft.Graph.Policies.CrossTenantAccessPolicy.Default
{
    [Proxy(typeof(DefaultRequestBuilder), true)]
    public partial interface IDefaultRequestBuilder;
}

namespace Microsoft.Graph.Policies.CrossTenantAccessPolicy.Default.ResetToSystemDefault
{
    [Proxy(typeof(ResetToSystemDefaultRequestBuilder), true)]
    public partial interface IResetToSystemDefaultRequestBuilder;
}

namespace Microsoft.Graph.Policies.CrossTenantAccessPolicy.Partners
{
    [Proxy(typeof(PartnersRequestBuilder), true)]
    public partial interface IPartnersRequestBuilder;
}

namespace Microsoft.Graph.Policies.CrossTenantAccessPolicy.Partners.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Policies.CrossTenantAccessPolicy.Partners.Item
{
    [Proxy(typeof(CrossTenantAccessPolicyConfigurationPartnerTenantItemRequestBuilder), true)]
    public partial interface ICrossTenantAccessPolicyConfigurationPartnerTenantItemRequestBuilder;
}

namespace Microsoft.Graph.Policies.CrossTenantAccessPolicy.Partners.Item.IdentitySynchronization
{
    [Proxy(typeof(IdentitySynchronizationRequestBuilder), true)]
    public partial interface IIdentitySynchronizationRequestBuilder;
}

namespace Microsoft.Graph.Policies.CrossTenantAccessPolicy.Templates
{
    [Proxy(typeof(TemplatesRequestBuilder), true)]
    public partial interface ITemplatesRequestBuilder;
}

namespace Microsoft.Graph.Policies.CrossTenantAccessPolicy.Templates.MultiTenantOrganizationIdentitySynchronization
{
    [Proxy(typeof(MultiTenantOrganizationIdentitySynchronizationRequestBuilder), true)]
    public partial interface IMultiTenantOrganizationIdentitySynchronizationRequestBuilder;
}

namespace Microsoft.Graph.Policies.CrossTenantAccessPolicy.Templates.MultiTenantOrganizationPartnerConfiguration
{
    [Proxy(typeof(MultiTenantOrganizationPartnerConfigurationRequestBuilder), true)]
    public partial interface IMultiTenantOrganizationPartnerConfigurationRequestBuilder;
}

namespace Microsoft.Graph.Policies.DefaultAppManagementPolicy
{
    [Proxy(typeof(DefaultAppManagementPolicyRequestBuilder), true)]
    public partial interface IDefaultAppManagementPolicyRequestBuilder;
}

namespace Microsoft.Graph.Policies.DeviceRegistrationPolicy
{
    [Proxy(typeof(DeviceRegistrationPolicyRequestBuilder), true)]
    public partial interface IDeviceRegistrationPolicyRequestBuilder;
}

namespace Microsoft.Graph.Policies.FeatureRolloutPolicies
{
    [Proxy(typeof(FeatureRolloutPoliciesRequestBuilder), true)]
    public partial interface IFeatureRolloutPoliciesRequestBuilder;
}

namespace Microsoft.Graph.Policies.FeatureRolloutPolicies.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Policies.FeatureRolloutPolicies.Item
{
    [Proxy(typeof(FeatureRolloutPolicyItemRequestBuilder), true)]
    public partial interface IFeatureRolloutPolicyItemRequestBuilder;
}

namespace Microsoft.Graph.Policies.FeatureRolloutPolicies.Item.AppliesTo
{
    [Proxy(typeof(AppliesToRequestBuilder), true)]
    public partial interface IAppliesToRequestBuilder;
}

namespace Microsoft.Graph.Policies.FeatureRolloutPolicies.Item.AppliesTo.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Policies.FeatureRolloutPolicies.Item.AppliesTo.Item
{
    [Proxy(typeof(DirectoryObjectItemRequestBuilder), true)]
    public partial interface IDirectoryObjectItemRequestBuilder;
}

namespace Microsoft.Graph.Policies.FeatureRolloutPolicies.Item.AppliesTo.Item.Ref
{
    [Proxy(typeof(RefRequestBuilder), true)]
    public partial interface IRefRequestBuilder;
}

namespace Microsoft.Graph.Policies.FeatureRolloutPolicies.Item.AppliesTo.Ref
{
    [Proxy(typeof(RefRequestBuilder), true)]
    public partial interface IRefRequestBuilder;
}

namespace Microsoft.Graph.Policies.HomeRealmDiscoveryPolicies
{
    [Proxy(typeof(HomeRealmDiscoveryPoliciesRequestBuilder), true)]
    public partial interface IHomeRealmDiscoveryPoliciesRequestBuilder;
}

namespace Microsoft.Graph.Policies.HomeRealmDiscoveryPolicies.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Policies.HomeRealmDiscoveryPolicies.Item
{
    [Proxy(typeof(HomeRealmDiscoveryPolicyItemRequestBuilder), true)]
    public partial interface IHomeRealmDiscoveryPolicyItemRequestBuilder;
}

namespace Microsoft.Graph.Policies.HomeRealmDiscoveryPolicies.Item.AppliesTo
{
    [Proxy(typeof(AppliesToRequestBuilder), true)]
    public partial interface IAppliesToRequestBuilder;
}

namespace Microsoft.Graph.Policies.HomeRealmDiscoveryPolicies.Item.AppliesTo.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Policies.HomeRealmDiscoveryPolicies.Item.AppliesTo.Item
{
    [Proxy(typeof(DirectoryObjectItemRequestBuilder), true)]
    public partial interface IDirectoryObjectItemRequestBuilder;
}

namespace Microsoft.Graph.Policies.IdentitySecurityDefaultsEnforcementPolicy
{
    [Proxy(typeof(IdentitySecurityDefaultsEnforcementPolicyRequestBuilder), true)]
    public partial interface IIdentitySecurityDefaultsEnforcementPolicyRequestBuilder;
}

namespace Microsoft.Graph.Policies.PermissionGrantPolicies
{
    [Proxy(typeof(PermissionGrantPoliciesRequestBuilder), true)]
    public partial interface IPermissionGrantPoliciesRequestBuilder;
}

namespace Microsoft.Graph.Policies.PermissionGrantPolicies.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Policies.PermissionGrantPolicies.Item
{
    [Proxy(typeof(PermissionGrantPolicyItemRequestBuilder), true)]
    public partial interface IPermissionGrantPolicyItemRequestBuilder;
}

namespace Microsoft.Graph.Policies.PermissionGrantPolicies.Item.Excludes
{
    [Proxy(typeof(ExcludesRequestBuilder), true)]
    public partial interface IExcludesRequestBuilder;
}

namespace Microsoft.Graph.Policies.PermissionGrantPolicies.Item.Excludes.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Policies.PermissionGrantPolicies.Item.Excludes.Item
{
    [Proxy(typeof(PermissionGrantConditionSetItemRequestBuilder), true)]
    public partial interface IPermissionGrantConditionSetItemRequestBuilder;
}

namespace Microsoft.Graph.Policies.PermissionGrantPolicies.Item.Includes
{
    [Proxy(typeof(IncludesRequestBuilder), true)]
    public partial interface IIncludesRequestBuilder;
}

namespace Microsoft.Graph.Policies.PermissionGrantPolicies.Item.Includes.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Policies.PermissionGrantPolicies.Item.Includes.Item
{
    [Proxy(typeof(PermissionGrantConditionSetItemRequestBuilder), true)]
    public partial interface IPermissionGrantConditionSetItemRequestBuilder;
}

namespace Microsoft.Graph.Policies.RoleManagementPolicies
{
    [Proxy(typeof(RoleManagementPoliciesRequestBuilder), true)]
    public partial interface IRoleManagementPoliciesRequestBuilder;
}

namespace Microsoft.Graph.Policies.RoleManagementPolicies.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Policies.RoleManagementPolicies.Item
{
    [Proxy(typeof(UnifiedRoleManagementPolicyItemRequestBuilder), true)]
    public partial interface IUnifiedRoleManagementPolicyItemRequestBuilder;
}

namespace Microsoft.Graph.Policies.RoleManagementPolicies.Item.EffectiveRules
{
    [Proxy(typeof(EffectiveRulesRequestBuilder), true)]
    public partial interface IEffectiveRulesRequestBuilder;
}

namespace Microsoft.Graph.Policies.RoleManagementPolicies.Item.EffectiveRules.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Policies.RoleManagementPolicies.Item.EffectiveRules.Item
{
    [Proxy(typeof(UnifiedRoleManagementPolicyRuleItemRequestBuilder), true)]
    public partial interface IUnifiedRoleManagementPolicyRuleItemRequestBuilder;
}

namespace Microsoft.Graph.Policies.RoleManagementPolicies.Item.Rules
{
    [Proxy(typeof(RulesRequestBuilder), true)]
    public partial interface IRulesRequestBuilder;
}

namespace Microsoft.Graph.Policies.RoleManagementPolicies.Item.Rules.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Policies.RoleManagementPolicies.Item.Rules.Item
{
    [Proxy(typeof(UnifiedRoleManagementPolicyRuleItemRequestBuilder), true)]
    public partial interface IUnifiedRoleManagementPolicyRuleItemRequestBuilder;
}

namespace Microsoft.Graph.Policies.RoleManagementPolicyAssignments
{
    [Proxy(typeof(RoleManagementPolicyAssignmentsRequestBuilder), true)]
    public partial interface IRoleManagementPolicyAssignmentsRequestBuilder;
}

namespace Microsoft.Graph.Policies.RoleManagementPolicyAssignments.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Policies.RoleManagementPolicyAssignments.Item
{
    [Proxy(typeof(UnifiedRoleManagementPolicyAssignmentItemRequestBuilder), true)]
    public partial interface IUnifiedRoleManagementPolicyAssignmentItemRequestBuilder;
}

namespace Microsoft.Graph.Policies.RoleManagementPolicyAssignments.Item.Policy
{
    [Proxy(typeof(PolicyRequestBuilder), true)]
    public partial interface IPolicyRequestBuilder;
}

namespace Microsoft.Graph.Policies.TokenIssuancePolicies
{
    [Proxy(typeof(TokenIssuancePoliciesRequestBuilder), true)]
    public partial interface ITokenIssuancePoliciesRequestBuilder;
}

namespace Microsoft.Graph.Policies.TokenIssuancePolicies.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Policies.TokenIssuancePolicies.Item
{
    [Proxy(typeof(TokenIssuancePolicyItemRequestBuilder), true)]
    public partial interface ITokenIssuancePolicyItemRequestBuilder;
}

namespace Microsoft.Graph.Policies.TokenIssuancePolicies.Item.AppliesTo
{
    [Proxy(typeof(AppliesToRequestBuilder), true)]
    public partial interface IAppliesToRequestBuilder;
}

namespace Microsoft.Graph.Policies.TokenIssuancePolicies.Item.AppliesTo.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Policies.TokenIssuancePolicies.Item.AppliesTo.Item
{
    [Proxy(typeof(DirectoryObjectItemRequestBuilder), true)]
    public partial interface IDirectoryObjectItemRequestBuilder;
}

namespace Microsoft.Graph.Policies.TokenLifetimePolicies
{
    [Proxy(typeof(TokenLifetimePoliciesRequestBuilder), true)]
    public partial interface ITokenLifetimePoliciesRequestBuilder;
}

namespace Microsoft.Graph.Policies.TokenLifetimePolicies.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Policies.TokenLifetimePolicies.Item
{
    [Proxy(typeof(TokenLifetimePolicyItemRequestBuilder), true)]
    public partial interface ITokenLifetimePolicyItemRequestBuilder;
}

namespace Microsoft.Graph.Policies.TokenLifetimePolicies.Item.AppliesTo
{
    [Proxy(typeof(AppliesToRequestBuilder), true)]
    public partial interface IAppliesToRequestBuilder;
}

namespace Microsoft.Graph.Policies.TokenLifetimePolicies.Item.AppliesTo.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Policies.TokenLifetimePolicies.Item.AppliesTo.Item
{
    [Proxy(typeof(DirectoryObjectItemRequestBuilder), true)]
    public partial interface IDirectoryObjectItemRequestBuilder;
}

namespace Microsoft.Graph.Print
{
    [Proxy(typeof(PrintRequestBuilder), true)]
    public partial interface IPrintRequestBuilder;
}

namespace Microsoft.Graph.Print.Connectors
{
    [Proxy(typeof(ConnectorsRequestBuilder), true)]
    public partial interface IConnectorsRequestBuilder;
}

namespace Microsoft.Graph.Print.Connectors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Print.Connectors.Item
{
    [Proxy(typeof(PrintConnectorItemRequestBuilder), true)]
    public partial interface IPrintConnectorItemRequestBuilder;
}

namespace Microsoft.Graph.Print.Operations
{
    [Proxy(typeof(OperationsRequestBuilder), true)]
    public partial interface IOperationsRequestBuilder;
}

namespace Microsoft.Graph.Print.Operations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Print.Operations.Item
{
    [Proxy(typeof(PrintOperationItemRequestBuilder), true)]
    public partial interface IPrintOperationItemRequestBuilder;
}

namespace Microsoft.Graph.Print.Printers
{
    [Proxy(typeof(PrintersRequestBuilder), true)]
    public partial interface IPrintersRequestBuilder;
}

namespace Microsoft.Graph.Print.Printers.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Print.Printers.Create
{
    [Proxy(typeof(CreateRequestBuilder), true)]
    public partial interface ICreateRequestBuilder;
}

namespace Microsoft.Graph.Print.Printers.Item
{
    [Proxy(typeof(PrinterItemRequestBuilder), true)]
    public partial interface IPrinterItemRequestBuilder;
}

namespace Microsoft.Graph.Print.Printers.Item.Connectors
{
    [Proxy(typeof(ConnectorsRequestBuilder), true)]
    public partial interface IConnectorsRequestBuilder;
}

namespace Microsoft.Graph.Print.Printers.Item.Connectors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Print.Printers.Item.Connectors.Item
{
    [Proxy(typeof(PrintConnectorItemRequestBuilder), true)]
    public partial interface IPrintConnectorItemRequestBuilder;
}

namespace Microsoft.Graph.Print.Printers.Item.Jobs
{
    [Proxy(typeof(JobsRequestBuilder), true)]
    public partial interface IJobsRequestBuilder;
}

namespace Microsoft.Graph.Print.Printers.Item.Jobs.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Print.Printers.Item.Jobs.Item
{
    [Proxy(typeof(PrintJobItemRequestBuilder), true)]
    public partial interface IPrintJobItemRequestBuilder;
}

namespace Microsoft.Graph.Print.Printers.Item.Jobs.Item.Abort
{
    [Proxy(typeof(AbortRequestBuilder), true)]
    public partial interface IAbortRequestBuilder;
}

namespace Microsoft.Graph.Print.Printers.Item.Jobs.Item.Cancel
{
    [Proxy(typeof(CancelRequestBuilder), true)]
    public partial interface ICancelRequestBuilder;
}

namespace Microsoft.Graph.Print.Printers.Item.Jobs.Item.Documents
{
    [Proxy(typeof(DocumentsRequestBuilder), true)]
    public partial interface IDocumentsRequestBuilder;
}

namespace Microsoft.Graph.Print.Printers.Item.Jobs.Item.Documents.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Print.Printers.Item.Jobs.Item.Documents.Item
{
    [Proxy(typeof(PrintDocumentItemRequestBuilder), true)]
    public partial interface IPrintDocumentItemRequestBuilder;
}

namespace Microsoft.Graph.Print.Printers.Item.Jobs.Item.Documents.Item.CreateUploadSession
{
    [Proxy(typeof(CreateUploadSessionRequestBuilder), true)]
    public partial interface ICreateUploadSessionRequestBuilder;
}

namespace Microsoft.Graph.Print.Printers.Item.Jobs.Item.Documents.Item.Value
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Print.Printers.Item.Jobs.Item.Redirect
{
    [Proxy(typeof(RedirectRequestBuilder), true)]
    public partial interface IRedirectRequestBuilder;
}

namespace Microsoft.Graph.Print.Printers.Item.Jobs.Item.Start
{
    [Proxy(typeof(StartRequestBuilder), true)]
    public partial interface IStartRequestBuilder;
}

namespace Microsoft.Graph.Print.Printers.Item.Jobs.Item.Tasks
{
    [Proxy(typeof(TasksRequestBuilder), true)]
    public partial interface ITasksRequestBuilder;
}

namespace Microsoft.Graph.Print.Printers.Item.Jobs.Item.Tasks.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Print.Printers.Item.Jobs.Item.Tasks.Item
{
    [Proxy(typeof(PrintTaskItemRequestBuilder), true)]
    public partial interface IPrintTaskItemRequestBuilder;
}

namespace Microsoft.Graph.Print.Printers.Item.Jobs.Item.Tasks.Item.Definition
{
    [Proxy(typeof(DefinitionRequestBuilder), true)]
    public partial interface IDefinitionRequestBuilder;
}

namespace Microsoft.Graph.Print.Printers.Item.Jobs.Item.Tasks.Item.Trigger
{
    [Proxy(typeof(TriggerRequestBuilder), true)]
    public partial interface ITriggerRequestBuilder;
}

namespace Microsoft.Graph.Print.Printers.Item.RestoreFactoryDefaults
{
    [Proxy(typeof(RestoreFactoryDefaultsRequestBuilder), true)]
    public partial interface IRestoreFactoryDefaultsRequestBuilder;
}

namespace Microsoft.Graph.Print.Printers.Item.Shares
{
    [Proxy(typeof(SharesRequestBuilder), true)]
    public partial interface ISharesRequestBuilder;
}

namespace Microsoft.Graph.Print.Printers.Item.Shares.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Print.Printers.Item.Shares.Item
{
    [Proxy(typeof(PrinterShareItemRequestBuilder), true)]
    public partial interface IPrinterShareItemRequestBuilder;
}

namespace Microsoft.Graph.Print.Printers.Item.TaskTriggers
{
    [Proxy(typeof(TaskTriggersRequestBuilder), true)]
    public partial interface ITaskTriggersRequestBuilder;
}

namespace Microsoft.Graph.Print.Printers.Item.TaskTriggers.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Print.Printers.Item.TaskTriggers.Item
{
    [Proxy(typeof(PrintTaskTriggerItemRequestBuilder), true)]
    public partial interface IPrintTaskTriggerItemRequestBuilder;
}

namespace Microsoft.Graph.Print.Printers.Item.TaskTriggers.Item.Definition
{
    [Proxy(typeof(DefinitionRequestBuilder), true)]
    public partial interface IDefinitionRequestBuilder;
}

namespace Microsoft.Graph.Print.Services
{
    [Proxy(typeof(ServicesRequestBuilder), true)]
    public partial interface IServicesRequestBuilder;
}

namespace Microsoft.Graph.Print.Services.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Print.Services.Item
{
    [Proxy(typeof(PrintServiceItemRequestBuilder), true)]
    public partial interface IPrintServiceItemRequestBuilder;
}

namespace Microsoft.Graph.Print.Services.Item.Endpoints
{
    [Proxy(typeof(EndpointsRequestBuilder), true)]
    public partial interface IEndpointsRequestBuilder;
}

namespace Microsoft.Graph.Print.Services.Item.Endpoints.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Print.Services.Item.Endpoints.Item
{
    [Proxy(typeof(PrintServiceEndpointItemRequestBuilder), true)]
    public partial interface IPrintServiceEndpointItemRequestBuilder;
}

namespace Microsoft.Graph.Print.Shares
{
    [Proxy(typeof(SharesRequestBuilder), true)]
    public partial interface ISharesRequestBuilder;
}

namespace Microsoft.Graph.Print.Shares.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Print.Shares.Item
{
    [Proxy(typeof(PrinterShareItemRequestBuilder), true)]
    public partial interface IPrinterShareItemRequestBuilder;
}

namespace Microsoft.Graph.Print.Shares.Item.AllowedGroups
{
    [Proxy(typeof(AllowedGroupsRequestBuilder), true)]
    public partial interface IAllowedGroupsRequestBuilder;
}

namespace Microsoft.Graph.Print.Shares.Item.AllowedGroups.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Print.Shares.Item.AllowedGroups.Item
{
    [Proxy(typeof(GroupItemRequestBuilder), true)]
    public partial interface IGroupItemRequestBuilder;
}

namespace Microsoft.Graph.Print.Shares.Item.AllowedGroups.Item.Ref
{
    [Proxy(typeof(RefRequestBuilder), true)]
    public partial interface IRefRequestBuilder;
}

namespace Microsoft.Graph.Print.Shares.Item.AllowedGroups.Item.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.Print.Shares.Item.AllowedGroups.Item.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Print.Shares.Item.AllowedGroups.Ref
{
    [Proxy(typeof(RefRequestBuilder), true)]
    public partial interface IRefRequestBuilder;
}

namespace Microsoft.Graph.Print.Shares.Item.AllowedUsers
{
    [Proxy(typeof(AllowedUsersRequestBuilder), true)]
    public partial interface IAllowedUsersRequestBuilder;
}

namespace Microsoft.Graph.Print.Shares.Item.AllowedUsers.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Print.Shares.Item.AllowedUsers.Item
{
    [Proxy(typeof(UserItemRequestBuilder), true)]
    public partial interface IUserItemRequestBuilder;
}

namespace Microsoft.Graph.Print.Shares.Item.AllowedUsers.Item.MailboxSettings
{
    [Proxy(typeof(MailboxSettingsRequestBuilder), true)]
    public partial interface IMailboxSettingsRequestBuilder;
}

namespace Microsoft.Graph.Print.Shares.Item.AllowedUsers.Item.Ref
{
    [Proxy(typeof(RefRequestBuilder), true)]
    public partial interface IRefRequestBuilder;
}

namespace Microsoft.Graph.Print.Shares.Item.AllowedUsers.Item.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.Print.Shares.Item.AllowedUsers.Item.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Print.Shares.Item.AllowedUsers.Ref
{
    [Proxy(typeof(RefRequestBuilder), true)]
    public partial interface IRefRequestBuilder;
}

namespace Microsoft.Graph.Print.Shares.Item.Jobs
{
    [Proxy(typeof(JobsRequestBuilder), true)]
    public partial interface IJobsRequestBuilder;
}

namespace Microsoft.Graph.Print.Shares.Item.Jobs.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Print.Shares.Item.Jobs.Item
{
    [Proxy(typeof(PrintJobItemRequestBuilder), true)]
    public partial interface IPrintJobItemRequestBuilder;
}

namespace Microsoft.Graph.Print.Shares.Item.Jobs.Item.Abort
{
    [Proxy(typeof(AbortRequestBuilder), true)]
    public partial interface IAbortRequestBuilder;
}

namespace Microsoft.Graph.Print.Shares.Item.Jobs.Item.Cancel
{
    [Proxy(typeof(CancelRequestBuilder), true)]
    public partial interface ICancelRequestBuilder;
}

namespace Microsoft.Graph.Print.Shares.Item.Jobs.Item.Documents
{
    [Proxy(typeof(DocumentsRequestBuilder), true)]
    public partial interface IDocumentsRequestBuilder;
}

namespace Microsoft.Graph.Print.Shares.Item.Jobs.Item.Documents.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Print.Shares.Item.Jobs.Item.Documents.Item
{
    [Proxy(typeof(PrintDocumentItemRequestBuilder), true)]
    public partial interface IPrintDocumentItemRequestBuilder;
}

namespace Microsoft.Graph.Print.Shares.Item.Jobs.Item.Documents.Item.CreateUploadSession
{
    [Proxy(typeof(CreateUploadSessionRequestBuilder), true)]
    public partial interface ICreateUploadSessionRequestBuilder;
}

namespace Microsoft.Graph.Print.Shares.Item.Jobs.Item.Documents.Item.Value
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Print.Shares.Item.Jobs.Item.Redirect
{
    [Proxy(typeof(RedirectRequestBuilder), true)]
    public partial interface IRedirectRequestBuilder;
}

namespace Microsoft.Graph.Print.Shares.Item.Jobs.Item.Start
{
    [Proxy(typeof(StartRequestBuilder), true)]
    public partial interface IStartRequestBuilder;
}

namespace Microsoft.Graph.Print.Shares.Item.Jobs.Item.Tasks
{
    [Proxy(typeof(TasksRequestBuilder), true)]
    public partial interface ITasksRequestBuilder;
}

namespace Microsoft.Graph.Print.Shares.Item.Jobs.Item.Tasks.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Print.Shares.Item.Jobs.Item.Tasks.Item
{
    [Proxy(typeof(PrintTaskItemRequestBuilder), true)]
    public partial interface IPrintTaskItemRequestBuilder;
}

namespace Microsoft.Graph.Print.Shares.Item.Jobs.Item.Tasks.Item.Definition
{
    [Proxy(typeof(DefinitionRequestBuilder), true)]
    public partial interface IDefinitionRequestBuilder;
}

namespace Microsoft.Graph.Print.Shares.Item.Jobs.Item.Tasks.Item.Trigger
{
    [Proxy(typeof(TriggerRequestBuilder), true)]
    public partial interface ITriggerRequestBuilder;
}

namespace Microsoft.Graph.Print.Shares.Item.Printer
{
    [Proxy(typeof(PrinterRequestBuilder), true)]
    public partial interface IPrinterRequestBuilder;
}

namespace Microsoft.Graph.Print.TaskDefinitions
{
    [Proxy(typeof(TaskDefinitionsRequestBuilder), true)]
    public partial interface ITaskDefinitionsRequestBuilder;
}

namespace Microsoft.Graph.Print.TaskDefinitions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Print.TaskDefinitions.Item
{
    [Proxy(typeof(PrintTaskDefinitionItemRequestBuilder), true)]
    public partial interface IPrintTaskDefinitionItemRequestBuilder;
}

namespace Microsoft.Graph.Print.TaskDefinitions.Item.Tasks
{
    [Proxy(typeof(TasksRequestBuilder), true)]
    public partial interface ITasksRequestBuilder;
}

namespace Microsoft.Graph.Print.TaskDefinitions.Item.Tasks.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Print.TaskDefinitions.Item.Tasks.Item
{
    [Proxy(typeof(PrintTaskItemRequestBuilder), true)]
    public partial interface IPrintTaskItemRequestBuilder;
}

namespace Microsoft.Graph.Print.TaskDefinitions.Item.Tasks.Item.Definition
{
    [Proxy(typeof(DefinitionRequestBuilder), true)]
    public partial interface IDefinitionRequestBuilder;
}

namespace Microsoft.Graph.Print.TaskDefinitions.Item.Tasks.Item.Trigger
{
    [Proxy(typeof(TriggerRequestBuilder), true)]
    public partial interface ITriggerRequestBuilder;
}

namespace Microsoft.Graph.Privacy
{
    [Proxy(typeof(PrivacyRequestBuilder), true)]
    public partial interface IPrivacyRequestBuilder;
}

namespace Microsoft.Graph.Privacy.SubjectRightsRequests
{
    [Proxy(typeof(SubjectRightsRequestsRequestBuilder), true)]
    public partial interface ISubjectRightsRequestsRequestBuilder;
}

namespace Microsoft.Graph.Privacy.SubjectRightsRequests.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Privacy.SubjectRightsRequests.Item
{
    [Proxy(typeof(SubjectRightsRequestItemRequestBuilder), true)]
    public partial interface ISubjectRightsRequestItemRequestBuilder;
}

namespace Microsoft.Graph.Privacy.SubjectRightsRequests.Item.Approvers
{
    [Proxy(typeof(ApproversRequestBuilder), true)]
    public partial interface IApproversRequestBuilder;
}

namespace Microsoft.Graph.Privacy.SubjectRightsRequests.Item.Approvers.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Privacy.SubjectRightsRequests.Item.Approvers.Item
{
    [Proxy(typeof(UserItemRequestBuilder), true)]
    public partial interface IUserItemRequestBuilder;
}

namespace Microsoft.Graph.Privacy.SubjectRightsRequests.Item.Approvers.Item.MailboxSettings
{
    [Proxy(typeof(MailboxSettingsRequestBuilder), true)]
    public partial interface IMailboxSettingsRequestBuilder;
}

namespace Microsoft.Graph.Privacy.SubjectRightsRequests.Item.Approvers.Item.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.Privacy.SubjectRightsRequests.Item.Approvers.Item.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Privacy.SubjectRightsRequests.Item.ApproversWithUserPrincipalName
{
    [Proxy(typeof(ApproversWithUserPrincipalNameRequestBuilder), true)]
    public partial interface IApproversWithUserPrincipalNameRequestBuilder;
}

namespace Microsoft.Graph.Privacy.SubjectRightsRequests.Item.Collaborators
{
    [Proxy(typeof(CollaboratorsRequestBuilder), true)]
    public partial interface ICollaboratorsRequestBuilder;
}

namespace Microsoft.Graph.Privacy.SubjectRightsRequests.Item.Collaborators.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Privacy.SubjectRightsRequests.Item.Collaborators.Item
{
    [Proxy(typeof(UserItemRequestBuilder), true)]
    public partial interface IUserItemRequestBuilder;
}

namespace Microsoft.Graph.Privacy.SubjectRightsRequests.Item.Collaborators.Item.MailboxSettings
{
    [Proxy(typeof(MailboxSettingsRequestBuilder), true)]
    public partial interface IMailboxSettingsRequestBuilder;
}

namespace Microsoft.Graph.Privacy.SubjectRightsRequests.Item.Collaborators.Item.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.Privacy.SubjectRightsRequests.Item.Collaborators.Item.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Privacy.SubjectRightsRequests.Item.CollaboratorsWithUserPrincipalName
{
    [Proxy(typeof(CollaboratorsWithUserPrincipalNameRequestBuilder), true)]
    public partial interface ICollaboratorsWithUserPrincipalNameRequestBuilder;
}

namespace Microsoft.Graph.Privacy.SubjectRightsRequests.Item.GetFinalAttachment
{
    [Proxy(typeof(GetFinalAttachmentRequestBuilder), true)]
    public partial interface IGetFinalAttachmentRequestBuilder;
}

namespace Microsoft.Graph.Privacy.SubjectRightsRequests.Item.GetFinalReport
{
    [Proxy(typeof(GetFinalReportRequestBuilder), true)]
    public partial interface IGetFinalReportRequestBuilder;
}

namespace Microsoft.Graph.Privacy.SubjectRightsRequests.Item.Notes
{
    [Proxy(typeof(NotesRequestBuilder), true)]
    public partial interface INotesRequestBuilder;
}

namespace Microsoft.Graph.Privacy.SubjectRightsRequests.Item.Notes.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Privacy.SubjectRightsRequests.Item.Notes.Item
{
    [Proxy(typeof(AuthoredNoteItemRequestBuilder), true)]
    public partial interface IAuthoredNoteItemRequestBuilder;
}

namespace Microsoft.Graph.Privacy.SubjectRightsRequests.Item.Team
{
    [Proxy(typeof(TeamRequestBuilder), true)]
    public partial interface ITeamRequestBuilder;
}

namespace Microsoft.Graph.Reports
{
    [Proxy(typeof(ReportsRequestBuilder), true)]
    public partial interface IReportsRequestBuilder;
}

namespace Microsoft.Graph.Reports.AuthenticationMethods
{
    [Proxy(typeof(AuthenticationMethodsRequestBuilder), true)]
    public partial interface IAuthenticationMethodsRequestBuilder;
}

namespace Microsoft.Graph.Reports.AuthenticationMethods.UserRegistrationDetails
{
    [Proxy(typeof(UserRegistrationDetailsRequestBuilder), true)]
    public partial interface IUserRegistrationDetailsRequestBuilder;
}

namespace Microsoft.Graph.Reports.AuthenticationMethods.UserRegistrationDetails.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Reports.AuthenticationMethods.UserRegistrationDetails.Item
{
    [Proxy(typeof(UserRegistrationDetailsItemRequestBuilder), true)]
    public partial interface IUserRegistrationDetailsItemRequestBuilder;
}

namespace Microsoft.Graph.Reports.AuthenticationMethods.UsersRegisteredByFeature
{
    [Proxy(typeof(UsersRegisteredByFeatureRequestBuilder), true)]
    public partial interface IUsersRegisteredByFeatureRequestBuilder;
}

namespace Microsoft.Graph.Reports.AuthenticationMethods.UsersRegisteredByFeatureWithIncludedUserTypesWithIncludedUserRoles
{
    [Proxy(typeof(UsersRegisteredByFeatureWithIncludedUserTypesWithIncludedUserRolesRequestBuilder), true)]
    public partial interface IUsersRegisteredByFeatureWithIncludedUserTypesWithIncludedUserRolesRequestBuilder;
}

namespace Microsoft.Graph.Reports.AuthenticationMethods.UsersRegisteredByMethod
{
    [Proxy(typeof(UsersRegisteredByMethodRequestBuilder), true)]
    public partial interface IUsersRegisteredByMethodRequestBuilder;
}

namespace Microsoft.Graph.Reports.AuthenticationMethods.UsersRegisteredByMethodWithIncludedUserTypesWithIncludedUserRoles
{
    [Proxy(typeof(UsersRegisteredByMethodWithIncludedUserTypesWithIncludedUserRolesRequestBuilder), true)]
    public partial interface IUsersRegisteredByMethodWithIncludedUserTypesWithIncludedUserRolesRequestBuilder;
}

namespace Microsoft.Graph.Reports.DailyPrintUsageByPrinter
{
    [Proxy(typeof(DailyPrintUsageByPrinterRequestBuilder), true)]
    public partial interface IDailyPrintUsageByPrinterRequestBuilder;
}

namespace Microsoft.Graph.Reports.DailyPrintUsageByPrinter.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Reports.DailyPrintUsageByPrinter.Item
{
    [Proxy(typeof(PrintUsageByPrinterItemRequestBuilder), true)]
    public partial interface IPrintUsageByPrinterItemRequestBuilder;
}

namespace Microsoft.Graph.Reports.DailyPrintUsageByUser
{
    [Proxy(typeof(DailyPrintUsageByUserRequestBuilder), true)]
    public partial interface IDailyPrintUsageByUserRequestBuilder;
}

namespace Microsoft.Graph.Reports.DailyPrintUsageByUser.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Reports.DailyPrintUsageByUser.Item
{
    [Proxy(typeof(PrintUsageByUserItemRequestBuilder), true)]
    public partial interface IPrintUsageByUserItemRequestBuilder;
}

namespace Microsoft.Graph.Reports.DeviceConfigurationDeviceActivity
{
    [Proxy(typeof(DeviceConfigurationDeviceActivityRequestBuilder), true)]
    public partial interface IDeviceConfigurationDeviceActivityRequestBuilder;
}

namespace Microsoft.Graph.Reports.DeviceConfigurationUserActivity
{
    [Proxy(typeof(DeviceConfigurationUserActivityRequestBuilder), true)]
    public partial interface IDeviceConfigurationUserActivityRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetEmailActivityCountsWithPeriod
{
    [Proxy(typeof(GetEmailActivityCountsWithPeriodRequestBuilder), true)]
    public partial interface IGetEmailActivityCountsWithPeriodRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetEmailActivityUserCountsWithPeriod
{
    [Proxy(typeof(GetEmailActivityUserCountsWithPeriodRequestBuilder), true)]
    public partial interface IGetEmailActivityUserCountsWithPeriodRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetEmailActivityUserDetailWithDate
{
    [Proxy(typeof(GetEmailActivityUserDetailWithDateRequestBuilder), true)]
    public partial interface IGetEmailActivityUserDetailWithDateRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetEmailActivityUserDetailWithPeriod
{
    [Proxy(typeof(GetEmailActivityUserDetailWithPeriodRequestBuilder), true)]
    public partial interface IGetEmailActivityUserDetailWithPeriodRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetEmailAppUsageAppsUserCountsWithPeriod
{
    [Proxy(typeof(GetEmailAppUsageAppsUserCountsWithPeriodRequestBuilder), true)]
    public partial interface IGetEmailAppUsageAppsUserCountsWithPeriodRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetEmailAppUsageUserCountsWithPeriod
{
    [Proxy(typeof(GetEmailAppUsageUserCountsWithPeriodRequestBuilder), true)]
    public partial interface IGetEmailAppUsageUserCountsWithPeriodRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetEmailAppUsageUserDetailWithDate
{
    [Proxy(typeof(GetEmailAppUsageUserDetailWithDateRequestBuilder), true)]
    public partial interface IGetEmailAppUsageUserDetailWithDateRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetEmailAppUsageUserDetailWithPeriod
{
    [Proxy(typeof(GetEmailAppUsageUserDetailWithPeriodRequestBuilder), true)]
    public partial interface IGetEmailAppUsageUserDetailWithPeriodRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetEmailAppUsageVersionsUserCountsWithPeriod
{
    [Proxy(typeof(GetEmailAppUsageVersionsUserCountsWithPeriodRequestBuilder), true)]
    public partial interface IGetEmailAppUsageVersionsUserCountsWithPeriodRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetGroupArchivedPrintJobsWithGroupIdWithStartDateTimeWithEndDateTime
{
    [Proxy(typeof(GetGroupArchivedPrintJobsWithGroupIdWithStartDateTimeWithEndDateTimeRequestBuilder), true)]
    public partial interface IGetGroupArchivedPrintJobsWithGroupIdWithStartDateTimeWithEndDateTimeRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetM365AppPlatformUserCountsWithPeriod
{
    [Proxy(typeof(GetM365AppPlatformUserCountsWithPeriodRequestBuilder), true)]
    public partial interface IGetM365AppPlatformUserCountsWithPeriodRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetM365AppUserCountsWithPeriod
{
    [Proxy(typeof(GetM365AppUserCountsWithPeriodRequestBuilder), true)]
    public partial interface IGetM365AppUserCountsWithPeriodRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetM365AppUserDetailWithDate
{
    [Proxy(typeof(GetM365AppUserDetailWithDateRequestBuilder), true)]
    public partial interface IGetM365AppUserDetailWithDateRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetM365AppUserDetailWithPeriod
{
    [Proxy(typeof(GetM365AppUserDetailWithPeriodRequestBuilder), true)]
    public partial interface IGetM365AppUserDetailWithPeriodRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetMailboxUsageDetailWithPeriod
{
    [Proxy(typeof(GetMailboxUsageDetailWithPeriodRequestBuilder), true)]
    public partial interface IGetMailboxUsageDetailWithPeriodRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetMailboxUsageMailboxCountsWithPeriod
{
    [Proxy(typeof(GetMailboxUsageMailboxCountsWithPeriodRequestBuilder), true)]
    public partial interface IGetMailboxUsageMailboxCountsWithPeriodRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetMailboxUsageQuotaStatusMailboxCountsWithPeriod
{
    [Proxy(typeof(GetMailboxUsageQuotaStatusMailboxCountsWithPeriodRequestBuilder), true)]
    public partial interface IGetMailboxUsageQuotaStatusMailboxCountsWithPeriodRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetMailboxUsageStorageWithPeriod
{
    [Proxy(typeof(GetMailboxUsageStorageWithPeriodRequestBuilder), true)]
    public partial interface IGetMailboxUsageStorageWithPeriodRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetOffice365ActivationCounts
{
    [Proxy(typeof(GetOffice365ActivationCountsRequestBuilder), true)]
    public partial interface IGetOffice365ActivationCountsRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetOffice365ActivationsUserCounts
{
    [Proxy(typeof(GetOffice365ActivationsUserCountsRequestBuilder), true)]
    public partial interface IGetOffice365ActivationsUserCountsRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetOffice365ActivationsUserDetail
{
    [Proxy(typeof(GetOffice365ActivationsUserDetailRequestBuilder), true)]
    public partial interface IGetOffice365ActivationsUserDetailRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetOffice365ActiveUserCountsWithPeriod
{
    [Proxy(typeof(GetOffice365ActiveUserCountsWithPeriodRequestBuilder), true)]
    public partial interface IGetOffice365ActiveUserCountsWithPeriodRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetOffice365ActiveUserDetailWithDate
{
    [Proxy(typeof(GetOffice365ActiveUserDetailWithDateRequestBuilder), true)]
    public partial interface IGetOffice365ActiveUserDetailWithDateRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetOffice365ActiveUserDetailWithPeriod
{
    [Proxy(typeof(GetOffice365ActiveUserDetailWithPeriodRequestBuilder), true)]
    public partial interface IGetOffice365ActiveUserDetailWithPeriodRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetOffice365GroupsActivityCountsWithPeriod
{
    [Proxy(typeof(GetOffice365GroupsActivityCountsWithPeriodRequestBuilder), true)]
    public partial interface IGetOffice365GroupsActivityCountsWithPeriodRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetOffice365GroupsActivityDetailWithDate
{
    [Proxy(typeof(GetOffice365GroupsActivityDetailWithDateRequestBuilder), true)]
    public partial interface IGetOffice365GroupsActivityDetailWithDateRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetOffice365GroupsActivityDetailWithPeriod
{
    [Proxy(typeof(GetOffice365GroupsActivityDetailWithPeriodRequestBuilder), true)]
    public partial interface IGetOffice365GroupsActivityDetailWithPeriodRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetOffice365GroupsActivityFileCountsWithPeriod
{
    [Proxy(typeof(GetOffice365GroupsActivityFileCountsWithPeriodRequestBuilder), true)]
    public partial interface IGetOffice365GroupsActivityFileCountsWithPeriodRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetOffice365GroupsActivityGroupCountsWithPeriod
{
    [Proxy(typeof(GetOffice365GroupsActivityGroupCountsWithPeriodRequestBuilder), true)]
    public partial interface IGetOffice365GroupsActivityGroupCountsWithPeriodRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetOffice365GroupsActivityStorageWithPeriod
{
    [Proxy(typeof(GetOffice365GroupsActivityStorageWithPeriodRequestBuilder), true)]
    public partial interface IGetOffice365GroupsActivityStorageWithPeriodRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetOffice365ServicesUserCountsWithPeriod
{
    [Proxy(typeof(GetOffice365ServicesUserCountsWithPeriodRequestBuilder), true)]
    public partial interface IGetOffice365ServicesUserCountsWithPeriodRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetOneDriveActivityFileCountsWithPeriod
{
    [Proxy(typeof(GetOneDriveActivityFileCountsWithPeriodRequestBuilder), true)]
    public partial interface IGetOneDriveActivityFileCountsWithPeriodRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetOneDriveActivityUserCountsWithPeriod
{
    [Proxy(typeof(GetOneDriveActivityUserCountsWithPeriodRequestBuilder), true)]
    public partial interface IGetOneDriveActivityUserCountsWithPeriodRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetOneDriveActivityUserDetailWithDate
{
    [Proxy(typeof(GetOneDriveActivityUserDetailWithDateRequestBuilder), true)]
    public partial interface IGetOneDriveActivityUserDetailWithDateRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetOneDriveActivityUserDetailWithPeriod
{
    [Proxy(typeof(GetOneDriveActivityUserDetailWithPeriodRequestBuilder), true)]
    public partial interface IGetOneDriveActivityUserDetailWithPeriodRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetOneDriveUsageAccountCountsWithPeriod
{
    [Proxy(typeof(GetOneDriveUsageAccountCountsWithPeriodRequestBuilder), true)]
    public partial interface IGetOneDriveUsageAccountCountsWithPeriodRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetOneDriveUsageAccountDetailWithDate
{
    [Proxy(typeof(GetOneDriveUsageAccountDetailWithDateRequestBuilder), true)]
    public partial interface IGetOneDriveUsageAccountDetailWithDateRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetOneDriveUsageAccountDetailWithPeriod
{
    [Proxy(typeof(GetOneDriveUsageAccountDetailWithPeriodRequestBuilder), true)]
    public partial interface IGetOneDriveUsageAccountDetailWithPeriodRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetOneDriveUsageFileCountsWithPeriod
{
    [Proxy(typeof(GetOneDriveUsageFileCountsWithPeriodRequestBuilder), true)]
    public partial interface IGetOneDriveUsageFileCountsWithPeriodRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetOneDriveUsageStorageWithPeriod
{
    [Proxy(typeof(GetOneDriveUsageStorageWithPeriodRequestBuilder), true)]
    public partial interface IGetOneDriveUsageStorageWithPeriodRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetPrinterArchivedPrintJobsWithPrinterIdWithStartDateTimeWithEndDateTime
{
    [Proxy(typeof(GetPrinterArchivedPrintJobsWithPrinterIdWithStartDateTimeWithEndDateTimeRequestBuilder), true)]
    public partial interface IGetPrinterArchivedPrintJobsWithPrinterIdWithStartDateTimeWithEndDateTimeRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetRelyingPartyDetailedSummaryWithPeriod
{
    [Proxy(typeof(GetRelyingPartyDetailedSummaryWithPeriodRequestBuilder), true)]
    public partial interface IGetRelyingPartyDetailedSummaryWithPeriodRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetSharePointActivityFileCountsWithPeriod
{
    [Proxy(typeof(GetSharePointActivityFileCountsWithPeriodRequestBuilder), true)]
    public partial interface IGetSharePointActivityFileCountsWithPeriodRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetSharePointActivityPagesWithPeriod
{
    [Proxy(typeof(GetSharePointActivityPagesWithPeriodRequestBuilder), true)]
    public partial interface IGetSharePointActivityPagesWithPeriodRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetSharePointActivityUserCountsWithPeriod
{
    [Proxy(typeof(GetSharePointActivityUserCountsWithPeriodRequestBuilder), true)]
    public partial interface IGetSharePointActivityUserCountsWithPeriodRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetSharePointActivityUserDetailWithDate
{
    [Proxy(typeof(GetSharePointActivityUserDetailWithDateRequestBuilder), true)]
    public partial interface IGetSharePointActivityUserDetailWithDateRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetSharePointActivityUserDetailWithPeriod
{
    [Proxy(typeof(GetSharePointActivityUserDetailWithPeriodRequestBuilder), true)]
    public partial interface IGetSharePointActivityUserDetailWithPeriodRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetSharePointSiteUsageDetailWithDate
{
    [Proxy(typeof(GetSharePointSiteUsageDetailWithDateRequestBuilder), true)]
    public partial interface IGetSharePointSiteUsageDetailWithDateRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetSharePointSiteUsageDetailWithPeriod
{
    [Proxy(typeof(GetSharePointSiteUsageDetailWithPeriodRequestBuilder), true)]
    public partial interface IGetSharePointSiteUsageDetailWithPeriodRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetSharePointSiteUsageFileCountsWithPeriod
{
    [Proxy(typeof(GetSharePointSiteUsageFileCountsWithPeriodRequestBuilder), true)]
    public partial interface IGetSharePointSiteUsageFileCountsWithPeriodRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetSharePointSiteUsagePagesWithPeriod
{
    [Proxy(typeof(GetSharePointSiteUsagePagesWithPeriodRequestBuilder), true)]
    public partial interface IGetSharePointSiteUsagePagesWithPeriodRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetSharePointSiteUsageSiteCountsWithPeriod
{
    [Proxy(typeof(GetSharePointSiteUsageSiteCountsWithPeriodRequestBuilder), true)]
    public partial interface IGetSharePointSiteUsageSiteCountsWithPeriodRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetSharePointSiteUsageStorageWithPeriod
{
    [Proxy(typeof(GetSharePointSiteUsageStorageWithPeriodRequestBuilder), true)]
    public partial interface IGetSharePointSiteUsageStorageWithPeriodRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetSkypeForBusinessActivityCountsWithPeriod
{
    [Proxy(typeof(GetSkypeForBusinessActivityCountsWithPeriodRequestBuilder), true)]
    public partial interface IGetSkypeForBusinessActivityCountsWithPeriodRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetSkypeForBusinessActivityUserCountsWithPeriod
{
    [Proxy(typeof(GetSkypeForBusinessActivityUserCountsWithPeriodRequestBuilder), true)]
    public partial interface IGetSkypeForBusinessActivityUserCountsWithPeriodRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetSkypeForBusinessActivityUserDetailWithDate
{
    [Proxy(typeof(GetSkypeForBusinessActivityUserDetailWithDateRequestBuilder), true)]
    public partial interface IGetSkypeForBusinessActivityUserDetailWithDateRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetSkypeForBusinessActivityUserDetailWithPeriod
{
    [Proxy(typeof(GetSkypeForBusinessActivityUserDetailWithPeriodRequestBuilder), true)]
    public partial interface IGetSkypeForBusinessActivityUserDetailWithPeriodRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetSkypeForBusinessDeviceUsageDistributionUserCountsWithPeriod
{
    [Proxy(typeof(GetSkypeForBusinessDeviceUsageDistributionUserCountsWithPeriodRequestBuilder), true)]
    public partial interface IGetSkypeForBusinessDeviceUsageDistributionUserCountsWithPeriodRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetSkypeForBusinessDeviceUsageUserCountsWithPeriod
{
    [Proxy(typeof(GetSkypeForBusinessDeviceUsageUserCountsWithPeriodRequestBuilder), true)]
    public partial interface IGetSkypeForBusinessDeviceUsageUserCountsWithPeriodRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetSkypeForBusinessDeviceUsageUserDetailWithDate
{
    [Proxy(typeof(GetSkypeForBusinessDeviceUsageUserDetailWithDateRequestBuilder), true)]
    public partial interface IGetSkypeForBusinessDeviceUsageUserDetailWithDateRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetSkypeForBusinessDeviceUsageUserDetailWithPeriod
{
    [Proxy(typeof(GetSkypeForBusinessDeviceUsageUserDetailWithPeriodRequestBuilder), true)]
    public partial interface IGetSkypeForBusinessDeviceUsageUserDetailWithPeriodRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetSkypeForBusinessOrganizerActivityCountsWithPeriod
{
    [Proxy(typeof(GetSkypeForBusinessOrganizerActivityCountsWithPeriodRequestBuilder), true)]
    public partial interface IGetSkypeForBusinessOrganizerActivityCountsWithPeriodRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetSkypeForBusinessOrganizerActivityMinuteCountsWithPeriod
{
    [Proxy(typeof(GetSkypeForBusinessOrganizerActivityMinuteCountsWithPeriodRequestBuilder), true)]
    public partial interface IGetSkypeForBusinessOrganizerActivityMinuteCountsWithPeriodRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetSkypeForBusinessOrganizerActivityUserCountsWithPeriod
{
    [Proxy(typeof(GetSkypeForBusinessOrganizerActivityUserCountsWithPeriodRequestBuilder), true)]
    public partial interface IGetSkypeForBusinessOrganizerActivityUserCountsWithPeriodRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetSkypeForBusinessParticipantActivityCountsWithPeriod
{
    [Proxy(typeof(GetSkypeForBusinessParticipantActivityCountsWithPeriodRequestBuilder), true)]
    public partial interface IGetSkypeForBusinessParticipantActivityCountsWithPeriodRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetSkypeForBusinessParticipantActivityMinuteCountsWithPeriod
{
    [Proxy(typeof(GetSkypeForBusinessParticipantActivityMinuteCountsWithPeriodRequestBuilder), true)]
    public partial interface IGetSkypeForBusinessParticipantActivityMinuteCountsWithPeriodRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetSkypeForBusinessParticipantActivityUserCountsWithPeriod
{
    [Proxy(typeof(GetSkypeForBusinessParticipantActivityUserCountsWithPeriodRequestBuilder), true)]
    public partial interface IGetSkypeForBusinessParticipantActivityUserCountsWithPeriodRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetSkypeForBusinessPeerToPeerActivityCountsWithPeriod
{
    [Proxy(typeof(GetSkypeForBusinessPeerToPeerActivityCountsWithPeriodRequestBuilder), true)]
    public partial interface IGetSkypeForBusinessPeerToPeerActivityCountsWithPeriodRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetSkypeForBusinessPeerToPeerActivityMinuteCountsWithPeriod
{
    [Proxy(typeof(GetSkypeForBusinessPeerToPeerActivityMinuteCountsWithPeriodRequestBuilder), true)]
    public partial interface IGetSkypeForBusinessPeerToPeerActivityMinuteCountsWithPeriodRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetSkypeForBusinessPeerToPeerActivityUserCountsWithPeriod
{
    [Proxy(typeof(GetSkypeForBusinessPeerToPeerActivityUserCountsWithPeriodRequestBuilder), true)]
    public partial interface IGetSkypeForBusinessPeerToPeerActivityUserCountsWithPeriodRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetTeamsDeviceUsageDistributionUserCountsWithPeriod
{
    [Proxy(typeof(GetTeamsDeviceUsageDistributionUserCountsWithPeriodRequestBuilder), true)]
    public partial interface IGetTeamsDeviceUsageDistributionUserCountsWithPeriodRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetTeamsDeviceUsageUserCountsWithPeriod
{
    [Proxy(typeof(GetTeamsDeviceUsageUserCountsWithPeriodRequestBuilder), true)]
    public partial interface IGetTeamsDeviceUsageUserCountsWithPeriodRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetTeamsDeviceUsageUserDetailWithDate
{
    [Proxy(typeof(GetTeamsDeviceUsageUserDetailWithDateRequestBuilder), true)]
    public partial interface IGetTeamsDeviceUsageUserDetailWithDateRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetTeamsDeviceUsageUserDetailWithPeriod
{
    [Proxy(typeof(GetTeamsDeviceUsageUserDetailWithPeriodRequestBuilder), true)]
    public partial interface IGetTeamsDeviceUsageUserDetailWithPeriodRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetTeamsTeamActivityCountsWithPeriod
{
    [Proxy(typeof(GetTeamsTeamActivityCountsWithPeriodRequestBuilder), true)]
    public partial interface IGetTeamsTeamActivityCountsWithPeriodRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetTeamsTeamActivityDetailWithDate
{
    [Proxy(typeof(GetTeamsTeamActivityDetailWithDateRequestBuilder), true)]
    public partial interface IGetTeamsTeamActivityDetailWithDateRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetTeamsTeamActivityDetailWithPeriod
{
    [Proxy(typeof(GetTeamsTeamActivityDetailWithPeriodRequestBuilder), true)]
    public partial interface IGetTeamsTeamActivityDetailWithPeriodRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetTeamsTeamActivityDistributionCountsWithPeriod
{
    [Proxy(typeof(GetTeamsTeamActivityDistributionCountsWithPeriodRequestBuilder), true)]
    public partial interface IGetTeamsTeamActivityDistributionCountsWithPeriodRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetTeamsTeamCountsWithPeriod
{
    [Proxy(typeof(GetTeamsTeamCountsWithPeriodRequestBuilder), true)]
    public partial interface IGetTeamsTeamCountsWithPeriodRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetTeamsUserActivityCountsWithPeriod
{
    [Proxy(typeof(GetTeamsUserActivityCountsWithPeriodRequestBuilder), true)]
    public partial interface IGetTeamsUserActivityCountsWithPeriodRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetTeamsUserActivityUserCountsWithPeriod
{
    [Proxy(typeof(GetTeamsUserActivityUserCountsWithPeriodRequestBuilder), true)]
    public partial interface IGetTeamsUserActivityUserCountsWithPeriodRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetTeamsUserActivityUserDetailWithDate
{
    [Proxy(typeof(GetTeamsUserActivityUserDetailWithDateRequestBuilder), true)]
    public partial interface IGetTeamsUserActivityUserDetailWithDateRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetTeamsUserActivityUserDetailWithPeriod
{
    [Proxy(typeof(GetTeamsUserActivityUserDetailWithPeriodRequestBuilder), true)]
    public partial interface IGetTeamsUserActivityUserDetailWithPeriodRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetUserArchivedPrintJobsWithUserIdWithStartDateTimeWithEndDateTime
{
    [Proxy(typeof(GetUserArchivedPrintJobsWithUserIdWithStartDateTimeWithEndDateTimeRequestBuilder), true)]
    public partial interface IGetUserArchivedPrintJobsWithUserIdWithStartDateTimeWithEndDateTimeRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetYammerActivityCountsWithPeriod
{
    [Proxy(typeof(GetYammerActivityCountsWithPeriodRequestBuilder), true)]
    public partial interface IGetYammerActivityCountsWithPeriodRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetYammerActivityUserCountsWithPeriod
{
    [Proxy(typeof(GetYammerActivityUserCountsWithPeriodRequestBuilder), true)]
    public partial interface IGetYammerActivityUserCountsWithPeriodRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetYammerActivityUserDetailWithDate
{
    [Proxy(typeof(GetYammerActivityUserDetailWithDateRequestBuilder), true)]
    public partial interface IGetYammerActivityUserDetailWithDateRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetYammerActivityUserDetailWithPeriod
{
    [Proxy(typeof(GetYammerActivityUserDetailWithPeriodRequestBuilder), true)]
    public partial interface IGetYammerActivityUserDetailWithPeriodRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetYammerDeviceUsageDistributionUserCountsWithPeriod
{
    [Proxy(typeof(GetYammerDeviceUsageDistributionUserCountsWithPeriodRequestBuilder), true)]
    public partial interface IGetYammerDeviceUsageDistributionUserCountsWithPeriodRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetYammerDeviceUsageUserCountsWithPeriod
{
    [Proxy(typeof(GetYammerDeviceUsageUserCountsWithPeriodRequestBuilder), true)]
    public partial interface IGetYammerDeviceUsageUserCountsWithPeriodRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetYammerDeviceUsageUserDetailWithDate
{
    [Proxy(typeof(GetYammerDeviceUsageUserDetailWithDateRequestBuilder), true)]
    public partial interface IGetYammerDeviceUsageUserDetailWithDateRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetYammerDeviceUsageUserDetailWithPeriod
{
    [Proxy(typeof(GetYammerDeviceUsageUserDetailWithPeriodRequestBuilder), true)]
    public partial interface IGetYammerDeviceUsageUserDetailWithPeriodRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetYammerGroupsActivityCountsWithPeriod
{
    [Proxy(typeof(GetYammerGroupsActivityCountsWithPeriodRequestBuilder), true)]
    public partial interface IGetYammerGroupsActivityCountsWithPeriodRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetYammerGroupsActivityDetailWithDate
{
    [Proxy(typeof(GetYammerGroupsActivityDetailWithDateRequestBuilder), true)]
    public partial interface IGetYammerGroupsActivityDetailWithDateRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetYammerGroupsActivityDetailWithPeriod
{
    [Proxy(typeof(GetYammerGroupsActivityDetailWithPeriodRequestBuilder), true)]
    public partial interface IGetYammerGroupsActivityDetailWithPeriodRequestBuilder;
}

namespace Microsoft.Graph.Reports.GetYammerGroupsActivityGroupCountsWithPeriod
{
    [Proxy(typeof(GetYammerGroupsActivityGroupCountsWithPeriodRequestBuilder), true)]
    public partial interface IGetYammerGroupsActivityGroupCountsWithPeriodRequestBuilder;
}

namespace Microsoft.Graph.Reports.ManagedDeviceEnrollmentFailureDetails
{
    [Proxy(typeof(ManagedDeviceEnrollmentFailureDetailsRequestBuilder), true)]
    public partial interface IManagedDeviceEnrollmentFailureDetailsRequestBuilder;
}

namespace Microsoft.Graph.Reports.ManagedDeviceEnrollmentFailureDetailsWithSkipWithTopWithFilterWithSkipToken
{
    [Proxy(typeof(ManagedDeviceEnrollmentFailureDetailsWithSkipWithTopWithFilterWithSkipTokenRequestBuilder), true)]
    public partial interface IManagedDeviceEnrollmentFailureDetailsWithSkipWithTopWithFilterWithSkipTokenRequestBuilder;
}

namespace Microsoft.Graph.Reports.ManagedDeviceEnrollmentTopFailures
{
    [Proxy(typeof(ManagedDeviceEnrollmentTopFailuresRequestBuilder), true)]
    public partial interface IManagedDeviceEnrollmentTopFailuresRequestBuilder;
}

namespace Microsoft.Graph.Reports.ManagedDeviceEnrollmentTopFailuresWithPeriod
{
    [Proxy(typeof(ManagedDeviceEnrollmentTopFailuresWithPeriodRequestBuilder), true)]
    public partial interface IManagedDeviceEnrollmentTopFailuresWithPeriodRequestBuilder;
}

namespace Microsoft.Graph.Reports.MonthlyPrintUsageByPrinter
{
    [Proxy(typeof(MonthlyPrintUsageByPrinterRequestBuilder), true)]
    public partial interface IMonthlyPrintUsageByPrinterRequestBuilder;
}

namespace Microsoft.Graph.Reports.MonthlyPrintUsageByPrinter.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Reports.MonthlyPrintUsageByPrinter.Item
{
    [Proxy(typeof(PrintUsageByPrinterItemRequestBuilder), true)]
    public partial interface IPrintUsageByPrinterItemRequestBuilder;
}

namespace Microsoft.Graph.Reports.MonthlyPrintUsageByUser
{
    [Proxy(typeof(MonthlyPrintUsageByUserRequestBuilder), true)]
    public partial interface IMonthlyPrintUsageByUserRequestBuilder;
}

namespace Microsoft.Graph.Reports.MonthlyPrintUsageByUser.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Reports.MonthlyPrintUsageByUser.Item
{
    [Proxy(typeof(PrintUsageByUserItemRequestBuilder), true)]
    public partial interface IPrintUsageByUserItemRequestBuilder;
}

namespace Microsoft.Graph.Reports.Partners
{
    [Proxy(typeof(PartnersRequestBuilder), true)]
    public partial interface IPartnersRequestBuilder;
}

namespace Microsoft.Graph.Reports.Partners.Billing
{
    [Proxy(typeof(BillingRequestBuilder), true)]
    public partial interface IBillingRequestBuilder;
}

namespace Microsoft.Graph.Reports.Partners.Billing.Manifests
{
    [Proxy(typeof(ManifestsRequestBuilder), true)]
    public partial interface IManifestsRequestBuilder;
}

namespace Microsoft.Graph.Reports.Partners.Billing.Manifests.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Reports.Partners.Billing.Manifests.Item
{
    [Proxy(typeof(ManifestItemRequestBuilder), true)]
    public partial interface IManifestItemRequestBuilder;
}

namespace Microsoft.Graph.Reports.Partners.Billing.Operations
{
    [Proxy(typeof(OperationsRequestBuilder), true)]
    public partial interface IOperationsRequestBuilder;
}

namespace Microsoft.Graph.Reports.Partners.Billing.Operations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Reports.Partners.Billing.Operations.Item
{
    [Proxy(typeof(OperationItemRequestBuilder), true)]
    public partial interface IOperationItemRequestBuilder;
}

namespace Microsoft.Graph.Reports.Partners.Billing.Reconciliation
{
    [Proxy(typeof(ReconciliationRequestBuilder), true)]
    public partial interface IReconciliationRequestBuilder;
}

namespace Microsoft.Graph.Reports.Partners.Billing.Reconciliation.Billed
{
    [Proxy(typeof(BilledRequestBuilder), true)]
    public partial interface IBilledRequestBuilder;
}

namespace Microsoft.Graph.Reports.Partners.Billing.Reconciliation.Billed.MicrosoftGraphPartnersBillingExport
{
    [Proxy(typeof(MicrosoftGraphPartnersBillingExportRequestBuilder), true)]
    public partial interface IMicrosoftGraphPartnersBillingExportRequestBuilder;
}

namespace Microsoft.Graph.Reports.Partners.Billing.Reconciliation.Unbilled
{
    [Proxy(typeof(UnbilledRequestBuilder), true)]
    public partial interface IUnbilledRequestBuilder;
}

namespace Microsoft.Graph.Reports.Partners.Billing.Reconciliation.Unbilled.MicrosoftGraphPartnersBillingExport
{
    [Proxy(typeof(MicrosoftGraphPartnersBillingExportRequestBuilder), true)]
    public partial interface IMicrosoftGraphPartnersBillingExportRequestBuilder;
}

namespace Microsoft.Graph.Reports.Partners.Billing.Usage
{
    [Proxy(typeof(UsageRequestBuilder), true)]
    public partial interface IUsageRequestBuilder;
}

namespace Microsoft.Graph.Reports.Partners.Billing.Usage.Billed
{
    [Proxy(typeof(BilledRequestBuilder), true)]
    public partial interface IBilledRequestBuilder;
}

namespace Microsoft.Graph.Reports.Partners.Billing.Usage.Billed.MicrosoftGraphPartnersBillingExport
{
    [Proxy(typeof(MicrosoftGraphPartnersBillingExportRequestBuilder), true)]
    public partial interface IMicrosoftGraphPartnersBillingExportRequestBuilder;
}

namespace Microsoft.Graph.Reports.Partners.Billing.Usage.Unbilled
{
    [Proxy(typeof(UnbilledRequestBuilder), true)]
    public partial interface IUnbilledRequestBuilder;
}

namespace Microsoft.Graph.Reports.Partners.Billing.Usage.Unbilled.MicrosoftGraphPartnersBillingExport
{
    [Proxy(typeof(MicrosoftGraphPartnersBillingExportRequestBuilder), true)]
    public partial interface IMicrosoftGraphPartnersBillingExportRequestBuilder;
}

namespace Microsoft.Graph.Reports.Security
{
    [Proxy(typeof(SecurityRequestBuilder), true)]
    public partial interface ISecurityRequestBuilder;
}

namespace Microsoft.Graph.Reports.Security.GetAttackSimulationRepeatOffenders
{
    [Proxy(typeof(GetAttackSimulationRepeatOffendersRequestBuilder), true)]
    public partial interface IGetAttackSimulationRepeatOffendersRequestBuilder;
}

namespace Microsoft.Graph.Reports.Security.GetAttackSimulationSimulationUserCoverage
{
    [Proxy(typeof(GetAttackSimulationSimulationUserCoverageRequestBuilder), true)]
    public partial interface IGetAttackSimulationSimulationUserCoverageRequestBuilder;
}

namespace Microsoft.Graph.Reports.Security.GetAttackSimulationTrainingUserCoverage
{
    [Proxy(typeof(GetAttackSimulationTrainingUserCoverageRequestBuilder), true)]
    public partial interface IGetAttackSimulationTrainingUserCoverageRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement
{
    [Proxy(typeof(RoleManagementRequestBuilder), true)]
    public partial interface IRoleManagementRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.DirectoryNamespace
{
    [Proxy(typeof(DirectoryRequestBuilder), true)]
    public partial interface IDirectoryRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.DirectoryNamespace.ResourceNamespaces
{
    [Proxy(typeof(ResourceNamespacesRequestBuilder), true)]
    public partial interface IResourceNamespacesRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.DirectoryNamespace.ResourceNamespaces.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.DirectoryNamespace.ResourceNamespaces.Item
{
    [Proxy(typeof(UnifiedRbacResourceNamespaceItemRequestBuilder), true)]
    public partial interface IUnifiedRbacResourceNamespaceItemRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.DirectoryNamespace.ResourceNamespaces.Item.ResourceActions
{
    [Proxy(typeof(ResourceActionsRequestBuilder), true)]
    public partial interface IResourceActionsRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.DirectoryNamespace.ResourceNamespaces.Item.ResourceActions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.DirectoryNamespace.ResourceNamespaces.Item.ResourceActions.Item
{
    [Proxy(typeof(UnifiedRbacResourceActionItemRequestBuilder), true)]
    public partial interface IUnifiedRbacResourceActionItemRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.DirectoryNamespace.RoleAssignments
{
    [Proxy(typeof(RoleAssignmentsRequestBuilder), true)]
    public partial interface IRoleAssignmentsRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.DirectoryNamespace.RoleAssignments.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.DirectoryNamespace.RoleAssignments.Item
{
    [Proxy(typeof(UnifiedRoleAssignmentItemRequestBuilder), true)]
    public partial interface IUnifiedRoleAssignmentItemRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.DirectoryNamespace.RoleAssignments.Item.AppScope
{
    [Proxy(typeof(AppScopeRequestBuilder), true)]
    public partial interface IAppScopeRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.DirectoryNamespace.RoleAssignments.Item.DirectoryScope
{
    [Proxy(typeof(DirectoryScopeRequestBuilder), true)]
    public partial interface IDirectoryScopeRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.DirectoryNamespace.RoleAssignments.Item.Principal
{
    [Proxy(typeof(PrincipalRequestBuilder), true)]
    public partial interface IPrincipalRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.DirectoryNamespace.RoleAssignments.Item.RoleDefinition
{
    [Proxy(typeof(RoleDefinitionRequestBuilder), true)]
    public partial interface IRoleDefinitionRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.DirectoryNamespace.RoleAssignmentScheduleInstances
{
    [Proxy(typeof(RoleAssignmentScheduleInstancesRequestBuilder), true)]
    public partial interface IRoleAssignmentScheduleInstancesRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.DirectoryNamespace.RoleAssignmentScheduleInstances.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.DirectoryNamespace.RoleAssignmentScheduleInstances.FilterByCurrentUserWithOn
{
    [Proxy(typeof(FilterByCurrentUserWithOnRequestBuilder), true)]
    public partial interface IFilterByCurrentUserWithOnRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.DirectoryNamespace.RoleAssignmentScheduleInstances.Item
{
    [Proxy(typeof(UnifiedRoleAssignmentScheduleInstanceItemRequestBuilder), true)]
    public partial interface IUnifiedRoleAssignmentScheduleInstanceItemRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.DirectoryNamespace.RoleAssignmentScheduleInstances.Item.ActivatedUsing
{
    [Proxy(typeof(ActivatedUsingRequestBuilder), true)]
    public partial interface IActivatedUsingRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.DirectoryNamespace.RoleAssignmentScheduleInstances.Item.AppScope
{
    [Proxy(typeof(AppScopeRequestBuilder), true)]
    public partial interface IAppScopeRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.DirectoryNamespace.RoleAssignmentScheduleInstances.Item.DirectoryScope
{
    [Proxy(typeof(DirectoryScopeRequestBuilder), true)]
    public partial interface IDirectoryScopeRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.DirectoryNamespace.RoleAssignmentScheduleInstances.Item.Principal
{
    [Proxy(typeof(PrincipalRequestBuilder), true)]
    public partial interface IPrincipalRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.DirectoryNamespace.RoleAssignmentScheduleInstances.Item.RoleDefinition
{
    [Proxy(typeof(RoleDefinitionRequestBuilder), true)]
    public partial interface IRoleDefinitionRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.DirectoryNamespace.RoleAssignmentScheduleRequests
{
    [Proxy(typeof(RoleAssignmentScheduleRequestsRequestBuilder), true)]
    public partial interface IRoleAssignmentScheduleRequestsRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.DirectoryNamespace.RoleAssignmentScheduleRequests.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.DirectoryNamespace.RoleAssignmentScheduleRequests.FilterByCurrentUserWithOn
{
    [Proxy(typeof(FilterByCurrentUserWithOnRequestBuilder), true)]
    public partial interface IFilterByCurrentUserWithOnRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.DirectoryNamespace.RoleAssignmentScheduleRequests.Item
{
    [Proxy(typeof(UnifiedRoleAssignmentScheduleRequestItemRequestBuilder), true)]
    public partial interface IUnifiedRoleAssignmentScheduleRequestItemRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.DirectoryNamespace.RoleAssignmentScheduleRequests.Item.ActivatedUsing
{
    [Proxy(typeof(ActivatedUsingRequestBuilder), true)]
    public partial interface IActivatedUsingRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.DirectoryNamespace.RoleAssignmentScheduleRequests.Item.AppScope
{
    [Proxy(typeof(AppScopeRequestBuilder), true)]
    public partial interface IAppScopeRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.DirectoryNamespace.RoleAssignmentScheduleRequests.Item.Cancel
{
    [Proxy(typeof(CancelRequestBuilder), true)]
    public partial interface ICancelRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.DirectoryNamespace.RoleAssignmentScheduleRequests.Item.DirectoryScope
{
    [Proxy(typeof(DirectoryScopeRequestBuilder), true)]
    public partial interface IDirectoryScopeRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.DirectoryNamespace.RoleAssignmentScheduleRequests.Item.Principal
{
    [Proxy(typeof(PrincipalRequestBuilder), true)]
    public partial interface IPrincipalRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.DirectoryNamespace.RoleAssignmentScheduleRequests.Item.RoleDefinition
{
    [Proxy(typeof(RoleDefinitionRequestBuilder), true)]
    public partial interface IRoleDefinitionRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.DirectoryNamespace.RoleAssignmentScheduleRequests.Item.TargetSchedule
{
    [Proxy(typeof(TargetScheduleRequestBuilder), true)]
    public partial interface ITargetScheduleRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.DirectoryNamespace.RoleAssignmentSchedules
{
    [Proxy(typeof(RoleAssignmentSchedulesRequestBuilder), true)]
    public partial interface IRoleAssignmentSchedulesRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.DirectoryNamespace.RoleAssignmentSchedules.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.DirectoryNamespace.RoleAssignmentSchedules.FilterByCurrentUserWithOn
{
    [Proxy(typeof(FilterByCurrentUserWithOnRequestBuilder), true)]
    public partial interface IFilterByCurrentUserWithOnRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.DirectoryNamespace.RoleAssignmentSchedules.Item
{
    [Proxy(typeof(UnifiedRoleAssignmentScheduleItemRequestBuilder), true)]
    public partial interface IUnifiedRoleAssignmentScheduleItemRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.DirectoryNamespace.RoleAssignmentSchedules.Item.ActivatedUsing
{
    [Proxy(typeof(ActivatedUsingRequestBuilder), true)]
    public partial interface IActivatedUsingRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.DirectoryNamespace.RoleAssignmentSchedules.Item.AppScope
{
    [Proxy(typeof(AppScopeRequestBuilder), true)]
    public partial interface IAppScopeRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.DirectoryNamespace.RoleAssignmentSchedules.Item.DirectoryScope
{
    [Proxy(typeof(DirectoryScopeRequestBuilder), true)]
    public partial interface IDirectoryScopeRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.DirectoryNamespace.RoleAssignmentSchedules.Item.Principal
{
    [Proxy(typeof(PrincipalRequestBuilder), true)]
    public partial interface IPrincipalRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.DirectoryNamespace.RoleAssignmentSchedules.Item.RoleDefinition
{
    [Proxy(typeof(RoleDefinitionRequestBuilder), true)]
    public partial interface IRoleDefinitionRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.DirectoryNamespace.RoleDefinitions
{
    [Proxy(typeof(RoleDefinitionsRequestBuilder), true)]
    public partial interface IRoleDefinitionsRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.DirectoryNamespace.RoleDefinitions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.DirectoryNamespace.RoleDefinitions.Item
{
    [Proxy(typeof(UnifiedRoleDefinitionItemRequestBuilder), true)]
    public partial interface IUnifiedRoleDefinitionItemRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.DirectoryNamespace.RoleDefinitions.Item.InheritsPermissionsFrom
{
    [Proxy(typeof(InheritsPermissionsFromRequestBuilder), true)]
    public partial interface IInheritsPermissionsFromRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.DirectoryNamespace.RoleDefinitions.Item.InheritsPermissionsFrom.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.DirectoryNamespace.RoleDefinitions.Item.InheritsPermissionsFrom.Item
{
    [Proxy(typeof(UnifiedRoleDefinitionItemRequestBuilder), true)]
    public partial interface IUnifiedRoleDefinitionItemRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.DirectoryNamespace.RoleEligibilityScheduleInstances
{
    [Proxy(typeof(RoleEligibilityScheduleInstancesRequestBuilder), true)]
    public partial interface IRoleEligibilityScheduleInstancesRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.DirectoryNamespace.RoleEligibilityScheduleInstances.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.DirectoryNamespace.RoleEligibilityScheduleInstances.FilterByCurrentUserWithOn
{
    [Proxy(typeof(FilterByCurrentUserWithOnRequestBuilder), true)]
    public partial interface IFilterByCurrentUserWithOnRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.DirectoryNamespace.RoleEligibilityScheduleInstances.Item
{
    [Proxy(typeof(UnifiedRoleEligibilityScheduleInstanceItemRequestBuilder), true)]
    public partial interface IUnifiedRoleEligibilityScheduleInstanceItemRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.DirectoryNamespace.RoleEligibilityScheduleInstances.Item.AppScope
{
    [Proxy(typeof(AppScopeRequestBuilder), true)]
    public partial interface IAppScopeRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.DirectoryNamespace.RoleEligibilityScheduleInstances.Item.DirectoryScope
{
    [Proxy(typeof(DirectoryScopeRequestBuilder), true)]
    public partial interface IDirectoryScopeRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.DirectoryNamespace.RoleEligibilityScheduleInstances.Item.Principal
{
    [Proxy(typeof(PrincipalRequestBuilder), true)]
    public partial interface IPrincipalRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.DirectoryNamespace.RoleEligibilityScheduleInstances.Item.RoleDefinition
{
    [Proxy(typeof(RoleDefinitionRequestBuilder), true)]
    public partial interface IRoleDefinitionRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.DirectoryNamespace.RoleEligibilityScheduleRequests
{
    [Proxy(typeof(RoleEligibilityScheduleRequestsRequestBuilder), true)]
    public partial interface IRoleEligibilityScheduleRequestsRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.DirectoryNamespace.RoleEligibilityScheduleRequests.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.DirectoryNamespace.RoleEligibilityScheduleRequests.FilterByCurrentUserWithOn
{
    [Proxy(typeof(FilterByCurrentUserWithOnRequestBuilder), true)]
    public partial interface IFilterByCurrentUserWithOnRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.DirectoryNamespace.RoleEligibilityScheduleRequests.Item
{
    [Proxy(typeof(UnifiedRoleEligibilityScheduleRequestItemRequestBuilder), true)]
    public partial interface IUnifiedRoleEligibilityScheduleRequestItemRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.DirectoryNamespace.RoleEligibilityScheduleRequests.Item.AppScope
{
    [Proxy(typeof(AppScopeRequestBuilder), true)]
    public partial interface IAppScopeRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.DirectoryNamespace.RoleEligibilityScheduleRequests.Item.Cancel
{
    [Proxy(typeof(CancelRequestBuilder), true)]
    public partial interface ICancelRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.DirectoryNamespace.RoleEligibilityScheduleRequests.Item.DirectoryScope
{
    [Proxy(typeof(DirectoryScopeRequestBuilder), true)]
    public partial interface IDirectoryScopeRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.DirectoryNamespace.RoleEligibilityScheduleRequests.Item.Principal
{
    [Proxy(typeof(PrincipalRequestBuilder), true)]
    public partial interface IPrincipalRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.DirectoryNamespace.RoleEligibilityScheduleRequests.Item.RoleDefinition
{
    [Proxy(typeof(RoleDefinitionRequestBuilder), true)]
    public partial interface IRoleDefinitionRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.DirectoryNamespace.RoleEligibilityScheduleRequests.Item.TargetSchedule
{
    [Proxy(typeof(TargetScheduleRequestBuilder), true)]
    public partial interface ITargetScheduleRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.DirectoryNamespace.RoleEligibilitySchedules
{
    [Proxy(typeof(RoleEligibilitySchedulesRequestBuilder), true)]
    public partial interface IRoleEligibilitySchedulesRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.DirectoryNamespace.RoleEligibilitySchedules.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.DirectoryNamespace.RoleEligibilitySchedules.FilterByCurrentUserWithOn
{
    [Proxy(typeof(FilterByCurrentUserWithOnRequestBuilder), true)]
    public partial interface IFilterByCurrentUserWithOnRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.DirectoryNamespace.RoleEligibilitySchedules.Item
{
    [Proxy(typeof(UnifiedRoleEligibilityScheduleItemRequestBuilder), true)]
    public partial interface IUnifiedRoleEligibilityScheduleItemRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.DirectoryNamespace.RoleEligibilitySchedules.Item.AppScope
{
    [Proxy(typeof(AppScopeRequestBuilder), true)]
    public partial interface IAppScopeRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.DirectoryNamespace.RoleEligibilitySchedules.Item.DirectoryScope
{
    [Proxy(typeof(DirectoryScopeRequestBuilder), true)]
    public partial interface IDirectoryScopeRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.DirectoryNamespace.RoleEligibilitySchedules.Item.Principal
{
    [Proxy(typeof(PrincipalRequestBuilder), true)]
    public partial interface IPrincipalRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.DirectoryNamespace.RoleEligibilitySchedules.Item.RoleDefinition
{
    [Proxy(typeof(RoleDefinitionRequestBuilder), true)]
    public partial interface IRoleDefinitionRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.EntitlementManagement
{
    [Proxy(typeof(EntitlementManagementRequestBuilder), true)]
    public partial interface IEntitlementManagementRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.EntitlementManagement.ResourceNamespaces
{
    [Proxy(typeof(ResourceNamespacesRequestBuilder), true)]
    public partial interface IResourceNamespacesRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.EntitlementManagement.ResourceNamespaces.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.EntitlementManagement.ResourceNamespaces.Item
{
    [Proxy(typeof(UnifiedRbacResourceNamespaceItemRequestBuilder), true)]
    public partial interface IUnifiedRbacResourceNamespaceItemRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.EntitlementManagement.ResourceNamespaces.Item.ResourceActions
{
    [Proxy(typeof(ResourceActionsRequestBuilder), true)]
    public partial interface IResourceActionsRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.EntitlementManagement.ResourceNamespaces.Item.ResourceActions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.EntitlementManagement.ResourceNamespaces.Item.ResourceActions.Item
{
    [Proxy(typeof(UnifiedRbacResourceActionItemRequestBuilder), true)]
    public partial interface IUnifiedRbacResourceActionItemRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.EntitlementManagement.RoleAssignments
{
    [Proxy(typeof(RoleAssignmentsRequestBuilder), true)]
    public partial interface IRoleAssignmentsRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.EntitlementManagement.RoleAssignments.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.EntitlementManagement.RoleAssignments.Item
{
    [Proxy(typeof(UnifiedRoleAssignmentItemRequestBuilder), true)]
    public partial interface IUnifiedRoleAssignmentItemRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.EntitlementManagement.RoleAssignments.Item.AppScope
{
    [Proxy(typeof(AppScopeRequestBuilder), true)]
    public partial interface IAppScopeRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.EntitlementManagement.RoleAssignments.Item.DirectoryScope
{
    [Proxy(typeof(DirectoryScopeRequestBuilder), true)]
    public partial interface IDirectoryScopeRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.EntitlementManagement.RoleAssignments.Item.Principal
{
    [Proxy(typeof(PrincipalRequestBuilder), true)]
    public partial interface IPrincipalRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.EntitlementManagement.RoleAssignments.Item.RoleDefinition
{
    [Proxy(typeof(RoleDefinitionRequestBuilder), true)]
    public partial interface IRoleDefinitionRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.EntitlementManagement.RoleAssignmentScheduleInstances
{
    [Proxy(typeof(RoleAssignmentScheduleInstancesRequestBuilder), true)]
    public partial interface IRoleAssignmentScheduleInstancesRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.EntitlementManagement.RoleAssignmentScheduleInstances.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.EntitlementManagement.RoleAssignmentScheduleInstances.FilterByCurrentUserWithOn
{
    [Proxy(typeof(FilterByCurrentUserWithOnRequestBuilder), true)]
    public partial interface IFilterByCurrentUserWithOnRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.EntitlementManagement.RoleAssignmentScheduleInstances.Item
{
    [Proxy(typeof(UnifiedRoleAssignmentScheduleInstanceItemRequestBuilder), true)]
    public partial interface IUnifiedRoleAssignmentScheduleInstanceItemRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.EntitlementManagement.RoleAssignmentScheduleInstances.Item.ActivatedUsing
{
    [Proxy(typeof(ActivatedUsingRequestBuilder), true)]
    public partial interface IActivatedUsingRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.EntitlementManagement.RoleAssignmentScheduleInstances.Item.AppScope
{
    [Proxy(typeof(AppScopeRequestBuilder), true)]
    public partial interface IAppScopeRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.EntitlementManagement.RoleAssignmentScheduleInstances.Item.DirectoryScope
{
    [Proxy(typeof(DirectoryScopeRequestBuilder), true)]
    public partial interface IDirectoryScopeRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.EntitlementManagement.RoleAssignmentScheduleInstances.Item.Principal
{
    [Proxy(typeof(PrincipalRequestBuilder), true)]
    public partial interface IPrincipalRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.EntitlementManagement.RoleAssignmentScheduleInstances.Item.RoleDefinition
{
    [Proxy(typeof(RoleDefinitionRequestBuilder), true)]
    public partial interface IRoleDefinitionRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.EntitlementManagement.RoleAssignmentScheduleRequests
{
    [Proxy(typeof(RoleAssignmentScheduleRequestsRequestBuilder), true)]
    public partial interface IRoleAssignmentScheduleRequestsRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.EntitlementManagement.RoleAssignmentScheduleRequests.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.EntitlementManagement.RoleAssignmentScheduleRequests.FilterByCurrentUserWithOn
{
    [Proxy(typeof(FilterByCurrentUserWithOnRequestBuilder), true)]
    public partial interface IFilterByCurrentUserWithOnRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.EntitlementManagement.RoleAssignmentScheduleRequests.Item
{
    [Proxy(typeof(UnifiedRoleAssignmentScheduleRequestItemRequestBuilder), true)]
    public partial interface IUnifiedRoleAssignmentScheduleRequestItemRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.EntitlementManagement.RoleAssignmentScheduleRequests.Item.ActivatedUsing
{
    [Proxy(typeof(ActivatedUsingRequestBuilder), true)]
    public partial interface IActivatedUsingRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.EntitlementManagement.RoleAssignmentScheduleRequests.Item.AppScope
{
    [Proxy(typeof(AppScopeRequestBuilder), true)]
    public partial interface IAppScopeRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.EntitlementManagement.RoleAssignmentScheduleRequests.Item.Cancel
{
    [Proxy(typeof(CancelRequestBuilder), true)]
    public partial interface ICancelRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.EntitlementManagement.RoleAssignmentScheduleRequests.Item.DirectoryScope
{
    [Proxy(typeof(DirectoryScopeRequestBuilder), true)]
    public partial interface IDirectoryScopeRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.EntitlementManagement.RoleAssignmentScheduleRequests.Item.Principal
{
    [Proxy(typeof(PrincipalRequestBuilder), true)]
    public partial interface IPrincipalRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.EntitlementManagement.RoleAssignmentScheduleRequests.Item.RoleDefinition
{
    [Proxy(typeof(RoleDefinitionRequestBuilder), true)]
    public partial interface IRoleDefinitionRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.EntitlementManagement.RoleAssignmentScheduleRequests.Item.TargetSchedule
{
    [Proxy(typeof(TargetScheduleRequestBuilder), true)]
    public partial interface ITargetScheduleRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.EntitlementManagement.RoleAssignmentSchedules
{
    [Proxy(typeof(RoleAssignmentSchedulesRequestBuilder), true)]
    public partial interface IRoleAssignmentSchedulesRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.EntitlementManagement.RoleAssignmentSchedules.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.EntitlementManagement.RoleAssignmentSchedules.FilterByCurrentUserWithOn
{
    [Proxy(typeof(FilterByCurrentUserWithOnRequestBuilder), true)]
    public partial interface IFilterByCurrentUserWithOnRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.EntitlementManagement.RoleAssignmentSchedules.Item
{
    [Proxy(typeof(UnifiedRoleAssignmentScheduleItemRequestBuilder), true)]
    public partial interface IUnifiedRoleAssignmentScheduleItemRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.EntitlementManagement.RoleAssignmentSchedules.Item.ActivatedUsing
{
    [Proxy(typeof(ActivatedUsingRequestBuilder), true)]
    public partial interface IActivatedUsingRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.EntitlementManagement.RoleAssignmentSchedules.Item.AppScope
{
    [Proxy(typeof(AppScopeRequestBuilder), true)]
    public partial interface IAppScopeRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.EntitlementManagement.RoleAssignmentSchedules.Item.DirectoryScope
{
    [Proxy(typeof(DirectoryScopeRequestBuilder), true)]
    public partial interface IDirectoryScopeRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.EntitlementManagement.RoleAssignmentSchedules.Item.Principal
{
    [Proxy(typeof(PrincipalRequestBuilder), true)]
    public partial interface IPrincipalRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.EntitlementManagement.RoleAssignmentSchedules.Item.RoleDefinition
{
    [Proxy(typeof(RoleDefinitionRequestBuilder), true)]
    public partial interface IRoleDefinitionRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.EntitlementManagement.RoleDefinitions
{
    [Proxy(typeof(RoleDefinitionsRequestBuilder), true)]
    public partial interface IRoleDefinitionsRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.EntitlementManagement.RoleDefinitions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.EntitlementManagement.RoleDefinitions.Item
{
    [Proxy(typeof(UnifiedRoleDefinitionItemRequestBuilder), true)]
    public partial interface IUnifiedRoleDefinitionItemRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.EntitlementManagement.RoleDefinitions.Item.InheritsPermissionsFrom
{
    [Proxy(typeof(InheritsPermissionsFromRequestBuilder), true)]
    public partial interface IInheritsPermissionsFromRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.EntitlementManagement.RoleDefinitions.Item.InheritsPermissionsFrom.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.EntitlementManagement.RoleDefinitions.Item.InheritsPermissionsFrom.Item
{
    [Proxy(typeof(UnifiedRoleDefinitionItemRequestBuilder), true)]
    public partial interface IUnifiedRoleDefinitionItemRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.EntitlementManagement.RoleEligibilityScheduleInstances
{
    [Proxy(typeof(RoleEligibilityScheduleInstancesRequestBuilder), true)]
    public partial interface IRoleEligibilityScheduleInstancesRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.EntitlementManagement.RoleEligibilityScheduleInstances.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.EntitlementManagement.RoleEligibilityScheduleInstances.FilterByCurrentUserWithOn
{
    [Proxy(typeof(FilterByCurrentUserWithOnRequestBuilder), true)]
    public partial interface IFilterByCurrentUserWithOnRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.EntitlementManagement.RoleEligibilityScheduleInstances.Item
{
    [Proxy(typeof(UnifiedRoleEligibilityScheduleInstanceItemRequestBuilder), true)]
    public partial interface IUnifiedRoleEligibilityScheduleInstanceItemRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.EntitlementManagement.RoleEligibilityScheduleInstances.Item.AppScope
{
    [Proxy(typeof(AppScopeRequestBuilder), true)]
    public partial interface IAppScopeRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.EntitlementManagement.RoleEligibilityScheduleInstances.Item.DirectoryScope
{
    [Proxy(typeof(DirectoryScopeRequestBuilder), true)]
    public partial interface IDirectoryScopeRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.EntitlementManagement.RoleEligibilityScheduleInstances.Item.Principal
{
    [Proxy(typeof(PrincipalRequestBuilder), true)]
    public partial interface IPrincipalRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.EntitlementManagement.RoleEligibilityScheduleInstances.Item.RoleDefinition
{
    [Proxy(typeof(RoleDefinitionRequestBuilder), true)]
    public partial interface IRoleDefinitionRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.EntitlementManagement.RoleEligibilityScheduleRequests
{
    [Proxy(typeof(RoleEligibilityScheduleRequestsRequestBuilder), true)]
    public partial interface IRoleEligibilityScheduleRequestsRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.EntitlementManagement.RoleEligibilityScheduleRequests.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.EntitlementManagement.RoleEligibilityScheduleRequests.FilterByCurrentUserWithOn
{
    [Proxy(typeof(FilterByCurrentUserWithOnRequestBuilder), true)]
    public partial interface IFilterByCurrentUserWithOnRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.EntitlementManagement.RoleEligibilityScheduleRequests.Item
{
    [Proxy(typeof(UnifiedRoleEligibilityScheduleRequestItemRequestBuilder), true)]
    public partial interface IUnifiedRoleEligibilityScheduleRequestItemRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.EntitlementManagement.RoleEligibilityScheduleRequests.Item.AppScope
{
    [Proxy(typeof(AppScopeRequestBuilder), true)]
    public partial interface IAppScopeRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.EntitlementManagement.RoleEligibilityScheduleRequests.Item.Cancel
{
    [Proxy(typeof(CancelRequestBuilder), true)]
    public partial interface ICancelRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.EntitlementManagement.RoleEligibilityScheduleRequests.Item.DirectoryScope
{
    [Proxy(typeof(DirectoryScopeRequestBuilder), true)]
    public partial interface IDirectoryScopeRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.EntitlementManagement.RoleEligibilityScheduleRequests.Item.Principal
{
    [Proxy(typeof(PrincipalRequestBuilder), true)]
    public partial interface IPrincipalRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.EntitlementManagement.RoleEligibilityScheduleRequests.Item.RoleDefinition
{
    [Proxy(typeof(RoleDefinitionRequestBuilder), true)]
    public partial interface IRoleDefinitionRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.EntitlementManagement.RoleEligibilityScheduleRequests.Item.TargetSchedule
{
    [Proxy(typeof(TargetScheduleRequestBuilder), true)]
    public partial interface ITargetScheduleRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.EntitlementManagement.RoleEligibilitySchedules
{
    [Proxy(typeof(RoleEligibilitySchedulesRequestBuilder), true)]
    public partial interface IRoleEligibilitySchedulesRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.EntitlementManagement.RoleEligibilitySchedules.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.EntitlementManagement.RoleEligibilitySchedules.FilterByCurrentUserWithOn
{
    [Proxy(typeof(FilterByCurrentUserWithOnRequestBuilder), true)]
    public partial interface IFilterByCurrentUserWithOnRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.EntitlementManagement.RoleEligibilitySchedules.Item
{
    [Proxy(typeof(UnifiedRoleEligibilityScheduleItemRequestBuilder), true)]
    public partial interface IUnifiedRoleEligibilityScheduleItemRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.EntitlementManagement.RoleEligibilitySchedules.Item.AppScope
{
    [Proxy(typeof(AppScopeRequestBuilder), true)]
    public partial interface IAppScopeRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.EntitlementManagement.RoleEligibilitySchedules.Item.DirectoryScope
{
    [Proxy(typeof(DirectoryScopeRequestBuilder), true)]
    public partial interface IDirectoryScopeRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.EntitlementManagement.RoleEligibilitySchedules.Item.Principal
{
    [Proxy(typeof(PrincipalRequestBuilder), true)]
    public partial interface IPrincipalRequestBuilder;
}

namespace Microsoft.Graph.RoleManagement.EntitlementManagement.RoleEligibilitySchedules.Item.RoleDefinition
{
    [Proxy(typeof(RoleDefinitionRequestBuilder), true)]
    public partial interface IRoleDefinitionRequestBuilder;
}

namespace Microsoft.Graph.SchemaExtensions
{
    [Proxy(typeof(SchemaExtensionsRequestBuilder), true)]
    public partial interface ISchemaExtensionsRequestBuilder;
}

namespace Microsoft.Graph.SchemaExtensions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.SchemaExtensions.Item
{
    [Proxy(typeof(SchemaExtensionItemRequestBuilder), true)]
    public partial interface ISchemaExtensionItemRequestBuilder;
}

namespace Microsoft.Graph.ScopedRoleMemberships
{
    [Proxy(typeof(ScopedRoleMembershipsRequestBuilder), true)]
    public partial interface IScopedRoleMembershipsRequestBuilder;
}

namespace Microsoft.Graph.ScopedRoleMemberships.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.ScopedRoleMemberships.Item
{
    [Proxy(typeof(ScopedRoleMembershipItemRequestBuilder), true)]
    public partial interface IScopedRoleMembershipItemRequestBuilder;
}

namespace Microsoft.Graph.Search
{
    [Proxy(typeof(SearchRequestBuilder), true)]
    public partial interface ISearchRequestBuilder;
}

namespace Microsoft.Graph.Search.Acronyms
{
    [Proxy(typeof(AcronymsRequestBuilder), true)]
    public partial interface IAcronymsRequestBuilder;
}

namespace Microsoft.Graph.Search.Acronyms.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Search.Acronyms.Item
{
    [Proxy(typeof(AcronymItemRequestBuilder), true)]
    public partial interface IAcronymItemRequestBuilder;
}

namespace Microsoft.Graph.Search.Bookmarks
{
    [Proxy(typeof(BookmarksRequestBuilder), true)]
    public partial interface IBookmarksRequestBuilder;
}

namespace Microsoft.Graph.Search.Bookmarks.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Search.Bookmarks.Item
{
    [Proxy(typeof(BookmarkItemRequestBuilder), true)]
    public partial interface IBookmarkItemRequestBuilder;
}

namespace Microsoft.Graph.Search.Qnas
{
    [Proxy(typeof(QnasRequestBuilder), true)]
    public partial interface IQnasRequestBuilder;
}

namespace Microsoft.Graph.Search.Qnas.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Search.Qnas.Item
{
    [Proxy(typeof(QnaItemRequestBuilder), true)]
    public partial interface IQnaItemRequestBuilder;
}

namespace Microsoft.Graph.Search.Query
{
    [Proxy(typeof(QueryRequestBuilder), true)]
    public partial interface IQueryRequestBuilder;
}

namespace Microsoft.Graph.Security
{
    [Proxy(typeof(SecurityRequestBuilder), true)]
    public partial interface ISecurityRequestBuilder;
}

namespace Microsoft.Graph.Security.Alerts
{
    [Proxy(typeof(AlertsRequestBuilder), true)]
    public partial interface IAlertsRequestBuilder;
}

namespace Microsoft.Graph.Security.Alerts_v2
{
    [Proxy(typeof(Alerts_v2RequestBuilder), true)]
    public partial interface IAlerts_v2RequestBuilder;
}

namespace Microsoft.Graph.Security.Alerts_v2.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.Alerts_v2.Item
{
    [Proxy(typeof(AlertItemRequestBuilder), true)]
    public partial interface IAlertItemRequestBuilder;
}

namespace Microsoft.Graph.Security.Alerts_v2.Item.Comments
{
    [Proxy(typeof(CommentsRequestBuilder), true)]
    public partial interface ICommentsRequestBuilder;
}

namespace Microsoft.Graph.Security.Alerts_v2.Item.Comments.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.Alerts.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.Alerts.Item
{
    [Proxy(typeof(AlertItemRequestBuilder), true)]
    public partial interface IAlertItemRequestBuilder;
}

namespace Microsoft.Graph.Security.AttackSimulation
{
    [Proxy(typeof(AttackSimulationRequestBuilder), true)]
    public partial interface IAttackSimulationRequestBuilder;
}

namespace Microsoft.Graph.Security.AttackSimulation.EndUserNotifications
{
    [Proxy(typeof(EndUserNotificationsRequestBuilder), true)]
    public partial interface IEndUserNotificationsRequestBuilder;
}

namespace Microsoft.Graph.Security.AttackSimulation.EndUserNotifications.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.AttackSimulation.EndUserNotifications.Item
{
    [Proxy(typeof(EndUserNotificationItemRequestBuilder), true)]
    public partial interface IEndUserNotificationItemRequestBuilder;
}

namespace Microsoft.Graph.Security.AttackSimulation.EndUserNotifications.Item.Details
{
    [Proxy(typeof(DetailsRequestBuilder), true)]
    public partial interface IDetailsRequestBuilder;
}

namespace Microsoft.Graph.Security.AttackSimulation.EndUserNotifications.Item.Details.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.AttackSimulation.EndUserNotifications.Item.Details.Item
{
    [Proxy(typeof(EndUserNotificationDetailItemRequestBuilder), true)]
    public partial interface IEndUserNotificationDetailItemRequestBuilder;
}

namespace Microsoft.Graph.Security.AttackSimulation.LandingPages
{
    [Proxy(typeof(LandingPagesRequestBuilder), true)]
    public partial interface ILandingPagesRequestBuilder;
}

namespace Microsoft.Graph.Security.AttackSimulation.LandingPages.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.AttackSimulation.LandingPages.Item
{
    [Proxy(typeof(LandingPageItemRequestBuilder), true)]
    public partial interface ILandingPageItemRequestBuilder;
}

namespace Microsoft.Graph.Security.AttackSimulation.LandingPages.Item.Details
{
    [Proxy(typeof(DetailsRequestBuilder), true)]
    public partial interface IDetailsRequestBuilder;
}

namespace Microsoft.Graph.Security.AttackSimulation.LandingPages.Item.Details.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.AttackSimulation.LandingPages.Item.Details.Item
{
    [Proxy(typeof(LandingPageDetailItemRequestBuilder), true)]
    public partial interface ILandingPageDetailItemRequestBuilder;
}

namespace Microsoft.Graph.Security.AttackSimulation.LoginPages
{
    [Proxy(typeof(LoginPagesRequestBuilder), true)]
    public partial interface ILoginPagesRequestBuilder;
}

namespace Microsoft.Graph.Security.AttackSimulation.LoginPages.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.AttackSimulation.LoginPages.Item
{
    [Proxy(typeof(LoginPageItemRequestBuilder), true)]
    public partial interface ILoginPageItemRequestBuilder;
}

namespace Microsoft.Graph.Security.AttackSimulation.Operations
{
    [Proxy(typeof(OperationsRequestBuilder), true)]
    public partial interface IOperationsRequestBuilder;
}

namespace Microsoft.Graph.Security.AttackSimulation.Operations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.AttackSimulation.Operations.Item
{
    [Proxy(typeof(AttackSimulationOperationItemRequestBuilder), true)]
    public partial interface IAttackSimulationOperationItemRequestBuilder;
}

namespace Microsoft.Graph.Security.AttackSimulation.Payloads
{
    [Proxy(typeof(PayloadsRequestBuilder), true)]
    public partial interface IPayloadsRequestBuilder;
}

namespace Microsoft.Graph.Security.AttackSimulation.Payloads.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.AttackSimulation.Payloads.Item
{
    [Proxy(typeof(PayloadItemRequestBuilder), true)]
    public partial interface IPayloadItemRequestBuilder;
}

namespace Microsoft.Graph.Security.AttackSimulation.SimulationAutomations
{
    [Proxy(typeof(SimulationAutomationsRequestBuilder), true)]
    public partial interface ISimulationAutomationsRequestBuilder;
}

namespace Microsoft.Graph.Security.AttackSimulation.SimulationAutomations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.AttackSimulation.SimulationAutomations.Item
{
    [Proxy(typeof(SimulationAutomationItemRequestBuilder), true)]
    public partial interface ISimulationAutomationItemRequestBuilder;
}

namespace Microsoft.Graph.Security.AttackSimulation.SimulationAutomations.Item.Runs
{
    [Proxy(typeof(RunsRequestBuilder), true)]
    public partial interface IRunsRequestBuilder;
}

namespace Microsoft.Graph.Security.AttackSimulation.SimulationAutomations.Item.Runs.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.AttackSimulation.SimulationAutomations.Item.Runs.Item
{
    [Proxy(typeof(SimulationAutomationRunItemRequestBuilder), true)]
    public partial interface ISimulationAutomationRunItemRequestBuilder;
}

namespace Microsoft.Graph.Security.AttackSimulation.Simulations
{
    [Proxy(typeof(SimulationsRequestBuilder), true)]
    public partial interface ISimulationsRequestBuilder;
}

namespace Microsoft.Graph.Security.AttackSimulation.Simulations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.AttackSimulation.Simulations.Item
{
    [Proxy(typeof(SimulationItemRequestBuilder), true)]
    public partial interface ISimulationItemRequestBuilder;
}

namespace Microsoft.Graph.Security.AttackSimulation.Simulations.Item.LandingPage
{
    [Proxy(typeof(LandingPageRequestBuilder), true)]
    public partial interface ILandingPageRequestBuilder;
}

namespace Microsoft.Graph.Security.AttackSimulation.Simulations.Item.LoginPage
{
    [Proxy(typeof(LoginPageRequestBuilder), true)]
    public partial interface ILoginPageRequestBuilder;
}

namespace Microsoft.Graph.Security.AttackSimulation.Simulations.Item.Payload
{
    [Proxy(typeof(PayloadRequestBuilder), true)]
    public partial interface IPayloadRequestBuilder;
}

namespace Microsoft.Graph.Security.AttackSimulation.Trainings
{
    [Proxy(typeof(TrainingsRequestBuilder), true)]
    public partial interface ITrainingsRequestBuilder;
}

namespace Microsoft.Graph.Security.AttackSimulation.Trainings.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.AttackSimulation.Trainings.Item
{
    [Proxy(typeof(TrainingItemRequestBuilder), true)]
    public partial interface ITrainingItemRequestBuilder;
}

namespace Microsoft.Graph.Security.AttackSimulation.Trainings.Item.LanguageDetails
{
    [Proxy(typeof(LanguageDetailsRequestBuilder), true)]
    public partial interface ILanguageDetailsRequestBuilder;
}

namespace Microsoft.Graph.Security.AttackSimulation.Trainings.Item.LanguageDetails.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.AttackSimulation.Trainings.Item.LanguageDetails.Item
{
    [Proxy(typeof(TrainingLanguageDetailItemRequestBuilder), true)]
    public partial interface ITrainingLanguageDetailItemRequestBuilder;
}

namespace Microsoft.Graph.Security.AuditLog
{
    [Proxy(typeof(AuditLogRequestBuilder), true)]
    public partial interface IAuditLogRequestBuilder;
}

namespace Microsoft.Graph.Security.AuditLog.Queries
{
    [Proxy(typeof(QueriesRequestBuilder), true)]
    public partial interface IQueriesRequestBuilder;
}

namespace Microsoft.Graph.Security.AuditLog.Queries.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.AuditLog.Queries.Item
{
    [Proxy(typeof(AuditLogQueryItemRequestBuilder), true)]
    public partial interface IAuditLogQueryItemRequestBuilder;
}

namespace Microsoft.Graph.Security.AuditLog.Queries.Item.Records
{
    [Proxy(typeof(RecordsRequestBuilder), true)]
    public partial interface IRecordsRequestBuilder;
}

namespace Microsoft.Graph.Security.AuditLog.Queries.Item.Records.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.AuditLog.Queries.Item.Records.Item
{
    [Proxy(typeof(AuditLogRecordItemRequestBuilder), true)]
    public partial interface IAuditLogRecordItemRequestBuilder;
}

namespace Microsoft.Graph.Security.Cases
{
    [Proxy(typeof(CasesRequestBuilder), true)]
    public partial interface ICasesRequestBuilder;
}

namespace Microsoft.Graph.Security.Cases.EdiscoveryCases
{
    [Proxy(typeof(EdiscoveryCasesRequestBuilder), true)]
    public partial interface IEdiscoveryCasesRequestBuilder;
}

namespace Microsoft.Graph.Security.Cases.EdiscoveryCases.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.Cases.EdiscoveryCases.Item
{
    [Proxy(typeof(EdiscoveryCaseItemRequestBuilder), true)]
    public partial interface IEdiscoveryCaseItemRequestBuilder;
}

namespace Microsoft.Graph.Security.Cases.EdiscoveryCases.Item.Custodians
{
    [Proxy(typeof(CustodiansRequestBuilder), true)]
    public partial interface ICustodiansRequestBuilder;
}

namespace Microsoft.Graph.Security.Cases.EdiscoveryCases.Item.Custodians.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.Cases.EdiscoveryCases.Item.Custodians.Item
{
    [Proxy(typeof(EdiscoveryCustodianItemRequestBuilder), true)]
    public partial interface IEdiscoveryCustodianItemRequestBuilder;
}

namespace Microsoft.Graph.Security.Cases.EdiscoveryCases.Item.Custodians.Item.LastIndexOperation
{
    [Proxy(typeof(LastIndexOperationRequestBuilder), true)]
    public partial interface ILastIndexOperationRequestBuilder;
}

namespace Microsoft.Graph.Security.Cases.EdiscoveryCases.Item.Custodians.Item.MicrosoftGraphSecurityActivate
{
    [Proxy(typeof(MicrosoftGraphSecurityActivateRequestBuilder), true)]
    public partial interface IMicrosoftGraphSecurityActivateRequestBuilder;
}

namespace Microsoft.Graph.Security.Cases.EdiscoveryCases.Item.Custodians.Item.MicrosoftGraphSecurityApplyHold
{
    [Proxy(typeof(MicrosoftGraphSecurityApplyHoldRequestBuilder), true)]
    public partial interface IMicrosoftGraphSecurityApplyHoldRequestBuilder;
}

namespace Microsoft.Graph.Security.Cases.EdiscoveryCases.Item.Custodians.Item.MicrosoftGraphSecurityRelease
{
    [Proxy(typeof(MicrosoftGraphSecurityReleaseRequestBuilder), true)]
    public partial interface IMicrosoftGraphSecurityReleaseRequestBuilder;
}

namespace Microsoft.Graph.Security.Cases.EdiscoveryCases.Item.Custodians.Item.MicrosoftGraphSecurityRemoveHold
{
    [Proxy(typeof(MicrosoftGraphSecurityRemoveHoldRequestBuilder), true)]
    public partial interface IMicrosoftGraphSecurityRemoveHoldRequestBuilder;
}

namespace Microsoft.Graph.Security.Cases.EdiscoveryCases.Item.Custodians.Item.MicrosoftGraphSecurityUpdateIndex
{
    [Proxy(typeof(MicrosoftGraphSecurityUpdateIndexRequestBuilder), true)]
    public partial interface IMicrosoftGraphSecurityUpdateIndexRequestBuilder;
}

namespace Microsoft.Graph.Security.Cases.EdiscoveryCases.Item.Custodians.Item.SiteSources
{
    [Proxy(typeof(SiteSourcesRequestBuilder), true)]
    public partial interface ISiteSourcesRequestBuilder;
}

namespace Microsoft.Graph.Security.Cases.EdiscoveryCases.Item.Custodians.Item.SiteSources.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.Cases.EdiscoveryCases.Item.Custodians.Item.SiteSources.Item
{
    [Proxy(typeof(SiteSourceItemRequestBuilder), true)]
    public partial interface ISiteSourceItemRequestBuilder;
}

namespace Microsoft.Graph.Security.Cases.EdiscoveryCases.Item.Custodians.Item.SiteSources.Item.Site
{
    [Proxy(typeof(SiteRequestBuilder), true)]
    public partial interface ISiteRequestBuilder;
}

namespace Microsoft.Graph.Security.Cases.EdiscoveryCases.Item.Custodians.Item.UnifiedGroupSources
{
    [Proxy(typeof(UnifiedGroupSourcesRequestBuilder), true)]
    public partial interface IUnifiedGroupSourcesRequestBuilder;
}

namespace Microsoft.Graph.Security.Cases.EdiscoveryCases.Item.Custodians.Item.UnifiedGroupSources.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.Cases.EdiscoveryCases.Item.Custodians.Item.UnifiedGroupSources.Item
{
    [Proxy(typeof(UnifiedGroupSourceItemRequestBuilder), true)]
    public partial interface IUnifiedGroupSourceItemRequestBuilder;
}

namespace Microsoft.Graph.Security.Cases.EdiscoveryCases.Item.Custodians.Item.UnifiedGroupSources.Item.Group
{
    [Proxy(typeof(GroupRequestBuilder), true)]
    public partial interface IGroupRequestBuilder;
}

namespace Microsoft.Graph.Security.Cases.EdiscoveryCases.Item.Custodians.Item.UnifiedGroupSources.Item.Group.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.Security.Cases.EdiscoveryCases.Item.Custodians.Item.UnifiedGroupSources.Item.Group.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.Cases.EdiscoveryCases.Item.Custodians.Item.UserSources
{
    [Proxy(typeof(UserSourcesRequestBuilder), true)]
    public partial interface IUserSourcesRequestBuilder;
}

namespace Microsoft.Graph.Security.Cases.EdiscoveryCases.Item.Custodians.Item.UserSources.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.Cases.EdiscoveryCases.Item.Custodians.Item.UserSources.Item
{
    [Proxy(typeof(UserSourceItemRequestBuilder), true)]
    public partial interface IUserSourceItemRequestBuilder;
}

namespace Microsoft.Graph.Security.Cases.EdiscoveryCases.Item.Custodians.MicrosoftGraphSecurityApplyHold
{
    [Proxy(typeof(MicrosoftGraphSecurityApplyHoldRequestBuilder), true)]
    public partial interface IMicrosoftGraphSecurityApplyHoldRequestBuilder;
}

namespace Microsoft.Graph.Security.Cases.EdiscoveryCases.Item.Custodians.MicrosoftGraphSecurityRemoveHold
{
    [Proxy(typeof(MicrosoftGraphSecurityRemoveHoldRequestBuilder), true)]
    public partial interface IMicrosoftGraphSecurityRemoveHoldRequestBuilder;
}

namespace Microsoft.Graph.Security.Cases.EdiscoveryCases.Item.MicrosoftGraphSecurityClose
{
    [Proxy(typeof(MicrosoftGraphSecurityCloseRequestBuilder), true)]
    public partial interface IMicrosoftGraphSecurityCloseRequestBuilder;
}

namespace Microsoft.Graph.Security.Cases.EdiscoveryCases.Item.MicrosoftGraphSecurityReopen
{
    [Proxy(typeof(MicrosoftGraphSecurityReopenRequestBuilder), true)]
    public partial interface IMicrosoftGraphSecurityReopenRequestBuilder;
}

namespace Microsoft.Graph.Security.Cases.EdiscoveryCases.Item.NoncustodialDataSources
{
    [Proxy(typeof(NoncustodialDataSourcesRequestBuilder), true)]
    public partial interface INoncustodialDataSourcesRequestBuilder;
}

namespace Microsoft.Graph.Security.Cases.EdiscoveryCases.Item.NoncustodialDataSources.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.Cases.EdiscoveryCases.Item.NoncustodialDataSources.Item
{
    [Proxy(typeof(EdiscoveryNoncustodialDataSourceItemRequestBuilder), true)]
    public partial interface IEdiscoveryNoncustodialDataSourceItemRequestBuilder;
}

namespace Microsoft.Graph.Security.Cases.EdiscoveryCases.Item.NoncustodialDataSources.Item.DataSource
{
    [Proxy(typeof(DataSourceRequestBuilder), true)]
    public partial interface IDataSourceRequestBuilder;
}

namespace Microsoft.Graph.Security.Cases.EdiscoveryCases.Item.NoncustodialDataSources.Item.LastIndexOperation
{
    [Proxy(typeof(LastIndexOperationRequestBuilder), true)]
    public partial interface ILastIndexOperationRequestBuilder;
}

namespace Microsoft.Graph.Security.Cases.EdiscoveryCases.Item.NoncustodialDataSources.Item.MicrosoftGraphSecurityApplyHold
{
    [Proxy(typeof(MicrosoftGraphSecurityApplyHoldRequestBuilder), true)]
    public partial interface IMicrosoftGraphSecurityApplyHoldRequestBuilder;
}

namespace Microsoft.Graph.Security.Cases.EdiscoveryCases.Item.NoncustodialDataSources.Item.MicrosoftGraphSecurityRelease
{
    [Proxy(typeof(MicrosoftGraphSecurityReleaseRequestBuilder), true)]
    public partial interface IMicrosoftGraphSecurityReleaseRequestBuilder;
}

namespace Microsoft.Graph.Security.Cases.EdiscoveryCases.Item.NoncustodialDataSources.Item.MicrosoftGraphSecurityRemoveHold
{
    [Proxy(typeof(MicrosoftGraphSecurityRemoveHoldRequestBuilder), true)]
    public partial interface IMicrosoftGraphSecurityRemoveHoldRequestBuilder;
}

namespace Microsoft.Graph.Security.Cases.EdiscoveryCases.Item.NoncustodialDataSources.Item.MicrosoftGraphSecurityUpdateIndex
{
    [Proxy(typeof(MicrosoftGraphSecurityUpdateIndexRequestBuilder), true)]
    public partial interface IMicrosoftGraphSecurityUpdateIndexRequestBuilder;
}

namespace Microsoft.Graph.Security.Cases.EdiscoveryCases.Item.NoncustodialDataSources.MicrosoftGraphSecurityApplyHold
{
    [Proxy(typeof(MicrosoftGraphSecurityApplyHoldRequestBuilder), true)]
    public partial interface IMicrosoftGraphSecurityApplyHoldRequestBuilder;
}

namespace Microsoft.Graph.Security.Cases.EdiscoveryCases.Item.NoncustodialDataSources.MicrosoftGraphSecurityRemoveHold
{
    [Proxy(typeof(MicrosoftGraphSecurityRemoveHoldRequestBuilder), true)]
    public partial interface IMicrosoftGraphSecurityRemoveHoldRequestBuilder;
}

namespace Microsoft.Graph.Security.Cases.EdiscoveryCases.Item.Operations
{
    [Proxy(typeof(OperationsRequestBuilder), true)]
    public partial interface IOperationsRequestBuilder;
}

namespace Microsoft.Graph.Security.Cases.EdiscoveryCases.Item.Operations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.Cases.EdiscoveryCases.Item.Operations.Item
{
    [Proxy(typeof(CaseOperationItemRequestBuilder), true)]
    public partial interface ICaseOperationItemRequestBuilder;
}

namespace Microsoft.Graph.Security.Cases.EdiscoveryCases.Item.ReviewSets
{
    [Proxy(typeof(ReviewSetsRequestBuilder), true)]
    public partial interface IReviewSetsRequestBuilder;
}

namespace Microsoft.Graph.Security.Cases.EdiscoveryCases.Item.ReviewSets.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.Cases.EdiscoveryCases.Item.ReviewSets.Item
{
    [Proxy(typeof(EdiscoveryReviewSetItemRequestBuilder), true)]
    public partial interface IEdiscoveryReviewSetItemRequestBuilder;
}

namespace Microsoft.Graph.Security.Cases.EdiscoveryCases.Item.ReviewSets.Item.MicrosoftGraphSecurityAddToReviewSet
{
    [Proxy(typeof(MicrosoftGraphSecurityAddToReviewSetRequestBuilder), true)]
    public partial interface IMicrosoftGraphSecurityAddToReviewSetRequestBuilder;
}

namespace Microsoft.Graph.Security.Cases.EdiscoveryCases.Item.ReviewSets.Item.MicrosoftGraphSecurityExport
{
    [Proxy(typeof(MicrosoftGraphSecurityExportRequestBuilder), true)]
    public partial interface IMicrosoftGraphSecurityExportRequestBuilder;
}

namespace Microsoft.Graph.Security.Cases.EdiscoveryCases.Item.ReviewSets.Item.Queries
{
    [Proxy(typeof(QueriesRequestBuilder), true)]
    public partial interface IQueriesRequestBuilder;
}

namespace Microsoft.Graph.Security.Cases.EdiscoveryCases.Item.ReviewSets.Item.Queries.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.Cases.EdiscoveryCases.Item.ReviewSets.Item.Queries.Item
{
    [Proxy(typeof(EdiscoveryReviewSetQueryItemRequestBuilder), true)]
    public partial interface IEdiscoveryReviewSetQueryItemRequestBuilder;
}

namespace Microsoft.Graph.Security.Cases.EdiscoveryCases.Item.ReviewSets.Item.Queries.Item.MicrosoftGraphSecurityApplyTags
{
    [Proxy(typeof(MicrosoftGraphSecurityApplyTagsRequestBuilder), true)]
    public partial interface IMicrosoftGraphSecurityApplyTagsRequestBuilder;
}

namespace Microsoft.Graph.Security.Cases.EdiscoveryCases.Item.ReviewSets.Item.Queries.Item.MicrosoftGraphSecurityExport
{
    [Proxy(typeof(MicrosoftGraphSecurityExportRequestBuilder), true)]
    public partial interface IMicrosoftGraphSecurityExportRequestBuilder;
}

namespace Microsoft.Graph.Security.Cases.EdiscoveryCases.Item.Searches
{
    [Proxy(typeof(SearchesRequestBuilder), true)]
    public partial interface ISearchesRequestBuilder;
}

namespace Microsoft.Graph.Security.Cases.EdiscoveryCases.Item.Searches.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.Cases.EdiscoveryCases.Item.Searches.Item
{
    [Proxy(typeof(EdiscoverySearchItemRequestBuilder), true)]
    public partial interface IEdiscoverySearchItemRequestBuilder;
}

namespace Microsoft.Graph.Security.Cases.EdiscoveryCases.Item.Searches.Item.AdditionalSources
{
    [Proxy(typeof(AdditionalSourcesRequestBuilder), true)]
    public partial interface IAdditionalSourcesRequestBuilder;
}

namespace Microsoft.Graph.Security.Cases.EdiscoveryCases.Item.Searches.Item.AdditionalSources.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.Cases.EdiscoveryCases.Item.Searches.Item.AdditionalSources.Item
{
    [Proxy(typeof(DataSourceItemRequestBuilder), true)]
    public partial interface IDataSourceItemRequestBuilder;
}

namespace Microsoft.Graph.Security.Cases.EdiscoveryCases.Item.Searches.Item.AddToReviewSetOperation
{
    [Proxy(typeof(AddToReviewSetOperationRequestBuilder), true)]
    public partial interface IAddToReviewSetOperationRequestBuilder;
}

namespace Microsoft.Graph.Security.Cases.EdiscoveryCases.Item.Searches.Item.CustodianSources
{
    [Proxy(typeof(CustodianSourcesRequestBuilder), true)]
    public partial interface ICustodianSourcesRequestBuilder;
}

namespace Microsoft.Graph.Security.Cases.EdiscoveryCases.Item.Searches.Item.CustodianSources.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.Cases.EdiscoveryCases.Item.Searches.Item.CustodianSources.Item
{
    [Proxy(typeof(DataSourceItemRequestBuilder), true)]
    public partial interface IDataSourceItemRequestBuilder;
}

namespace Microsoft.Graph.Security.Cases.EdiscoveryCases.Item.Searches.Item.LastEstimateStatisticsOperation
{
    [Proxy(typeof(LastEstimateStatisticsOperationRequestBuilder), true)]
    public partial interface ILastEstimateStatisticsOperationRequestBuilder;
}

namespace Microsoft.Graph.Security.Cases.EdiscoveryCases.Item.Searches.Item.MicrosoftGraphSecurityEstimateStatistics
{
    [Proxy(typeof(MicrosoftGraphSecurityEstimateStatisticsRequestBuilder), true)]
    public partial interface IMicrosoftGraphSecurityEstimateStatisticsRequestBuilder;
}

namespace Microsoft.Graph.Security.Cases.EdiscoveryCases.Item.Searches.Item.MicrosoftGraphSecurityExportReport
{
    [Proxy(typeof(MicrosoftGraphSecurityExportReportRequestBuilder), true)]
    public partial interface IMicrosoftGraphSecurityExportReportRequestBuilder;
}

namespace Microsoft.Graph.Security.Cases.EdiscoveryCases.Item.Searches.Item.MicrosoftGraphSecurityExportResult
{
    [Proxy(typeof(MicrosoftGraphSecurityExportResultRequestBuilder), true)]
    public partial interface IMicrosoftGraphSecurityExportResultRequestBuilder;
}

namespace Microsoft.Graph.Security.Cases.EdiscoveryCases.Item.Searches.Item.MicrosoftGraphSecurityPurgeData
{
    [Proxy(typeof(MicrosoftGraphSecurityPurgeDataRequestBuilder), true)]
    public partial interface IMicrosoftGraphSecurityPurgeDataRequestBuilder;
}

namespace Microsoft.Graph.Security.Cases.EdiscoveryCases.Item.Searches.Item.NoncustodialSources
{
    [Proxy(typeof(NoncustodialSourcesRequestBuilder), true)]
    public partial interface INoncustodialSourcesRequestBuilder;
}

namespace Microsoft.Graph.Security.Cases.EdiscoveryCases.Item.Searches.Item.NoncustodialSources.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.Cases.EdiscoveryCases.Item.Searches.Item.NoncustodialSources.Item
{
    [Proxy(typeof(EdiscoveryNoncustodialDataSourceItemRequestBuilder), true)]
    public partial interface IEdiscoveryNoncustodialDataSourceItemRequestBuilder;
}

namespace Microsoft.Graph.Security.Cases.EdiscoveryCases.Item.Settings
{
    [Proxy(typeof(SettingsRequestBuilder), true)]
    public partial interface ISettingsRequestBuilder;
}

namespace Microsoft.Graph.Security.Cases.EdiscoveryCases.Item.Settings.MicrosoftGraphSecurityResetToDefault
{
    [Proxy(typeof(MicrosoftGraphSecurityResetToDefaultRequestBuilder), true)]
    public partial interface IMicrosoftGraphSecurityResetToDefaultRequestBuilder;
}

namespace Microsoft.Graph.Security.Cases.EdiscoveryCases.Item.Tags
{
    [Proxy(typeof(TagsRequestBuilder), true)]
    public partial interface ITagsRequestBuilder;
}

namespace Microsoft.Graph.Security.Cases.EdiscoveryCases.Item.Tags.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.Cases.EdiscoveryCases.Item.Tags.Item
{
    [Proxy(typeof(EdiscoveryReviewTagItemRequestBuilder), true)]
    public partial interface IEdiscoveryReviewTagItemRequestBuilder;
}

namespace Microsoft.Graph.Security.Cases.EdiscoveryCases.Item.Tags.Item.ChildTags
{
    [Proxy(typeof(ChildTagsRequestBuilder), true)]
    public partial interface IChildTagsRequestBuilder;
}

namespace Microsoft.Graph.Security.Cases.EdiscoveryCases.Item.Tags.Item.ChildTags.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.Cases.EdiscoveryCases.Item.Tags.Item.ChildTags.Item
{
    [Proxy(typeof(EdiscoveryReviewTagItemRequestBuilder), true)]
    public partial interface IEdiscoveryReviewTagItemRequestBuilder;
}

namespace Microsoft.Graph.Security.Cases.EdiscoveryCases.Item.Tags.Item.Parent
{
    [Proxy(typeof(ParentRequestBuilder), true)]
    public partial interface IParentRequestBuilder;
}

namespace Microsoft.Graph.Security.Cases.EdiscoveryCases.Item.Tags.MicrosoftGraphSecurityAsHierarchy
{
    [Proxy(typeof(MicrosoftGraphSecurityAsHierarchyRequestBuilder), true)]
    public partial interface IMicrosoftGraphSecurityAsHierarchyRequestBuilder;
}

namespace Microsoft.Graph.Security.DataSecurityAndGovernance
{
    [Proxy(typeof(DataSecurityAndGovernanceRequestBuilder), true)]
    public partial interface IDataSecurityAndGovernanceRequestBuilder;
}

namespace Microsoft.Graph.Security.DataSecurityAndGovernance.ProcessContentAsync
{
    [Proxy(typeof(ProcessContentAsyncRequestBuilder), true)]
    public partial interface IProcessContentAsyncRequestBuilder;
}

namespace Microsoft.Graph.Security.DataSecurityAndGovernance.ProtectionScopes
{
    [Proxy(typeof(ProtectionScopesRequestBuilder), true)]
    public partial interface IProtectionScopesRequestBuilder;
}

namespace Microsoft.Graph.Security.DataSecurityAndGovernance.ProtectionScopes.Compute
{
    [Proxy(typeof(ComputeRequestBuilder), true)]
    public partial interface IComputeRequestBuilder;
}

namespace Microsoft.Graph.Security.DataSecurityAndGovernance.SensitivityLabels
{
    [Proxy(typeof(SensitivityLabelsRequestBuilder), true)]
    public partial interface ISensitivityLabelsRequestBuilder;
}

namespace Microsoft.Graph.Security.DataSecurityAndGovernance.SensitivityLabels.ComputeInheritanceWithLabelIdsWithLocaleWithContentFormats
{
    [Proxy(typeof(ComputeInheritanceWithLabelIdsWithLocaleWithContentFormatsRequestBuilder), true)]
    public partial interface IComputeInheritanceWithLabelIdsWithLocaleWithContentFormatsRequestBuilder;
}

namespace Microsoft.Graph.Security.DataSecurityAndGovernance.SensitivityLabels.ComputeRightsAndInheritance
{
    [Proxy(typeof(ComputeRightsAndInheritanceRequestBuilder), true)]
    public partial interface IComputeRightsAndInheritanceRequestBuilder;
}

namespace Microsoft.Graph.Security.DataSecurityAndGovernance.SensitivityLabels.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.DataSecurityAndGovernance.SensitivityLabels.Item
{
    [Proxy(typeof(SensitivityLabelItemRequestBuilder), true)]
    public partial interface ISensitivityLabelItemRequestBuilder;
}

namespace Microsoft.Graph.Security.DataSecurityAndGovernance.SensitivityLabels.Item.Rights
{
    [Proxy(typeof(RightsRequestBuilder), true)]
    public partial interface IRightsRequestBuilder;
}

namespace Microsoft.Graph.Security.DataSecurityAndGovernance.SensitivityLabels.Item.Sublabels
{
    [Proxy(typeof(SublabelsRequestBuilder), true)]
    public partial interface ISublabelsRequestBuilder;
}

namespace Microsoft.Graph.Security.DataSecurityAndGovernance.SensitivityLabels.Item.Sublabels.ComputeInheritanceWithLabelIdsWithLocaleWithContentFormats
{
    [Proxy(typeof(ComputeInheritanceWithLabelIdsWithLocaleWithContentFormatsRequestBuilder), true)]
    public partial interface IComputeInheritanceWithLabelIdsWithLocaleWithContentFormatsRequestBuilder;
}

namespace Microsoft.Graph.Security.DataSecurityAndGovernance.SensitivityLabels.Item.Sublabels.ComputeRightsAndInheritance
{
    [Proxy(typeof(ComputeRightsAndInheritanceRequestBuilder), true)]
    public partial interface IComputeRightsAndInheritanceRequestBuilder;
}

namespace Microsoft.Graph.Security.DataSecurityAndGovernance.SensitivityLabels.Item.Sublabels.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.DataSecurityAndGovernance.SensitivityLabels.Item.Sublabels.Item
{
    [Proxy(typeof(SensitivityLabelItemRequestBuilder), true)]
    public partial interface ISensitivityLabelItemRequestBuilder;
}

namespace Microsoft.Graph.Security.DataSecurityAndGovernance.SensitivityLabels.Item.Sublabels.Item.Rights
{
    [Proxy(typeof(RightsRequestBuilder), true)]
    public partial interface IRightsRequestBuilder;
}

namespace Microsoft.Graph.Security.Identities
{
    [Proxy(typeof(IdentitiesRequestBuilder), true)]
    public partial interface IIdentitiesRequestBuilder;
}

namespace Microsoft.Graph.Security.Identities.HealthIssues
{
    [Proxy(typeof(HealthIssuesRequestBuilder), true)]
    public partial interface IHealthIssuesRequestBuilder;
}

namespace Microsoft.Graph.Security.Identities.HealthIssues.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.Identities.HealthIssues.Item
{
    [Proxy(typeof(HealthIssueItemRequestBuilder), true)]
    public partial interface IHealthIssueItemRequestBuilder;
}

namespace Microsoft.Graph.Security.Identities.Sensors
{
    [Proxy(typeof(SensorsRequestBuilder), true)]
    public partial interface ISensorsRequestBuilder;
}

namespace Microsoft.Graph.Security.Identities.Sensors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.Identities.Sensors.Item
{
    [Proxy(typeof(SensorItemRequestBuilder), true)]
    public partial interface ISensorItemRequestBuilder;
}

namespace Microsoft.Graph.Security.Identities.Sensors.Item.HealthIssues
{
    [Proxy(typeof(HealthIssuesRequestBuilder), true)]
    public partial interface IHealthIssuesRequestBuilder;
}

namespace Microsoft.Graph.Security.Identities.Sensors.Item.HealthIssues.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.Identities.Sensors.Item.HealthIssues.Item
{
    [Proxy(typeof(HealthIssueItemRequestBuilder), true)]
    public partial interface IHealthIssueItemRequestBuilder;
}

namespace Microsoft.Graph.Security.Identities.Sensors.MicrosoftGraphSecurityGetDeploymentAccessKey
{
    [Proxy(typeof(MicrosoftGraphSecurityGetDeploymentAccessKeyRequestBuilder), true)]
    public partial interface IMicrosoftGraphSecurityGetDeploymentAccessKeyRequestBuilder;
}

namespace Microsoft.Graph.Security.Identities.Sensors.MicrosoftGraphSecurityGetDeploymentPackageUri
{
    [Proxy(typeof(MicrosoftGraphSecurityGetDeploymentPackageUriRequestBuilder), true)]
    public partial interface IMicrosoftGraphSecurityGetDeploymentPackageUriRequestBuilder;
}

namespace Microsoft.Graph.Security.Identities.Sensors.MicrosoftGraphSecurityRegenerateDeploymentAccessKey
{
    [Proxy(typeof(MicrosoftGraphSecurityRegenerateDeploymentAccessKeyRequestBuilder), true)]
    public partial interface IMicrosoftGraphSecurityRegenerateDeploymentAccessKeyRequestBuilder;
}

namespace Microsoft.Graph.Security.Incidents
{
    [Proxy(typeof(IncidentsRequestBuilder), true)]
    public partial interface IIncidentsRequestBuilder;
}

namespace Microsoft.Graph.Security.Incidents.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.Incidents.Item
{
    [Proxy(typeof(IncidentItemRequestBuilder), true)]
    public partial interface IIncidentItemRequestBuilder;
}

namespace Microsoft.Graph.Security.Incidents.Item.Alerts
{
    [Proxy(typeof(AlertsRequestBuilder), true)]
    public partial interface IAlertsRequestBuilder;
}

namespace Microsoft.Graph.Security.Incidents.Item.Alerts.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.Incidents.Item.Alerts.Item
{
    [Proxy(typeof(AlertItemRequestBuilder), true)]
    public partial interface IAlertItemRequestBuilder;
}

namespace Microsoft.Graph.Security.Incidents.Item.Alerts.Item.Comments
{
    [Proxy(typeof(CommentsRequestBuilder), true)]
    public partial interface ICommentsRequestBuilder;
}

namespace Microsoft.Graph.Security.Incidents.Item.Alerts.Item.Comments.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.Labels
{
    [Proxy(typeof(LabelsRequestBuilder), true)]
    public partial interface ILabelsRequestBuilder;
}

namespace Microsoft.Graph.Security.Labels.Authorities
{
    [Proxy(typeof(AuthoritiesRequestBuilder), true)]
    public partial interface IAuthoritiesRequestBuilder;
}

namespace Microsoft.Graph.Security.Labels.Authorities.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.Labels.Authorities.Item
{
    [Proxy(typeof(AuthorityTemplateItemRequestBuilder), true)]
    public partial interface IAuthorityTemplateItemRequestBuilder;
}

namespace Microsoft.Graph.Security.Labels.Categories
{
    [Proxy(typeof(CategoriesRequestBuilder), true)]
    public partial interface ICategoriesRequestBuilder;
}

namespace Microsoft.Graph.Security.Labels.Categories.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.Labels.Categories.Item
{
    [Proxy(typeof(CategoryTemplateItemRequestBuilder), true)]
    public partial interface ICategoryTemplateItemRequestBuilder;
}

namespace Microsoft.Graph.Security.Labels.Categories.Item.Subcategories
{
    [Proxy(typeof(SubcategoriesRequestBuilder), true)]
    public partial interface ISubcategoriesRequestBuilder;
}

namespace Microsoft.Graph.Security.Labels.Categories.Item.Subcategories.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.Labels.Categories.Item.Subcategories.Item
{
    [Proxy(typeof(SubcategoryTemplateItemRequestBuilder), true)]
    public partial interface ISubcategoryTemplateItemRequestBuilder;
}

namespace Microsoft.Graph.Security.Labels.Citations
{
    [Proxy(typeof(CitationsRequestBuilder), true)]
    public partial interface ICitationsRequestBuilder;
}

namespace Microsoft.Graph.Security.Labels.Citations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.Labels.Citations.Item
{
    [Proxy(typeof(CitationTemplateItemRequestBuilder), true)]
    public partial interface ICitationTemplateItemRequestBuilder;
}

namespace Microsoft.Graph.Security.Labels.Departments
{
    [Proxy(typeof(DepartmentsRequestBuilder), true)]
    public partial interface IDepartmentsRequestBuilder;
}

namespace Microsoft.Graph.Security.Labels.Departments.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.Labels.Departments.Item
{
    [Proxy(typeof(DepartmentTemplateItemRequestBuilder), true)]
    public partial interface IDepartmentTemplateItemRequestBuilder;
}

namespace Microsoft.Graph.Security.Labels.FilePlanReferences
{
    [Proxy(typeof(FilePlanReferencesRequestBuilder), true)]
    public partial interface IFilePlanReferencesRequestBuilder;
}

namespace Microsoft.Graph.Security.Labels.FilePlanReferences.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.Labels.FilePlanReferences.Item
{
    [Proxy(typeof(FilePlanReferenceTemplateItemRequestBuilder), true)]
    public partial interface IFilePlanReferenceTemplateItemRequestBuilder;
}

namespace Microsoft.Graph.Security.Labels.RetentionLabels
{
    [Proxy(typeof(RetentionLabelsRequestBuilder), true)]
    public partial interface IRetentionLabelsRequestBuilder;
}

namespace Microsoft.Graph.Security.Labels.RetentionLabels.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.Labels.RetentionLabels.Item
{
    [Proxy(typeof(RetentionLabelItemRequestBuilder), true)]
    public partial interface IRetentionLabelItemRequestBuilder;
}

namespace Microsoft.Graph.Security.Labels.RetentionLabels.Item.Descriptors
{
    [Proxy(typeof(DescriptorsRequestBuilder), true)]
    public partial interface IDescriptorsRequestBuilder;
}

namespace Microsoft.Graph.Security.Labels.RetentionLabels.Item.Descriptors.AuthorityTemplate
{
    [Proxy(typeof(AuthorityTemplateRequestBuilder), true)]
    public partial interface IAuthorityTemplateRequestBuilder;
}

namespace Microsoft.Graph.Security.Labels.RetentionLabels.Item.Descriptors.CategoryTemplate
{
    [Proxy(typeof(CategoryTemplateRequestBuilder), true)]
    public partial interface ICategoryTemplateRequestBuilder;
}

namespace Microsoft.Graph.Security.Labels.RetentionLabels.Item.Descriptors.CitationTemplate
{
    [Proxy(typeof(CitationTemplateRequestBuilder), true)]
    public partial interface ICitationTemplateRequestBuilder;
}

namespace Microsoft.Graph.Security.Labels.RetentionLabels.Item.Descriptors.DepartmentTemplate
{
    [Proxy(typeof(DepartmentTemplateRequestBuilder), true)]
    public partial interface IDepartmentTemplateRequestBuilder;
}

namespace Microsoft.Graph.Security.Labels.RetentionLabels.Item.Descriptors.FilePlanReferenceTemplate
{
    [Proxy(typeof(FilePlanReferenceTemplateRequestBuilder), true)]
    public partial interface IFilePlanReferenceTemplateRequestBuilder;
}

namespace Microsoft.Graph.Security.Labels.RetentionLabels.Item.DispositionReviewStages
{
    [Proxy(typeof(DispositionReviewStagesRequestBuilder), true)]
    public partial interface IDispositionReviewStagesRequestBuilder;
}

namespace Microsoft.Graph.Security.Labels.RetentionLabels.Item.DispositionReviewStages.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.Labels.RetentionLabels.Item.DispositionReviewStages.Item
{
    [Proxy(typeof(DispositionReviewStageStageNumberItemRequestBuilder), true)]
    public partial interface IDispositionReviewStageStageNumberItemRequestBuilder;
}

namespace Microsoft.Graph.Security.Labels.RetentionLabels.Item.RetentionEventType
{
    [Proxy(typeof(RetentionEventTypeRequestBuilder), true)]
    public partial interface IRetentionEventTypeRequestBuilder;
}

namespace Microsoft.Graph.Security.MicrosoftGraphSecurityRunHuntingQuery
{
    [Proxy(typeof(MicrosoftGraphSecurityRunHuntingQueryRequestBuilder), true)]
    public partial interface IMicrosoftGraphSecurityRunHuntingQueryRequestBuilder;
}

namespace Microsoft.Graph.Security.SecureScoreControlProfiles
{
    [Proxy(typeof(SecureScoreControlProfilesRequestBuilder), true)]
    public partial interface ISecureScoreControlProfilesRequestBuilder;
}

namespace Microsoft.Graph.Security.SecureScoreControlProfiles.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.SecureScoreControlProfiles.Item
{
    [Proxy(typeof(SecureScoreControlProfileItemRequestBuilder), true)]
    public partial interface ISecureScoreControlProfileItemRequestBuilder;
}

namespace Microsoft.Graph.Security.SecureScores
{
    [Proxy(typeof(SecureScoresRequestBuilder), true)]
    public partial interface ISecureScoresRequestBuilder;
}

namespace Microsoft.Graph.Security.SecureScores.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.SecureScores.Item
{
    [Proxy(typeof(SecureScoreItemRequestBuilder), true)]
    public partial interface ISecureScoreItemRequestBuilder;
}

namespace Microsoft.Graph.Security.SubjectRightsRequests
{
    [Proxy(typeof(SubjectRightsRequestsRequestBuilder), true)]
    public partial interface ISubjectRightsRequestsRequestBuilder;
}

namespace Microsoft.Graph.Security.SubjectRightsRequests.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.SubjectRightsRequests.Item
{
    [Proxy(typeof(SubjectRightsRequestItemRequestBuilder), true)]
    public partial interface ISubjectRightsRequestItemRequestBuilder;
}

namespace Microsoft.Graph.Security.SubjectRightsRequests.Item.Approvers
{
    [Proxy(typeof(ApproversRequestBuilder), true)]
    public partial interface IApproversRequestBuilder;
}

namespace Microsoft.Graph.Security.SubjectRightsRequests.Item.Approvers.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.SubjectRightsRequests.Item.Approvers.Item
{
    [Proxy(typeof(UserItemRequestBuilder), true)]
    public partial interface IUserItemRequestBuilder;
}

namespace Microsoft.Graph.Security.SubjectRightsRequests.Item.Approvers.Item.MailboxSettings
{
    [Proxy(typeof(MailboxSettingsRequestBuilder), true)]
    public partial interface IMailboxSettingsRequestBuilder;
}

namespace Microsoft.Graph.Security.SubjectRightsRequests.Item.Approvers.Item.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.Security.SubjectRightsRequests.Item.Approvers.Item.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.SubjectRightsRequests.Item.ApproversWithUserPrincipalName
{
    [Proxy(typeof(ApproversWithUserPrincipalNameRequestBuilder), true)]
    public partial interface IApproversWithUserPrincipalNameRequestBuilder;
}

namespace Microsoft.Graph.Security.SubjectRightsRequests.Item.Collaborators
{
    [Proxy(typeof(CollaboratorsRequestBuilder), true)]
    public partial interface ICollaboratorsRequestBuilder;
}

namespace Microsoft.Graph.Security.SubjectRightsRequests.Item.Collaborators.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.SubjectRightsRequests.Item.Collaborators.Item
{
    [Proxy(typeof(UserItemRequestBuilder), true)]
    public partial interface IUserItemRequestBuilder;
}

namespace Microsoft.Graph.Security.SubjectRightsRequests.Item.Collaborators.Item.MailboxSettings
{
    [Proxy(typeof(MailboxSettingsRequestBuilder), true)]
    public partial interface IMailboxSettingsRequestBuilder;
}

namespace Microsoft.Graph.Security.SubjectRightsRequests.Item.Collaborators.Item.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.Security.SubjectRightsRequests.Item.Collaborators.Item.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.SubjectRightsRequests.Item.CollaboratorsWithUserPrincipalName
{
    [Proxy(typeof(CollaboratorsWithUserPrincipalNameRequestBuilder), true)]
    public partial interface ICollaboratorsWithUserPrincipalNameRequestBuilder;
}

namespace Microsoft.Graph.Security.SubjectRightsRequests.Item.GetFinalAttachment
{
    [Proxy(typeof(GetFinalAttachmentRequestBuilder), true)]
    public partial interface IGetFinalAttachmentRequestBuilder;
}

namespace Microsoft.Graph.Security.SubjectRightsRequests.Item.GetFinalReport
{
    [Proxy(typeof(GetFinalReportRequestBuilder), true)]
    public partial interface IGetFinalReportRequestBuilder;
}

namespace Microsoft.Graph.Security.SubjectRightsRequests.Item.Notes
{
    [Proxy(typeof(NotesRequestBuilder), true)]
    public partial interface INotesRequestBuilder;
}

namespace Microsoft.Graph.Security.SubjectRightsRequests.Item.Notes.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.SubjectRightsRequests.Item.Notes.Item
{
    [Proxy(typeof(AuthoredNoteItemRequestBuilder), true)]
    public partial interface IAuthoredNoteItemRequestBuilder;
}

namespace Microsoft.Graph.Security.SubjectRightsRequests.Item.Team
{
    [Proxy(typeof(TeamRequestBuilder), true)]
    public partial interface ITeamRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence
{
    [Proxy(typeof(ThreatIntelligenceRequestBuilder), true)]
    public partial interface IThreatIntelligenceRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.ArticleIndicators
{
    [Proxy(typeof(ArticleIndicatorsRequestBuilder), true)]
    public partial interface IArticleIndicatorsRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.ArticleIndicators.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.ArticleIndicators.Item
{
    [Proxy(typeof(ArticleIndicatorItemRequestBuilder), true)]
    public partial interface IArticleIndicatorItemRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.ArticleIndicators.Item.Artifact
{
    [Proxy(typeof(ArtifactRequestBuilder), true)]
    public partial interface IArtifactRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.Articles
{
    [Proxy(typeof(ArticlesRequestBuilder), true)]
    public partial interface IArticlesRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.Articles.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.Articles.Item
{
    [Proxy(typeof(ArticleItemRequestBuilder), true)]
    public partial interface IArticleItemRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.Articles.Item.Indicators
{
    [Proxy(typeof(IndicatorsRequestBuilder), true)]
    public partial interface IIndicatorsRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.Articles.Item.Indicators.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.Articles.Item.Indicators.Item
{
    [Proxy(typeof(ArticleIndicatorItemRequestBuilder), true)]
    public partial interface IArticleIndicatorItemRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.HostComponents
{
    [Proxy(typeof(HostComponentsRequestBuilder), true)]
    public partial interface IHostComponentsRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.HostComponents.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.HostComponents.Item
{
    [Proxy(typeof(HostComponentItemRequestBuilder), true)]
    public partial interface IHostComponentItemRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.HostComponents.Item.Host
{
    [Proxy(typeof(HostRequestBuilder), true)]
    public partial interface IHostRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.HostCookies
{
    [Proxy(typeof(HostCookiesRequestBuilder), true)]
    public partial interface IHostCookiesRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.HostCookies.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.HostCookies.Item
{
    [Proxy(typeof(HostCookieItemRequestBuilder), true)]
    public partial interface IHostCookieItemRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.HostCookies.Item.Host
{
    [Proxy(typeof(HostRequestBuilder), true)]
    public partial interface IHostRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.HostPairs
{
    [Proxy(typeof(HostPairsRequestBuilder), true)]
    public partial interface IHostPairsRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.HostPairs.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.HostPairs.Item
{
    [Proxy(typeof(HostPairItemRequestBuilder), true)]
    public partial interface IHostPairItemRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.HostPairs.Item.ChildHost
{
    [Proxy(typeof(ChildHostRequestBuilder), true)]
    public partial interface IChildHostRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.HostPairs.Item.ParentHost
{
    [Proxy(typeof(ParentHostRequestBuilder), true)]
    public partial interface IParentHostRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.HostPorts
{
    [Proxy(typeof(HostPortsRequestBuilder), true)]
    public partial interface IHostPortsRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.HostPorts.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.HostPorts.Item
{
    [Proxy(typeof(HostPortItemRequestBuilder), true)]
    public partial interface IHostPortItemRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.HostPorts.Item.Host
{
    [Proxy(typeof(HostRequestBuilder), true)]
    public partial interface IHostRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.HostPorts.Item.MostRecentSslCertificate
{
    [Proxy(typeof(MostRecentSslCertificateRequestBuilder), true)]
    public partial interface IMostRecentSslCertificateRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.Hosts
{
    [Proxy(typeof(HostsRequestBuilder), true)]
    public partial interface IHostsRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.Hosts.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.Hosts.Item
{
    [Proxy(typeof(HostItemRequestBuilder), true)]
    public partial interface IHostItemRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.Hosts.Item.ChildHostPairs
{
    [Proxy(typeof(ChildHostPairsRequestBuilder), true)]
    public partial interface IChildHostPairsRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.Hosts.Item.ChildHostPairs.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.Hosts.Item.ChildHostPairs.Item
{
    [Proxy(typeof(HostPairItemRequestBuilder), true)]
    public partial interface IHostPairItemRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.Hosts.Item.Components
{
    [Proxy(typeof(ComponentsRequestBuilder), true)]
    public partial interface IComponentsRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.Hosts.Item.Components.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.Hosts.Item.Components.Item
{
    [Proxy(typeof(HostComponentItemRequestBuilder), true)]
    public partial interface IHostComponentItemRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.Hosts.Item.Cookies
{
    [Proxy(typeof(CookiesRequestBuilder), true)]
    public partial interface ICookiesRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.Hosts.Item.Cookies.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.Hosts.Item.Cookies.Item
{
    [Proxy(typeof(HostCookieItemRequestBuilder), true)]
    public partial interface IHostCookieItemRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.Hosts.Item.HostPairs
{
    [Proxy(typeof(HostPairsRequestBuilder), true)]
    public partial interface IHostPairsRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.Hosts.Item.HostPairs.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.Hosts.Item.HostPairs.Item
{
    [Proxy(typeof(HostPairItemRequestBuilder), true)]
    public partial interface IHostPairItemRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.Hosts.Item.ParentHostPairs
{
    [Proxy(typeof(ParentHostPairsRequestBuilder), true)]
    public partial interface IParentHostPairsRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.Hosts.Item.ParentHostPairs.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.Hosts.Item.ParentHostPairs.Item
{
    [Proxy(typeof(HostPairItemRequestBuilder), true)]
    public partial interface IHostPairItemRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.Hosts.Item.PassiveDns
{
    [Proxy(typeof(PassiveDnsRequestBuilder), true)]
    public partial interface IPassiveDnsRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.Hosts.Item.PassiveDns.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.Hosts.Item.PassiveDns.Item
{
    [Proxy(typeof(PassiveDnsRecordItemRequestBuilder), true)]
    public partial interface IPassiveDnsRecordItemRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.Hosts.Item.PassiveDnsReverse
{
    [Proxy(typeof(PassiveDnsReverseRequestBuilder), true)]
    public partial interface IPassiveDnsReverseRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.Hosts.Item.PassiveDnsReverse.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.Hosts.Item.PassiveDnsReverse.Item
{
    [Proxy(typeof(PassiveDnsRecordItemRequestBuilder), true)]
    public partial interface IPassiveDnsRecordItemRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.Hosts.Item.Ports
{
    [Proxy(typeof(PortsRequestBuilder), true)]
    public partial interface IPortsRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.Hosts.Item.Ports.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.Hosts.Item.Ports.Item
{
    [Proxy(typeof(HostPortItemRequestBuilder), true)]
    public partial interface IHostPortItemRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.Hosts.Item.Reputation
{
    [Proxy(typeof(ReputationRequestBuilder), true)]
    public partial interface IReputationRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.Hosts.Item.SslCertificates
{
    [Proxy(typeof(SslCertificatesRequestBuilder), true)]
    public partial interface ISslCertificatesRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.Hosts.Item.SslCertificates.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.Hosts.Item.SslCertificates.Item
{
    [Proxy(typeof(HostSslCertificateItemRequestBuilder), true)]
    public partial interface IHostSslCertificateItemRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.Hosts.Item.Subdomains
{
    [Proxy(typeof(SubdomainsRequestBuilder), true)]
    public partial interface ISubdomainsRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.Hosts.Item.Subdomains.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.Hosts.Item.Subdomains.Item
{
    [Proxy(typeof(SubdomainItemRequestBuilder), true)]
    public partial interface ISubdomainItemRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.Hosts.Item.Trackers
{
    [Proxy(typeof(TrackersRequestBuilder), true)]
    public partial interface ITrackersRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.Hosts.Item.Trackers.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.Hosts.Item.Trackers.Item
{
    [Proxy(typeof(HostTrackerItemRequestBuilder), true)]
    public partial interface IHostTrackerItemRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.Hosts.Item.Whois
{
    [Proxy(typeof(WhoisRequestBuilder), true)]
    public partial interface IWhoisRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.HostSslCertificates
{
    [Proxy(typeof(HostSslCertificatesRequestBuilder), true)]
    public partial interface IHostSslCertificatesRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.HostSslCertificates.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.HostSslCertificates.Item
{
    [Proxy(typeof(HostSslCertificateItemRequestBuilder), true)]
    public partial interface IHostSslCertificateItemRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.HostSslCertificates.Item.Host
{
    [Proxy(typeof(HostRequestBuilder), true)]
    public partial interface IHostRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.HostSslCertificates.Item.SslCertificate
{
    [Proxy(typeof(SslCertificateRequestBuilder), true)]
    public partial interface ISslCertificateRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.HostTrackers
{
    [Proxy(typeof(HostTrackersRequestBuilder), true)]
    public partial interface IHostTrackersRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.HostTrackers.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.HostTrackers.Item
{
    [Proxy(typeof(HostTrackerItemRequestBuilder), true)]
    public partial interface IHostTrackerItemRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.HostTrackers.Item.Host
{
    [Proxy(typeof(HostRequestBuilder), true)]
    public partial interface IHostRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.IntelligenceProfileIndicators
{
    [Proxy(typeof(IntelligenceProfileIndicatorsRequestBuilder), true)]
    public partial interface IIntelligenceProfileIndicatorsRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.IntelligenceProfileIndicators.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.IntelligenceProfileIndicators.Item
{
    [Proxy(typeof(IntelligenceProfileIndicatorItemRequestBuilder), true)]
    public partial interface IIntelligenceProfileIndicatorItemRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.IntelligenceProfileIndicators.Item.Artifact
{
    [Proxy(typeof(ArtifactRequestBuilder), true)]
    public partial interface IArtifactRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.IntelProfiles
{
    [Proxy(typeof(IntelProfilesRequestBuilder), true)]
    public partial interface IIntelProfilesRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.IntelProfiles.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.IntelProfiles.Item
{
    [Proxy(typeof(IntelligenceProfileItemRequestBuilder), true)]
    public partial interface IIntelligenceProfileItemRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.IntelProfiles.Item.Indicators
{
    [Proxy(typeof(IndicatorsRequestBuilder), true)]
    public partial interface IIndicatorsRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.IntelProfiles.Item.Indicators.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.IntelProfiles.Item.Indicators.Item
{
    [Proxy(typeof(IntelligenceProfileIndicatorItemRequestBuilder), true)]
    public partial interface IIntelligenceProfileIndicatorItemRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.PassiveDnsRecords
{
    [Proxy(typeof(PassiveDnsRecordsRequestBuilder), true)]
    public partial interface IPassiveDnsRecordsRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.PassiveDnsRecords.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.PassiveDnsRecords.Item
{
    [Proxy(typeof(PassiveDnsRecordItemRequestBuilder), true)]
    public partial interface IPassiveDnsRecordItemRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.PassiveDnsRecords.Item.Artifact
{
    [Proxy(typeof(ArtifactRequestBuilder), true)]
    public partial interface IArtifactRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.PassiveDnsRecords.Item.ParentHost
{
    [Proxy(typeof(ParentHostRequestBuilder), true)]
    public partial interface IParentHostRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.SslCertificates
{
    [Proxy(typeof(SslCertificatesRequestBuilder), true)]
    public partial interface ISslCertificatesRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.SslCertificates.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.SslCertificates.Item
{
    [Proxy(typeof(SslCertificateItemRequestBuilder), true)]
    public partial interface ISslCertificateItemRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.SslCertificates.Item.RelatedHosts
{
    [Proxy(typeof(RelatedHostsRequestBuilder), true)]
    public partial interface IRelatedHostsRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.SslCertificates.Item.RelatedHosts.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.SslCertificates.Item.RelatedHosts.Item
{
    [Proxy(typeof(HostItemRequestBuilder), true)]
    public partial interface IHostItemRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.Subdomains
{
    [Proxy(typeof(SubdomainsRequestBuilder), true)]
    public partial interface ISubdomainsRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.Subdomains.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.Subdomains.Item
{
    [Proxy(typeof(SubdomainItemRequestBuilder), true)]
    public partial interface ISubdomainItemRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.Subdomains.Item.Host
{
    [Proxy(typeof(HostRequestBuilder), true)]
    public partial interface IHostRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.Vulnerabilities
{
    [Proxy(typeof(VulnerabilitiesRequestBuilder), true)]
    public partial interface IVulnerabilitiesRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.Vulnerabilities.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.Vulnerabilities.Item
{
    [Proxy(typeof(VulnerabilityItemRequestBuilder), true)]
    public partial interface IVulnerabilityItemRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.Vulnerabilities.Item.Articles
{
    [Proxy(typeof(ArticlesRequestBuilder), true)]
    public partial interface IArticlesRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.Vulnerabilities.Item.Articles.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.Vulnerabilities.Item.Articles.Item
{
    [Proxy(typeof(ArticleItemRequestBuilder), true)]
    public partial interface IArticleItemRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.Vulnerabilities.Item.Components
{
    [Proxy(typeof(ComponentsRequestBuilder), true)]
    public partial interface IComponentsRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.Vulnerabilities.Item.Components.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.Vulnerabilities.Item.Components.Item
{
    [Proxy(typeof(VulnerabilityComponentItemRequestBuilder), true)]
    public partial interface IVulnerabilityComponentItemRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.WhoisHistoryRecords
{
    [Proxy(typeof(WhoisHistoryRecordsRequestBuilder), true)]
    public partial interface IWhoisHistoryRecordsRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.WhoisHistoryRecords.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.WhoisHistoryRecords.Item
{
    [Proxy(typeof(WhoisHistoryRecordItemRequestBuilder), true)]
    public partial interface IWhoisHistoryRecordItemRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.WhoisHistoryRecords.Item.Host
{
    [Proxy(typeof(HostRequestBuilder), true)]
    public partial interface IHostRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.WhoisRecords
{
    [Proxy(typeof(WhoisRecordsRequestBuilder), true)]
    public partial interface IWhoisRecordsRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.WhoisRecords.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.WhoisRecords.Item
{
    [Proxy(typeof(WhoisRecordItemRequestBuilder), true)]
    public partial interface IWhoisRecordItemRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.WhoisRecords.Item.History
{
    [Proxy(typeof(HistoryRequestBuilder), true)]
    public partial interface IHistoryRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.WhoisRecords.Item.History.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.WhoisRecords.Item.History.Item
{
    [Proxy(typeof(WhoisHistoryRecordItemRequestBuilder), true)]
    public partial interface IWhoisHistoryRecordItemRequestBuilder;
}

namespace Microsoft.Graph.Security.ThreatIntelligence.WhoisRecords.Item.Host
{
    [Proxy(typeof(HostRequestBuilder), true)]
    public partial interface IHostRequestBuilder;
}

namespace Microsoft.Graph.Security.Triggers
{
    [Proxy(typeof(TriggersRequestBuilder), true)]
    public partial interface ITriggersRequestBuilder;
}

namespace Microsoft.Graph.Security.Triggers.RetentionEvents
{
    [Proxy(typeof(RetentionEventsRequestBuilder), true)]
    public partial interface IRetentionEventsRequestBuilder;
}

namespace Microsoft.Graph.Security.Triggers.RetentionEvents.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.Triggers.RetentionEvents.Item
{
    [Proxy(typeof(RetentionEventItemRequestBuilder), true)]
    public partial interface IRetentionEventItemRequestBuilder;
}

namespace Microsoft.Graph.Security.Triggers.RetentionEvents.Item.RetentionEventType
{
    [Proxy(typeof(RetentionEventTypeRequestBuilder), true)]
    public partial interface IRetentionEventTypeRequestBuilder;
}

namespace Microsoft.Graph.Security.TriggerTypes
{
    [Proxy(typeof(TriggerTypesRequestBuilder), true)]
    public partial interface ITriggerTypesRequestBuilder;
}

namespace Microsoft.Graph.Security.TriggerTypes.RetentionEventTypes
{
    [Proxy(typeof(RetentionEventTypesRequestBuilder), true)]
    public partial interface IRetentionEventTypesRequestBuilder;
}

namespace Microsoft.Graph.Security.TriggerTypes.RetentionEventTypes.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Security.TriggerTypes.RetentionEventTypes.Item
{
    [Proxy(typeof(RetentionEventTypeItemRequestBuilder), true)]
    public partial interface IRetentionEventTypeItemRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals
{
    [Proxy(typeof(ServicePrincipalsRequestBuilder), true)]
    public partial interface IServicePrincipalsRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.GetAvailableExtensionProperties
{
    [Proxy(typeof(GetAvailableExtensionPropertiesRequestBuilder), true)]
    public partial interface IGetAvailableExtensionPropertiesRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.GetByIds
{
    [Proxy(typeof(GetByIdsRequestBuilder), true)]
    public partial interface IGetByIdsRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item
{
    [Proxy(typeof(ServicePrincipalItemRequestBuilder), true)]
    public partial interface IServicePrincipalItemRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.AddKey
{
    [Proxy(typeof(AddKeyRequestBuilder), true)]
    public partial interface IAddKeyRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.AddPassword
{
    [Proxy(typeof(AddPasswordRequestBuilder), true)]
    public partial interface IAddPasswordRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.AddTokenSigningCertificate
{
    [Proxy(typeof(AddTokenSigningCertificateRequestBuilder), true)]
    public partial interface IAddTokenSigningCertificateRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.AppManagementPolicies
{
    [Proxy(typeof(AppManagementPoliciesRequestBuilder), true)]
    public partial interface IAppManagementPoliciesRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.AppManagementPolicies.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.AppManagementPolicies.Item
{
    [Proxy(typeof(AppManagementPolicyItemRequestBuilder), true)]
    public partial interface IAppManagementPolicyItemRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.AppRoleAssignedTo
{
    [Proxy(typeof(AppRoleAssignedToRequestBuilder), true)]
    public partial interface IAppRoleAssignedToRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.AppRoleAssignedTo.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.AppRoleAssignedTo.Item
{
    [Proxy(typeof(AppRoleAssignmentItemRequestBuilder), true)]
    public partial interface IAppRoleAssignmentItemRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.AppRoleAssignments
{
    [Proxy(typeof(AppRoleAssignmentsRequestBuilder), true)]
    public partial interface IAppRoleAssignmentsRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.AppRoleAssignments.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.AppRoleAssignments.Item
{
    [Proxy(typeof(AppRoleAssignmentItemRequestBuilder), true)]
    public partial interface IAppRoleAssignmentItemRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.CheckMemberGroups
{
    [Proxy(typeof(CheckMemberGroupsRequestBuilder), true)]
    public partial interface ICheckMemberGroupsRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.CheckMemberObjects
{
    [Proxy(typeof(CheckMemberObjectsRequestBuilder), true)]
    public partial interface ICheckMemberObjectsRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.ClaimsMappingPolicies
{
    [Proxy(typeof(ClaimsMappingPoliciesRequestBuilder), true)]
    public partial interface IClaimsMappingPoliciesRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.ClaimsMappingPolicies.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.ClaimsMappingPolicies.Item
{
    [Proxy(typeof(ClaimsMappingPolicyItemRequestBuilder), true)]
    public partial interface IClaimsMappingPolicyItemRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.ClaimsMappingPolicies.Item.Ref
{
    [Proxy(typeof(RefRequestBuilder), true)]
    public partial interface IRefRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.ClaimsMappingPolicies.Ref
{
    [Proxy(typeof(RefRequestBuilder), true)]
    public partial interface IRefRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.CreatedObjects
{
    [Proxy(typeof(CreatedObjectsRequestBuilder), true)]
    public partial interface ICreatedObjectsRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.CreatedObjects.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.CreatedObjects.GraphServicePrincipal
{
    [Proxy(typeof(GraphServicePrincipalRequestBuilder), true)]
    public partial interface IGraphServicePrincipalRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.CreatedObjects.GraphServicePrincipal.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.CreatedObjects.Item
{
    [Proxy(typeof(DirectoryObjectItemRequestBuilder), true)]
    public partial interface IDirectoryObjectItemRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.CreatedObjects.Item.GraphServicePrincipal
{
    [Proxy(typeof(GraphServicePrincipalRequestBuilder), true)]
    public partial interface IGraphServicePrincipalRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.DelegatedPermissionClassifications
{
    [Proxy(typeof(DelegatedPermissionClassificationsRequestBuilder), true)]
    public partial interface IDelegatedPermissionClassificationsRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.DelegatedPermissionClassifications.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.DelegatedPermissionClassifications.Item
{
    [Proxy(typeof(DelegatedPermissionClassificationItemRequestBuilder), true)]
    public partial interface IDelegatedPermissionClassificationItemRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.Endpoints
{
    [Proxy(typeof(EndpointsRequestBuilder), true)]
    public partial interface IEndpointsRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.Endpoints.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.Endpoints.Item
{
    [Proxy(typeof(EndpointItemRequestBuilder), true)]
    public partial interface IEndpointItemRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.FederatedIdentityCredentials
{
    [Proxy(typeof(FederatedIdentityCredentialsRequestBuilder), true)]
    public partial interface IFederatedIdentityCredentialsRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.FederatedIdentityCredentials.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.FederatedIdentityCredentials.Item
{
    [Proxy(typeof(FederatedIdentityCredentialItemRequestBuilder), true)]
    public partial interface IFederatedIdentityCredentialItemRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.FederatedIdentityCredentialsWithName
{
    [Proxy(typeof(FederatedIdentityCredentialsWithNameRequestBuilder), true)]
    public partial interface IFederatedIdentityCredentialsWithNameRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.GetMemberGroups
{
    [Proxy(typeof(GetMemberGroupsRequestBuilder), true)]
    public partial interface IGetMemberGroupsRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.GetMemberObjects
{
    [Proxy(typeof(GetMemberObjectsRequestBuilder), true)]
    public partial interface IGetMemberObjectsRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.HomeRealmDiscoveryPolicies
{
    [Proxy(typeof(HomeRealmDiscoveryPoliciesRequestBuilder), true)]
    public partial interface IHomeRealmDiscoveryPoliciesRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.HomeRealmDiscoveryPolicies.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.HomeRealmDiscoveryPolicies.Item
{
    [Proxy(typeof(HomeRealmDiscoveryPolicyItemRequestBuilder), true)]
    public partial interface IHomeRealmDiscoveryPolicyItemRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.HomeRealmDiscoveryPolicies.Item.Ref
{
    [Proxy(typeof(RefRequestBuilder), true)]
    public partial interface IRefRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.HomeRealmDiscoveryPolicies.Ref
{
    [Proxy(typeof(RefRequestBuilder), true)]
    public partial interface IRefRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.MemberOf
{
    [Proxy(typeof(MemberOfRequestBuilder), true)]
    public partial interface IMemberOfRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.MemberOf.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.MemberOf.GraphAdministrativeUnit
{
    [Proxy(typeof(GraphAdministrativeUnitRequestBuilder), true)]
    public partial interface IGraphAdministrativeUnitRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.MemberOf.GraphAdministrativeUnit.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.MemberOf.GraphDirectoryRole
{
    [Proxy(typeof(GraphDirectoryRoleRequestBuilder), true)]
    public partial interface IGraphDirectoryRoleRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.MemberOf.GraphDirectoryRole.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.MemberOf.GraphGroup
{
    [Proxy(typeof(GraphGroupRequestBuilder), true)]
    public partial interface IGraphGroupRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.MemberOf.GraphGroup.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.MemberOf.Item
{
    [Proxy(typeof(DirectoryObjectItemRequestBuilder), true)]
    public partial interface IDirectoryObjectItemRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.MemberOf.Item.GraphAdministrativeUnit
{
    [Proxy(typeof(GraphAdministrativeUnitRequestBuilder), true)]
    public partial interface IGraphAdministrativeUnitRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.MemberOf.Item.GraphDirectoryRole
{
    [Proxy(typeof(GraphDirectoryRoleRequestBuilder), true)]
    public partial interface IGraphDirectoryRoleRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.MemberOf.Item.GraphGroup
{
    [Proxy(typeof(GraphGroupRequestBuilder), true)]
    public partial interface IGraphGroupRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.Oauth2PermissionGrants
{
    [Proxy(typeof(Oauth2PermissionGrantsRequestBuilder), true)]
    public partial interface IOauth2PermissionGrantsRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.Oauth2PermissionGrants.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.Oauth2PermissionGrants.Item
{
    [Proxy(typeof(OAuth2PermissionGrantItemRequestBuilder), true)]
    public partial interface IOAuth2PermissionGrantItemRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.OwnedObjects
{
    [Proxy(typeof(OwnedObjectsRequestBuilder), true)]
    public partial interface IOwnedObjectsRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.OwnedObjects.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.OwnedObjects.GraphApplication
{
    [Proxy(typeof(GraphApplicationRequestBuilder), true)]
    public partial interface IGraphApplicationRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.OwnedObjects.GraphApplication.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.OwnedObjects.GraphAppRoleAssignment
{
    [Proxy(typeof(GraphAppRoleAssignmentRequestBuilder), true)]
    public partial interface IGraphAppRoleAssignmentRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.OwnedObjects.GraphAppRoleAssignment.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.OwnedObjects.GraphEndpoint
{
    [Proxy(typeof(GraphEndpointRequestBuilder), true)]
    public partial interface IGraphEndpointRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.OwnedObjects.GraphEndpoint.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.OwnedObjects.GraphGroup
{
    [Proxy(typeof(GraphGroupRequestBuilder), true)]
    public partial interface IGraphGroupRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.OwnedObjects.GraphGroup.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.OwnedObjects.GraphServicePrincipal
{
    [Proxy(typeof(GraphServicePrincipalRequestBuilder), true)]
    public partial interface IGraphServicePrincipalRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.OwnedObjects.GraphServicePrincipal.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.OwnedObjects.Item
{
    [Proxy(typeof(DirectoryObjectItemRequestBuilder), true)]
    public partial interface IDirectoryObjectItemRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.OwnedObjects.Item.GraphApplication
{
    [Proxy(typeof(GraphApplicationRequestBuilder), true)]
    public partial interface IGraphApplicationRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.OwnedObjects.Item.GraphAppRoleAssignment
{
    [Proxy(typeof(GraphAppRoleAssignmentRequestBuilder), true)]
    public partial interface IGraphAppRoleAssignmentRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.OwnedObjects.Item.GraphEndpoint
{
    [Proxy(typeof(GraphEndpointRequestBuilder), true)]
    public partial interface IGraphEndpointRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.OwnedObjects.Item.GraphGroup
{
    [Proxy(typeof(GraphGroupRequestBuilder), true)]
    public partial interface IGraphGroupRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.OwnedObjects.Item.GraphServicePrincipal
{
    [Proxy(typeof(GraphServicePrincipalRequestBuilder), true)]
    public partial interface IGraphServicePrincipalRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.Owners
{
    [Proxy(typeof(OwnersRequestBuilder), true)]
    public partial interface IOwnersRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.Owners.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.Owners.GraphAppRoleAssignment
{
    [Proxy(typeof(GraphAppRoleAssignmentRequestBuilder), true)]
    public partial interface IGraphAppRoleAssignmentRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.Owners.GraphAppRoleAssignment.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.Owners.GraphEndpoint
{
    [Proxy(typeof(GraphEndpointRequestBuilder), true)]
    public partial interface IGraphEndpointRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.Owners.GraphEndpoint.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.Owners.GraphServicePrincipal
{
    [Proxy(typeof(GraphServicePrincipalRequestBuilder), true)]
    public partial interface IGraphServicePrincipalRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.Owners.GraphServicePrincipal.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.Owners.GraphUser
{
    [Proxy(typeof(GraphUserRequestBuilder), true)]
    public partial interface IGraphUserRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.Owners.GraphUser.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.Owners.Item
{
    [Proxy(typeof(DirectoryObjectItemRequestBuilder), true)]
    public partial interface IDirectoryObjectItemRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.Owners.Item.GraphAppRoleAssignment
{
    [Proxy(typeof(GraphAppRoleAssignmentRequestBuilder), true)]
    public partial interface IGraphAppRoleAssignmentRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.Owners.Item.GraphEndpoint
{
    [Proxy(typeof(GraphEndpointRequestBuilder), true)]
    public partial interface IGraphEndpointRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.Owners.Item.GraphServicePrincipal
{
    [Proxy(typeof(GraphServicePrincipalRequestBuilder), true)]
    public partial interface IGraphServicePrincipalRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.Owners.Item.GraphUser
{
    [Proxy(typeof(GraphUserRequestBuilder), true)]
    public partial interface IGraphUserRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.Owners.Item.Ref
{
    [Proxy(typeof(RefRequestBuilder), true)]
    public partial interface IRefRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.Owners.Ref
{
    [Proxy(typeof(RefRequestBuilder), true)]
    public partial interface IRefRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.RemoteDesktopSecurityConfiguration
{
    [Proxy(typeof(RemoteDesktopSecurityConfigurationRequestBuilder), true)]
    public partial interface IRemoteDesktopSecurityConfigurationRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.RemoteDesktopSecurityConfiguration.TargetDeviceGroups
{
    [Proxy(typeof(TargetDeviceGroupsRequestBuilder), true)]
    public partial interface ITargetDeviceGroupsRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.RemoteDesktopSecurityConfiguration.TargetDeviceGroups.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.RemoteDesktopSecurityConfiguration.TargetDeviceGroups.Item
{
    [Proxy(typeof(TargetDeviceGroupItemRequestBuilder), true)]
    public partial interface ITargetDeviceGroupItemRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.RemoveKey
{
    [Proxy(typeof(RemoveKeyRequestBuilder), true)]
    public partial interface IRemoveKeyRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.RemovePassword
{
    [Proxy(typeof(RemovePasswordRequestBuilder), true)]
    public partial interface IRemovePasswordRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.Restore
{
    [Proxy(typeof(RestoreRequestBuilder), true)]
    public partial interface IRestoreRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.Synchronization
{
    [Proxy(typeof(SynchronizationRequestBuilder), true)]
    public partial interface ISynchronizationRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.Synchronization.AcquireAccessToken
{
    [Proxy(typeof(AcquireAccessTokenRequestBuilder), true)]
    public partial interface IAcquireAccessTokenRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.Synchronization.Jobs
{
    [Proxy(typeof(JobsRequestBuilder), true)]
    public partial interface IJobsRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.Synchronization.Jobs.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.Synchronization.Jobs.Item
{
    [Proxy(typeof(SynchronizationJobItemRequestBuilder), true)]
    public partial interface ISynchronizationJobItemRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.Synchronization.Jobs.Item.BulkUpload
{
    [Proxy(typeof(BulkUploadRequestBuilder), true)]
    public partial interface IBulkUploadRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.Synchronization.Jobs.Item.BulkUpload.Value
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.Synchronization.Jobs.Item.Pause
{
    [Proxy(typeof(PauseRequestBuilder), true)]
    public partial interface IPauseRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.Synchronization.Jobs.Item.ProvisionOnDemand
{
    [Proxy(typeof(ProvisionOnDemandRequestBuilder), true)]
    public partial interface IProvisionOnDemandRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.Synchronization.Jobs.Item.Restart
{
    [Proxy(typeof(RestartRequestBuilder), true)]
    public partial interface IRestartRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.Synchronization.Jobs.Item.Schema
{
    [Proxy(typeof(SchemaRequestBuilder), true)]
    public partial interface ISchemaRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.Synchronization.Jobs.Item.Schema.Directories
{
    [Proxy(typeof(DirectoriesRequestBuilder), true)]
    public partial interface IDirectoriesRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.Synchronization.Jobs.Item.Schema.Directories.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.Synchronization.Jobs.Item.Schema.Directories.Item
{
    [Proxy(typeof(DirectoryDefinitionItemRequestBuilder), true)]
    public partial interface IDirectoryDefinitionItemRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.Synchronization.Jobs.Item.Schema.Directories.Item.Discover
{
    [Proxy(typeof(DiscoverRequestBuilder), true)]
    public partial interface IDiscoverRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.Synchronization.Jobs.Item.Schema.FilterOperators
{
    [Proxy(typeof(FilterOperatorsRequestBuilder), true)]
    public partial interface IFilterOperatorsRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.Synchronization.Jobs.Item.Schema.Functions
{
    [Proxy(typeof(FunctionsRequestBuilder), true)]
    public partial interface IFunctionsRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.Synchronization.Jobs.Item.Schema.ParseExpression
{
    [Proxy(typeof(ParseExpressionRequestBuilder), true)]
    public partial interface IParseExpressionRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.Synchronization.Jobs.Item.Start
{
    [Proxy(typeof(StartRequestBuilder), true)]
    public partial interface IStartRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.Synchronization.Jobs.Item.ValidateCredentials
{
    [Proxy(typeof(ValidateCredentialsRequestBuilder), true)]
    public partial interface IValidateCredentialsRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.Synchronization.Jobs.ValidateCredentials
{
    [Proxy(typeof(ValidateCredentialsRequestBuilder), true)]
    public partial interface IValidateCredentialsRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.Synchronization.Secrets
{
    [Proxy(typeof(SecretsRequestBuilder), true)]
    public partial interface ISecretsRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.Synchronization.Secrets.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.Synchronization.Templates
{
    [Proxy(typeof(TemplatesRequestBuilder), true)]
    public partial interface ITemplatesRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.Synchronization.Templates.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.Synchronization.Templates.Item
{
    [Proxy(typeof(SynchronizationTemplateItemRequestBuilder), true)]
    public partial interface ISynchronizationTemplateItemRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.Synchronization.Templates.Item.Schema
{
    [Proxy(typeof(SchemaRequestBuilder), true)]
    public partial interface ISchemaRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.Synchronization.Templates.Item.Schema.Directories
{
    [Proxy(typeof(DirectoriesRequestBuilder), true)]
    public partial interface IDirectoriesRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.Synchronization.Templates.Item.Schema.Directories.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.Synchronization.Templates.Item.Schema.Directories.Item
{
    [Proxy(typeof(DirectoryDefinitionItemRequestBuilder), true)]
    public partial interface IDirectoryDefinitionItemRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.Synchronization.Templates.Item.Schema.Directories.Item.Discover
{
    [Proxy(typeof(DiscoverRequestBuilder), true)]
    public partial interface IDiscoverRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.Synchronization.Templates.Item.Schema.FilterOperators
{
    [Proxy(typeof(FilterOperatorsRequestBuilder), true)]
    public partial interface IFilterOperatorsRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.Synchronization.Templates.Item.Schema.Functions
{
    [Proxy(typeof(FunctionsRequestBuilder), true)]
    public partial interface IFunctionsRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.Synchronization.Templates.Item.Schema.ParseExpression
{
    [Proxy(typeof(ParseExpressionRequestBuilder), true)]
    public partial interface IParseExpressionRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.TokenIssuancePolicies
{
    [Proxy(typeof(TokenIssuancePoliciesRequestBuilder), true)]
    public partial interface ITokenIssuancePoliciesRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.TokenIssuancePolicies.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.TokenIssuancePolicies.Item
{
    [Proxy(typeof(TokenIssuancePolicyItemRequestBuilder), true)]
    public partial interface ITokenIssuancePolicyItemRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.TokenLifetimePolicies
{
    [Proxy(typeof(TokenLifetimePoliciesRequestBuilder), true)]
    public partial interface ITokenLifetimePoliciesRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.TokenLifetimePolicies.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.TokenLifetimePolicies.Item
{
    [Proxy(typeof(TokenLifetimePolicyItemRequestBuilder), true)]
    public partial interface ITokenLifetimePolicyItemRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.TransitiveMemberOf
{
    [Proxy(typeof(TransitiveMemberOfRequestBuilder), true)]
    public partial interface ITransitiveMemberOfRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.TransitiveMemberOf.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.TransitiveMemberOf.GraphAdministrativeUnit
{
    [Proxy(typeof(GraphAdministrativeUnitRequestBuilder), true)]
    public partial interface IGraphAdministrativeUnitRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.TransitiveMemberOf.GraphAdministrativeUnit.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.TransitiveMemberOf.GraphDirectoryRole
{
    [Proxy(typeof(GraphDirectoryRoleRequestBuilder), true)]
    public partial interface IGraphDirectoryRoleRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.TransitiveMemberOf.GraphDirectoryRole.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.TransitiveMemberOf.GraphGroup
{
    [Proxy(typeof(GraphGroupRequestBuilder), true)]
    public partial interface IGraphGroupRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.TransitiveMemberOf.GraphGroup.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.TransitiveMemberOf.Item
{
    [Proxy(typeof(DirectoryObjectItemRequestBuilder), true)]
    public partial interface IDirectoryObjectItemRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.TransitiveMemberOf.Item.GraphAdministrativeUnit
{
    [Proxy(typeof(GraphAdministrativeUnitRequestBuilder), true)]
    public partial interface IGraphAdministrativeUnitRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.TransitiveMemberOf.Item.GraphDirectoryRole
{
    [Proxy(typeof(GraphDirectoryRoleRequestBuilder), true)]
    public partial interface IGraphDirectoryRoleRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.Item.TransitiveMemberOf.Item.GraphGroup
{
    [Proxy(typeof(GraphGroupRequestBuilder), true)]
    public partial interface IGraphGroupRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipals.ValidateProperties
{
    [Proxy(typeof(ValidatePropertiesRequestBuilder), true)]
    public partial interface IValidatePropertiesRequestBuilder;
}

namespace Microsoft.Graph.ServicePrincipalsWithAppId
{
    [Proxy(typeof(ServicePrincipalsWithAppIdRequestBuilder), true)]
    public partial interface IServicePrincipalsWithAppIdRequestBuilder;
}

namespace Microsoft.Graph.Shares
{
    [Proxy(typeof(SharesRequestBuilder), true)]
    public partial interface ISharesRequestBuilder;
}

namespace Microsoft.Graph.Shares.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item
{
    [Proxy(typeof(SharedDriveItemItemRequestBuilder), true)]
    public partial interface ISharedDriveItemItemRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.CreatedByUser
{
    [Proxy(typeof(CreatedByUserRequestBuilder), true)]
    public partial interface ICreatedByUserRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.CreatedByUser.MailboxSettings
{
    [Proxy(typeof(MailboxSettingsRequestBuilder), true)]
    public partial interface IMailboxSettingsRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.CreatedByUser.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.CreatedByUser.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.DriveItem
{
    [Proxy(typeof(DriveItemRequestBuilder), true)]
    public partial interface IDriveItemRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.DriveItem.Content
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.Items
{
    [Proxy(typeof(ItemsRequestBuilder), true)]
    public partial interface IItemsRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.Items.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.Items.Item
{
    [Proxy(typeof(DriveItemItemRequestBuilder), true)]
    public partial interface IDriveItemItemRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.Items.Item.Content
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.LastModifiedByUser
{
    [Proxy(typeof(LastModifiedByUserRequestBuilder), true)]
    public partial interface ILastModifiedByUserRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.LastModifiedByUser.MailboxSettings
{
    [Proxy(typeof(MailboxSettingsRequestBuilder), true)]
    public partial interface IMailboxSettingsRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.LastModifiedByUser.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.LastModifiedByUser.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.List
{
    [Proxy(typeof(ListRequestBuilder), true)]
    public partial interface IListRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.List.Columns
{
    [Proxy(typeof(ColumnsRequestBuilder), true)]
    public partial interface IColumnsRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.List.Columns.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.List.Columns.Item
{
    [Proxy(typeof(ColumnDefinitionItemRequestBuilder), true)]
    public partial interface IColumnDefinitionItemRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.List.Columns.Item.SourceColumn
{
    [Proxy(typeof(SourceColumnRequestBuilder), true)]
    public partial interface ISourceColumnRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.List.ContentTypes
{
    [Proxy(typeof(ContentTypesRequestBuilder), true)]
    public partial interface IContentTypesRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.List.ContentTypes.AddCopy
{
    [Proxy(typeof(AddCopyRequestBuilder), true)]
    public partial interface IAddCopyRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.List.ContentTypes.AddCopyFromContentTypeHub
{
    [Proxy(typeof(AddCopyFromContentTypeHubRequestBuilder), true)]
    public partial interface IAddCopyFromContentTypeHubRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.List.ContentTypes.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.List.ContentTypes.GetCompatibleHubContentTypes
{
    [Proxy(typeof(GetCompatibleHubContentTypesRequestBuilder), true)]
    public partial interface IGetCompatibleHubContentTypesRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.List.ContentTypes.Item
{
    [Proxy(typeof(ContentTypeItemRequestBuilder), true)]
    public partial interface IContentTypeItemRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.List.ContentTypes.Item.AssociateWithHubSites
{
    [Proxy(typeof(AssociateWithHubSitesRequestBuilder), true)]
    public partial interface IAssociateWithHubSitesRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.List.ContentTypes.Item.BaseTypes
{
    [Proxy(typeof(BaseTypesRequestBuilder), true)]
    public partial interface IBaseTypesRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.List.ContentTypes.Item.BaseTypes.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.List.ContentTypes.Item.BaseTypes.Item
{
    [Proxy(typeof(ContentTypeItemRequestBuilder), true)]
    public partial interface IContentTypeItemRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.List.ContentTypes.Item.ColumnLinks
{
    [Proxy(typeof(ColumnLinksRequestBuilder), true)]
    public partial interface IColumnLinksRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.List.ContentTypes.Item.ColumnLinks.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.List.ContentTypes.Item.ColumnLinks.Item
{
    [Proxy(typeof(ColumnLinkItemRequestBuilder), true)]
    public partial interface IColumnLinkItemRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.List.ContentTypes.Item.ColumnPositions
{
    [Proxy(typeof(ColumnPositionsRequestBuilder), true)]
    public partial interface IColumnPositionsRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.List.ContentTypes.Item.ColumnPositions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.List.ContentTypes.Item.ColumnPositions.Item
{
    [Proxy(typeof(ColumnDefinitionItemRequestBuilder), true)]
    public partial interface IColumnDefinitionItemRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.List.ContentTypes.Item.Columns
{
    [Proxy(typeof(ColumnsRequestBuilder), true)]
    public partial interface IColumnsRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.List.ContentTypes.Item.Columns.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.List.ContentTypes.Item.Columns.Item
{
    [Proxy(typeof(ColumnDefinitionItemRequestBuilder), true)]
    public partial interface IColumnDefinitionItemRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.List.ContentTypes.Item.Columns.Item.SourceColumn
{
    [Proxy(typeof(SourceColumnRequestBuilder), true)]
    public partial interface ISourceColumnRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.List.ContentTypes.Item.CopyToDefaultContentLocation
{
    [Proxy(typeof(CopyToDefaultContentLocationRequestBuilder), true)]
    public partial interface ICopyToDefaultContentLocationRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.List.ContentTypes.Item.IsPublished
{
    [Proxy(typeof(IsPublishedRequestBuilder), true)]
    public partial interface IIsPublishedRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.List.ContentTypes.Item.Publish
{
    [Proxy(typeof(PublishRequestBuilder), true)]
    public partial interface IPublishRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.List.ContentTypes.Item.Unpublish
{
    [Proxy(typeof(UnpublishRequestBuilder), true)]
    public partial interface IUnpublishRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.List.CreatedByUser
{
    [Proxy(typeof(CreatedByUserRequestBuilder), true)]
    public partial interface ICreatedByUserRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.List.CreatedByUser.MailboxSettings
{
    [Proxy(typeof(MailboxSettingsRequestBuilder), true)]
    public partial interface IMailboxSettingsRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.List.CreatedByUser.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.List.CreatedByUser.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.List.Drive
{
    [Proxy(typeof(DriveRequestBuilder), true)]
    public partial interface IDriveRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.List.Items
{
    [Proxy(typeof(ItemsRequestBuilder), true)]
    public partial interface IItemsRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.List.Items.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.List.Items.DeltaWithToken
{
    [Proxy(typeof(DeltaWithTokenRequestBuilder), true)]
    public partial interface IDeltaWithTokenRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.List.Items.Item
{
    [Proxy(typeof(ListItemItemRequestBuilder), true)]
    public partial interface IListItemItemRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.List.Items.Item.Analytics
{
    [Proxy(typeof(AnalyticsRequestBuilder), true)]
    public partial interface IAnalyticsRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.List.Items.Item.CreatedByUser
{
    [Proxy(typeof(CreatedByUserRequestBuilder), true)]
    public partial interface ICreatedByUserRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.List.Items.Item.CreatedByUser.MailboxSettings
{
    [Proxy(typeof(MailboxSettingsRequestBuilder), true)]
    public partial interface IMailboxSettingsRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.List.Items.Item.CreatedByUser.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.List.Items.Item.CreatedByUser.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.List.Items.Item.CreateLink
{
    [Proxy(typeof(CreateLinkRequestBuilder), true)]
    public partial interface ICreateLinkRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.List.Items.Item.DocumentSetVersions
{
    [Proxy(typeof(DocumentSetVersionsRequestBuilder), true)]
    public partial interface IDocumentSetVersionsRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.List.Items.Item.DocumentSetVersions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.List.Items.Item.DocumentSetVersions.Item
{
    [Proxy(typeof(DocumentSetVersionItemRequestBuilder), true)]
    public partial interface IDocumentSetVersionItemRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.List.Items.Item.DocumentSetVersions.Item.Fields
{
    [Proxy(typeof(FieldsRequestBuilder), true)]
    public partial interface IFieldsRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.List.Items.Item.DocumentSetVersions.Item.Restore
{
    [Proxy(typeof(RestoreRequestBuilder), true)]
    public partial interface IRestoreRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.List.Items.Item.DriveItem
{
    [Proxy(typeof(DriveItemRequestBuilder), true)]
    public partial interface IDriveItemRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.List.Items.Item.DriveItem.Content
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.List.Items.Item.Fields
{
    [Proxy(typeof(FieldsRequestBuilder), true)]
    public partial interface IFieldsRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.List.Items.Item.GetActivitiesByInterval
{
    [Proxy(typeof(GetActivitiesByIntervalRequestBuilder), true)]
    public partial interface IGetActivitiesByIntervalRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.List.Items.Item.GetActivitiesByIntervalWithStartDateTimeWithEndDateTimeWithInterval
{
    [Proxy(typeof(GetActivitiesByIntervalWithStartDateTimeWithEndDateTimeWithIntervalRequestBuilder), true)]
    public partial interface IGetActivitiesByIntervalWithStartDateTimeWithEndDateTimeWithIntervalRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.List.Items.Item.LastModifiedByUser
{
    [Proxy(typeof(LastModifiedByUserRequestBuilder), true)]
    public partial interface ILastModifiedByUserRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.List.Items.Item.LastModifiedByUser.MailboxSettings
{
    [Proxy(typeof(MailboxSettingsRequestBuilder), true)]
    public partial interface IMailboxSettingsRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.List.Items.Item.LastModifiedByUser.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.List.Items.Item.LastModifiedByUser.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.List.Items.Item.Versions
{
    [Proxy(typeof(VersionsRequestBuilder), true)]
    public partial interface IVersionsRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.List.Items.Item.Versions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.List.Items.Item.Versions.Item
{
    [Proxy(typeof(ListItemVersionItemRequestBuilder), true)]
    public partial interface IListItemVersionItemRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.List.Items.Item.Versions.Item.Fields
{
    [Proxy(typeof(FieldsRequestBuilder), true)]
    public partial interface IFieldsRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.List.Items.Item.Versions.Item.RestoreVersion
{
    [Proxy(typeof(RestoreVersionRequestBuilder), true)]
    public partial interface IRestoreVersionRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.List.LastModifiedByUser
{
    [Proxy(typeof(LastModifiedByUserRequestBuilder), true)]
    public partial interface ILastModifiedByUserRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.List.LastModifiedByUser.MailboxSettings
{
    [Proxy(typeof(MailboxSettingsRequestBuilder), true)]
    public partial interface IMailboxSettingsRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.List.LastModifiedByUser.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.List.LastModifiedByUser.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.List.Operations
{
    [Proxy(typeof(OperationsRequestBuilder), true)]
    public partial interface IOperationsRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.List.Operations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.List.Operations.Item
{
    [Proxy(typeof(RichLongRunningOperationItemRequestBuilder), true)]
    public partial interface IRichLongRunningOperationItemRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.List.Subscriptions
{
    [Proxy(typeof(SubscriptionsRequestBuilder), true)]
    public partial interface ISubscriptionsRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.List.Subscriptions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.List.Subscriptions.Item
{
    [Proxy(typeof(SubscriptionItemRequestBuilder), true)]
    public partial interface ISubscriptionItemRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.List.Subscriptions.Item.Reauthorize
{
    [Proxy(typeof(ReauthorizeRequestBuilder), true)]
    public partial interface IReauthorizeRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.ListItem
{
    [Proxy(typeof(ListItemRequestBuilder), true)]
    public partial interface IListItemRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.Permission
{
    [Proxy(typeof(PermissionRequestBuilder), true)]
    public partial interface IPermissionRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.Permission.Grant
{
    [Proxy(typeof(GrantRequestBuilder), true)]
    public partial interface IGrantRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.Root
{
    [Proxy(typeof(RootRequestBuilder), true)]
    public partial interface IRootRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.Root.Content
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Shares.Item.Site
{
    [Proxy(typeof(SiteRequestBuilder), true)]
    public partial interface ISiteRequestBuilder;
}

namespace Microsoft.Graph.Sites
{
    [Proxy(typeof(SitesRequestBuilder), true)]
    public partial interface ISitesRequestBuilder;
}

namespace Microsoft.Graph.Sites.Add
{
    [Proxy(typeof(AddRequestBuilder), true)]
    public partial interface IAddRequestBuilder;
}

namespace Microsoft.Graph.Sites.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Sites.GetAllSites
{
    [Proxy(typeof(GetAllSitesRequestBuilder), true)]
    public partial interface IGetAllSitesRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item
{
    [Proxy(typeof(SiteItemRequestBuilder), true)]
    public partial interface ISiteItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Analytics
{
    [Proxy(typeof(AnalyticsRequestBuilder), true)]
    public partial interface IAnalyticsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Analytics.AllTime
{
    [Proxy(typeof(AllTimeRequestBuilder), true)]
    public partial interface IAllTimeRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Analytics.ItemActivityStats
{
    [Proxy(typeof(ItemActivityStatsRequestBuilder), true)]
    public partial interface IItemActivityStatsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Analytics.ItemActivityStats.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Analytics.ItemActivityStats.Item
{
    [Proxy(typeof(ItemActivityStatItemRequestBuilder), true)]
    public partial interface IItemActivityStatItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Analytics.ItemActivityStats.Item.Activities
{
    [Proxy(typeof(ActivitiesRequestBuilder), true)]
    public partial interface IActivitiesRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Analytics.ItemActivityStats.Item.Activities.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Analytics.ItemActivityStats.Item.Activities.Item
{
    [Proxy(typeof(ItemActivityItemRequestBuilder), true)]
    public partial interface IItemActivityItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Analytics.ItemActivityStats.Item.Activities.Item.DriveItem
{
    [Proxy(typeof(DriveItemRequestBuilder), true)]
    public partial interface IDriveItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Analytics.ItemActivityStats.Item.Activities.Item.DriveItem.Content
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Analytics.LastSevenDays
{
    [Proxy(typeof(LastSevenDaysRequestBuilder), true)]
    public partial interface ILastSevenDaysRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Columns
{
    [Proxy(typeof(ColumnsRequestBuilder), true)]
    public partial interface IColumnsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Columns.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Columns.Item
{
    [Proxy(typeof(ColumnDefinitionItemRequestBuilder), true)]
    public partial interface IColumnDefinitionItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Columns.Item.SourceColumn
{
    [Proxy(typeof(SourceColumnRequestBuilder), true)]
    public partial interface ISourceColumnRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.ContentTypes
{
    [Proxy(typeof(ContentTypesRequestBuilder), true)]
    public partial interface IContentTypesRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.ContentTypes.AddCopy
{
    [Proxy(typeof(AddCopyRequestBuilder), true)]
    public partial interface IAddCopyRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.ContentTypes.AddCopyFromContentTypeHub
{
    [Proxy(typeof(AddCopyFromContentTypeHubRequestBuilder), true)]
    public partial interface IAddCopyFromContentTypeHubRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.ContentTypes.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.ContentTypes.GetCompatibleHubContentTypes
{
    [Proxy(typeof(GetCompatibleHubContentTypesRequestBuilder), true)]
    public partial interface IGetCompatibleHubContentTypesRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.ContentTypes.Item
{
    [Proxy(typeof(ContentTypeItemRequestBuilder), true)]
    public partial interface IContentTypeItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.ContentTypes.Item.AssociateWithHubSites
{
    [Proxy(typeof(AssociateWithHubSitesRequestBuilder), true)]
    public partial interface IAssociateWithHubSitesRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.ContentTypes.Item.BaseTypes
{
    [Proxy(typeof(BaseTypesRequestBuilder), true)]
    public partial interface IBaseTypesRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.ContentTypes.Item.BaseTypes.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.ContentTypes.Item.BaseTypes.Item
{
    [Proxy(typeof(ContentTypeItemRequestBuilder), true)]
    public partial interface IContentTypeItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.ContentTypes.Item.ColumnLinks
{
    [Proxy(typeof(ColumnLinksRequestBuilder), true)]
    public partial interface IColumnLinksRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.ContentTypes.Item.ColumnLinks.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.ContentTypes.Item.ColumnLinks.Item
{
    [Proxy(typeof(ColumnLinkItemRequestBuilder), true)]
    public partial interface IColumnLinkItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.ContentTypes.Item.ColumnPositions
{
    [Proxy(typeof(ColumnPositionsRequestBuilder), true)]
    public partial interface IColumnPositionsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.ContentTypes.Item.ColumnPositions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.ContentTypes.Item.ColumnPositions.Item
{
    [Proxy(typeof(ColumnDefinitionItemRequestBuilder), true)]
    public partial interface IColumnDefinitionItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.ContentTypes.Item.Columns
{
    [Proxy(typeof(ColumnsRequestBuilder), true)]
    public partial interface IColumnsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.ContentTypes.Item.Columns.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.ContentTypes.Item.Columns.Item
{
    [Proxy(typeof(ColumnDefinitionItemRequestBuilder), true)]
    public partial interface IColumnDefinitionItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.ContentTypes.Item.Columns.Item.SourceColumn
{
    [Proxy(typeof(SourceColumnRequestBuilder), true)]
    public partial interface ISourceColumnRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.ContentTypes.Item.CopyToDefaultContentLocation
{
    [Proxy(typeof(CopyToDefaultContentLocationRequestBuilder), true)]
    public partial interface ICopyToDefaultContentLocationRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.ContentTypes.Item.IsPublished
{
    [Proxy(typeof(IsPublishedRequestBuilder), true)]
    public partial interface IIsPublishedRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.ContentTypes.Item.Publish
{
    [Proxy(typeof(PublishRequestBuilder), true)]
    public partial interface IPublishRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.ContentTypes.Item.Unpublish
{
    [Proxy(typeof(UnpublishRequestBuilder), true)]
    public partial interface IUnpublishRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.CreatedByUser
{
    [Proxy(typeof(CreatedByUserRequestBuilder), true)]
    public partial interface ICreatedByUserRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.CreatedByUser.MailboxSettings
{
    [Proxy(typeof(MailboxSettingsRequestBuilder), true)]
    public partial interface IMailboxSettingsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.CreatedByUser.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.CreatedByUser.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Drive
{
    [Proxy(typeof(DriveRequestBuilder), true)]
    public partial interface IDriveRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Drives
{
    [Proxy(typeof(DrivesRequestBuilder), true)]
    public partial interface IDrivesRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Drives.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Drives.Item
{
    [Proxy(typeof(DriveItemRequestBuilder), true)]
    public partial interface IDriveItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.ExternalColumns
{
    [Proxy(typeof(ExternalColumnsRequestBuilder), true)]
    public partial interface IExternalColumnsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.ExternalColumns.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.ExternalColumns.Item
{
    [Proxy(typeof(ColumnDefinitionItemRequestBuilder), true)]
    public partial interface IColumnDefinitionItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.GetActivitiesByInterval
{
    [Proxy(typeof(GetActivitiesByIntervalRequestBuilder), true)]
    public partial interface IGetActivitiesByIntervalRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.GetActivitiesByIntervalWithStartDateTimeWithEndDateTimeWithInterval
{
    [Proxy(typeof(GetActivitiesByIntervalWithStartDateTimeWithEndDateTimeWithIntervalRequestBuilder), true)]
    public partial interface IGetActivitiesByIntervalWithStartDateTimeWithEndDateTimeWithIntervalRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.GetApplicableContentTypesForListWithListId
{
    [Proxy(typeof(GetApplicableContentTypesForListWithListIdRequestBuilder), true)]
    public partial interface IGetApplicableContentTypesForListWithListIdRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.GetByPathWithPath
{
    [Proxy(typeof(GetByPathWithPathRequestBuilder), true)]
    public partial interface IGetByPathWithPathRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.GetByPathWithPath.Analytics
{
    [Proxy(typeof(AnalyticsRequestBuilder), true)]
    public partial interface IAnalyticsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.GetByPathWithPath.Columns
{
    [Proxy(typeof(ColumnsRequestBuilder), true)]
    public partial interface IColumnsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.GetByPathWithPath.ContentTypes
{
    [Proxy(typeof(ContentTypesRequestBuilder), true)]
    public partial interface IContentTypesRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.GetByPathWithPath.CreatedByUser
{
    [Proxy(typeof(CreatedByUserRequestBuilder), true)]
    public partial interface ICreatedByUserRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.GetByPathWithPath.Drive
{
    [Proxy(typeof(DriveRequestBuilder), true)]
    public partial interface IDriveRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.GetByPathWithPath.Drives
{
    [Proxy(typeof(DrivesRequestBuilder), true)]
    public partial interface IDrivesRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.GetByPathWithPath.ExternalColumns
{
    [Proxy(typeof(ExternalColumnsRequestBuilder), true)]
    public partial interface IExternalColumnsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.GetByPathWithPath.GetActivitiesByInterval
{
    [Proxy(typeof(GetActivitiesByIntervalRequestBuilder), true)]
    public partial interface IGetActivitiesByIntervalRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.GetByPathWithPath.GetActivitiesByIntervalWithStartDateTimeWithEndDateTimeWithInterval
{
    [Proxy(typeof(GetActivitiesByIntervalWithStartDateTimeWithEndDateTimeWithIntervalRequestBuilder), true)]
    public partial interface IGetActivitiesByIntervalWithStartDateTimeWithEndDateTimeWithIntervalRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.GetByPathWithPath.GetApplicableContentTypesForListWithListId
{
    [Proxy(typeof(GetApplicableContentTypesForListWithListIdRequestBuilder), true)]
    public partial interface IGetApplicableContentTypesForListWithListIdRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.GetByPathWithPath.Items
{
    [Proxy(typeof(ItemsRequestBuilder), true)]
    public partial interface IItemsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.GetByPathWithPath.LastModifiedByUser
{
    [Proxy(typeof(LastModifiedByUserRequestBuilder), true)]
    public partial interface ILastModifiedByUserRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.GetByPathWithPath.Lists
{
    [Proxy(typeof(ListsRequestBuilder), true)]
    public partial interface IListsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.GetByPathWithPath.Onenote
{
    [Proxy(typeof(OnenoteRequestBuilder), true)]
    public partial interface IOnenoteRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.GetByPathWithPath.Operations
{
    [Proxy(typeof(OperationsRequestBuilder), true)]
    public partial interface IOperationsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.GetByPathWithPath.Pages
{
    [Proxy(typeof(PagesRequestBuilder), true)]
    public partial interface IPagesRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.GetByPathWithPath.Permissions
{
    [Proxy(typeof(PermissionsRequestBuilder), true)]
    public partial interface IPermissionsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.GetByPathWithPath.Sites
{
    [Proxy(typeof(SitesRequestBuilder), true)]
    public partial interface ISitesRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.GetByPathWithPath.TermStore
{
    [Proxy(typeof(TermStoreRequestBuilder), true)]
    public partial interface ITermStoreRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.GetByPathWithPath.TermStores
{
    [Proxy(typeof(TermStoresRequestBuilder), true)]
    public partial interface ITermStoresRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Items
{
    [Proxy(typeof(ItemsRequestBuilder), true)]
    public partial interface IItemsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Items.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Items.Item
{
    [Proxy(typeof(BaseItemItemRequestBuilder), true)]
    public partial interface IBaseItemItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.LastModifiedByUser
{
    [Proxy(typeof(LastModifiedByUserRequestBuilder), true)]
    public partial interface ILastModifiedByUserRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.LastModifiedByUser.MailboxSettings
{
    [Proxy(typeof(MailboxSettingsRequestBuilder), true)]
    public partial interface IMailboxSettingsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.LastModifiedByUser.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.LastModifiedByUser.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Lists
{
    [Proxy(typeof(ListsRequestBuilder), true)]
    public partial interface IListsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Lists.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Lists.Item
{
    [Proxy(typeof(ListItemRequestBuilder), true)]
    public partial interface IListItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Lists.Item.Columns
{
    [Proxy(typeof(ColumnsRequestBuilder), true)]
    public partial interface IColumnsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Lists.Item.Columns.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Lists.Item.Columns.Item
{
    [Proxy(typeof(ColumnDefinitionItemRequestBuilder), true)]
    public partial interface IColumnDefinitionItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Lists.Item.Columns.Item.SourceColumn
{
    [Proxy(typeof(SourceColumnRequestBuilder), true)]
    public partial interface ISourceColumnRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Lists.Item.ContentTypes
{
    [Proxy(typeof(ContentTypesRequestBuilder), true)]
    public partial interface IContentTypesRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Lists.Item.ContentTypes.AddCopy
{
    [Proxy(typeof(AddCopyRequestBuilder), true)]
    public partial interface IAddCopyRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Lists.Item.ContentTypes.AddCopyFromContentTypeHub
{
    [Proxy(typeof(AddCopyFromContentTypeHubRequestBuilder), true)]
    public partial interface IAddCopyFromContentTypeHubRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Lists.Item.ContentTypes.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Lists.Item.ContentTypes.GetCompatibleHubContentTypes
{
    [Proxy(typeof(GetCompatibleHubContentTypesRequestBuilder), true)]
    public partial interface IGetCompatibleHubContentTypesRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Lists.Item.ContentTypes.Item
{
    [Proxy(typeof(ContentTypeItemRequestBuilder), true)]
    public partial interface IContentTypeItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Lists.Item.ContentTypes.Item.AssociateWithHubSites
{
    [Proxy(typeof(AssociateWithHubSitesRequestBuilder), true)]
    public partial interface IAssociateWithHubSitesRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Lists.Item.ContentTypes.Item.BaseTypes
{
    [Proxy(typeof(BaseTypesRequestBuilder), true)]
    public partial interface IBaseTypesRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Lists.Item.ContentTypes.Item.BaseTypes.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Lists.Item.ContentTypes.Item.BaseTypes.Item
{
    [Proxy(typeof(ContentTypeItemRequestBuilder), true)]
    public partial interface IContentTypeItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Lists.Item.ContentTypes.Item.ColumnLinks
{
    [Proxy(typeof(ColumnLinksRequestBuilder), true)]
    public partial interface IColumnLinksRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Lists.Item.ContentTypes.Item.ColumnLinks.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Lists.Item.ContentTypes.Item.ColumnLinks.Item
{
    [Proxy(typeof(ColumnLinkItemRequestBuilder), true)]
    public partial interface IColumnLinkItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Lists.Item.ContentTypes.Item.ColumnPositions
{
    [Proxy(typeof(ColumnPositionsRequestBuilder), true)]
    public partial interface IColumnPositionsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Lists.Item.ContentTypes.Item.ColumnPositions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Lists.Item.ContentTypes.Item.ColumnPositions.Item
{
    [Proxy(typeof(ColumnDefinitionItemRequestBuilder), true)]
    public partial interface IColumnDefinitionItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Lists.Item.ContentTypes.Item.Columns
{
    [Proxy(typeof(ColumnsRequestBuilder), true)]
    public partial interface IColumnsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Lists.Item.ContentTypes.Item.Columns.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Lists.Item.ContentTypes.Item.Columns.Item
{
    [Proxy(typeof(ColumnDefinitionItemRequestBuilder), true)]
    public partial interface IColumnDefinitionItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Lists.Item.ContentTypes.Item.Columns.Item.SourceColumn
{
    [Proxy(typeof(SourceColumnRequestBuilder), true)]
    public partial interface ISourceColumnRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Lists.Item.ContentTypes.Item.CopyToDefaultContentLocation
{
    [Proxy(typeof(CopyToDefaultContentLocationRequestBuilder), true)]
    public partial interface ICopyToDefaultContentLocationRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Lists.Item.ContentTypes.Item.IsPublished
{
    [Proxy(typeof(IsPublishedRequestBuilder), true)]
    public partial interface IIsPublishedRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Lists.Item.ContentTypes.Item.Publish
{
    [Proxy(typeof(PublishRequestBuilder), true)]
    public partial interface IPublishRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Lists.Item.ContentTypes.Item.Unpublish
{
    [Proxy(typeof(UnpublishRequestBuilder), true)]
    public partial interface IUnpublishRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Lists.Item.CreatedByUser
{
    [Proxy(typeof(CreatedByUserRequestBuilder), true)]
    public partial interface ICreatedByUserRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Lists.Item.CreatedByUser.MailboxSettings
{
    [Proxy(typeof(MailboxSettingsRequestBuilder), true)]
    public partial interface IMailboxSettingsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Lists.Item.CreatedByUser.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Lists.Item.CreatedByUser.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Lists.Item.Drive
{
    [Proxy(typeof(DriveRequestBuilder), true)]
    public partial interface IDriveRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Lists.Item.Items
{
    [Proxy(typeof(ItemsRequestBuilder), true)]
    public partial interface IItemsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Lists.Item.Items.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Lists.Item.Items.DeltaWithToken
{
    [Proxy(typeof(DeltaWithTokenRequestBuilder), true)]
    public partial interface IDeltaWithTokenRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Lists.Item.Items.Item
{
    [Proxy(typeof(ListItemItemRequestBuilder), true)]
    public partial interface IListItemItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Lists.Item.Items.Item.Analytics
{
    [Proxy(typeof(AnalyticsRequestBuilder), true)]
    public partial interface IAnalyticsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Lists.Item.Items.Item.CreatedByUser
{
    [Proxy(typeof(CreatedByUserRequestBuilder), true)]
    public partial interface ICreatedByUserRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Lists.Item.Items.Item.CreatedByUser.MailboxSettings
{
    [Proxy(typeof(MailboxSettingsRequestBuilder), true)]
    public partial interface IMailboxSettingsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Lists.Item.Items.Item.CreatedByUser.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Lists.Item.Items.Item.CreatedByUser.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Lists.Item.Items.Item.CreateLink
{
    [Proxy(typeof(CreateLinkRequestBuilder), true)]
    public partial interface ICreateLinkRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Lists.Item.Items.Item.DocumentSetVersions
{
    [Proxy(typeof(DocumentSetVersionsRequestBuilder), true)]
    public partial interface IDocumentSetVersionsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Lists.Item.Items.Item.DocumentSetVersions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Lists.Item.Items.Item.DocumentSetVersions.Item
{
    [Proxy(typeof(DocumentSetVersionItemRequestBuilder), true)]
    public partial interface IDocumentSetVersionItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Lists.Item.Items.Item.DocumentSetVersions.Item.Fields
{
    [Proxy(typeof(FieldsRequestBuilder), true)]
    public partial interface IFieldsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Lists.Item.Items.Item.DocumentSetVersions.Item.Restore
{
    [Proxy(typeof(RestoreRequestBuilder), true)]
    public partial interface IRestoreRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Lists.Item.Items.Item.DriveItem
{
    [Proxy(typeof(DriveItemRequestBuilder), true)]
    public partial interface IDriveItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Lists.Item.Items.Item.DriveItem.Content
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Lists.Item.Items.Item.Fields
{
    [Proxy(typeof(FieldsRequestBuilder), true)]
    public partial interface IFieldsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Lists.Item.Items.Item.GetActivitiesByInterval
{
    [Proxy(typeof(GetActivitiesByIntervalRequestBuilder), true)]
    public partial interface IGetActivitiesByIntervalRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Lists.Item.Items.Item.GetActivitiesByIntervalWithStartDateTimeWithEndDateTimeWithInterval
{
    [Proxy(typeof(GetActivitiesByIntervalWithStartDateTimeWithEndDateTimeWithIntervalRequestBuilder), true)]
    public partial interface IGetActivitiesByIntervalWithStartDateTimeWithEndDateTimeWithIntervalRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Lists.Item.Items.Item.LastModifiedByUser
{
    [Proxy(typeof(LastModifiedByUserRequestBuilder), true)]
    public partial interface ILastModifiedByUserRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Lists.Item.Items.Item.LastModifiedByUser.MailboxSettings
{
    [Proxy(typeof(MailboxSettingsRequestBuilder), true)]
    public partial interface IMailboxSettingsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Lists.Item.Items.Item.LastModifiedByUser.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Lists.Item.Items.Item.LastModifiedByUser.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Lists.Item.Items.Item.Versions
{
    [Proxy(typeof(VersionsRequestBuilder), true)]
    public partial interface IVersionsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Lists.Item.Items.Item.Versions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Lists.Item.Items.Item.Versions.Item
{
    [Proxy(typeof(ListItemVersionItemRequestBuilder), true)]
    public partial interface IListItemVersionItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Lists.Item.Items.Item.Versions.Item.Fields
{
    [Proxy(typeof(FieldsRequestBuilder), true)]
    public partial interface IFieldsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Lists.Item.Items.Item.Versions.Item.RestoreVersion
{
    [Proxy(typeof(RestoreVersionRequestBuilder), true)]
    public partial interface IRestoreVersionRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Lists.Item.LastModifiedByUser
{
    [Proxy(typeof(LastModifiedByUserRequestBuilder), true)]
    public partial interface ILastModifiedByUserRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Lists.Item.LastModifiedByUser.MailboxSettings
{
    [Proxy(typeof(MailboxSettingsRequestBuilder), true)]
    public partial interface IMailboxSettingsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Lists.Item.LastModifiedByUser.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Lists.Item.LastModifiedByUser.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Lists.Item.Operations
{
    [Proxy(typeof(OperationsRequestBuilder), true)]
    public partial interface IOperationsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Lists.Item.Operations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Lists.Item.Operations.Item
{
    [Proxy(typeof(RichLongRunningOperationItemRequestBuilder), true)]
    public partial interface IRichLongRunningOperationItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Lists.Item.Subscriptions
{
    [Proxy(typeof(SubscriptionsRequestBuilder), true)]
    public partial interface ISubscriptionsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Lists.Item.Subscriptions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Lists.Item.Subscriptions.Item
{
    [Proxy(typeof(SubscriptionItemRequestBuilder), true)]
    public partial interface ISubscriptionItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Lists.Item.Subscriptions.Item.Reauthorize
{
    [Proxy(typeof(ReauthorizeRequestBuilder), true)]
    public partial interface IReauthorizeRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote
{
    [Proxy(typeof(OnenoteRequestBuilder), true)]
    public partial interface IOnenoteRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.Notebooks
{
    [Proxy(typeof(NotebooksRequestBuilder), true)]
    public partial interface INotebooksRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.Notebooks.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.Notebooks.GetNotebookFromWebUrl
{
    [Proxy(typeof(GetNotebookFromWebUrlRequestBuilder), true)]
    public partial interface IGetNotebookFromWebUrlRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.Notebooks.GetRecentNotebooksWithIncludePersonalNotebooks
{
    [Proxy(typeof(GetRecentNotebooksWithIncludePersonalNotebooksRequestBuilder), true)]
    public partial interface IGetRecentNotebooksWithIncludePersonalNotebooksRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.Notebooks.Item
{
    [Proxy(typeof(NotebookItemRequestBuilder), true)]
    public partial interface INotebookItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.Notebooks.Item.CopyNotebook
{
    [Proxy(typeof(CopyNotebookRequestBuilder), true)]
    public partial interface ICopyNotebookRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.Notebooks.Item.SectionGroups
{
    [Proxy(typeof(SectionGroupsRequestBuilder), true)]
    public partial interface ISectionGroupsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.Notebooks.Item.SectionGroups.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.Notebooks.Item.SectionGroups.Item
{
    [Proxy(typeof(SectionGroupItemRequestBuilder), true)]
    public partial interface ISectionGroupItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.Notebooks.Item.SectionGroups.Item.ParentNotebook
{
    [Proxy(typeof(ParentNotebookRequestBuilder), true)]
    public partial interface IParentNotebookRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.Notebooks.Item.SectionGroups.Item.ParentSectionGroup
{
    [Proxy(typeof(ParentSectionGroupRequestBuilder), true)]
    public partial interface IParentSectionGroupRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.Notebooks.Item.SectionGroups.Item.SectionGroups
{
    [Proxy(typeof(SectionGroupsRequestBuilder), true)]
    public partial interface ISectionGroupsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.Notebooks.Item.SectionGroups.Item.SectionGroups.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.Notebooks.Item.SectionGroups.Item.SectionGroups.Item
{
    [Proxy(typeof(SectionGroupItemRequestBuilder), true)]
    public partial interface ISectionGroupItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.Notebooks.Item.SectionGroups.Item.Sections
{
    [Proxy(typeof(SectionsRequestBuilder), true)]
    public partial interface ISectionsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.Notebooks.Item.SectionGroups.Item.Sections.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.Notebooks.Item.SectionGroups.Item.Sections.Item
{
    [Proxy(typeof(OnenoteSectionItemRequestBuilder), true)]
    public partial interface IOnenoteSectionItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.Notebooks.Item.SectionGroups.Item.Sections.Item.CopyToNotebook
{
    [Proxy(typeof(CopyToNotebookRequestBuilder), true)]
    public partial interface ICopyToNotebookRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.Notebooks.Item.SectionGroups.Item.Sections.Item.CopyToSectionGroup
{
    [Proxy(typeof(CopyToSectionGroupRequestBuilder), true)]
    public partial interface ICopyToSectionGroupRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.Notebooks.Item.SectionGroups.Item.Sections.Item.Pages
{
    [Proxy(typeof(PagesRequestBuilder), true)]
    public partial interface IPagesRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.Notebooks.Item.SectionGroups.Item.Sections.Item.Pages.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.Notebooks.Item.SectionGroups.Item.Sections.Item.Pages.Item
{
    [Proxy(typeof(OnenotePageItemRequestBuilder), true)]
    public partial interface IOnenotePageItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.Notebooks.Item.SectionGroups.Item.Sections.Item.Pages.Item.Content
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.Notebooks.Item.SectionGroups.Item.Sections.Item.Pages.Item.CopyToSection
{
    [Proxy(typeof(CopyToSectionRequestBuilder), true)]
    public partial interface ICopyToSectionRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.Notebooks.Item.SectionGroups.Item.Sections.Item.Pages.Item.OnenotePatchContent
{
    [Proxy(typeof(OnenotePatchContentRequestBuilder), true)]
    public partial interface IOnenotePatchContentRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.Notebooks.Item.SectionGroups.Item.Sections.Item.Pages.Item.ParentNotebook
{
    [Proxy(typeof(ParentNotebookRequestBuilder), true)]
    public partial interface IParentNotebookRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.Notebooks.Item.SectionGroups.Item.Sections.Item.Pages.Item.ParentSection
{
    [Proxy(typeof(ParentSectionRequestBuilder), true)]
    public partial interface IParentSectionRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.Notebooks.Item.SectionGroups.Item.Sections.Item.Pages.Item.Preview
{
    [Proxy(typeof(PreviewRequestBuilder), true)]
    public partial interface IPreviewRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.Notebooks.Item.SectionGroups.Item.Sections.Item.ParentNotebook
{
    [Proxy(typeof(ParentNotebookRequestBuilder), true)]
    public partial interface IParentNotebookRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.Notebooks.Item.SectionGroups.Item.Sections.Item.ParentSectionGroup
{
    [Proxy(typeof(ParentSectionGroupRequestBuilder), true)]
    public partial interface IParentSectionGroupRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.Notebooks.Item.Sections
{
    [Proxy(typeof(SectionsRequestBuilder), true)]
    public partial interface ISectionsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.Notebooks.Item.Sections.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.Notebooks.Item.Sections.Item
{
    [Proxy(typeof(OnenoteSectionItemRequestBuilder), true)]
    public partial interface IOnenoteSectionItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.Notebooks.Item.Sections.Item.CopyToNotebook
{
    [Proxy(typeof(CopyToNotebookRequestBuilder), true)]
    public partial interface ICopyToNotebookRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.Notebooks.Item.Sections.Item.CopyToSectionGroup
{
    [Proxy(typeof(CopyToSectionGroupRequestBuilder), true)]
    public partial interface ICopyToSectionGroupRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.Notebooks.Item.Sections.Item.Pages
{
    [Proxy(typeof(PagesRequestBuilder), true)]
    public partial interface IPagesRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.Notebooks.Item.Sections.Item.Pages.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.Notebooks.Item.Sections.Item.Pages.Item
{
    [Proxy(typeof(OnenotePageItemRequestBuilder), true)]
    public partial interface IOnenotePageItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.Notebooks.Item.Sections.Item.Pages.Item.Content
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.Notebooks.Item.Sections.Item.Pages.Item.CopyToSection
{
    [Proxy(typeof(CopyToSectionRequestBuilder), true)]
    public partial interface ICopyToSectionRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.Notebooks.Item.Sections.Item.Pages.Item.OnenotePatchContent
{
    [Proxy(typeof(OnenotePatchContentRequestBuilder), true)]
    public partial interface IOnenotePatchContentRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.Notebooks.Item.Sections.Item.Pages.Item.ParentNotebook
{
    [Proxy(typeof(ParentNotebookRequestBuilder), true)]
    public partial interface IParentNotebookRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.Notebooks.Item.Sections.Item.Pages.Item.ParentSection
{
    [Proxy(typeof(ParentSectionRequestBuilder), true)]
    public partial interface IParentSectionRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.Notebooks.Item.Sections.Item.Pages.Item.Preview
{
    [Proxy(typeof(PreviewRequestBuilder), true)]
    public partial interface IPreviewRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.Notebooks.Item.Sections.Item.ParentNotebook
{
    [Proxy(typeof(ParentNotebookRequestBuilder), true)]
    public partial interface IParentNotebookRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.Notebooks.Item.Sections.Item.ParentSectionGroup
{
    [Proxy(typeof(ParentSectionGroupRequestBuilder), true)]
    public partial interface IParentSectionGroupRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.Operations
{
    [Proxy(typeof(OperationsRequestBuilder), true)]
    public partial interface IOperationsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.Operations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.Operations.Item
{
    [Proxy(typeof(OnenoteOperationItemRequestBuilder), true)]
    public partial interface IOnenoteOperationItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.Pages
{
    [Proxy(typeof(PagesRequestBuilder), true)]
    public partial interface IPagesRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.Pages.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.Pages.Item
{
    [Proxy(typeof(OnenotePageItemRequestBuilder), true)]
    public partial interface IOnenotePageItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.Pages.Item.Content
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.Pages.Item.CopyToSection
{
    [Proxy(typeof(CopyToSectionRequestBuilder), true)]
    public partial interface ICopyToSectionRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.Pages.Item.OnenotePatchContent
{
    [Proxy(typeof(OnenotePatchContentRequestBuilder), true)]
    public partial interface IOnenotePatchContentRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.Pages.Item.ParentNotebook
{
    [Proxy(typeof(ParentNotebookRequestBuilder), true)]
    public partial interface IParentNotebookRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.Pages.Item.ParentSection
{
    [Proxy(typeof(ParentSectionRequestBuilder), true)]
    public partial interface IParentSectionRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.Pages.Item.Preview
{
    [Proxy(typeof(PreviewRequestBuilder), true)]
    public partial interface IPreviewRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.Resources
{
    [Proxy(typeof(ResourcesRequestBuilder), true)]
    public partial interface IResourcesRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.Resources.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.Resources.Item
{
    [Proxy(typeof(OnenoteResourceItemRequestBuilder), true)]
    public partial interface IOnenoteResourceItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.Resources.Item.Content
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.SectionGroups
{
    [Proxy(typeof(SectionGroupsRequestBuilder), true)]
    public partial interface ISectionGroupsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.SectionGroups.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.SectionGroups.Item
{
    [Proxy(typeof(SectionGroupItemRequestBuilder), true)]
    public partial interface ISectionGroupItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.SectionGroups.Item.ParentNotebook
{
    [Proxy(typeof(ParentNotebookRequestBuilder), true)]
    public partial interface IParentNotebookRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.SectionGroups.Item.ParentSectionGroup
{
    [Proxy(typeof(ParentSectionGroupRequestBuilder), true)]
    public partial interface IParentSectionGroupRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.SectionGroups.Item.SectionGroups
{
    [Proxy(typeof(SectionGroupsRequestBuilder), true)]
    public partial interface ISectionGroupsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.SectionGroups.Item.SectionGroups.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.SectionGroups.Item.SectionGroups.Item
{
    [Proxy(typeof(SectionGroupItemRequestBuilder), true)]
    public partial interface ISectionGroupItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.SectionGroups.Item.Sections
{
    [Proxy(typeof(SectionsRequestBuilder), true)]
    public partial interface ISectionsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.SectionGroups.Item.Sections.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.SectionGroups.Item.Sections.Item
{
    [Proxy(typeof(OnenoteSectionItemRequestBuilder), true)]
    public partial interface IOnenoteSectionItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.SectionGroups.Item.Sections.Item.CopyToNotebook
{
    [Proxy(typeof(CopyToNotebookRequestBuilder), true)]
    public partial interface ICopyToNotebookRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.SectionGroups.Item.Sections.Item.CopyToSectionGroup
{
    [Proxy(typeof(CopyToSectionGroupRequestBuilder), true)]
    public partial interface ICopyToSectionGroupRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.SectionGroups.Item.Sections.Item.Pages
{
    [Proxy(typeof(PagesRequestBuilder), true)]
    public partial interface IPagesRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.SectionGroups.Item.Sections.Item.Pages.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.SectionGroups.Item.Sections.Item.Pages.Item
{
    [Proxy(typeof(OnenotePageItemRequestBuilder), true)]
    public partial interface IOnenotePageItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.SectionGroups.Item.Sections.Item.Pages.Item.Content
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.SectionGroups.Item.Sections.Item.Pages.Item.CopyToSection
{
    [Proxy(typeof(CopyToSectionRequestBuilder), true)]
    public partial interface ICopyToSectionRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.SectionGroups.Item.Sections.Item.Pages.Item.OnenotePatchContent
{
    [Proxy(typeof(OnenotePatchContentRequestBuilder), true)]
    public partial interface IOnenotePatchContentRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.SectionGroups.Item.Sections.Item.Pages.Item.ParentNotebook
{
    [Proxy(typeof(ParentNotebookRequestBuilder), true)]
    public partial interface IParentNotebookRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.SectionGroups.Item.Sections.Item.Pages.Item.ParentSection
{
    [Proxy(typeof(ParentSectionRequestBuilder), true)]
    public partial interface IParentSectionRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.SectionGroups.Item.Sections.Item.Pages.Item.Preview
{
    [Proxy(typeof(PreviewRequestBuilder), true)]
    public partial interface IPreviewRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.SectionGroups.Item.Sections.Item.ParentNotebook
{
    [Proxy(typeof(ParentNotebookRequestBuilder), true)]
    public partial interface IParentNotebookRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.SectionGroups.Item.Sections.Item.ParentSectionGroup
{
    [Proxy(typeof(ParentSectionGroupRequestBuilder), true)]
    public partial interface IParentSectionGroupRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.Sections
{
    [Proxy(typeof(SectionsRequestBuilder), true)]
    public partial interface ISectionsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.Sections.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.Sections.Item
{
    [Proxy(typeof(OnenoteSectionItemRequestBuilder), true)]
    public partial interface IOnenoteSectionItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.Sections.Item.CopyToNotebook
{
    [Proxy(typeof(CopyToNotebookRequestBuilder), true)]
    public partial interface ICopyToNotebookRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.Sections.Item.CopyToSectionGroup
{
    [Proxy(typeof(CopyToSectionGroupRequestBuilder), true)]
    public partial interface ICopyToSectionGroupRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.Sections.Item.Pages
{
    [Proxy(typeof(PagesRequestBuilder), true)]
    public partial interface IPagesRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.Sections.Item.Pages.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.Sections.Item.Pages.Item
{
    [Proxy(typeof(OnenotePageItemRequestBuilder), true)]
    public partial interface IOnenotePageItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.Sections.Item.Pages.Item.Content
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.Sections.Item.Pages.Item.CopyToSection
{
    [Proxy(typeof(CopyToSectionRequestBuilder), true)]
    public partial interface ICopyToSectionRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.Sections.Item.Pages.Item.OnenotePatchContent
{
    [Proxy(typeof(OnenotePatchContentRequestBuilder), true)]
    public partial interface IOnenotePatchContentRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.Sections.Item.Pages.Item.ParentNotebook
{
    [Proxy(typeof(ParentNotebookRequestBuilder), true)]
    public partial interface IParentNotebookRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.Sections.Item.Pages.Item.ParentSection
{
    [Proxy(typeof(ParentSectionRequestBuilder), true)]
    public partial interface IParentSectionRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.Sections.Item.Pages.Item.Preview
{
    [Proxy(typeof(PreviewRequestBuilder), true)]
    public partial interface IPreviewRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.Sections.Item.ParentNotebook
{
    [Proxy(typeof(ParentNotebookRequestBuilder), true)]
    public partial interface IParentNotebookRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Onenote.Sections.Item.ParentSectionGroup
{
    [Proxy(typeof(ParentSectionGroupRequestBuilder), true)]
    public partial interface IParentSectionGroupRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Operations
{
    [Proxy(typeof(OperationsRequestBuilder), true)]
    public partial interface IOperationsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Operations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Operations.Item
{
    [Proxy(typeof(RichLongRunningOperationItemRequestBuilder), true)]
    public partial interface IRichLongRunningOperationItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Pages
{
    [Proxy(typeof(PagesRequestBuilder), true)]
    public partial interface IPagesRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Pages.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Pages.GraphSitePage
{
    [Proxy(typeof(GraphSitePageRequestBuilder), true)]
    public partial interface IGraphSitePageRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Pages.GraphSitePage.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Pages.Item
{
    [Proxy(typeof(BaseSitePageItemRequestBuilder), true)]
    public partial interface IBaseSitePageItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Pages.Item.CreatedByUser
{
    [Proxy(typeof(CreatedByUserRequestBuilder), true)]
    public partial interface ICreatedByUserRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Pages.Item.CreatedByUser.MailboxSettings
{
    [Proxy(typeof(MailboxSettingsRequestBuilder), true)]
    public partial interface IMailboxSettingsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Pages.Item.CreatedByUser.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Pages.Item.CreatedByUser.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Pages.Item.GraphSitePage
{
    [Proxy(typeof(GraphSitePageRequestBuilder), true)]
    public partial interface IGraphSitePageRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Pages.Item.GraphSitePage.CanvasLayout
{
    [Proxy(typeof(CanvasLayoutRequestBuilder), true)]
    public partial interface ICanvasLayoutRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Pages.Item.GraphSitePage.CanvasLayout.HorizontalSections
{
    [Proxy(typeof(HorizontalSectionsRequestBuilder), true)]
    public partial interface IHorizontalSectionsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Pages.Item.GraphSitePage.CanvasLayout.HorizontalSections.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Pages.Item.GraphSitePage.CanvasLayout.HorizontalSections.Item
{
    [Proxy(typeof(HorizontalSectionItemRequestBuilder), true)]
    public partial interface IHorizontalSectionItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Pages.Item.GraphSitePage.CanvasLayout.HorizontalSections.Item.Columns
{
    [Proxy(typeof(ColumnsRequestBuilder), true)]
    public partial interface IColumnsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Pages.Item.GraphSitePage.CanvasLayout.HorizontalSections.Item.Columns.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Pages.Item.GraphSitePage.CanvasLayout.HorizontalSections.Item.Columns.Item
{
    [Proxy(typeof(HorizontalSectionColumnItemRequestBuilder), true)]
    public partial interface IHorizontalSectionColumnItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Pages.Item.GraphSitePage.CanvasLayout.HorizontalSections.Item.Columns.Item.Webparts
{
    [Proxy(typeof(WebpartsRequestBuilder), true)]
    public partial interface IWebpartsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Pages.Item.GraphSitePage.CanvasLayout.HorizontalSections.Item.Columns.Item.Webparts.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Pages.Item.GraphSitePage.CanvasLayout.HorizontalSections.Item.Columns.Item.Webparts.Item
{
    [Proxy(typeof(WebPartItemRequestBuilder), true)]
    public partial interface IWebPartItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Pages.Item.GraphSitePage.CanvasLayout.HorizontalSections.Item.Columns.Item.Webparts.Item.GetPositionOfWebPart
{
    [Proxy(typeof(GetPositionOfWebPartRequestBuilder), true)]
    public partial interface IGetPositionOfWebPartRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Pages.Item.GraphSitePage.CanvasLayout.VerticalSection
{
    [Proxy(typeof(VerticalSectionRequestBuilder), true)]
    public partial interface IVerticalSectionRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Pages.Item.GraphSitePage.CanvasLayout.VerticalSection.Webparts
{
    [Proxy(typeof(WebpartsRequestBuilder), true)]
    public partial interface IWebpartsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Pages.Item.GraphSitePage.CanvasLayout.VerticalSection.Webparts.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Pages.Item.GraphSitePage.CanvasLayout.VerticalSection.Webparts.Item
{
    [Proxy(typeof(WebPartItemRequestBuilder), true)]
    public partial interface IWebPartItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Pages.Item.GraphSitePage.CanvasLayout.VerticalSection.Webparts.Item.GetPositionOfWebPart
{
    [Proxy(typeof(GetPositionOfWebPartRequestBuilder), true)]
    public partial interface IGetPositionOfWebPartRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Pages.Item.GraphSitePage.CreatedByUser
{
    [Proxy(typeof(CreatedByUserRequestBuilder), true)]
    public partial interface ICreatedByUserRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Pages.Item.GraphSitePage.CreatedByUser.MailboxSettings
{
    [Proxy(typeof(MailboxSettingsRequestBuilder), true)]
    public partial interface IMailboxSettingsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Pages.Item.GraphSitePage.CreatedByUser.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Pages.Item.GraphSitePage.CreatedByUser.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Pages.Item.GraphSitePage.LastModifiedByUser
{
    [Proxy(typeof(LastModifiedByUserRequestBuilder), true)]
    public partial interface ILastModifiedByUserRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Pages.Item.GraphSitePage.LastModifiedByUser.MailboxSettings
{
    [Proxy(typeof(MailboxSettingsRequestBuilder), true)]
    public partial interface IMailboxSettingsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Pages.Item.GraphSitePage.LastModifiedByUser.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Pages.Item.GraphSitePage.LastModifiedByUser.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Pages.Item.GraphSitePage.WebParts
{
    [Proxy(typeof(WebPartsRequestBuilder), true)]
    public partial interface IWebPartsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Pages.Item.GraphSitePage.WebParts.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Pages.Item.GraphSitePage.WebParts.Item
{
    [Proxy(typeof(WebPartItemRequestBuilder), true)]
    public partial interface IWebPartItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Pages.Item.GraphSitePage.WebParts.Item.GetPositionOfWebPart
{
    [Proxy(typeof(GetPositionOfWebPartRequestBuilder), true)]
    public partial interface IGetPositionOfWebPartRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Pages.Item.LastModifiedByUser
{
    [Proxy(typeof(LastModifiedByUserRequestBuilder), true)]
    public partial interface ILastModifiedByUserRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Pages.Item.LastModifiedByUser.MailboxSettings
{
    [Proxy(typeof(MailboxSettingsRequestBuilder), true)]
    public partial interface IMailboxSettingsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Pages.Item.LastModifiedByUser.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Pages.Item.LastModifiedByUser.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Permissions
{
    [Proxy(typeof(PermissionsRequestBuilder), true)]
    public partial interface IPermissionsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Permissions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Permissions.Item
{
    [Proxy(typeof(PermissionItemRequestBuilder), true)]
    public partial interface IPermissionItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Permissions.Item.Grant
{
    [Proxy(typeof(GrantRequestBuilder), true)]
    public partial interface IGrantRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Sites
{
    [Proxy(typeof(SitesRequestBuilder), true)]
    public partial interface ISitesRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Sites.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.Sites.Item
{
    [Proxy(typeof(SiteItemRequestBuilder), true)]
    public partial interface ISiteItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore
{
    [Proxy(typeof(TermStoreRequestBuilder), true)]
    public partial interface ITermStoreRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Groups
{
    [Proxy(typeof(GroupsRequestBuilder), true)]
    public partial interface IGroupsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Groups.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Groups.Item
{
    [Proxy(typeof(GroupItemRequestBuilder), true)]
    public partial interface IGroupItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Groups.Item.Sets
{
    [Proxy(typeof(SetsRequestBuilder), true)]
    public partial interface ISetsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Groups.Item.Sets.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Groups.Item.Sets.Item
{
    [Proxy(typeof(SetItemRequestBuilder), true)]
    public partial interface ISetItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Groups.Item.Sets.Item.Children
{
    [Proxy(typeof(ChildrenRequestBuilder), true)]
    public partial interface IChildrenRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Groups.Item.Sets.Item.Children.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Groups.Item.Sets.Item.Children.Item
{
    [Proxy(typeof(TermItemRequestBuilder), true)]
    public partial interface ITermItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Groups.Item.Sets.Item.Children.Item.Children
{
    [Proxy(typeof(ChildrenRequestBuilder), true)]
    public partial interface IChildrenRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Groups.Item.Sets.Item.Children.Item.Children.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Groups.Item.Sets.Item.Children.Item.Children.Item
{
    [Proxy(typeof(TermItemRequestBuilder), true)]
    public partial interface ITermItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Groups.Item.Sets.Item.Children.Item.Children.Item.Relations
{
    [Proxy(typeof(RelationsRequestBuilder), true)]
    public partial interface IRelationsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Groups.Item.Sets.Item.Children.Item.Children.Item.Relations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Groups.Item.Sets.Item.Children.Item.Children.Item.Relations.Item
{
    [Proxy(typeof(RelationItemRequestBuilder), true)]
    public partial interface IRelationItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Groups.Item.Sets.Item.Children.Item.Children.Item.Relations.Item.FromTerm
{
    [Proxy(typeof(FromTermRequestBuilder), true)]
    public partial interface IFromTermRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Groups.Item.Sets.Item.Children.Item.Children.Item.Relations.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Groups.Item.Sets.Item.Children.Item.Children.Item.Relations.Item.ToTerm
{
    [Proxy(typeof(ToTermRequestBuilder), true)]
    public partial interface IToTermRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Groups.Item.Sets.Item.Children.Item.Children.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Groups.Item.Sets.Item.Children.Item.Relations
{
    [Proxy(typeof(RelationsRequestBuilder), true)]
    public partial interface IRelationsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Groups.Item.Sets.Item.Children.Item.Relations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Groups.Item.Sets.Item.Children.Item.Relations.Item
{
    [Proxy(typeof(RelationItemRequestBuilder), true)]
    public partial interface IRelationItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Groups.Item.Sets.Item.Children.Item.Relations.Item.FromTerm
{
    [Proxy(typeof(FromTermRequestBuilder), true)]
    public partial interface IFromTermRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Groups.Item.Sets.Item.Children.Item.Relations.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Groups.Item.Sets.Item.Children.Item.Relations.Item.ToTerm
{
    [Proxy(typeof(ToTermRequestBuilder), true)]
    public partial interface IToTermRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Groups.Item.Sets.Item.Children.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Groups.Item.Sets.Item.ParentGroup
{
    [Proxy(typeof(ParentGroupRequestBuilder), true)]
    public partial interface IParentGroupRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Groups.Item.Sets.Item.Relations
{
    [Proxy(typeof(RelationsRequestBuilder), true)]
    public partial interface IRelationsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Groups.Item.Sets.Item.Relations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Groups.Item.Sets.Item.Relations.Item
{
    [Proxy(typeof(RelationItemRequestBuilder), true)]
    public partial interface IRelationItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Groups.Item.Sets.Item.Relations.Item.FromTerm
{
    [Proxy(typeof(FromTermRequestBuilder), true)]
    public partial interface IFromTermRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Groups.Item.Sets.Item.Relations.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Groups.Item.Sets.Item.Relations.Item.ToTerm
{
    [Proxy(typeof(ToTermRequestBuilder), true)]
    public partial interface IToTermRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Groups.Item.Sets.Item.Terms
{
    [Proxy(typeof(TermsRequestBuilder), true)]
    public partial interface ITermsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Groups.Item.Sets.Item.Terms.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Groups.Item.Sets.Item.Terms.Item
{
    [Proxy(typeof(TermItemRequestBuilder), true)]
    public partial interface ITermItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Groups.Item.Sets.Item.Terms.Item.Children
{
    [Proxy(typeof(ChildrenRequestBuilder), true)]
    public partial interface IChildrenRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Groups.Item.Sets.Item.Terms.Item.Children.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Groups.Item.Sets.Item.Terms.Item.Children.Item
{
    [Proxy(typeof(TermItemRequestBuilder), true)]
    public partial interface ITermItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Groups.Item.Sets.Item.Terms.Item.Children.Item.Relations
{
    [Proxy(typeof(RelationsRequestBuilder), true)]
    public partial interface IRelationsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Groups.Item.Sets.Item.Terms.Item.Children.Item.Relations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Groups.Item.Sets.Item.Terms.Item.Children.Item.Relations.Item
{
    [Proxy(typeof(RelationItemRequestBuilder), true)]
    public partial interface IRelationItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Groups.Item.Sets.Item.Terms.Item.Children.Item.Relations.Item.FromTerm
{
    [Proxy(typeof(FromTermRequestBuilder), true)]
    public partial interface IFromTermRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Groups.Item.Sets.Item.Terms.Item.Children.Item.Relations.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Groups.Item.Sets.Item.Terms.Item.Children.Item.Relations.Item.ToTerm
{
    [Proxy(typeof(ToTermRequestBuilder), true)]
    public partial interface IToTermRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Groups.Item.Sets.Item.Terms.Item.Children.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Groups.Item.Sets.Item.Terms.Item.Relations
{
    [Proxy(typeof(RelationsRequestBuilder), true)]
    public partial interface IRelationsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Groups.Item.Sets.Item.Terms.Item.Relations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Groups.Item.Sets.Item.Terms.Item.Relations.Item
{
    [Proxy(typeof(RelationItemRequestBuilder), true)]
    public partial interface IRelationItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Groups.Item.Sets.Item.Terms.Item.Relations.Item.FromTerm
{
    [Proxy(typeof(FromTermRequestBuilder), true)]
    public partial interface IFromTermRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Groups.Item.Sets.Item.Terms.Item.Relations.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Groups.Item.Sets.Item.Terms.Item.Relations.Item.ToTerm
{
    [Proxy(typeof(ToTermRequestBuilder), true)]
    public partial interface IToTermRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Groups.Item.Sets.Item.Terms.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets
{
    [Proxy(typeof(SetsRequestBuilder), true)]
    public partial interface ISetsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item
{
    [Proxy(typeof(SetItemRequestBuilder), true)]
    public partial interface ISetItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.Children
{
    [Proxy(typeof(ChildrenRequestBuilder), true)]
    public partial interface IChildrenRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.Children.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.Children.Item
{
    [Proxy(typeof(TermItemRequestBuilder), true)]
    public partial interface ITermItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.Children.Item.Children
{
    [Proxy(typeof(ChildrenRequestBuilder), true)]
    public partial interface IChildrenRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.Children.Item.Children.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.Children.Item.Children.Item
{
    [Proxy(typeof(TermItemRequestBuilder), true)]
    public partial interface ITermItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.Children.Item.Children.Item.Relations
{
    [Proxy(typeof(RelationsRequestBuilder), true)]
    public partial interface IRelationsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.Children.Item.Children.Item.Relations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.Children.Item.Children.Item.Relations.Item
{
    [Proxy(typeof(RelationItemRequestBuilder), true)]
    public partial interface IRelationItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.Children.Item.Children.Item.Relations.Item.FromTerm
{
    [Proxy(typeof(FromTermRequestBuilder), true)]
    public partial interface IFromTermRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.Children.Item.Children.Item.Relations.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.Children.Item.Children.Item.Relations.Item.ToTerm
{
    [Proxy(typeof(ToTermRequestBuilder), true)]
    public partial interface IToTermRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.Children.Item.Children.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.Children.Item.Relations
{
    [Proxy(typeof(RelationsRequestBuilder), true)]
    public partial interface IRelationsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.Children.Item.Relations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.Children.Item.Relations.Item
{
    [Proxy(typeof(RelationItemRequestBuilder), true)]
    public partial interface IRelationItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.Children.Item.Relations.Item.FromTerm
{
    [Proxy(typeof(FromTermRequestBuilder), true)]
    public partial interface IFromTermRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.Children.Item.Relations.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.Children.Item.Relations.Item.ToTerm
{
    [Proxy(typeof(ToTermRequestBuilder), true)]
    public partial interface IToTermRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.Children.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.ParentGroup
{
    [Proxy(typeof(ParentGroupRequestBuilder), true)]
    public partial interface IParentGroupRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets
{
    [Proxy(typeof(SetsRequestBuilder), true)]
    public partial interface ISetsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item
{
    [Proxy(typeof(SetItemRequestBuilder), true)]
    public partial interface ISetItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Children
{
    [Proxy(typeof(ChildrenRequestBuilder), true)]
    public partial interface IChildrenRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Children.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Children.Item
{
    [Proxy(typeof(TermItemRequestBuilder), true)]
    public partial interface ITermItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Children.Item.Children
{
    [Proxy(typeof(ChildrenRequestBuilder), true)]
    public partial interface IChildrenRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Children.Item.Children.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Children.Item.Children.Item
{
    [Proxy(typeof(TermItemRequestBuilder), true)]
    public partial interface ITermItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Children.Item.Children.Item.Relations
{
    [Proxy(typeof(RelationsRequestBuilder), true)]
    public partial interface IRelationsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Children.Item.Children.Item.Relations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Children.Item.Children.Item.Relations.Item
{
    [Proxy(typeof(RelationItemRequestBuilder), true)]
    public partial interface IRelationItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Children.Item.Children.Item.Relations.Item.FromTerm
{
    [Proxy(typeof(FromTermRequestBuilder), true)]
    public partial interface IFromTermRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Children.Item.Children.Item.Relations.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Children.Item.Children.Item.Relations.Item.ToTerm
{
    [Proxy(typeof(ToTermRequestBuilder), true)]
    public partial interface IToTermRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Children.Item.Children.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Children.Item.Relations
{
    [Proxy(typeof(RelationsRequestBuilder), true)]
    public partial interface IRelationsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Children.Item.Relations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Children.Item.Relations.Item
{
    [Proxy(typeof(RelationItemRequestBuilder), true)]
    public partial interface IRelationItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Children.Item.Relations.Item.FromTerm
{
    [Proxy(typeof(FromTermRequestBuilder), true)]
    public partial interface IFromTermRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Children.Item.Relations.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Children.Item.Relations.Item.ToTerm
{
    [Proxy(typeof(ToTermRequestBuilder), true)]
    public partial interface IToTermRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Children.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Relations
{
    [Proxy(typeof(RelationsRequestBuilder), true)]
    public partial interface IRelationsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Relations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Relations.Item
{
    [Proxy(typeof(RelationItemRequestBuilder), true)]
    public partial interface IRelationItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Relations.Item.FromTerm
{
    [Proxy(typeof(FromTermRequestBuilder), true)]
    public partial interface IFromTermRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Relations.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Relations.Item.ToTerm
{
    [Proxy(typeof(ToTermRequestBuilder), true)]
    public partial interface IToTermRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Terms
{
    [Proxy(typeof(TermsRequestBuilder), true)]
    public partial interface ITermsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Terms.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Terms.Item
{
    [Proxy(typeof(TermItemRequestBuilder), true)]
    public partial interface ITermItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Terms.Item.Children
{
    [Proxy(typeof(ChildrenRequestBuilder), true)]
    public partial interface IChildrenRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Terms.Item.Children.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Terms.Item.Children.Item
{
    [Proxy(typeof(TermItemRequestBuilder), true)]
    public partial interface ITermItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Terms.Item.Children.Item.Relations
{
    [Proxy(typeof(RelationsRequestBuilder), true)]
    public partial interface IRelationsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Terms.Item.Children.Item.Relations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Terms.Item.Children.Item.Relations.Item
{
    [Proxy(typeof(RelationItemRequestBuilder), true)]
    public partial interface IRelationItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Terms.Item.Children.Item.Relations.Item.FromTerm
{
    [Proxy(typeof(FromTermRequestBuilder), true)]
    public partial interface IFromTermRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Terms.Item.Children.Item.Relations.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Terms.Item.Children.Item.Relations.Item.ToTerm
{
    [Proxy(typeof(ToTermRequestBuilder), true)]
    public partial interface IToTermRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Terms.Item.Children.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Terms.Item.Relations
{
    [Proxy(typeof(RelationsRequestBuilder), true)]
    public partial interface IRelationsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Terms.Item.Relations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Terms.Item.Relations.Item
{
    [Proxy(typeof(RelationItemRequestBuilder), true)]
    public partial interface IRelationItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Terms.Item.Relations.Item.FromTerm
{
    [Proxy(typeof(FromTermRequestBuilder), true)]
    public partial interface IFromTermRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Terms.Item.Relations.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Terms.Item.Relations.Item.ToTerm
{
    [Proxy(typeof(ToTermRequestBuilder), true)]
    public partial interface IToTermRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.ParentGroup.Sets.Item.Terms.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.Relations
{
    [Proxy(typeof(RelationsRequestBuilder), true)]
    public partial interface IRelationsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.Relations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.Relations.Item
{
    [Proxy(typeof(RelationItemRequestBuilder), true)]
    public partial interface IRelationItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.Relations.Item.FromTerm
{
    [Proxy(typeof(FromTermRequestBuilder), true)]
    public partial interface IFromTermRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.Relations.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.Relations.Item.ToTerm
{
    [Proxy(typeof(ToTermRequestBuilder), true)]
    public partial interface IToTermRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.Terms
{
    [Proxy(typeof(TermsRequestBuilder), true)]
    public partial interface ITermsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.Terms.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.Terms.Item
{
    [Proxy(typeof(TermItemRequestBuilder), true)]
    public partial interface ITermItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.Terms.Item.Children
{
    [Proxy(typeof(ChildrenRequestBuilder), true)]
    public partial interface IChildrenRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.Terms.Item.Children.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.Terms.Item.Children.Item
{
    [Proxy(typeof(TermItemRequestBuilder), true)]
    public partial interface ITermItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.Terms.Item.Children.Item.Relations
{
    [Proxy(typeof(RelationsRequestBuilder), true)]
    public partial interface IRelationsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.Terms.Item.Children.Item.Relations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.Terms.Item.Children.Item.Relations.Item
{
    [Proxy(typeof(RelationItemRequestBuilder), true)]
    public partial interface IRelationItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.Terms.Item.Children.Item.Relations.Item.FromTerm
{
    [Proxy(typeof(FromTermRequestBuilder), true)]
    public partial interface IFromTermRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.Terms.Item.Children.Item.Relations.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.Terms.Item.Children.Item.Relations.Item.ToTerm
{
    [Proxy(typeof(ToTermRequestBuilder), true)]
    public partial interface IToTermRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.Terms.Item.Children.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.Terms.Item.Relations
{
    [Proxy(typeof(RelationsRequestBuilder), true)]
    public partial interface IRelationsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.Terms.Item.Relations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.Terms.Item.Relations.Item
{
    [Proxy(typeof(RelationItemRequestBuilder), true)]
    public partial interface IRelationItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.Terms.Item.Relations.Item.FromTerm
{
    [Proxy(typeof(FromTermRequestBuilder), true)]
    public partial interface IFromTermRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.Terms.Item.Relations.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.Terms.Item.Relations.Item.ToTerm
{
    [Proxy(typeof(ToTermRequestBuilder), true)]
    public partial interface IToTermRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStore.Sets.Item.Terms.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores
{
    [Proxy(typeof(TermStoresRequestBuilder), true)]
    public partial interface ITermStoresRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item
{
    [Proxy(typeof(StoreItemRequestBuilder), true)]
    public partial interface IStoreItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Groups
{
    [Proxy(typeof(GroupsRequestBuilder), true)]
    public partial interface IGroupsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Groups.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Groups.Item
{
    [Proxy(typeof(GroupItemRequestBuilder), true)]
    public partial interface IGroupItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Groups.Item.Sets
{
    [Proxy(typeof(SetsRequestBuilder), true)]
    public partial interface ISetsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Groups.Item.Sets.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Groups.Item.Sets.Item
{
    [Proxy(typeof(SetItemRequestBuilder), true)]
    public partial interface ISetItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Children
{
    [Proxy(typeof(ChildrenRequestBuilder), true)]
    public partial interface IChildrenRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Children.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Children.Item
{
    [Proxy(typeof(TermItemRequestBuilder), true)]
    public partial interface ITermItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Children.Item.Children
{
    [Proxy(typeof(ChildrenRequestBuilder), true)]
    public partial interface IChildrenRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Children.Item.Children.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Children.Item.Children.Item
{
    [Proxy(typeof(TermItemRequestBuilder), true)]
    public partial interface ITermItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Children.Item.Children.Item.Relations
{
    [Proxy(typeof(RelationsRequestBuilder), true)]
    public partial interface IRelationsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Children.Item.Children.Item.Relations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Children.Item.Children.Item.Relations.Item
{
    [Proxy(typeof(RelationItemRequestBuilder), true)]
    public partial interface IRelationItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Children.Item.Children.Item.Relations.Item.FromTerm
{
    [Proxy(typeof(FromTermRequestBuilder), true)]
    public partial interface IFromTermRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Children.Item.Children.Item.Relations.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Children.Item.Children.Item.Relations.Item.ToTerm
{
    [Proxy(typeof(ToTermRequestBuilder), true)]
    public partial interface IToTermRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Children.Item.Children.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Children.Item.Relations
{
    [Proxy(typeof(RelationsRequestBuilder), true)]
    public partial interface IRelationsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Children.Item.Relations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Children.Item.Relations.Item
{
    [Proxy(typeof(RelationItemRequestBuilder), true)]
    public partial interface IRelationItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Children.Item.Relations.Item.FromTerm
{
    [Proxy(typeof(FromTermRequestBuilder), true)]
    public partial interface IFromTermRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Children.Item.Relations.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Children.Item.Relations.Item.ToTerm
{
    [Proxy(typeof(ToTermRequestBuilder), true)]
    public partial interface IToTermRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Children.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.ParentGroup
{
    [Proxy(typeof(ParentGroupRequestBuilder), true)]
    public partial interface IParentGroupRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Relations
{
    [Proxy(typeof(RelationsRequestBuilder), true)]
    public partial interface IRelationsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Relations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Relations.Item
{
    [Proxy(typeof(RelationItemRequestBuilder), true)]
    public partial interface IRelationItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Relations.Item.FromTerm
{
    [Proxy(typeof(FromTermRequestBuilder), true)]
    public partial interface IFromTermRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Relations.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Relations.Item.ToTerm
{
    [Proxy(typeof(ToTermRequestBuilder), true)]
    public partial interface IToTermRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Terms
{
    [Proxy(typeof(TermsRequestBuilder), true)]
    public partial interface ITermsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Terms.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Terms.Item
{
    [Proxy(typeof(TermItemRequestBuilder), true)]
    public partial interface ITermItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Terms.Item.Children
{
    [Proxy(typeof(ChildrenRequestBuilder), true)]
    public partial interface IChildrenRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Terms.Item.Children.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Terms.Item.Children.Item
{
    [Proxy(typeof(TermItemRequestBuilder), true)]
    public partial interface ITermItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Terms.Item.Children.Item.Relations
{
    [Proxy(typeof(RelationsRequestBuilder), true)]
    public partial interface IRelationsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Terms.Item.Children.Item.Relations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Terms.Item.Children.Item.Relations.Item
{
    [Proxy(typeof(RelationItemRequestBuilder), true)]
    public partial interface IRelationItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Terms.Item.Children.Item.Relations.Item.FromTerm
{
    [Proxy(typeof(FromTermRequestBuilder), true)]
    public partial interface IFromTermRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Terms.Item.Children.Item.Relations.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Terms.Item.Children.Item.Relations.Item.ToTerm
{
    [Proxy(typeof(ToTermRequestBuilder), true)]
    public partial interface IToTermRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Terms.Item.Children.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Terms.Item.Relations
{
    [Proxy(typeof(RelationsRequestBuilder), true)]
    public partial interface IRelationsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Terms.Item.Relations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Terms.Item.Relations.Item
{
    [Proxy(typeof(RelationItemRequestBuilder), true)]
    public partial interface IRelationItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Terms.Item.Relations.Item.FromTerm
{
    [Proxy(typeof(FromTermRequestBuilder), true)]
    public partial interface IFromTermRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Terms.Item.Relations.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Terms.Item.Relations.Item.ToTerm
{
    [Proxy(typeof(ToTermRequestBuilder), true)]
    public partial interface IToTermRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Groups.Item.Sets.Item.Terms.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets
{
    [Proxy(typeof(SetsRequestBuilder), true)]
    public partial interface ISetsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item
{
    [Proxy(typeof(SetItemRequestBuilder), true)]
    public partial interface ISetItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.Children
{
    [Proxy(typeof(ChildrenRequestBuilder), true)]
    public partial interface IChildrenRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.Children.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.Children.Item
{
    [Proxy(typeof(TermItemRequestBuilder), true)]
    public partial interface ITermItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.Children.Item.Children
{
    [Proxy(typeof(ChildrenRequestBuilder), true)]
    public partial interface IChildrenRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.Children.Item.Children.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.Children.Item.Children.Item
{
    [Proxy(typeof(TermItemRequestBuilder), true)]
    public partial interface ITermItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.Children.Item.Children.Item.Relations
{
    [Proxy(typeof(RelationsRequestBuilder), true)]
    public partial interface IRelationsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.Children.Item.Children.Item.Relations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.Children.Item.Children.Item.Relations.Item
{
    [Proxy(typeof(RelationItemRequestBuilder), true)]
    public partial interface IRelationItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.Children.Item.Children.Item.Relations.Item.FromTerm
{
    [Proxy(typeof(FromTermRequestBuilder), true)]
    public partial interface IFromTermRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.Children.Item.Children.Item.Relations.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.Children.Item.Children.Item.Relations.Item.ToTerm
{
    [Proxy(typeof(ToTermRequestBuilder), true)]
    public partial interface IToTermRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.Children.Item.Children.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.Children.Item.Relations
{
    [Proxy(typeof(RelationsRequestBuilder), true)]
    public partial interface IRelationsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.Children.Item.Relations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.Children.Item.Relations.Item
{
    [Proxy(typeof(RelationItemRequestBuilder), true)]
    public partial interface IRelationItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.Children.Item.Relations.Item.FromTerm
{
    [Proxy(typeof(FromTermRequestBuilder), true)]
    public partial interface IFromTermRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.Children.Item.Relations.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.Children.Item.Relations.Item.ToTerm
{
    [Proxy(typeof(ToTermRequestBuilder), true)]
    public partial interface IToTermRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.Children.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.ParentGroup
{
    [Proxy(typeof(ParentGroupRequestBuilder), true)]
    public partial interface IParentGroupRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets
{
    [Proxy(typeof(SetsRequestBuilder), true)]
    public partial interface ISetsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item
{
    [Proxy(typeof(SetItemRequestBuilder), true)]
    public partial interface ISetItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Children
{
    [Proxy(typeof(ChildrenRequestBuilder), true)]
    public partial interface IChildrenRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Children.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Children.Item
{
    [Proxy(typeof(TermItemRequestBuilder), true)]
    public partial interface ITermItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Children.Item.Children
{
    [Proxy(typeof(ChildrenRequestBuilder), true)]
    public partial interface IChildrenRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Children.Item.Children.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Children.Item.Children.Item
{
    [Proxy(typeof(TermItemRequestBuilder), true)]
    public partial interface ITermItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Children.Item.Children.Item.Relations
{
    [Proxy(typeof(RelationsRequestBuilder), true)]
    public partial interface IRelationsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Children.Item.Children.Item.Relations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Children.Item.Children.Item.Relations.Item
{
    [Proxy(typeof(RelationItemRequestBuilder), true)]
    public partial interface IRelationItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Children.Item.Children.Item.Relations.Item.FromTerm
{
    [Proxy(typeof(FromTermRequestBuilder), true)]
    public partial interface IFromTermRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Children.Item.Children.Item.Relations.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Children.Item.Children.Item.Relations.Item.ToTerm
{
    [Proxy(typeof(ToTermRequestBuilder), true)]
    public partial interface IToTermRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Children.Item.Children.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Children.Item.Relations
{
    [Proxy(typeof(RelationsRequestBuilder), true)]
    public partial interface IRelationsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Children.Item.Relations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Children.Item.Relations.Item
{
    [Proxy(typeof(RelationItemRequestBuilder), true)]
    public partial interface IRelationItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Children.Item.Relations.Item.FromTerm
{
    [Proxy(typeof(FromTermRequestBuilder), true)]
    public partial interface IFromTermRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Children.Item.Relations.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Children.Item.Relations.Item.ToTerm
{
    [Proxy(typeof(ToTermRequestBuilder), true)]
    public partial interface IToTermRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Children.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Relations
{
    [Proxy(typeof(RelationsRequestBuilder), true)]
    public partial interface IRelationsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Relations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Relations.Item
{
    [Proxy(typeof(RelationItemRequestBuilder), true)]
    public partial interface IRelationItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Relations.Item.FromTerm
{
    [Proxy(typeof(FromTermRequestBuilder), true)]
    public partial interface IFromTermRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Relations.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Relations.Item.ToTerm
{
    [Proxy(typeof(ToTermRequestBuilder), true)]
    public partial interface IToTermRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Terms
{
    [Proxy(typeof(TermsRequestBuilder), true)]
    public partial interface ITermsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Terms.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Terms.Item
{
    [Proxy(typeof(TermItemRequestBuilder), true)]
    public partial interface ITermItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Terms.Item.Children
{
    [Proxy(typeof(ChildrenRequestBuilder), true)]
    public partial interface IChildrenRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Terms.Item.Children.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Terms.Item.Children.Item
{
    [Proxy(typeof(TermItemRequestBuilder), true)]
    public partial interface ITermItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Terms.Item.Children.Item.Relations
{
    [Proxy(typeof(RelationsRequestBuilder), true)]
    public partial interface IRelationsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Terms.Item.Children.Item.Relations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Terms.Item.Children.Item.Relations.Item
{
    [Proxy(typeof(RelationItemRequestBuilder), true)]
    public partial interface IRelationItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Terms.Item.Children.Item.Relations.Item.FromTerm
{
    [Proxy(typeof(FromTermRequestBuilder), true)]
    public partial interface IFromTermRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Terms.Item.Children.Item.Relations.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Terms.Item.Children.Item.Relations.Item.ToTerm
{
    [Proxy(typeof(ToTermRequestBuilder), true)]
    public partial interface IToTermRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Terms.Item.Children.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Terms.Item.Relations
{
    [Proxy(typeof(RelationsRequestBuilder), true)]
    public partial interface IRelationsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Terms.Item.Relations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Terms.Item.Relations.Item
{
    [Proxy(typeof(RelationItemRequestBuilder), true)]
    public partial interface IRelationItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Terms.Item.Relations.Item.FromTerm
{
    [Proxy(typeof(FromTermRequestBuilder), true)]
    public partial interface IFromTermRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Terms.Item.Relations.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Terms.Item.Relations.Item.ToTerm
{
    [Proxy(typeof(ToTermRequestBuilder), true)]
    public partial interface IToTermRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.ParentGroup.Sets.Item.Terms.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.Relations
{
    [Proxy(typeof(RelationsRequestBuilder), true)]
    public partial interface IRelationsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.Relations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.Relations.Item
{
    [Proxy(typeof(RelationItemRequestBuilder), true)]
    public partial interface IRelationItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.Relations.Item.FromTerm
{
    [Proxy(typeof(FromTermRequestBuilder), true)]
    public partial interface IFromTermRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.Relations.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.Relations.Item.ToTerm
{
    [Proxy(typeof(ToTermRequestBuilder), true)]
    public partial interface IToTermRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.Terms
{
    [Proxy(typeof(TermsRequestBuilder), true)]
    public partial interface ITermsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.Terms.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.Terms.Item
{
    [Proxy(typeof(TermItemRequestBuilder), true)]
    public partial interface ITermItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.Terms.Item.Children
{
    [Proxy(typeof(ChildrenRequestBuilder), true)]
    public partial interface IChildrenRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.Terms.Item.Children.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.Terms.Item.Children.Item
{
    [Proxy(typeof(TermItemRequestBuilder), true)]
    public partial interface ITermItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.Terms.Item.Children.Item.Relations
{
    [Proxy(typeof(RelationsRequestBuilder), true)]
    public partial interface IRelationsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.Terms.Item.Children.Item.Relations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.Terms.Item.Children.Item.Relations.Item
{
    [Proxy(typeof(RelationItemRequestBuilder), true)]
    public partial interface IRelationItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.Terms.Item.Children.Item.Relations.Item.FromTerm
{
    [Proxy(typeof(FromTermRequestBuilder), true)]
    public partial interface IFromTermRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.Terms.Item.Children.Item.Relations.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.Terms.Item.Children.Item.Relations.Item.ToTerm
{
    [Proxy(typeof(ToTermRequestBuilder), true)]
    public partial interface IToTermRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.Terms.Item.Children.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.Terms.Item.Relations
{
    [Proxy(typeof(RelationsRequestBuilder), true)]
    public partial interface IRelationsRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.Terms.Item.Relations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.Terms.Item.Relations.Item
{
    [Proxy(typeof(RelationItemRequestBuilder), true)]
    public partial interface IRelationItemRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.Terms.Item.Relations.Item.FromTerm
{
    [Proxy(typeof(FromTermRequestBuilder), true)]
    public partial interface IFromTermRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.Terms.Item.Relations.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.Terms.Item.Relations.Item.ToTerm
{
    [Proxy(typeof(ToTermRequestBuilder), true)]
    public partial interface IToTermRequestBuilder;
}

namespace Microsoft.Graph.Sites.Item.TermStores.Item.Sets.Item.Terms.Item.Set
{
    [Proxy(typeof(SetRequestBuilder), true)]
    public partial interface ISetRequestBuilder;
}

namespace Microsoft.Graph.Sites.Remove
{
    [Proxy(typeof(RemoveRequestBuilder), true)]
    public partial interface IRemoveRequestBuilder;
}

namespace Microsoft.Graph.Solutions
{
    [Proxy(typeof(SolutionsRequestBuilder), true)]
    public partial interface ISolutionsRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore
{
    [Proxy(typeof(BackupRestoreRequestBuilder), true)]
    public partial interface IBackupRestoreRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.DriveInclusionRules
{
    [Proxy(typeof(DriveInclusionRulesRequestBuilder), true)]
    public partial interface IDriveInclusionRulesRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.DriveInclusionRules.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.DriveInclusionRules.Item
{
    [Proxy(typeof(DriveProtectionRuleItemRequestBuilder), true)]
    public partial interface IDriveProtectionRuleItemRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.DriveProtectionUnits
{
    [Proxy(typeof(DriveProtectionUnitsRequestBuilder), true)]
    public partial interface IDriveProtectionUnitsRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.DriveProtectionUnits.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.DriveProtectionUnits.Item
{
    [Proxy(typeof(DriveProtectionUnitItemRequestBuilder), true)]
    public partial interface IDriveProtectionUnitItemRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.DriveProtectionUnitsBulkAdditionJobs
{
    [Proxy(typeof(DriveProtectionUnitsBulkAdditionJobsRequestBuilder), true)]
    public partial interface IDriveProtectionUnitsBulkAdditionJobsRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.DriveProtectionUnitsBulkAdditionJobs.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.DriveProtectionUnitsBulkAdditionJobs.Item
{
    [Proxy(typeof(DriveProtectionUnitsBulkAdditionJobItemRequestBuilder), true)]
    public partial interface IDriveProtectionUnitsBulkAdditionJobItemRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.Enable
{
    [Proxy(typeof(EnableRequestBuilder), true)]
    public partial interface IEnableRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.ExchangeProtectionPolicies
{
    [Proxy(typeof(ExchangeProtectionPoliciesRequestBuilder), true)]
    public partial interface IExchangeProtectionPoliciesRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.ExchangeProtectionPolicies.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.ExchangeProtectionPolicies.Item
{
    [Proxy(typeof(ExchangeProtectionPolicyItemRequestBuilder), true)]
    public partial interface IExchangeProtectionPolicyItemRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.ExchangeProtectionPolicies.Item.MailboxInclusionRules
{
    [Proxy(typeof(MailboxInclusionRulesRequestBuilder), true)]
    public partial interface IMailboxInclusionRulesRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.ExchangeProtectionPolicies.Item.MailboxInclusionRules.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.ExchangeProtectionPolicies.Item.MailboxInclusionRules.Item
{
    [Proxy(typeof(MailboxProtectionRuleItemRequestBuilder), true)]
    public partial interface IMailboxProtectionRuleItemRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.ExchangeProtectionPolicies.Item.MailboxProtectionUnits
{
    [Proxy(typeof(MailboxProtectionUnitsRequestBuilder), true)]
    public partial interface IMailboxProtectionUnitsRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.ExchangeProtectionPolicies.Item.MailboxProtectionUnits.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.ExchangeProtectionPolicies.Item.MailboxProtectionUnits.Item
{
    [Proxy(typeof(MailboxProtectionUnitItemRequestBuilder), true)]
    public partial interface IMailboxProtectionUnitItemRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.ExchangeProtectionPolicies.Item.MailboxProtectionUnitsBulkAdditionJobs
{
    [Proxy(typeof(MailboxProtectionUnitsBulkAdditionJobsRequestBuilder), true)]
    public partial interface IMailboxProtectionUnitsBulkAdditionJobsRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.ExchangeProtectionPolicies.Item.MailboxProtectionUnitsBulkAdditionJobs.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.ExchangeProtectionPolicies.Item.MailboxProtectionUnitsBulkAdditionJobs.Item
{
    [Proxy(typeof(MailboxProtectionUnitsBulkAdditionJobItemRequestBuilder), true)]
    public partial interface IMailboxProtectionUnitsBulkAdditionJobItemRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.ExchangeRestoreSessions
{
    [Proxy(typeof(ExchangeRestoreSessionsRequestBuilder), true)]
    public partial interface IExchangeRestoreSessionsRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.ExchangeRestoreSessions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.ExchangeRestoreSessions.Item
{
    [Proxy(typeof(ExchangeRestoreSessionItemRequestBuilder), true)]
    public partial interface IExchangeRestoreSessionItemRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.ExchangeRestoreSessions.Item.GranularMailboxRestoreArtifacts
{
    [Proxy(typeof(GranularMailboxRestoreArtifactsRequestBuilder), true)]
    public partial interface IGranularMailboxRestoreArtifactsRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.ExchangeRestoreSessions.Item.GranularMailboxRestoreArtifacts.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.ExchangeRestoreSessions.Item.GranularMailboxRestoreArtifacts.Item
{
    [Proxy(typeof(GranularMailboxRestoreArtifactItemRequestBuilder), true)]
    public partial interface IGranularMailboxRestoreArtifactItemRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.ExchangeRestoreSessions.Item.GranularMailboxRestoreArtifacts.Item.RestorePoint
{
    [Proxy(typeof(RestorePointRequestBuilder), true)]
    public partial interface IRestorePointRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.ExchangeRestoreSessions.Item.MailboxRestoreArtifacts
{
    [Proxy(typeof(MailboxRestoreArtifactsRequestBuilder), true)]
    public partial interface IMailboxRestoreArtifactsRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.ExchangeRestoreSessions.Item.MailboxRestoreArtifacts.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.ExchangeRestoreSessions.Item.MailboxRestoreArtifacts.Item
{
    [Proxy(typeof(MailboxRestoreArtifactItemRequestBuilder), true)]
    public partial interface IMailboxRestoreArtifactItemRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.ExchangeRestoreSessions.Item.MailboxRestoreArtifacts.Item.RestorePoint
{
    [Proxy(typeof(RestorePointRequestBuilder), true)]
    public partial interface IRestorePointRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.ExchangeRestoreSessions.Item.MailboxRestoreArtifactsBulkAdditionRequests
{
    [Proxy(typeof(MailboxRestoreArtifactsBulkAdditionRequestsRequestBuilder), true)]
    public partial interface IMailboxRestoreArtifactsBulkAdditionRequestsRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.ExchangeRestoreSessions.Item.MailboxRestoreArtifactsBulkAdditionRequests.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.ExchangeRestoreSessions.Item.MailboxRestoreArtifactsBulkAdditionRequests.Item
{
    [Proxy(typeof(MailboxRestoreArtifactsBulkAdditionRequestItemRequestBuilder), true)]
    public partial interface IMailboxRestoreArtifactsBulkAdditionRequestItemRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.MailboxInclusionRules
{
    [Proxy(typeof(MailboxInclusionRulesRequestBuilder), true)]
    public partial interface IMailboxInclusionRulesRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.MailboxInclusionRules.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.MailboxInclusionRules.Item
{
    [Proxy(typeof(MailboxProtectionRuleItemRequestBuilder), true)]
    public partial interface IMailboxProtectionRuleItemRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.MailboxProtectionUnits
{
    [Proxy(typeof(MailboxProtectionUnitsRequestBuilder), true)]
    public partial interface IMailboxProtectionUnitsRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.MailboxProtectionUnits.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.MailboxProtectionUnits.Item
{
    [Proxy(typeof(MailboxProtectionUnitItemRequestBuilder), true)]
    public partial interface IMailboxProtectionUnitItemRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.MailboxProtectionUnitsBulkAdditionJobs
{
    [Proxy(typeof(MailboxProtectionUnitsBulkAdditionJobsRequestBuilder), true)]
    public partial interface IMailboxProtectionUnitsBulkAdditionJobsRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.MailboxProtectionUnitsBulkAdditionJobs.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.MailboxProtectionUnitsBulkAdditionJobs.Item
{
    [Proxy(typeof(MailboxProtectionUnitsBulkAdditionJobItemRequestBuilder), true)]
    public partial interface IMailboxProtectionUnitsBulkAdditionJobItemRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.OneDriveForBusinessProtectionPolicies
{
    [Proxy(typeof(OneDriveForBusinessProtectionPoliciesRequestBuilder), true)]
    public partial interface IOneDriveForBusinessProtectionPoliciesRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.OneDriveForBusinessProtectionPolicies.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.OneDriveForBusinessProtectionPolicies.Item
{
    [Proxy(typeof(OneDriveForBusinessProtectionPolicyItemRequestBuilder), true)]
    public partial interface IOneDriveForBusinessProtectionPolicyItemRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.OneDriveForBusinessProtectionPolicies.Item.DriveInclusionRules
{
    [Proxy(typeof(DriveInclusionRulesRequestBuilder), true)]
    public partial interface IDriveInclusionRulesRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.OneDriveForBusinessProtectionPolicies.Item.DriveInclusionRules.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.OneDriveForBusinessProtectionPolicies.Item.DriveInclusionRules.Item
{
    [Proxy(typeof(DriveProtectionRuleItemRequestBuilder), true)]
    public partial interface IDriveProtectionRuleItemRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.OneDriveForBusinessProtectionPolicies.Item.DriveProtectionUnits
{
    [Proxy(typeof(DriveProtectionUnitsRequestBuilder), true)]
    public partial interface IDriveProtectionUnitsRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.OneDriveForBusinessProtectionPolicies.Item.DriveProtectionUnits.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.OneDriveForBusinessProtectionPolicies.Item.DriveProtectionUnits.Item
{
    [Proxy(typeof(DriveProtectionUnitItemRequestBuilder), true)]
    public partial interface IDriveProtectionUnitItemRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.OneDriveForBusinessProtectionPolicies.Item.DriveProtectionUnitsBulkAdditionJobs
{
    [Proxy(typeof(DriveProtectionUnitsBulkAdditionJobsRequestBuilder), true)]
    public partial interface IDriveProtectionUnitsBulkAdditionJobsRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.OneDriveForBusinessProtectionPolicies.Item.DriveProtectionUnitsBulkAdditionJobs.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.OneDriveForBusinessProtectionPolicies.Item.DriveProtectionUnitsBulkAdditionJobs.Item
{
    [Proxy(typeof(DriveProtectionUnitsBulkAdditionJobItemRequestBuilder), true)]
    public partial interface IDriveProtectionUnitsBulkAdditionJobItemRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.OneDriveForBusinessRestoreSessions
{
    [Proxy(typeof(OneDriveForBusinessRestoreSessionsRequestBuilder), true)]
    public partial interface IOneDriveForBusinessRestoreSessionsRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.OneDriveForBusinessRestoreSessions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.OneDriveForBusinessRestoreSessions.Item
{
    [Proxy(typeof(OneDriveForBusinessRestoreSessionItemRequestBuilder), true)]
    public partial interface IOneDriveForBusinessRestoreSessionItemRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.OneDriveForBusinessRestoreSessions.Item.DriveRestoreArtifacts
{
    [Proxy(typeof(DriveRestoreArtifactsRequestBuilder), true)]
    public partial interface IDriveRestoreArtifactsRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.OneDriveForBusinessRestoreSessions.Item.DriveRestoreArtifacts.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.OneDriveForBusinessRestoreSessions.Item.DriveRestoreArtifacts.Item
{
    [Proxy(typeof(DriveRestoreArtifactItemRequestBuilder), true)]
    public partial interface IDriveRestoreArtifactItemRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.OneDriveForBusinessRestoreSessions.Item.DriveRestoreArtifacts.Item.RestorePoint
{
    [Proxy(typeof(RestorePointRequestBuilder), true)]
    public partial interface IRestorePointRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.OneDriveForBusinessRestoreSessions.Item.DriveRestoreArtifactsBulkAdditionRequests
{
    [Proxy(typeof(DriveRestoreArtifactsBulkAdditionRequestsRequestBuilder), true)]
    public partial interface IDriveRestoreArtifactsBulkAdditionRequestsRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.OneDriveForBusinessRestoreSessions.Item.DriveRestoreArtifactsBulkAdditionRequests.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.OneDriveForBusinessRestoreSessions.Item.DriveRestoreArtifactsBulkAdditionRequests.Item
{
    [Proxy(typeof(DriveRestoreArtifactsBulkAdditionRequestItemRequestBuilder), true)]
    public partial interface IDriveRestoreArtifactsBulkAdditionRequestItemRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.ProtectionPolicies
{
    [Proxy(typeof(ProtectionPoliciesRequestBuilder), true)]
    public partial interface IProtectionPoliciesRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.ProtectionPolicies.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.ProtectionPolicies.Item
{
    [Proxy(typeof(ProtectionPolicyBaseItemRequestBuilder), true)]
    public partial interface IProtectionPolicyBaseItemRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.ProtectionPolicies.Item.Activate
{
    [Proxy(typeof(ActivateRequestBuilder), true)]
    public partial interface IActivateRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.ProtectionPolicies.Item.Deactivate
{
    [Proxy(typeof(DeactivateRequestBuilder), true)]
    public partial interface IDeactivateRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.ProtectionUnits
{
    [Proxy(typeof(ProtectionUnitsRequestBuilder), true)]
    public partial interface IProtectionUnitsRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.ProtectionUnits.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.ProtectionUnits.GraphDriveProtectionUnit
{
    [Proxy(typeof(GraphDriveProtectionUnitRequestBuilder), true)]
    public partial interface IGraphDriveProtectionUnitRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.ProtectionUnits.GraphDriveProtectionUnit.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.ProtectionUnits.GraphMailboxProtectionUnit
{
    [Proxy(typeof(GraphMailboxProtectionUnitRequestBuilder), true)]
    public partial interface IGraphMailboxProtectionUnitRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.ProtectionUnits.GraphMailboxProtectionUnit.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.ProtectionUnits.GraphSiteProtectionUnit
{
    [Proxy(typeof(GraphSiteProtectionUnitRequestBuilder), true)]
    public partial interface IGraphSiteProtectionUnitRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.ProtectionUnits.GraphSiteProtectionUnit.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.ProtectionUnits.Item
{
    [Proxy(typeof(ProtectionUnitBaseItemRequestBuilder), true)]
    public partial interface IProtectionUnitBaseItemRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.ProtectionUnits.Item.GraphDriveProtectionUnit
{
    [Proxy(typeof(GraphDriveProtectionUnitRequestBuilder), true)]
    public partial interface IGraphDriveProtectionUnitRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.ProtectionUnits.Item.GraphMailboxProtectionUnit
{
    [Proxy(typeof(GraphMailboxProtectionUnitRequestBuilder), true)]
    public partial interface IGraphMailboxProtectionUnitRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.ProtectionUnits.Item.GraphSiteProtectionUnit
{
    [Proxy(typeof(GraphSiteProtectionUnitRequestBuilder), true)]
    public partial interface IGraphSiteProtectionUnitRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.RestorePoints
{
    [Proxy(typeof(RestorePointsRequestBuilder), true)]
    public partial interface IRestorePointsRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.RestorePoints.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.RestorePoints.Item
{
    [Proxy(typeof(RestorePointItemRequestBuilder), true)]
    public partial interface IRestorePointItemRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.RestorePoints.Item.ProtectionUnit
{
    [Proxy(typeof(ProtectionUnitRequestBuilder), true)]
    public partial interface IProtectionUnitRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.RestorePoints.Search
{
    [Proxy(typeof(SearchRequestBuilder), true)]
    public partial interface ISearchRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.RestoreSessions
{
    [Proxy(typeof(RestoreSessionsRequestBuilder), true)]
    public partial interface IRestoreSessionsRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.RestoreSessions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.RestoreSessions.Item
{
    [Proxy(typeof(RestoreSessionBaseItemRequestBuilder), true)]
    public partial interface IRestoreSessionBaseItemRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.RestoreSessions.Item.Activate
{
    [Proxy(typeof(ActivateRequestBuilder), true)]
    public partial interface IActivateRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.ServiceApps
{
    [Proxy(typeof(ServiceAppsRequestBuilder), true)]
    public partial interface IServiceAppsRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.ServiceApps.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.ServiceApps.Item
{
    [Proxy(typeof(ServiceAppItemRequestBuilder), true)]
    public partial interface IServiceAppItemRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.ServiceApps.Item.Activate
{
    [Proxy(typeof(ActivateRequestBuilder), true)]
    public partial interface IActivateRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.ServiceApps.Item.Deactivate
{
    [Proxy(typeof(DeactivateRequestBuilder), true)]
    public partial interface IDeactivateRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.SharePointProtectionPolicies
{
    [Proxy(typeof(SharePointProtectionPoliciesRequestBuilder), true)]
    public partial interface ISharePointProtectionPoliciesRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.SharePointProtectionPolicies.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.SharePointProtectionPolicies.Item
{
    [Proxy(typeof(SharePointProtectionPolicyItemRequestBuilder), true)]
    public partial interface ISharePointProtectionPolicyItemRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.SharePointProtectionPolicies.Item.SiteInclusionRules
{
    [Proxy(typeof(SiteInclusionRulesRequestBuilder), true)]
    public partial interface ISiteInclusionRulesRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.SharePointProtectionPolicies.Item.SiteInclusionRules.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.SharePointProtectionPolicies.Item.SiteInclusionRules.Item
{
    [Proxy(typeof(SiteProtectionRuleItemRequestBuilder), true)]
    public partial interface ISiteProtectionRuleItemRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.SharePointProtectionPolicies.Item.SiteProtectionUnits
{
    [Proxy(typeof(SiteProtectionUnitsRequestBuilder), true)]
    public partial interface ISiteProtectionUnitsRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.SharePointProtectionPolicies.Item.SiteProtectionUnits.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.SharePointProtectionPolicies.Item.SiteProtectionUnits.Item
{
    [Proxy(typeof(SiteProtectionUnitItemRequestBuilder), true)]
    public partial interface ISiteProtectionUnitItemRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.SharePointProtectionPolicies.Item.SiteProtectionUnitsBulkAdditionJobs
{
    [Proxy(typeof(SiteProtectionUnitsBulkAdditionJobsRequestBuilder), true)]
    public partial interface ISiteProtectionUnitsBulkAdditionJobsRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.SharePointProtectionPolicies.Item.SiteProtectionUnitsBulkAdditionJobs.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.SharePointProtectionPolicies.Item.SiteProtectionUnitsBulkAdditionJobs.Item
{
    [Proxy(typeof(SiteProtectionUnitsBulkAdditionJobItemRequestBuilder), true)]
    public partial interface ISiteProtectionUnitsBulkAdditionJobItemRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.SharePointRestoreSessions
{
    [Proxy(typeof(SharePointRestoreSessionsRequestBuilder), true)]
    public partial interface ISharePointRestoreSessionsRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.SharePointRestoreSessions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.SharePointRestoreSessions.Item
{
    [Proxy(typeof(SharePointRestoreSessionItemRequestBuilder), true)]
    public partial interface ISharePointRestoreSessionItemRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.SharePointRestoreSessions.Item.SiteRestoreArtifacts
{
    [Proxy(typeof(SiteRestoreArtifactsRequestBuilder), true)]
    public partial interface ISiteRestoreArtifactsRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.SharePointRestoreSessions.Item.SiteRestoreArtifacts.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.SharePointRestoreSessions.Item.SiteRestoreArtifacts.Item
{
    [Proxy(typeof(SiteRestoreArtifactItemRequestBuilder), true)]
    public partial interface ISiteRestoreArtifactItemRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.SharePointRestoreSessions.Item.SiteRestoreArtifacts.Item.RestorePoint
{
    [Proxy(typeof(RestorePointRequestBuilder), true)]
    public partial interface IRestorePointRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.SharePointRestoreSessions.Item.SiteRestoreArtifactsBulkAdditionRequests
{
    [Proxy(typeof(SiteRestoreArtifactsBulkAdditionRequestsRequestBuilder), true)]
    public partial interface ISiteRestoreArtifactsBulkAdditionRequestsRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.SharePointRestoreSessions.Item.SiteRestoreArtifactsBulkAdditionRequests.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.SharePointRestoreSessions.Item.SiteRestoreArtifactsBulkAdditionRequests.Item
{
    [Proxy(typeof(SiteRestoreArtifactsBulkAdditionRequestItemRequestBuilder), true)]
    public partial interface ISiteRestoreArtifactsBulkAdditionRequestItemRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.SiteInclusionRules
{
    [Proxy(typeof(SiteInclusionRulesRequestBuilder), true)]
    public partial interface ISiteInclusionRulesRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.SiteInclusionRules.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.SiteInclusionRules.Item
{
    [Proxy(typeof(SiteProtectionRuleItemRequestBuilder), true)]
    public partial interface ISiteProtectionRuleItemRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.SiteProtectionUnits
{
    [Proxy(typeof(SiteProtectionUnitsRequestBuilder), true)]
    public partial interface ISiteProtectionUnitsRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.SiteProtectionUnits.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.SiteProtectionUnits.Item
{
    [Proxy(typeof(SiteProtectionUnitItemRequestBuilder), true)]
    public partial interface ISiteProtectionUnitItemRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.SiteProtectionUnitsBulkAdditionJobs
{
    [Proxy(typeof(SiteProtectionUnitsBulkAdditionJobsRequestBuilder), true)]
    public partial interface ISiteProtectionUnitsBulkAdditionJobsRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.SiteProtectionUnitsBulkAdditionJobs.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BackupRestore.SiteProtectionUnitsBulkAdditionJobs.Item
{
    [Proxy(typeof(SiteProtectionUnitsBulkAdditionJobItemRequestBuilder), true)]
    public partial interface ISiteProtectionUnitsBulkAdditionJobItemRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BookingBusinesses
{
    [Proxy(typeof(BookingBusinessesRequestBuilder), true)]
    public partial interface IBookingBusinessesRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BookingBusinesses.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BookingBusinesses.Item
{
    [Proxy(typeof(BookingBusinessItemRequestBuilder), true)]
    public partial interface IBookingBusinessItemRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BookingBusinesses.Item.Appointments
{
    [Proxy(typeof(AppointmentsRequestBuilder), true)]
    public partial interface IAppointmentsRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BookingBusinesses.Item.Appointments.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BookingBusinesses.Item.Appointments.Item
{
    [Proxy(typeof(BookingAppointmentItemRequestBuilder), true)]
    public partial interface IBookingAppointmentItemRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BookingBusinesses.Item.Appointments.Item.Cancel
{
    [Proxy(typeof(CancelRequestBuilder), true)]
    public partial interface ICancelRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BookingBusinesses.Item.CalendarView
{
    [Proxy(typeof(CalendarViewRequestBuilder), true)]
    public partial interface ICalendarViewRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BookingBusinesses.Item.CalendarView.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BookingBusinesses.Item.CalendarView.Item
{
    [Proxy(typeof(BookingAppointmentItemRequestBuilder), true)]
    public partial interface IBookingAppointmentItemRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BookingBusinesses.Item.CalendarView.Item.Cancel
{
    [Proxy(typeof(CancelRequestBuilder), true)]
    public partial interface ICancelRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BookingBusinesses.Item.Customers
{
    [Proxy(typeof(CustomersRequestBuilder), true)]
    public partial interface ICustomersRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BookingBusinesses.Item.Customers.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BookingBusinesses.Item.Customers.Item
{
    [Proxy(typeof(BookingCustomerBaseItemRequestBuilder), true)]
    public partial interface IBookingCustomerBaseItemRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BookingBusinesses.Item.CustomQuestions
{
    [Proxy(typeof(CustomQuestionsRequestBuilder), true)]
    public partial interface ICustomQuestionsRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BookingBusinesses.Item.CustomQuestions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BookingBusinesses.Item.CustomQuestions.Item
{
    [Proxy(typeof(BookingCustomQuestionItemRequestBuilder), true)]
    public partial interface IBookingCustomQuestionItemRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BookingBusinesses.Item.GetStaffAvailability
{
    [Proxy(typeof(GetStaffAvailabilityRequestBuilder), true)]
    public partial interface IGetStaffAvailabilityRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BookingBusinesses.Item.Publish
{
    [Proxy(typeof(PublishRequestBuilder), true)]
    public partial interface IPublishRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BookingBusinesses.Item.Services
{
    [Proxy(typeof(ServicesRequestBuilder), true)]
    public partial interface IServicesRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BookingBusinesses.Item.Services.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BookingBusinesses.Item.Services.Item
{
    [Proxy(typeof(BookingServiceItemRequestBuilder), true)]
    public partial interface IBookingServiceItemRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BookingBusinesses.Item.StaffMembers
{
    [Proxy(typeof(StaffMembersRequestBuilder), true)]
    public partial interface IStaffMembersRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BookingBusinesses.Item.StaffMembers.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BookingBusinesses.Item.StaffMembers.Item
{
    [Proxy(typeof(BookingStaffMemberBaseItemRequestBuilder), true)]
    public partial interface IBookingStaffMemberBaseItemRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BookingBusinesses.Item.Unpublish
{
    [Proxy(typeof(UnpublishRequestBuilder), true)]
    public partial interface IUnpublishRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BookingCurrencies
{
    [Proxy(typeof(BookingCurrenciesRequestBuilder), true)]
    public partial interface IBookingCurrenciesRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BookingCurrencies.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Solutions.BookingCurrencies.Item
{
    [Proxy(typeof(BookingCurrencyItemRequestBuilder), true)]
    public partial interface IBookingCurrencyItemRequestBuilder;
}

namespace Microsoft.Graph.Solutions.VirtualEvents
{
    [Proxy(typeof(VirtualEventsRequestBuilder), true)]
    public partial interface IVirtualEventsRequestBuilder;
}

namespace Microsoft.Graph.Solutions.VirtualEvents.Events
{
    [Proxy(typeof(EventsRequestBuilder), true)]
    public partial interface IEventsRequestBuilder;
}

namespace Microsoft.Graph.Solutions.VirtualEvents.Events.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Solutions.VirtualEvents.Events.Item
{
    [Proxy(typeof(VirtualEventItemRequestBuilder), true)]
    public partial interface IVirtualEventItemRequestBuilder;
}

namespace Microsoft.Graph.Solutions.VirtualEvents.Events.Item.Cancel
{
    [Proxy(typeof(CancelRequestBuilder), true)]
    public partial interface ICancelRequestBuilder;
}

namespace Microsoft.Graph.Solutions.VirtualEvents.Events.Item.Presenters
{
    [Proxy(typeof(PresentersRequestBuilder), true)]
    public partial interface IPresentersRequestBuilder;
}

namespace Microsoft.Graph.Solutions.VirtualEvents.Events.Item.Presenters.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Solutions.VirtualEvents.Events.Item.Presenters.Item
{
    [Proxy(typeof(VirtualEventPresenterItemRequestBuilder), true)]
    public partial interface IVirtualEventPresenterItemRequestBuilder;
}

namespace Microsoft.Graph.Solutions.VirtualEvents.Events.Item.Publish
{
    [Proxy(typeof(PublishRequestBuilder), true)]
    public partial interface IPublishRequestBuilder;
}

namespace Microsoft.Graph.Solutions.VirtualEvents.Events.Item.Sessions
{
    [Proxy(typeof(SessionsRequestBuilder), true)]
    public partial interface ISessionsRequestBuilder;
}

namespace Microsoft.Graph.Solutions.VirtualEvents.Events.Item.Sessions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Solutions.VirtualEvents.Events.Item.Sessions.Item
{
    [Proxy(typeof(VirtualEventSessionItemRequestBuilder), true)]
    public partial interface IVirtualEventSessionItemRequestBuilder;
}

namespace Microsoft.Graph.Solutions.VirtualEvents.Events.Item.Sessions.Item.AttendanceReports
{
    [Proxy(typeof(AttendanceReportsRequestBuilder), true)]
    public partial interface IAttendanceReportsRequestBuilder;
}

namespace Microsoft.Graph.Solutions.VirtualEvents.Events.Item.Sessions.Item.AttendanceReports.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Solutions.VirtualEvents.Events.Item.Sessions.Item.AttendanceReports.Item
{
    [Proxy(typeof(MeetingAttendanceReportItemRequestBuilder), true)]
    public partial interface IMeetingAttendanceReportItemRequestBuilder;
}

namespace Microsoft.Graph.Solutions.VirtualEvents.Events.Item.Sessions.Item.AttendanceReports.Item.AttendanceRecords
{
    [Proxy(typeof(AttendanceRecordsRequestBuilder), true)]
    public partial interface IAttendanceRecordsRequestBuilder;
}

namespace Microsoft.Graph.Solutions.VirtualEvents.Events.Item.Sessions.Item.AttendanceReports.Item.AttendanceRecords.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Solutions.VirtualEvents.Events.Item.Sessions.Item.AttendanceReports.Item.AttendanceRecords.Item
{
    [Proxy(typeof(AttendanceRecordItemRequestBuilder), true)]
    public partial interface IAttendanceRecordItemRequestBuilder;
}

namespace Microsoft.Graph.Solutions.VirtualEvents.Events.Item.SetExternalEventInformation
{
    [Proxy(typeof(SetExternalEventInformationRequestBuilder), true)]
    public partial interface ISetExternalEventInformationRequestBuilder;
}

namespace Microsoft.Graph.Solutions.VirtualEvents.Townhalls
{
    [Proxy(typeof(TownhallsRequestBuilder), true)]
    public partial interface ITownhallsRequestBuilder;
}

namespace Microsoft.Graph.Solutions.VirtualEvents.Townhalls.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Solutions.VirtualEvents.Townhalls.GetByUserIdAndRoleWithUserIdWithRole
{
    [Proxy(typeof(GetByUserIdAndRoleWithUserIdWithRoleRequestBuilder), true)]
    public partial interface IGetByUserIdAndRoleWithUserIdWithRoleRequestBuilder;
}

namespace Microsoft.Graph.Solutions.VirtualEvents.Townhalls.GetByUserRoleWithRole
{
    [Proxy(typeof(GetByUserRoleWithRoleRequestBuilder), true)]
    public partial interface IGetByUserRoleWithRoleRequestBuilder;
}

namespace Microsoft.Graph.Solutions.VirtualEvents.Townhalls.Item
{
    [Proxy(typeof(VirtualEventTownhallItemRequestBuilder), true)]
    public partial interface IVirtualEventTownhallItemRequestBuilder;
}

namespace Microsoft.Graph.Solutions.VirtualEvents.Townhalls.Item.Presenters
{
    [Proxy(typeof(PresentersRequestBuilder), true)]
    public partial interface IPresentersRequestBuilder;
}

namespace Microsoft.Graph.Solutions.VirtualEvents.Townhalls.Item.Presenters.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Solutions.VirtualEvents.Townhalls.Item.Presenters.Item
{
    [Proxy(typeof(VirtualEventPresenterItemRequestBuilder), true)]
    public partial interface IVirtualEventPresenterItemRequestBuilder;
}

namespace Microsoft.Graph.Solutions.VirtualEvents.Townhalls.Item.Sessions
{
    [Proxy(typeof(SessionsRequestBuilder), true)]
    public partial interface ISessionsRequestBuilder;
}

namespace Microsoft.Graph.Solutions.VirtualEvents.Townhalls.Item.Sessions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Solutions.VirtualEvents.Townhalls.Item.Sessions.Item
{
    [Proxy(typeof(VirtualEventSessionItemRequestBuilder), true)]
    public partial interface IVirtualEventSessionItemRequestBuilder;
}

namespace Microsoft.Graph.Solutions.VirtualEvents.Townhalls.Item.Sessions.Item.AttendanceReports
{
    [Proxy(typeof(AttendanceReportsRequestBuilder), true)]
    public partial interface IAttendanceReportsRequestBuilder;
}

namespace Microsoft.Graph.Solutions.VirtualEvents.Townhalls.Item.Sessions.Item.AttendanceReports.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Solutions.VirtualEvents.Townhalls.Item.Sessions.Item.AttendanceReports.Item
{
    [Proxy(typeof(MeetingAttendanceReportItemRequestBuilder), true)]
    public partial interface IMeetingAttendanceReportItemRequestBuilder;
}

namespace Microsoft.Graph.Solutions.VirtualEvents.Townhalls.Item.Sessions.Item.AttendanceReports.Item.AttendanceRecords
{
    [Proxy(typeof(AttendanceRecordsRequestBuilder), true)]
    public partial interface IAttendanceRecordsRequestBuilder;
}

namespace Microsoft.Graph.Solutions.VirtualEvents.Townhalls.Item.Sessions.Item.AttendanceReports.Item.AttendanceRecords.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Solutions.VirtualEvents.Townhalls.Item.Sessions.Item.AttendanceReports.Item.AttendanceRecords.Item
{
    [Proxy(typeof(AttendanceRecordItemRequestBuilder), true)]
    public partial interface IAttendanceRecordItemRequestBuilder;
}

namespace Microsoft.Graph.Solutions.VirtualEvents.Webinars
{
    [Proxy(typeof(WebinarsRequestBuilder), true)]
    public partial interface IWebinarsRequestBuilder;
}

namespace Microsoft.Graph.Solutions.VirtualEvents.Webinars.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Solutions.VirtualEvents.Webinars.GetByUserIdAndRoleWithUserIdWithRole
{
    [Proxy(typeof(GetByUserIdAndRoleWithUserIdWithRoleRequestBuilder), true)]
    public partial interface IGetByUserIdAndRoleWithUserIdWithRoleRequestBuilder;
}

namespace Microsoft.Graph.Solutions.VirtualEvents.Webinars.GetByUserRoleWithRole
{
    [Proxy(typeof(GetByUserRoleWithRoleRequestBuilder), true)]
    public partial interface IGetByUserRoleWithRoleRequestBuilder;
}

namespace Microsoft.Graph.Solutions.VirtualEvents.Webinars.Item
{
    [Proxy(typeof(VirtualEventWebinarItemRequestBuilder), true)]
    public partial interface IVirtualEventWebinarItemRequestBuilder;
}

namespace Microsoft.Graph.Solutions.VirtualEvents.Webinars.Item.Presenters
{
    [Proxy(typeof(PresentersRequestBuilder), true)]
    public partial interface IPresentersRequestBuilder;
}

namespace Microsoft.Graph.Solutions.VirtualEvents.Webinars.Item.Presenters.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Solutions.VirtualEvents.Webinars.Item.Presenters.Item
{
    [Proxy(typeof(VirtualEventPresenterItemRequestBuilder), true)]
    public partial interface IVirtualEventPresenterItemRequestBuilder;
}

namespace Microsoft.Graph.Solutions.VirtualEvents.Webinars.Item.RegistrationConfiguration
{
    [Proxy(typeof(RegistrationConfigurationRequestBuilder), true)]
    public partial interface IRegistrationConfigurationRequestBuilder;
}

namespace Microsoft.Graph.Solutions.VirtualEvents.Webinars.Item.RegistrationConfiguration.Questions
{
    [Proxy(typeof(QuestionsRequestBuilder), true)]
    public partial interface IQuestionsRequestBuilder;
}

namespace Microsoft.Graph.Solutions.VirtualEvents.Webinars.Item.RegistrationConfiguration.Questions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Solutions.VirtualEvents.Webinars.Item.RegistrationConfiguration.Questions.Item
{
    [Proxy(typeof(VirtualEventRegistrationQuestionBaseItemRequestBuilder), true)]
    public partial interface IVirtualEventRegistrationQuestionBaseItemRequestBuilder;
}

namespace Microsoft.Graph.Solutions.VirtualEvents.Webinars.Item.Registrations
{
    [Proxy(typeof(RegistrationsRequestBuilder), true)]
    public partial interface IRegistrationsRequestBuilder;
}

namespace Microsoft.Graph.Solutions.VirtualEvents.Webinars.Item.Registrations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Solutions.VirtualEvents.Webinars.Item.Registrations.Item
{
    [Proxy(typeof(VirtualEventRegistrationItemRequestBuilder), true)]
    public partial interface IVirtualEventRegistrationItemRequestBuilder;
}

namespace Microsoft.Graph.Solutions.VirtualEvents.Webinars.Item.Registrations.Item.Cancel
{
    [Proxy(typeof(CancelRequestBuilder), true)]
    public partial interface ICancelRequestBuilder;
}

namespace Microsoft.Graph.Solutions.VirtualEvents.Webinars.Item.Registrations.Item.Sessions
{
    [Proxy(typeof(SessionsRequestBuilder), true)]
    public partial interface ISessionsRequestBuilder;
}

namespace Microsoft.Graph.Solutions.VirtualEvents.Webinars.Item.Registrations.Item.Sessions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Solutions.VirtualEvents.Webinars.Item.Registrations.Item.Sessions.Item
{
    [Proxy(typeof(VirtualEventSessionItemRequestBuilder), true)]
    public partial interface IVirtualEventSessionItemRequestBuilder;
}

namespace Microsoft.Graph.Solutions.VirtualEvents.Webinars.Item.RegistrationsWithEmail
{
    [Proxy(typeof(RegistrationsWithEmailRequestBuilder), true)]
    public partial interface IRegistrationsWithEmailRequestBuilder;
}

namespace Microsoft.Graph.Solutions.VirtualEvents.Webinars.Item.RegistrationsWithEmail.Cancel
{
    [Proxy(typeof(CancelRequestBuilder), true)]
    public partial interface ICancelRequestBuilder;
}

namespace Microsoft.Graph.Solutions.VirtualEvents.Webinars.Item.RegistrationsWithUserId
{
    [Proxy(typeof(RegistrationsWithUserIdRequestBuilder), true)]
    public partial interface IRegistrationsWithUserIdRequestBuilder;
}

namespace Microsoft.Graph.Solutions.VirtualEvents.Webinars.Item.RegistrationsWithUserId.Cancel
{
    [Proxy(typeof(CancelRequestBuilder), true)]
    public partial interface ICancelRequestBuilder;
}

namespace Microsoft.Graph.Solutions.VirtualEvents.Webinars.Item.Sessions
{
    [Proxy(typeof(SessionsRequestBuilder), true)]
    public partial interface ISessionsRequestBuilder;
}

namespace Microsoft.Graph.Solutions.VirtualEvents.Webinars.Item.Sessions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Solutions.VirtualEvents.Webinars.Item.Sessions.Item
{
    [Proxy(typeof(VirtualEventSessionItemRequestBuilder), true)]
    public partial interface IVirtualEventSessionItemRequestBuilder;
}

namespace Microsoft.Graph.Solutions.VirtualEvents.Webinars.Item.Sessions.Item.AttendanceReports
{
    [Proxy(typeof(AttendanceReportsRequestBuilder), true)]
    public partial interface IAttendanceReportsRequestBuilder;
}

namespace Microsoft.Graph.Solutions.VirtualEvents.Webinars.Item.Sessions.Item.AttendanceReports.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Solutions.VirtualEvents.Webinars.Item.Sessions.Item.AttendanceReports.Item
{
    [Proxy(typeof(MeetingAttendanceReportItemRequestBuilder), true)]
    public partial interface IMeetingAttendanceReportItemRequestBuilder;
}

namespace Microsoft.Graph.Solutions.VirtualEvents.Webinars.Item.Sessions.Item.AttendanceReports.Item.AttendanceRecords
{
    [Proxy(typeof(AttendanceRecordsRequestBuilder), true)]
    public partial interface IAttendanceRecordsRequestBuilder;
}

namespace Microsoft.Graph.Solutions.VirtualEvents.Webinars.Item.Sessions.Item.AttendanceReports.Item.AttendanceRecords.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Solutions.VirtualEvents.Webinars.Item.Sessions.Item.AttendanceReports.Item.AttendanceRecords.Item
{
    [Proxy(typeof(AttendanceRecordItemRequestBuilder), true)]
    public partial interface IAttendanceRecordItemRequestBuilder;
}

namespace Microsoft.Graph.Storage
{
    [Proxy(typeof(StorageRequestBuilder), true)]
    public partial interface IStorageRequestBuilder;
}

namespace Microsoft.Graph.Storage.FileStorage
{
    [Proxy(typeof(FileStorageRequestBuilder), true)]
    public partial interface IFileStorageRequestBuilder;
}

namespace Microsoft.Graph.Storage.FileStorage.Containers
{
    [Proxy(typeof(ContainersRequestBuilder), true)]
    public partial interface IContainersRequestBuilder;
}

namespace Microsoft.Graph.Storage.FileStorage.Containers.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Storage.FileStorage.Containers.Item
{
    [Proxy(typeof(FileStorageContainerItemRequestBuilder), true)]
    public partial interface IFileStorageContainerItemRequestBuilder;
}

namespace Microsoft.Graph.Storage.FileStorage.Containers.Item.Activate
{
    [Proxy(typeof(ActivateRequestBuilder), true)]
    public partial interface IActivateRequestBuilder;
}

namespace Microsoft.Graph.Storage.FileStorage.Containers.Item.Drive
{
    [Proxy(typeof(DriveRequestBuilder), true)]
    public partial interface IDriveRequestBuilder;
}

namespace Microsoft.Graph.Storage.FileStorage.Containers.Item.Lock
{
    [Proxy(typeof(LockRequestBuilder), true)]
    public partial interface ILockRequestBuilder;
}

namespace Microsoft.Graph.Storage.FileStorage.Containers.Item.PermanentDelete
{
    [Proxy(typeof(PermanentDeleteRequestBuilder), true)]
    public partial interface IPermanentDeleteRequestBuilder;
}

namespace Microsoft.Graph.Storage.FileStorage.Containers.Item.Permissions
{
    [Proxy(typeof(PermissionsRequestBuilder), true)]
    public partial interface IPermissionsRequestBuilder;
}

namespace Microsoft.Graph.Storage.FileStorage.Containers.Item.Permissions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Storage.FileStorage.Containers.Item.Permissions.Item
{
    [Proxy(typeof(PermissionItemRequestBuilder), true)]
    public partial interface IPermissionItemRequestBuilder;
}

namespace Microsoft.Graph.Storage.FileStorage.Containers.Item.Permissions.Item.Grant
{
    [Proxy(typeof(GrantRequestBuilder), true)]
    public partial interface IGrantRequestBuilder;
}

namespace Microsoft.Graph.Storage.FileStorage.Containers.Item.RecycleBin
{
    [Proxy(typeof(RecycleBinRequestBuilder), true)]
    public partial interface IRecycleBinRequestBuilder;
}

namespace Microsoft.Graph.Storage.FileStorage.Containers.Item.RecycleBin.CreatedByUser
{
    [Proxy(typeof(CreatedByUserRequestBuilder), true)]
    public partial interface ICreatedByUserRequestBuilder;
}

namespace Microsoft.Graph.Storage.FileStorage.Containers.Item.RecycleBin.CreatedByUser.MailboxSettings
{
    [Proxy(typeof(MailboxSettingsRequestBuilder), true)]
    public partial interface IMailboxSettingsRequestBuilder;
}

namespace Microsoft.Graph.Storage.FileStorage.Containers.Item.RecycleBin.CreatedByUser.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.Storage.FileStorage.Containers.Item.RecycleBin.CreatedByUser.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Storage.FileStorage.Containers.Item.RecycleBin.Items
{
    [Proxy(typeof(ItemsRequestBuilder), true)]
    public partial interface IItemsRequestBuilder;
}

namespace Microsoft.Graph.Storage.FileStorage.Containers.Item.RecycleBin.Items.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Storage.FileStorage.Containers.Item.RecycleBin.Items.Item
{
    [Proxy(typeof(RecycleBinItemItemRequestBuilder), true)]
    public partial interface IRecycleBinItemItemRequestBuilder;
}

namespace Microsoft.Graph.Storage.FileStorage.Containers.Item.RecycleBin.Items.Item.CreatedByUser
{
    [Proxy(typeof(CreatedByUserRequestBuilder), true)]
    public partial interface ICreatedByUserRequestBuilder;
}

namespace Microsoft.Graph.Storage.FileStorage.Containers.Item.RecycleBin.Items.Item.CreatedByUser.MailboxSettings
{
    [Proxy(typeof(MailboxSettingsRequestBuilder), true)]
    public partial interface IMailboxSettingsRequestBuilder;
}

namespace Microsoft.Graph.Storage.FileStorage.Containers.Item.RecycleBin.Items.Item.CreatedByUser.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.Storage.FileStorage.Containers.Item.RecycleBin.Items.Item.CreatedByUser.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Storage.FileStorage.Containers.Item.RecycleBin.Items.Item.LastModifiedByUser
{
    [Proxy(typeof(LastModifiedByUserRequestBuilder), true)]
    public partial interface ILastModifiedByUserRequestBuilder;
}

namespace Microsoft.Graph.Storage.FileStorage.Containers.Item.RecycleBin.Items.Item.LastModifiedByUser.MailboxSettings
{
    [Proxy(typeof(MailboxSettingsRequestBuilder), true)]
    public partial interface IMailboxSettingsRequestBuilder;
}

namespace Microsoft.Graph.Storage.FileStorage.Containers.Item.RecycleBin.Items.Item.LastModifiedByUser.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.Storage.FileStorage.Containers.Item.RecycleBin.Items.Item.LastModifiedByUser.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Storage.FileStorage.Containers.Item.RecycleBin.LastModifiedByUser
{
    [Proxy(typeof(LastModifiedByUserRequestBuilder), true)]
    public partial interface ILastModifiedByUserRequestBuilder;
}

namespace Microsoft.Graph.Storage.FileStorage.Containers.Item.RecycleBin.LastModifiedByUser.MailboxSettings
{
    [Proxy(typeof(MailboxSettingsRequestBuilder), true)]
    public partial interface IMailboxSettingsRequestBuilder;
}

namespace Microsoft.Graph.Storage.FileStorage.Containers.Item.RecycleBin.LastModifiedByUser.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.Storage.FileStorage.Containers.Item.RecycleBin.LastModifiedByUser.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Storage.FileStorage.Containers.Item.Restore
{
    [Proxy(typeof(RestoreRequestBuilder), true)]
    public partial interface IRestoreRequestBuilder;
}

namespace Microsoft.Graph.Storage.FileStorage.Containers.Item.Unlock
{
    [Proxy(typeof(UnlockRequestBuilder), true)]
    public partial interface IUnlockRequestBuilder;
}

namespace Microsoft.Graph.Storage.FileStorage.DeletedContainers
{
    [Proxy(typeof(DeletedContainersRequestBuilder), true)]
    public partial interface IDeletedContainersRequestBuilder;
}

namespace Microsoft.Graph.Storage.FileStorage.DeletedContainers.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Storage.FileStorage.DeletedContainers.Item
{
    [Proxy(typeof(FileStorageContainerItemRequestBuilder), true)]
    public partial interface IFileStorageContainerItemRequestBuilder;
}

namespace Microsoft.Graph.Storage.FileStorage.DeletedContainers.Item.Activate
{
    [Proxy(typeof(ActivateRequestBuilder), true)]
    public partial interface IActivateRequestBuilder;
}

namespace Microsoft.Graph.Storage.FileStorage.DeletedContainers.Item.Drive
{
    [Proxy(typeof(DriveRequestBuilder), true)]
    public partial interface IDriveRequestBuilder;
}

namespace Microsoft.Graph.Storage.FileStorage.DeletedContainers.Item.Lock
{
    [Proxy(typeof(LockRequestBuilder), true)]
    public partial interface ILockRequestBuilder;
}

namespace Microsoft.Graph.Storage.FileStorage.DeletedContainers.Item.PermanentDelete
{
    [Proxy(typeof(PermanentDeleteRequestBuilder), true)]
    public partial interface IPermanentDeleteRequestBuilder;
}

namespace Microsoft.Graph.Storage.FileStorage.DeletedContainers.Item.Permissions
{
    [Proxy(typeof(PermissionsRequestBuilder), true)]
    public partial interface IPermissionsRequestBuilder;
}

namespace Microsoft.Graph.Storage.FileStorage.DeletedContainers.Item.Permissions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Storage.FileStorage.DeletedContainers.Item.Permissions.Item
{
    [Proxy(typeof(PermissionItemRequestBuilder), true)]
    public partial interface IPermissionItemRequestBuilder;
}

namespace Microsoft.Graph.Storage.FileStorage.DeletedContainers.Item.Permissions.Item.Grant
{
    [Proxy(typeof(GrantRequestBuilder), true)]
    public partial interface IGrantRequestBuilder;
}

namespace Microsoft.Graph.Storage.FileStorage.DeletedContainers.Item.RecycleBin
{
    [Proxy(typeof(RecycleBinRequestBuilder), true)]
    public partial interface IRecycleBinRequestBuilder;
}

namespace Microsoft.Graph.Storage.FileStorage.DeletedContainers.Item.RecycleBin.CreatedByUser
{
    [Proxy(typeof(CreatedByUserRequestBuilder), true)]
    public partial interface ICreatedByUserRequestBuilder;
}

namespace Microsoft.Graph.Storage.FileStorage.DeletedContainers.Item.RecycleBin.CreatedByUser.MailboxSettings
{
    [Proxy(typeof(MailboxSettingsRequestBuilder), true)]
    public partial interface IMailboxSettingsRequestBuilder;
}

namespace Microsoft.Graph.Storage.FileStorage.DeletedContainers.Item.RecycleBin.CreatedByUser.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.Storage.FileStorage.DeletedContainers.Item.RecycleBin.CreatedByUser.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Storage.FileStorage.DeletedContainers.Item.RecycleBin.Items
{
    [Proxy(typeof(ItemsRequestBuilder), true)]
    public partial interface IItemsRequestBuilder;
}

namespace Microsoft.Graph.Storage.FileStorage.DeletedContainers.Item.RecycleBin.Items.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Storage.FileStorage.DeletedContainers.Item.RecycleBin.Items.Item
{
    [Proxy(typeof(RecycleBinItemItemRequestBuilder), true)]
    public partial interface IRecycleBinItemItemRequestBuilder;
}

namespace Microsoft.Graph.Storage.FileStorage.DeletedContainers.Item.RecycleBin.Items.Item.CreatedByUser
{
    [Proxy(typeof(CreatedByUserRequestBuilder), true)]
    public partial interface ICreatedByUserRequestBuilder;
}

namespace Microsoft.Graph.Storage.FileStorage.DeletedContainers.Item.RecycleBin.Items.Item.CreatedByUser.MailboxSettings
{
    [Proxy(typeof(MailboxSettingsRequestBuilder), true)]
    public partial interface IMailboxSettingsRequestBuilder;
}

namespace Microsoft.Graph.Storage.FileStorage.DeletedContainers.Item.RecycleBin.Items.Item.CreatedByUser.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.Storage.FileStorage.DeletedContainers.Item.RecycleBin.Items.Item.CreatedByUser.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Storage.FileStorage.DeletedContainers.Item.RecycleBin.Items.Item.LastModifiedByUser
{
    [Proxy(typeof(LastModifiedByUserRequestBuilder), true)]
    public partial interface ILastModifiedByUserRequestBuilder;
}

namespace Microsoft.Graph.Storage.FileStorage.DeletedContainers.Item.RecycleBin.Items.Item.LastModifiedByUser.MailboxSettings
{
    [Proxy(typeof(MailboxSettingsRequestBuilder), true)]
    public partial interface IMailboxSettingsRequestBuilder;
}

namespace Microsoft.Graph.Storage.FileStorage.DeletedContainers.Item.RecycleBin.Items.Item.LastModifiedByUser.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.Storage.FileStorage.DeletedContainers.Item.RecycleBin.Items.Item.LastModifiedByUser.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Storage.FileStorage.DeletedContainers.Item.RecycleBin.LastModifiedByUser
{
    [Proxy(typeof(LastModifiedByUserRequestBuilder), true)]
    public partial interface ILastModifiedByUserRequestBuilder;
}

namespace Microsoft.Graph.Storage.FileStorage.DeletedContainers.Item.RecycleBin.LastModifiedByUser.MailboxSettings
{
    [Proxy(typeof(MailboxSettingsRequestBuilder), true)]
    public partial interface IMailboxSettingsRequestBuilder;
}

namespace Microsoft.Graph.Storage.FileStorage.DeletedContainers.Item.RecycleBin.LastModifiedByUser.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.Storage.FileStorage.DeletedContainers.Item.RecycleBin.LastModifiedByUser.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Storage.FileStorage.DeletedContainers.Item.Restore
{
    [Proxy(typeof(RestoreRequestBuilder), true)]
    public partial interface IRestoreRequestBuilder;
}

namespace Microsoft.Graph.Storage.FileStorage.DeletedContainers.Item.Unlock
{
    [Proxy(typeof(UnlockRequestBuilder), true)]
    public partial interface IUnlockRequestBuilder;
}

namespace Microsoft.Graph.Storage.Settings
{
    [Proxy(typeof(SettingsRequestBuilder), true)]
    public partial interface ISettingsRequestBuilder;
}

namespace Microsoft.Graph.Storage.Settings.Quota
{
    [Proxy(typeof(QuotaRequestBuilder), true)]
    public partial interface IQuotaRequestBuilder;
}

namespace Microsoft.Graph.Storage.Settings.Quota.Services
{
    [Proxy(typeof(ServicesRequestBuilder), true)]
    public partial interface IServicesRequestBuilder;
}

namespace Microsoft.Graph.Storage.Settings.Quota.Services.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Storage.Settings.Quota.Services.Item
{
    [Proxy(typeof(ServiceStorageQuotaBreakdownItemRequestBuilder), true)]
    public partial interface IServiceStorageQuotaBreakdownItemRequestBuilder;
}

namespace Microsoft.Graph.SubscribedSkus
{
    [Proxy(typeof(SubscribedSkusRequestBuilder), true)]
    public partial interface ISubscribedSkusRequestBuilder;
}

namespace Microsoft.Graph.SubscribedSkus.Item
{
    [Proxy(typeof(SubscribedSkuItemRequestBuilder), true)]
    public partial interface ISubscribedSkuItemRequestBuilder;
}

namespace Microsoft.Graph.Subscriptions
{
    [Proxy(typeof(SubscriptionsRequestBuilder), true)]
    public partial interface ISubscriptionsRequestBuilder;
}

namespace Microsoft.Graph.Subscriptions.Item
{
    [Proxy(typeof(SubscriptionItemRequestBuilder), true)]
    public partial interface ISubscriptionItemRequestBuilder;
}

namespace Microsoft.Graph.Subscriptions.Item.Reauthorize
{
    [Proxy(typeof(ReauthorizeRequestBuilder), true)]
    public partial interface IReauthorizeRequestBuilder;
}

namespace Microsoft.Graph.Teams
{
    [Proxy(typeof(TeamsRequestBuilder), true)]
    public partial interface ITeamsRequestBuilder;
}

namespace Microsoft.Graph.Teams.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Teams.GetAllMessages
{
    [Proxy(typeof(GetAllMessagesRequestBuilder), true)]
    public partial interface IGetAllMessagesRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item
{
    [Proxy(typeof(TeamItemRequestBuilder), true)]
    public partial interface ITeamItemRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.AllChannels
{
    [Proxy(typeof(AllChannelsRequestBuilder), true)]
    public partial interface IAllChannelsRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.AllChannels.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.AllChannels.Item
{
    [Proxy(typeof(ChannelItemRequestBuilder), true)]
    public partial interface IChannelItemRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Archive
{
    [Proxy(typeof(ArchiveRequestBuilder), true)]
    public partial interface IArchiveRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Channels
{
    [Proxy(typeof(ChannelsRequestBuilder), true)]
    public partial interface IChannelsRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Channels.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Channels.GetAllMessages
{
    [Proxy(typeof(GetAllMessagesRequestBuilder), true)]
    public partial interface IGetAllMessagesRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Channels.GetAllRetainedMessages
{
    [Proxy(typeof(GetAllRetainedMessagesRequestBuilder), true)]
    public partial interface IGetAllRetainedMessagesRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Channels.Item
{
    [Proxy(typeof(ChannelItemRequestBuilder), true)]
    public partial interface IChannelItemRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Channels.Item.AllMembers
{
    [Proxy(typeof(AllMembersRequestBuilder), true)]
    public partial interface IAllMembersRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Channels.Item.AllMembers.Add
{
    [Proxy(typeof(AddRequestBuilder), true)]
    public partial interface IAddRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Channels.Item.AllMembers.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Channels.Item.AllMembers.Item
{
    [Proxy(typeof(ConversationMemberItemRequestBuilder), true)]
    public partial interface IConversationMemberItemRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Channels.Item.AllMembers.Remove
{
    [Proxy(typeof(RemoveRequestBuilder), true)]
    public partial interface IRemoveRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Channels.Item.Archive
{
    [Proxy(typeof(ArchiveRequestBuilder), true)]
    public partial interface IArchiveRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Channels.Item.CompleteMigration
{
    [Proxy(typeof(CompleteMigrationRequestBuilder), true)]
    public partial interface ICompleteMigrationRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Channels.Item.DoesUserHaveAccessuserIdUserIdTenantIdTenantIdUserPrincipalNameUserPrincipalName
{
    [Proxy(typeof(DoesUserHaveAccessuserIdUserIdTenantIdTenantIdUserPrincipalNameUserPrincipalNameRequestBuilder), true)]
    public partial interface IDoesUserHaveAccessuserIdUserIdTenantIdTenantIdUserPrincipalNameUserPrincipalNameRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Channels.Item.FilesFolder
{
    [Proxy(typeof(FilesFolderRequestBuilder), true)]
    public partial interface IFilesFolderRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Channels.Item.FilesFolder.Content
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Channels.Item.Members
{
    [Proxy(typeof(MembersRequestBuilder), true)]
    public partial interface IMembersRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Channels.Item.Members.Add
{
    [Proxy(typeof(AddRequestBuilder), true)]
    public partial interface IAddRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Channels.Item.Members.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Channels.Item.Members.Item
{
    [Proxy(typeof(ConversationMemberItemRequestBuilder), true)]
    public partial interface IConversationMemberItemRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Channels.Item.Members.Remove
{
    [Proxy(typeof(RemoveRequestBuilder), true)]
    public partial interface IRemoveRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Channels.Item.Messages
{
    [Proxy(typeof(MessagesRequestBuilder), true)]
    public partial interface IMessagesRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Channels.Item.Messages.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Channels.Item.Messages.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Channels.Item.Messages.Item
{
    [Proxy(typeof(ChatMessageItemRequestBuilder), true)]
    public partial interface IChatMessageItemRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Channels.Item.Messages.Item.HostedContents
{
    [Proxy(typeof(HostedContentsRequestBuilder), true)]
    public partial interface IHostedContentsRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Channels.Item.Messages.Item.HostedContents.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Channels.Item.Messages.Item.HostedContents.Item
{
    [Proxy(typeof(ChatMessageHostedContentItemRequestBuilder), true)]
    public partial interface IChatMessageHostedContentItemRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Channels.Item.Messages.Item.HostedContents.Item.Value
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Channels.Item.Messages.Item.Replies
{
    [Proxy(typeof(RepliesRequestBuilder), true)]
    public partial interface IRepliesRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Channels.Item.Messages.Item.Replies.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Channels.Item.Messages.Item.Replies.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Channels.Item.Messages.Item.Replies.Item
{
    [Proxy(typeof(ChatMessageItemRequestBuilder), true)]
    public partial interface IChatMessageItemRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Channels.Item.Messages.Item.Replies.Item.HostedContents
{
    [Proxy(typeof(HostedContentsRequestBuilder), true)]
    public partial interface IHostedContentsRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Channels.Item.Messages.Item.Replies.Item.HostedContents.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Channels.Item.Messages.Item.Replies.Item.HostedContents.Item
{
    [Proxy(typeof(ChatMessageHostedContentItemRequestBuilder), true)]
    public partial interface IChatMessageHostedContentItemRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Channels.Item.Messages.Item.Replies.Item.HostedContents.Item.Value
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Channels.Item.Messages.Item.Replies.Item.SetReaction
{
    [Proxy(typeof(SetReactionRequestBuilder), true)]
    public partial interface ISetReactionRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Channels.Item.Messages.Item.Replies.Item.SoftDelete
{
    [Proxy(typeof(SoftDeleteRequestBuilder), true)]
    public partial interface ISoftDeleteRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Channels.Item.Messages.Item.Replies.Item.UndoSoftDelete
{
    [Proxy(typeof(UndoSoftDeleteRequestBuilder), true)]
    public partial interface IUndoSoftDeleteRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Channels.Item.Messages.Item.Replies.Item.UnsetReaction
{
    [Proxy(typeof(UnsetReactionRequestBuilder), true)]
    public partial interface IUnsetReactionRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Channels.Item.Messages.Item.SetReaction
{
    [Proxy(typeof(SetReactionRequestBuilder), true)]
    public partial interface ISetReactionRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Channels.Item.Messages.Item.SoftDelete
{
    [Proxy(typeof(SoftDeleteRequestBuilder), true)]
    public partial interface ISoftDeleteRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Channels.Item.Messages.Item.UndoSoftDelete
{
    [Proxy(typeof(UndoSoftDeleteRequestBuilder), true)]
    public partial interface IUndoSoftDeleteRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Channels.Item.Messages.Item.UnsetReaction
{
    [Proxy(typeof(UnsetReactionRequestBuilder), true)]
    public partial interface IUnsetReactionRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Channels.Item.ProvisionEmail
{
    [Proxy(typeof(ProvisionEmailRequestBuilder), true)]
    public partial interface IProvisionEmailRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Channels.Item.RemoveEmail
{
    [Proxy(typeof(RemoveEmailRequestBuilder), true)]
    public partial interface IRemoveEmailRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Channels.Item.SharedWithTeams
{
    [Proxy(typeof(SharedWithTeamsRequestBuilder), true)]
    public partial interface ISharedWithTeamsRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Channels.Item.SharedWithTeams.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Channels.Item.SharedWithTeams.Item
{
    [Proxy(typeof(SharedWithChannelTeamInfoItemRequestBuilder), true)]
    public partial interface ISharedWithChannelTeamInfoItemRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Channels.Item.SharedWithTeams.Item.AllowedMembers
{
    [Proxy(typeof(AllowedMembersRequestBuilder), true)]
    public partial interface IAllowedMembersRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Channels.Item.SharedWithTeams.Item.AllowedMembers.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Channels.Item.SharedWithTeams.Item.AllowedMembers.Item
{
    [Proxy(typeof(ConversationMemberItemRequestBuilder), true)]
    public partial interface IConversationMemberItemRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Channels.Item.SharedWithTeams.Item.Team
{
    [Proxy(typeof(TeamRequestBuilder), true)]
    public partial interface ITeamRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Channels.Item.Tabs
{
    [Proxy(typeof(TabsRequestBuilder), true)]
    public partial interface ITabsRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Channels.Item.Tabs.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Channels.Item.Tabs.Item
{
    [Proxy(typeof(TeamsTabItemRequestBuilder), true)]
    public partial interface ITeamsTabItemRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Channels.Item.Tabs.Item.TeamsApp
{
    [Proxy(typeof(TeamsAppRequestBuilder), true)]
    public partial interface ITeamsAppRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Channels.Item.Unarchive
{
    [Proxy(typeof(UnarchiveRequestBuilder), true)]
    public partial interface IUnarchiveRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Clone
{
    [Proxy(typeof(CloneRequestBuilder), true)]
    public partial interface ICloneRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.CompleteMigration
{
    [Proxy(typeof(CompleteMigrationRequestBuilder), true)]
    public partial interface ICompleteMigrationRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Group
{
    [Proxy(typeof(GroupRequestBuilder), true)]
    public partial interface IGroupRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Group.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Group.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.IncomingChannels
{
    [Proxy(typeof(IncomingChannelsRequestBuilder), true)]
    public partial interface IIncomingChannelsRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.IncomingChannels.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.IncomingChannels.Item
{
    [Proxy(typeof(ChannelItemRequestBuilder), true)]
    public partial interface IChannelItemRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.InstalledApps
{
    [Proxy(typeof(InstalledAppsRequestBuilder), true)]
    public partial interface IInstalledAppsRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.InstalledApps.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.InstalledApps.Item
{
    [Proxy(typeof(TeamsAppInstallationItemRequestBuilder), true)]
    public partial interface ITeamsAppInstallationItemRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.InstalledApps.Item.TeamsApp
{
    [Proxy(typeof(TeamsAppRequestBuilder), true)]
    public partial interface ITeamsAppRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.InstalledApps.Item.TeamsAppDefinition
{
    [Proxy(typeof(TeamsAppDefinitionRequestBuilder), true)]
    public partial interface ITeamsAppDefinitionRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.InstalledApps.Item.Upgrade
{
    [Proxy(typeof(UpgradeRequestBuilder), true)]
    public partial interface IUpgradeRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Members
{
    [Proxy(typeof(MembersRequestBuilder), true)]
    public partial interface IMembersRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Members.Add
{
    [Proxy(typeof(AddRequestBuilder), true)]
    public partial interface IAddRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Members.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Members.Item
{
    [Proxy(typeof(ConversationMemberItemRequestBuilder), true)]
    public partial interface IConversationMemberItemRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Members.Remove
{
    [Proxy(typeof(RemoveRequestBuilder), true)]
    public partial interface IRemoveRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Operations
{
    [Proxy(typeof(OperationsRequestBuilder), true)]
    public partial interface IOperationsRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Operations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Operations.Item
{
    [Proxy(typeof(TeamsAsyncOperationItemRequestBuilder), true)]
    public partial interface ITeamsAsyncOperationItemRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.PermissionGrants
{
    [Proxy(typeof(PermissionGrantsRequestBuilder), true)]
    public partial interface IPermissionGrantsRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.PermissionGrants.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.PermissionGrants.Item
{
    [Proxy(typeof(ResourceSpecificPermissionGrantItemRequestBuilder), true)]
    public partial interface IResourceSpecificPermissionGrantItemRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Photo
{
    [Proxy(typeof(PhotoRequestBuilder), true)]
    public partial interface IPhotoRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Photo.Value
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.PrimaryChannel
{
    [Proxy(typeof(PrimaryChannelRequestBuilder), true)]
    public partial interface IPrimaryChannelRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.PrimaryChannel.AllMembers
{
    [Proxy(typeof(AllMembersRequestBuilder), true)]
    public partial interface IAllMembersRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.PrimaryChannel.AllMembers.Add
{
    [Proxy(typeof(AddRequestBuilder), true)]
    public partial interface IAddRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.PrimaryChannel.AllMembers.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.PrimaryChannel.AllMembers.Item
{
    [Proxy(typeof(ConversationMemberItemRequestBuilder), true)]
    public partial interface IConversationMemberItemRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.PrimaryChannel.AllMembers.Remove
{
    [Proxy(typeof(RemoveRequestBuilder), true)]
    public partial interface IRemoveRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.PrimaryChannel.Archive
{
    [Proxy(typeof(ArchiveRequestBuilder), true)]
    public partial interface IArchiveRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.PrimaryChannel.CompleteMigration
{
    [Proxy(typeof(CompleteMigrationRequestBuilder), true)]
    public partial interface ICompleteMigrationRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.PrimaryChannel.DoesUserHaveAccessuserIdUserIdTenantIdTenantIdUserPrincipalNameUserPrincipalName
{
    [Proxy(typeof(DoesUserHaveAccessuserIdUserIdTenantIdTenantIdUserPrincipalNameUserPrincipalNameRequestBuilder), true)]
    public partial interface IDoesUserHaveAccessuserIdUserIdTenantIdTenantIdUserPrincipalNameUserPrincipalNameRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.PrimaryChannel.FilesFolder
{
    [Proxy(typeof(FilesFolderRequestBuilder), true)]
    public partial interface IFilesFolderRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.PrimaryChannel.FilesFolder.Content
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.PrimaryChannel.Members
{
    [Proxy(typeof(MembersRequestBuilder), true)]
    public partial interface IMembersRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.PrimaryChannel.Members.Add
{
    [Proxy(typeof(AddRequestBuilder), true)]
    public partial interface IAddRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.PrimaryChannel.Members.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.PrimaryChannel.Members.Item
{
    [Proxy(typeof(ConversationMemberItemRequestBuilder), true)]
    public partial interface IConversationMemberItemRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.PrimaryChannel.Members.Remove
{
    [Proxy(typeof(RemoveRequestBuilder), true)]
    public partial interface IRemoveRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.PrimaryChannel.Messages
{
    [Proxy(typeof(MessagesRequestBuilder), true)]
    public partial interface IMessagesRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.PrimaryChannel.Messages.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.PrimaryChannel.Messages.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.PrimaryChannel.Messages.Item
{
    [Proxy(typeof(ChatMessageItemRequestBuilder), true)]
    public partial interface IChatMessageItemRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.PrimaryChannel.Messages.Item.HostedContents
{
    [Proxy(typeof(HostedContentsRequestBuilder), true)]
    public partial interface IHostedContentsRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.PrimaryChannel.Messages.Item.HostedContents.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.PrimaryChannel.Messages.Item.HostedContents.Item
{
    [Proxy(typeof(ChatMessageHostedContentItemRequestBuilder), true)]
    public partial interface IChatMessageHostedContentItemRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.PrimaryChannel.Messages.Item.HostedContents.Item.Value
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.PrimaryChannel.Messages.Item.Replies
{
    [Proxy(typeof(RepliesRequestBuilder), true)]
    public partial interface IRepliesRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.PrimaryChannel.Messages.Item.Replies.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.PrimaryChannel.Messages.Item.Replies.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.PrimaryChannel.Messages.Item.Replies.Item
{
    [Proxy(typeof(ChatMessageItemRequestBuilder), true)]
    public partial interface IChatMessageItemRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.PrimaryChannel.Messages.Item.Replies.Item.HostedContents
{
    [Proxy(typeof(HostedContentsRequestBuilder), true)]
    public partial interface IHostedContentsRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.PrimaryChannel.Messages.Item.Replies.Item.HostedContents.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.PrimaryChannel.Messages.Item.Replies.Item.HostedContents.Item
{
    [Proxy(typeof(ChatMessageHostedContentItemRequestBuilder), true)]
    public partial interface IChatMessageHostedContentItemRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.PrimaryChannel.Messages.Item.Replies.Item.HostedContents.Item.Value
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.PrimaryChannel.Messages.Item.Replies.Item.SetReaction
{
    [Proxy(typeof(SetReactionRequestBuilder), true)]
    public partial interface ISetReactionRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.PrimaryChannel.Messages.Item.Replies.Item.SoftDelete
{
    [Proxy(typeof(SoftDeleteRequestBuilder), true)]
    public partial interface ISoftDeleteRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.PrimaryChannel.Messages.Item.Replies.Item.UndoSoftDelete
{
    [Proxy(typeof(UndoSoftDeleteRequestBuilder), true)]
    public partial interface IUndoSoftDeleteRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.PrimaryChannel.Messages.Item.Replies.Item.UnsetReaction
{
    [Proxy(typeof(UnsetReactionRequestBuilder), true)]
    public partial interface IUnsetReactionRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.PrimaryChannel.Messages.Item.SetReaction
{
    [Proxy(typeof(SetReactionRequestBuilder), true)]
    public partial interface ISetReactionRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.PrimaryChannel.Messages.Item.SoftDelete
{
    [Proxy(typeof(SoftDeleteRequestBuilder), true)]
    public partial interface ISoftDeleteRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.PrimaryChannel.Messages.Item.UndoSoftDelete
{
    [Proxy(typeof(UndoSoftDeleteRequestBuilder), true)]
    public partial interface IUndoSoftDeleteRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.PrimaryChannel.Messages.Item.UnsetReaction
{
    [Proxy(typeof(UnsetReactionRequestBuilder), true)]
    public partial interface IUnsetReactionRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.PrimaryChannel.ProvisionEmail
{
    [Proxy(typeof(ProvisionEmailRequestBuilder), true)]
    public partial interface IProvisionEmailRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.PrimaryChannel.RemoveEmail
{
    [Proxy(typeof(RemoveEmailRequestBuilder), true)]
    public partial interface IRemoveEmailRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.PrimaryChannel.SharedWithTeams
{
    [Proxy(typeof(SharedWithTeamsRequestBuilder), true)]
    public partial interface ISharedWithTeamsRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.PrimaryChannel.SharedWithTeams.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.PrimaryChannel.SharedWithTeams.Item
{
    [Proxy(typeof(SharedWithChannelTeamInfoItemRequestBuilder), true)]
    public partial interface ISharedWithChannelTeamInfoItemRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.PrimaryChannel.SharedWithTeams.Item.AllowedMembers
{
    [Proxy(typeof(AllowedMembersRequestBuilder), true)]
    public partial interface IAllowedMembersRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.PrimaryChannel.SharedWithTeams.Item.AllowedMembers.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.PrimaryChannel.SharedWithTeams.Item.AllowedMembers.Item
{
    [Proxy(typeof(ConversationMemberItemRequestBuilder), true)]
    public partial interface IConversationMemberItemRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.PrimaryChannel.SharedWithTeams.Item.Team
{
    [Proxy(typeof(TeamRequestBuilder), true)]
    public partial interface ITeamRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.PrimaryChannel.Tabs
{
    [Proxy(typeof(TabsRequestBuilder), true)]
    public partial interface ITabsRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.PrimaryChannel.Tabs.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.PrimaryChannel.Tabs.Item
{
    [Proxy(typeof(TeamsTabItemRequestBuilder), true)]
    public partial interface ITeamsTabItemRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.PrimaryChannel.Tabs.Item.TeamsApp
{
    [Proxy(typeof(TeamsAppRequestBuilder), true)]
    public partial interface ITeamsAppRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.PrimaryChannel.Unarchive
{
    [Proxy(typeof(UnarchiveRequestBuilder), true)]
    public partial interface IUnarchiveRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Schedule
{
    [Proxy(typeof(ScheduleRequestBuilder), true)]
    public partial interface IScheduleRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Schedule.DayNotes
{
    [Proxy(typeof(DayNotesRequestBuilder), true)]
    public partial interface IDayNotesRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Schedule.DayNotes.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Schedule.DayNotes.Item
{
    [Proxy(typeof(DayNoteItemRequestBuilder), true)]
    public partial interface IDayNoteItemRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Schedule.OfferShiftRequests
{
    [Proxy(typeof(OfferShiftRequestsRequestBuilder), true)]
    public partial interface IOfferShiftRequestsRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Schedule.OfferShiftRequests.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Schedule.OfferShiftRequests.Item
{
    [Proxy(typeof(OfferShiftRequestItemRequestBuilder), true)]
    public partial interface IOfferShiftRequestItemRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Schedule.OpenShiftChangeRequests
{
    [Proxy(typeof(OpenShiftChangeRequestsRequestBuilder), true)]
    public partial interface IOpenShiftChangeRequestsRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Schedule.OpenShiftChangeRequests.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Schedule.OpenShiftChangeRequests.Item
{
    [Proxy(typeof(OpenShiftChangeRequestItemRequestBuilder), true)]
    public partial interface IOpenShiftChangeRequestItemRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Schedule.OpenShifts
{
    [Proxy(typeof(OpenShiftsRequestBuilder), true)]
    public partial interface IOpenShiftsRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Schedule.OpenShifts.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Schedule.OpenShifts.Item
{
    [Proxy(typeof(OpenShiftItemRequestBuilder), true)]
    public partial interface IOpenShiftItemRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Schedule.SchedulingGroups
{
    [Proxy(typeof(SchedulingGroupsRequestBuilder), true)]
    public partial interface ISchedulingGroupsRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Schedule.SchedulingGroups.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Schedule.SchedulingGroups.Item
{
    [Proxy(typeof(SchedulingGroupItemRequestBuilder), true)]
    public partial interface ISchedulingGroupItemRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Schedule.Share
{
    [Proxy(typeof(ShareRequestBuilder), true)]
    public partial interface IShareRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Schedule.Shifts
{
    [Proxy(typeof(ShiftsRequestBuilder), true)]
    public partial interface IShiftsRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Schedule.Shifts.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Schedule.Shifts.Item
{
    [Proxy(typeof(ShiftItemRequestBuilder), true)]
    public partial interface IShiftItemRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Schedule.SwapShiftsChangeRequests
{
    [Proxy(typeof(SwapShiftsChangeRequestsRequestBuilder), true)]
    public partial interface ISwapShiftsChangeRequestsRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Schedule.SwapShiftsChangeRequests.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Schedule.SwapShiftsChangeRequests.Item
{
    [Proxy(typeof(SwapShiftsChangeRequestItemRequestBuilder), true)]
    public partial interface ISwapShiftsChangeRequestItemRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Schedule.TimeCards
{
    [Proxy(typeof(TimeCardsRequestBuilder), true)]
    public partial interface ITimeCardsRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Schedule.TimeCards.ClockIn
{
    [Proxy(typeof(ClockInRequestBuilder), true)]
    public partial interface IClockInRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Schedule.TimeCards.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Schedule.TimeCards.Item
{
    [Proxy(typeof(TimeCardItemRequestBuilder), true)]
    public partial interface ITimeCardItemRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Schedule.TimeCards.Item.ClockOut
{
    [Proxy(typeof(ClockOutRequestBuilder), true)]
    public partial interface IClockOutRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Schedule.TimeCards.Item.Confirm
{
    [Proxy(typeof(ConfirmRequestBuilder), true)]
    public partial interface IConfirmRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Schedule.TimeCards.Item.EndBreak
{
    [Proxy(typeof(EndBreakRequestBuilder), true)]
    public partial interface IEndBreakRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Schedule.TimeCards.Item.StartBreak
{
    [Proxy(typeof(StartBreakRequestBuilder), true)]
    public partial interface IStartBreakRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Schedule.TimeOffReasons
{
    [Proxy(typeof(TimeOffReasonsRequestBuilder), true)]
    public partial interface ITimeOffReasonsRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Schedule.TimeOffReasons.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Schedule.TimeOffReasons.Item
{
    [Proxy(typeof(TimeOffReasonItemRequestBuilder), true)]
    public partial interface ITimeOffReasonItemRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Schedule.TimeOffRequests
{
    [Proxy(typeof(TimeOffRequestsRequestBuilder), true)]
    public partial interface ITimeOffRequestsRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Schedule.TimeOffRequests.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Schedule.TimeOffRequests.Item
{
    [Proxy(typeof(TimeOffRequestItemRequestBuilder), true)]
    public partial interface ITimeOffRequestItemRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Schedule.TimesOff
{
    [Proxy(typeof(TimesOffRequestBuilder), true)]
    public partial interface ITimesOffRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Schedule.TimesOff.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Schedule.TimesOff.Item
{
    [Proxy(typeof(TimeOffItemRequestBuilder), true)]
    public partial interface ITimeOffItemRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.SendActivityNotification
{
    [Proxy(typeof(SendActivityNotificationRequestBuilder), true)]
    public partial interface ISendActivityNotificationRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Tags
{
    [Proxy(typeof(TagsRequestBuilder), true)]
    public partial interface ITagsRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Tags.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Tags.Item
{
    [Proxy(typeof(TeamworkTagItemRequestBuilder), true)]
    public partial interface ITeamworkTagItemRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Tags.Item.Members
{
    [Proxy(typeof(MembersRequestBuilder), true)]
    public partial interface IMembersRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Tags.Item.Members.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Tags.Item.Members.Item
{
    [Proxy(typeof(TeamworkTagMemberItemRequestBuilder), true)]
    public partial interface ITeamworkTagMemberItemRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Template
{
    [Proxy(typeof(TemplateRequestBuilder), true)]
    public partial interface ITemplateRequestBuilder;
}

namespace Microsoft.Graph.Teams.Item.Unarchive
{
    [Proxy(typeof(UnarchiveRequestBuilder), true)]
    public partial interface IUnarchiveRequestBuilder;
}

namespace Microsoft.Graph.TeamsTemplates
{
    [Proxy(typeof(TeamsTemplatesRequestBuilder), true)]
    public partial interface ITeamsTemplatesRequestBuilder;
}

namespace Microsoft.Graph.TeamsTemplates.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.TeamsTemplates.Item
{
    [Proxy(typeof(TeamsTemplateItemRequestBuilder), true)]
    public partial interface ITeamsTemplateItemRequestBuilder;
}

namespace Microsoft.Graph.Teamwork
{
    [Proxy(typeof(TeamworkRequestBuilder), true)]
    public partial interface ITeamworkRequestBuilder;
}

namespace Microsoft.Graph.Teamwork.DeletedChats
{
    [Proxy(typeof(DeletedChatsRequestBuilder), true)]
    public partial interface IDeletedChatsRequestBuilder;
}

namespace Microsoft.Graph.Teamwork.DeletedChats.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Teamwork.DeletedChats.Item
{
    [Proxy(typeof(DeletedChatItemRequestBuilder), true)]
    public partial interface IDeletedChatItemRequestBuilder;
}

namespace Microsoft.Graph.Teamwork.DeletedChats.Item.UndoDelete
{
    [Proxy(typeof(UndoDeleteRequestBuilder), true)]
    public partial interface IUndoDeleteRequestBuilder;
}

namespace Microsoft.Graph.Teamwork.DeletedTeams
{
    [Proxy(typeof(DeletedTeamsRequestBuilder), true)]
    public partial interface IDeletedTeamsRequestBuilder;
}

namespace Microsoft.Graph.Teamwork.DeletedTeams.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Teamwork.DeletedTeams.GetAllMessages
{
    [Proxy(typeof(GetAllMessagesRequestBuilder), true)]
    public partial interface IGetAllMessagesRequestBuilder;
}

namespace Microsoft.Graph.Teamwork.DeletedTeams.Item
{
    [Proxy(typeof(DeletedTeamItemRequestBuilder), true)]
    public partial interface IDeletedTeamItemRequestBuilder;
}

namespace Microsoft.Graph.Teamwork.DeletedTeams.Item.Channels
{
    [Proxy(typeof(ChannelsRequestBuilder), true)]
    public partial interface IChannelsRequestBuilder;
}

namespace Microsoft.Graph.Teamwork.DeletedTeams.Item.Channels.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Teamwork.DeletedTeams.Item.Channels.GetAllMessages
{
    [Proxy(typeof(GetAllMessagesRequestBuilder), true)]
    public partial interface IGetAllMessagesRequestBuilder;
}

namespace Microsoft.Graph.Teamwork.DeletedTeams.Item.Channels.GetAllRetainedMessages
{
    [Proxy(typeof(GetAllRetainedMessagesRequestBuilder), true)]
    public partial interface IGetAllRetainedMessagesRequestBuilder;
}

namespace Microsoft.Graph.Teamwork.DeletedTeams.Item.Channels.Item
{
    [Proxy(typeof(ChannelItemRequestBuilder), true)]
    public partial interface IChannelItemRequestBuilder;
}

namespace Microsoft.Graph.Teamwork.DeletedTeams.Item.Channels.Item.AllMembers
{
    [Proxy(typeof(AllMembersRequestBuilder), true)]
    public partial interface IAllMembersRequestBuilder;
}

namespace Microsoft.Graph.Teamwork.DeletedTeams.Item.Channels.Item.AllMembers.Add
{
    [Proxy(typeof(AddRequestBuilder), true)]
    public partial interface IAddRequestBuilder;
}

namespace Microsoft.Graph.Teamwork.DeletedTeams.Item.Channels.Item.AllMembers.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Teamwork.DeletedTeams.Item.Channels.Item.AllMembers.Item
{
    [Proxy(typeof(ConversationMemberItemRequestBuilder), true)]
    public partial interface IConversationMemberItemRequestBuilder;
}

namespace Microsoft.Graph.Teamwork.DeletedTeams.Item.Channels.Item.AllMembers.Remove
{
    [Proxy(typeof(RemoveRequestBuilder), true)]
    public partial interface IRemoveRequestBuilder;
}

namespace Microsoft.Graph.Teamwork.DeletedTeams.Item.Channels.Item.Archive
{
    [Proxy(typeof(ArchiveRequestBuilder), true)]
    public partial interface IArchiveRequestBuilder;
}

namespace Microsoft.Graph.Teamwork.DeletedTeams.Item.Channels.Item.CompleteMigration
{
    [Proxy(typeof(CompleteMigrationRequestBuilder), true)]
    public partial interface ICompleteMigrationRequestBuilder;
}

namespace Microsoft.Graph.Teamwork.DeletedTeams.Item.Channels.Item.DoesUserHaveAccessuserIdUserIdTenantIdTenantIdUserPrincipalNameUserPrincipalName
{
    [Proxy(typeof(DoesUserHaveAccessuserIdUserIdTenantIdTenantIdUserPrincipalNameUserPrincipalNameRequestBuilder), true)]
    public partial interface IDoesUserHaveAccessuserIdUserIdTenantIdTenantIdUserPrincipalNameUserPrincipalNameRequestBuilder;
}

namespace Microsoft.Graph.Teamwork.DeletedTeams.Item.Channels.Item.FilesFolder
{
    [Proxy(typeof(FilesFolderRequestBuilder), true)]
    public partial interface IFilesFolderRequestBuilder;
}

namespace Microsoft.Graph.Teamwork.DeletedTeams.Item.Channels.Item.FilesFolder.Content
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Teamwork.DeletedTeams.Item.Channels.Item.Members
{
    [Proxy(typeof(MembersRequestBuilder), true)]
    public partial interface IMembersRequestBuilder;
}

namespace Microsoft.Graph.Teamwork.DeletedTeams.Item.Channels.Item.Members.Add
{
    [Proxy(typeof(AddRequestBuilder), true)]
    public partial interface IAddRequestBuilder;
}

namespace Microsoft.Graph.Teamwork.DeletedTeams.Item.Channels.Item.Members.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Teamwork.DeletedTeams.Item.Channels.Item.Members.Item
{
    [Proxy(typeof(ConversationMemberItemRequestBuilder), true)]
    public partial interface IConversationMemberItemRequestBuilder;
}

namespace Microsoft.Graph.Teamwork.DeletedTeams.Item.Channels.Item.Members.Remove
{
    [Proxy(typeof(RemoveRequestBuilder), true)]
    public partial interface IRemoveRequestBuilder;
}

namespace Microsoft.Graph.Teamwork.DeletedTeams.Item.Channels.Item.Messages
{
    [Proxy(typeof(MessagesRequestBuilder), true)]
    public partial interface IMessagesRequestBuilder;
}

namespace Microsoft.Graph.Teamwork.DeletedTeams.Item.Channels.Item.Messages.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Teamwork.DeletedTeams.Item.Channels.Item.Messages.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Teamwork.DeletedTeams.Item.Channels.Item.Messages.Item
{
    [Proxy(typeof(ChatMessageItemRequestBuilder), true)]
    public partial interface IChatMessageItemRequestBuilder;
}

namespace Microsoft.Graph.Teamwork.DeletedTeams.Item.Channels.Item.Messages.Item.HostedContents
{
    [Proxy(typeof(HostedContentsRequestBuilder), true)]
    public partial interface IHostedContentsRequestBuilder;
}

namespace Microsoft.Graph.Teamwork.DeletedTeams.Item.Channels.Item.Messages.Item.HostedContents.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Teamwork.DeletedTeams.Item.Channels.Item.Messages.Item.HostedContents.Item
{
    [Proxy(typeof(ChatMessageHostedContentItemRequestBuilder), true)]
    public partial interface IChatMessageHostedContentItemRequestBuilder;
}

namespace Microsoft.Graph.Teamwork.DeletedTeams.Item.Channels.Item.Messages.Item.HostedContents.Item.Value
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Teamwork.DeletedTeams.Item.Channels.Item.Messages.Item.Replies
{
    [Proxy(typeof(RepliesRequestBuilder), true)]
    public partial interface IRepliesRequestBuilder;
}

namespace Microsoft.Graph.Teamwork.DeletedTeams.Item.Channels.Item.Messages.Item.Replies.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Teamwork.DeletedTeams.Item.Channels.Item.Messages.Item.Replies.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Teamwork.DeletedTeams.Item.Channels.Item.Messages.Item.Replies.Item
{
    [Proxy(typeof(ChatMessageItemRequestBuilder), true)]
    public partial interface IChatMessageItemRequestBuilder;
}

namespace Microsoft.Graph.Teamwork.DeletedTeams.Item.Channels.Item.Messages.Item.Replies.Item.HostedContents
{
    [Proxy(typeof(HostedContentsRequestBuilder), true)]
    public partial interface IHostedContentsRequestBuilder;
}

namespace Microsoft.Graph.Teamwork.DeletedTeams.Item.Channels.Item.Messages.Item.Replies.Item.HostedContents.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Teamwork.DeletedTeams.Item.Channels.Item.Messages.Item.Replies.Item.HostedContents.Item
{
    [Proxy(typeof(ChatMessageHostedContentItemRequestBuilder), true)]
    public partial interface IChatMessageHostedContentItemRequestBuilder;
}

namespace Microsoft.Graph.Teamwork.DeletedTeams.Item.Channels.Item.Messages.Item.Replies.Item.HostedContents.Item.Value
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Teamwork.DeletedTeams.Item.Channels.Item.Messages.Item.Replies.Item.SetReaction
{
    [Proxy(typeof(SetReactionRequestBuilder), true)]
    public partial interface ISetReactionRequestBuilder;
}

namespace Microsoft.Graph.Teamwork.DeletedTeams.Item.Channels.Item.Messages.Item.Replies.Item.SoftDelete
{
    [Proxy(typeof(SoftDeleteRequestBuilder), true)]
    public partial interface ISoftDeleteRequestBuilder;
}

namespace Microsoft.Graph.Teamwork.DeletedTeams.Item.Channels.Item.Messages.Item.Replies.Item.UndoSoftDelete
{
    [Proxy(typeof(UndoSoftDeleteRequestBuilder), true)]
    public partial interface IUndoSoftDeleteRequestBuilder;
}

namespace Microsoft.Graph.Teamwork.DeletedTeams.Item.Channels.Item.Messages.Item.Replies.Item.UnsetReaction
{
    [Proxy(typeof(UnsetReactionRequestBuilder), true)]
    public partial interface IUnsetReactionRequestBuilder;
}

namespace Microsoft.Graph.Teamwork.DeletedTeams.Item.Channels.Item.Messages.Item.SetReaction
{
    [Proxy(typeof(SetReactionRequestBuilder), true)]
    public partial interface ISetReactionRequestBuilder;
}

namespace Microsoft.Graph.Teamwork.DeletedTeams.Item.Channels.Item.Messages.Item.SoftDelete
{
    [Proxy(typeof(SoftDeleteRequestBuilder), true)]
    public partial interface ISoftDeleteRequestBuilder;
}

namespace Microsoft.Graph.Teamwork.DeletedTeams.Item.Channels.Item.Messages.Item.UndoSoftDelete
{
    [Proxy(typeof(UndoSoftDeleteRequestBuilder), true)]
    public partial interface IUndoSoftDeleteRequestBuilder;
}

namespace Microsoft.Graph.Teamwork.DeletedTeams.Item.Channels.Item.Messages.Item.UnsetReaction
{
    [Proxy(typeof(UnsetReactionRequestBuilder), true)]
    public partial interface IUnsetReactionRequestBuilder;
}

namespace Microsoft.Graph.Teamwork.DeletedTeams.Item.Channels.Item.ProvisionEmail
{
    [Proxy(typeof(ProvisionEmailRequestBuilder), true)]
    public partial interface IProvisionEmailRequestBuilder;
}

namespace Microsoft.Graph.Teamwork.DeletedTeams.Item.Channels.Item.RemoveEmail
{
    [Proxy(typeof(RemoveEmailRequestBuilder), true)]
    public partial interface IRemoveEmailRequestBuilder;
}

namespace Microsoft.Graph.Teamwork.DeletedTeams.Item.Channels.Item.SharedWithTeams
{
    [Proxy(typeof(SharedWithTeamsRequestBuilder), true)]
    public partial interface ISharedWithTeamsRequestBuilder;
}

namespace Microsoft.Graph.Teamwork.DeletedTeams.Item.Channels.Item.SharedWithTeams.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Teamwork.DeletedTeams.Item.Channels.Item.SharedWithTeams.Item
{
    [Proxy(typeof(SharedWithChannelTeamInfoItemRequestBuilder), true)]
    public partial interface ISharedWithChannelTeamInfoItemRequestBuilder;
}

namespace Microsoft.Graph.Teamwork.DeletedTeams.Item.Channels.Item.SharedWithTeams.Item.AllowedMembers
{
    [Proxy(typeof(AllowedMembersRequestBuilder), true)]
    public partial interface IAllowedMembersRequestBuilder;
}

namespace Microsoft.Graph.Teamwork.DeletedTeams.Item.Channels.Item.SharedWithTeams.Item.AllowedMembers.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Teamwork.DeletedTeams.Item.Channels.Item.SharedWithTeams.Item.AllowedMembers.Item
{
    [Proxy(typeof(ConversationMemberItemRequestBuilder), true)]
    public partial interface IConversationMemberItemRequestBuilder;
}

namespace Microsoft.Graph.Teamwork.DeletedTeams.Item.Channels.Item.SharedWithTeams.Item.Team
{
    [Proxy(typeof(TeamRequestBuilder), true)]
    public partial interface ITeamRequestBuilder;
}

namespace Microsoft.Graph.Teamwork.DeletedTeams.Item.Channels.Item.Tabs
{
    [Proxy(typeof(TabsRequestBuilder), true)]
    public partial interface ITabsRequestBuilder;
}

namespace Microsoft.Graph.Teamwork.DeletedTeams.Item.Channels.Item.Tabs.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Teamwork.DeletedTeams.Item.Channels.Item.Tabs.Item
{
    [Proxy(typeof(TeamsTabItemRequestBuilder), true)]
    public partial interface ITeamsTabItemRequestBuilder;
}

namespace Microsoft.Graph.Teamwork.DeletedTeams.Item.Channels.Item.Tabs.Item.TeamsApp
{
    [Proxy(typeof(TeamsAppRequestBuilder), true)]
    public partial interface ITeamsAppRequestBuilder;
}

namespace Microsoft.Graph.Teamwork.DeletedTeams.Item.Channels.Item.Unarchive
{
    [Proxy(typeof(UnarchiveRequestBuilder), true)]
    public partial interface IUnarchiveRequestBuilder;
}

namespace Microsoft.Graph.Teamwork.SendActivityNotificationToRecipients
{
    [Proxy(typeof(SendActivityNotificationToRecipientsRequestBuilder), true)]
    public partial interface ISendActivityNotificationToRecipientsRequestBuilder;
}

namespace Microsoft.Graph.Teamwork.TeamsAppSettings
{
    [Proxy(typeof(TeamsAppSettingsRequestBuilder), true)]
    public partial interface ITeamsAppSettingsRequestBuilder;
}

namespace Microsoft.Graph.Teamwork.WorkforceIntegrations
{
    [Proxy(typeof(WorkforceIntegrationsRequestBuilder), true)]
    public partial interface IWorkforceIntegrationsRequestBuilder;
}

namespace Microsoft.Graph.Teamwork.WorkforceIntegrations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Teamwork.WorkforceIntegrations.Item
{
    [Proxy(typeof(WorkforceIntegrationItemRequestBuilder), true)]
    public partial interface IWorkforceIntegrationItemRequestBuilder;
}

namespace Microsoft.Graph.TenantRelationships
{
    [Proxy(typeof(TenantRelationshipsRequestBuilder), true)]
    public partial interface ITenantRelationshipsRequestBuilder;
}

namespace Microsoft.Graph.TenantRelationships.DelegatedAdminCustomers
{
    [Proxy(typeof(DelegatedAdminCustomersRequestBuilder), true)]
    public partial interface IDelegatedAdminCustomersRequestBuilder;
}

namespace Microsoft.Graph.TenantRelationships.DelegatedAdminCustomers.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.TenantRelationships.DelegatedAdminCustomers.Item
{
    [Proxy(typeof(DelegatedAdminCustomerItemRequestBuilder), true)]
    public partial interface IDelegatedAdminCustomerItemRequestBuilder;
}

namespace Microsoft.Graph.TenantRelationships.DelegatedAdminCustomers.Item.ServiceManagementDetails
{
    [Proxy(typeof(ServiceManagementDetailsRequestBuilder), true)]
    public partial interface IServiceManagementDetailsRequestBuilder;
}

namespace Microsoft.Graph.TenantRelationships.DelegatedAdminCustomers.Item.ServiceManagementDetails.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.TenantRelationships.DelegatedAdminCustomers.Item.ServiceManagementDetails.Item
{
    [Proxy(typeof(DelegatedAdminServiceManagementDetailItemRequestBuilder), true)]
    public partial interface IDelegatedAdminServiceManagementDetailItemRequestBuilder;
}

namespace Microsoft.Graph.TenantRelationships.DelegatedAdminRelationships
{
    [Proxy(typeof(DelegatedAdminRelationshipsRequestBuilder), true)]
    public partial interface IDelegatedAdminRelationshipsRequestBuilder;
}

namespace Microsoft.Graph.TenantRelationships.DelegatedAdminRelationships.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.TenantRelationships.DelegatedAdminRelationships.Item
{
    [Proxy(typeof(DelegatedAdminRelationshipItemRequestBuilder), true)]
    public partial interface IDelegatedAdminRelationshipItemRequestBuilder;
}

namespace Microsoft.Graph.TenantRelationships.DelegatedAdminRelationships.Item.AccessAssignments
{
    [Proxy(typeof(AccessAssignmentsRequestBuilder), true)]
    public partial interface IAccessAssignmentsRequestBuilder;
}

namespace Microsoft.Graph.TenantRelationships.DelegatedAdminRelationships.Item.AccessAssignments.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.TenantRelationships.DelegatedAdminRelationships.Item.AccessAssignments.Item
{
    [Proxy(typeof(DelegatedAdminAccessAssignmentItemRequestBuilder), true)]
    public partial interface IDelegatedAdminAccessAssignmentItemRequestBuilder;
}

namespace Microsoft.Graph.TenantRelationships.DelegatedAdminRelationships.Item.Operations
{
    [Proxy(typeof(OperationsRequestBuilder), true)]
    public partial interface IOperationsRequestBuilder;
}

namespace Microsoft.Graph.TenantRelationships.DelegatedAdminRelationships.Item.Operations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.TenantRelationships.DelegatedAdminRelationships.Item.Operations.Item
{
    [Proxy(typeof(DelegatedAdminRelationshipOperationItemRequestBuilder), true)]
    public partial interface IDelegatedAdminRelationshipOperationItemRequestBuilder;
}

namespace Microsoft.Graph.TenantRelationships.DelegatedAdminRelationships.Item.Requests
{
    [Proxy(typeof(RequestsRequestBuilder), true)]
    public partial interface IRequestsRequestBuilder;
}

namespace Microsoft.Graph.TenantRelationships.DelegatedAdminRelationships.Item.Requests.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.TenantRelationships.DelegatedAdminRelationships.Item.Requests.Item
{
    [Proxy(typeof(DelegatedAdminRelationshipRequestItemRequestBuilder), true)]
    public partial interface IDelegatedAdminRelationshipRequestItemRequestBuilder;
}

namespace Microsoft.Graph.TenantRelationships.FindTenantInformationByDomainNameWithDomainName
{
    [Proxy(typeof(FindTenantInformationByDomainNameWithDomainNameRequestBuilder), true)]
    public partial interface IFindTenantInformationByDomainNameWithDomainNameRequestBuilder;
}

namespace Microsoft.Graph.TenantRelationships.FindTenantInformationByTenantIdWithTenantId
{
    [Proxy(typeof(FindTenantInformationByTenantIdWithTenantIdRequestBuilder), true)]
    public partial interface IFindTenantInformationByTenantIdWithTenantIdRequestBuilder;
}

namespace Microsoft.Graph.TenantRelationships.MultiTenantOrganization
{
    [Proxy(typeof(MultiTenantOrganizationRequestBuilder), true)]
    public partial interface IMultiTenantOrganizationRequestBuilder;
}

namespace Microsoft.Graph.TenantRelationships.MultiTenantOrganization.JoinRequest
{
    [Proxy(typeof(JoinRequestRequestBuilder), true)]
    public partial interface IJoinRequestRequestBuilder;
}

namespace Microsoft.Graph.TenantRelationships.MultiTenantOrganization.Tenants
{
    [Proxy(typeof(TenantsRequestBuilder), true)]
    public partial interface ITenantsRequestBuilder;
}

namespace Microsoft.Graph.TenantRelationships.MultiTenantOrganization.Tenants.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.TenantRelationships.MultiTenantOrganization.Tenants.Item
{
    [Proxy(typeof(MultiTenantOrganizationMemberItemRequestBuilder), true)]
    public partial interface IMultiTenantOrganizationMemberItemRequestBuilder;
}

namespace Microsoft.Graph.Users
{
    [Proxy(typeof(UsersRequestBuilder), true)]
    public partial interface IUsersRequestBuilder;
}

namespace Microsoft.Graph.Users.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Users.GetAvailableExtensionProperties
{
    [Proxy(typeof(GetAvailableExtensionPropertiesRequestBuilder), true)]
    public partial interface IGetAvailableExtensionPropertiesRequestBuilder;
}

namespace Microsoft.Graph.Users.GetByIds
{
    [Proxy(typeof(GetByIdsRequestBuilder), true)]
    public partial interface IGetByIdsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item
{
    [Proxy(typeof(UserItemRequestBuilder), true)]
    public partial interface IUserItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Activities
{
    [Proxy(typeof(ActivitiesRequestBuilder), true)]
    public partial interface IActivitiesRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Activities.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Activities.Item
{
    [Proxy(typeof(UserActivityItemRequestBuilder), true)]
    public partial interface IUserActivityItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Activities.Item.HistoryItems
{
    [Proxy(typeof(HistoryItemsRequestBuilder), true)]
    public partial interface IHistoryItemsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Activities.Item.HistoryItems.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Activities.Item.HistoryItems.Item
{
    [Proxy(typeof(ActivityHistoryItemItemRequestBuilder), true)]
    public partial interface IActivityHistoryItemItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Activities.Item.HistoryItems.Item.Activity
{
    [Proxy(typeof(ActivityRequestBuilder), true)]
    public partial interface IActivityRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Activities.Recent
{
    [Proxy(typeof(RecentRequestBuilder), true)]
    public partial interface IRecentRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.AgreementAcceptances
{
    [Proxy(typeof(AgreementAcceptancesRequestBuilder), true)]
    public partial interface IAgreementAcceptancesRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.AgreementAcceptances.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.AgreementAcceptances.Item
{
    [Proxy(typeof(AgreementAcceptanceItemRequestBuilder), true)]
    public partial interface IAgreementAcceptanceItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.AppRoleAssignments
{
    [Proxy(typeof(AppRoleAssignmentsRequestBuilder), true)]
    public partial interface IAppRoleAssignmentsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.AppRoleAssignments.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.AppRoleAssignments.Item
{
    [Proxy(typeof(AppRoleAssignmentItemRequestBuilder), true)]
    public partial interface IAppRoleAssignmentItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.AssignLicense
{
    [Proxy(typeof(AssignLicenseRequestBuilder), true)]
    public partial interface IAssignLicenseRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Authentication
{
    [Proxy(typeof(AuthenticationRequestBuilder), true)]
    public partial interface IAuthenticationRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Authentication.EmailMethods
{
    [Proxy(typeof(EmailMethodsRequestBuilder), true)]
    public partial interface IEmailMethodsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Authentication.EmailMethods.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Authentication.EmailMethods.Item
{
    [Proxy(typeof(EmailAuthenticationMethodItemRequestBuilder), true)]
    public partial interface IEmailAuthenticationMethodItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Authentication.Fido2Methods
{
    [Proxy(typeof(Fido2MethodsRequestBuilder), true)]
    public partial interface IFido2MethodsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Authentication.Fido2Methods.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Authentication.Fido2Methods.Item
{
    [Proxy(typeof(Fido2AuthenticationMethodItemRequestBuilder), true)]
    public partial interface IFido2AuthenticationMethodItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Authentication.Methods
{
    [Proxy(typeof(MethodsRequestBuilder), true)]
    public partial interface IMethodsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Authentication.Methods.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Authentication.Methods.Item
{
    [Proxy(typeof(AuthenticationMethodItemRequestBuilder), true)]
    public partial interface IAuthenticationMethodItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Authentication.Methods.Item.ResetPassword
{
    [Proxy(typeof(ResetPasswordRequestBuilder), true)]
    public partial interface IResetPasswordRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Authentication.MicrosoftAuthenticatorMethods
{
    [Proxy(typeof(MicrosoftAuthenticatorMethodsRequestBuilder), true)]
    public partial interface IMicrosoftAuthenticatorMethodsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Authentication.MicrosoftAuthenticatorMethods.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Authentication.MicrosoftAuthenticatorMethods.Item
{
    [Proxy(typeof(MicrosoftAuthenticatorAuthenticationMethodItemRequestBuilder), true)]
    public partial interface IMicrosoftAuthenticatorAuthenticationMethodItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Authentication.MicrosoftAuthenticatorMethods.Item.Device
{
    [Proxy(typeof(DeviceRequestBuilder), true)]
    public partial interface IDeviceRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Authentication.Operations
{
    [Proxy(typeof(OperationsRequestBuilder), true)]
    public partial interface IOperationsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Authentication.Operations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Authentication.Operations.Item
{
    [Proxy(typeof(LongRunningOperationItemRequestBuilder), true)]
    public partial interface ILongRunningOperationItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Authentication.PasswordMethods
{
    [Proxy(typeof(PasswordMethodsRequestBuilder), true)]
    public partial interface IPasswordMethodsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Authentication.PasswordMethods.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Authentication.PasswordMethods.Item
{
    [Proxy(typeof(PasswordAuthenticationMethodItemRequestBuilder), true)]
    public partial interface IPasswordAuthenticationMethodItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Authentication.PhoneMethods
{
    [Proxy(typeof(PhoneMethodsRequestBuilder), true)]
    public partial interface IPhoneMethodsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Authentication.PhoneMethods.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Authentication.PhoneMethods.Item
{
    [Proxy(typeof(PhoneAuthenticationMethodItemRequestBuilder), true)]
    public partial interface IPhoneAuthenticationMethodItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Authentication.PhoneMethods.Item.DisableSmsSignIn
{
    [Proxy(typeof(DisableSmsSignInRequestBuilder), true)]
    public partial interface IDisableSmsSignInRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Authentication.PhoneMethods.Item.EnableSmsSignIn
{
    [Proxy(typeof(EnableSmsSignInRequestBuilder), true)]
    public partial interface IEnableSmsSignInRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Authentication.PlatformCredentialMethods
{
    [Proxy(typeof(PlatformCredentialMethodsRequestBuilder), true)]
    public partial interface IPlatformCredentialMethodsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Authentication.PlatformCredentialMethods.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Authentication.PlatformCredentialMethods.Item
{
    [Proxy(typeof(PlatformCredentialAuthenticationMethodItemRequestBuilder), true)]
    public partial interface IPlatformCredentialAuthenticationMethodItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Authentication.PlatformCredentialMethods.Item.Device
{
    [Proxy(typeof(DeviceRequestBuilder), true)]
    public partial interface IDeviceRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Authentication.SoftwareOathMethods
{
    [Proxy(typeof(SoftwareOathMethodsRequestBuilder), true)]
    public partial interface ISoftwareOathMethodsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Authentication.SoftwareOathMethods.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Authentication.SoftwareOathMethods.Item
{
    [Proxy(typeof(SoftwareOathAuthenticationMethodItemRequestBuilder), true)]
    public partial interface ISoftwareOathAuthenticationMethodItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Authentication.TemporaryAccessPassMethods
{
    [Proxy(typeof(TemporaryAccessPassMethodsRequestBuilder), true)]
    public partial interface ITemporaryAccessPassMethodsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Authentication.TemporaryAccessPassMethods.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Authentication.TemporaryAccessPassMethods.Item
{
    [Proxy(typeof(TemporaryAccessPassAuthenticationMethodItemRequestBuilder), true)]
    public partial interface ITemporaryAccessPassAuthenticationMethodItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Authentication.WindowsHelloForBusinessMethods
{
    [Proxy(typeof(WindowsHelloForBusinessMethodsRequestBuilder), true)]
    public partial interface IWindowsHelloForBusinessMethodsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Authentication.WindowsHelloForBusinessMethods.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Authentication.WindowsHelloForBusinessMethods.Item
{
    [Proxy(typeof(WindowsHelloForBusinessAuthenticationMethodItemRequestBuilder), true)]
    public partial interface IWindowsHelloForBusinessAuthenticationMethodItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Authentication.WindowsHelloForBusinessMethods.Item.Device
{
    [Proxy(typeof(DeviceRequestBuilder), true)]
    public partial interface IDeviceRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Calendar
{
    [Proxy(typeof(CalendarRequestBuilder), true)]
    public partial interface ICalendarRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Calendar.AllowedCalendarSharingRolesWithUser
{
    [Proxy(typeof(AllowedCalendarSharingRolesWithUserRequestBuilder), true)]
    public partial interface IAllowedCalendarSharingRolesWithUserRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Calendar.CalendarPermissions
{
    [Proxy(typeof(CalendarPermissionsRequestBuilder), true)]
    public partial interface ICalendarPermissionsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Calendar.CalendarPermissions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Calendar.CalendarPermissions.Item
{
    [Proxy(typeof(CalendarPermissionItemRequestBuilder), true)]
    public partial interface ICalendarPermissionItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Calendar.CalendarView
{
    [Proxy(typeof(CalendarViewRequestBuilder), true)]
    public partial interface ICalendarViewRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Calendar.CalendarView.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Calendar.Events
{
    [Proxy(typeof(EventsRequestBuilder), true)]
    public partial interface IEventsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Calendar.Events.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Calendar.Events.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Calendar.Events.Item
{
    [Proxy(typeof(EventItemRequestBuilder), true)]
    public partial interface IEventItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Calendar.Events.Item.Accept
{
    [Proxy(typeof(AcceptRequestBuilder), true)]
    public partial interface IAcceptRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Calendar.Events.Item.Attachments
{
    [Proxy(typeof(AttachmentsRequestBuilder), true)]
    public partial interface IAttachmentsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Calendar.Events.Item.Attachments.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Calendar.Events.Item.Attachments.CreateUploadSession
{
    [Proxy(typeof(CreateUploadSessionRequestBuilder), true)]
    public partial interface ICreateUploadSessionRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Calendar.Events.Item.Attachments.Item
{
    [Proxy(typeof(AttachmentItemRequestBuilder), true)]
    public partial interface IAttachmentItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Calendar.Events.Item.Calendar
{
    [Proxy(typeof(CalendarRequestBuilder), true)]
    public partial interface ICalendarRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Calendar.Events.Item.Cancel
{
    [Proxy(typeof(CancelRequestBuilder), true)]
    public partial interface ICancelRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Calendar.Events.Item.Decline
{
    [Proxy(typeof(DeclineRequestBuilder), true)]
    public partial interface IDeclineRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Calendar.Events.Item.DismissReminder
{
    [Proxy(typeof(DismissReminderRequestBuilder), true)]
    public partial interface IDismissReminderRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Calendar.Events.Item.Extensions
{
    [Proxy(typeof(ExtensionsRequestBuilder), true)]
    public partial interface IExtensionsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Calendar.Events.Item.Extensions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Calendar.Events.Item.Extensions.Item
{
    [Proxy(typeof(ExtensionItemRequestBuilder), true)]
    public partial interface IExtensionItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Calendar.Events.Item.Forward
{
    [Proxy(typeof(ForwardRequestBuilder), true)]
    public partial interface IForwardRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Calendar.Events.Item.Instances
{
    [Proxy(typeof(InstancesRequestBuilder), true)]
    public partial interface IInstancesRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Calendar.Events.Item.Instances.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Calendar.Events.Item.PermanentDelete
{
    [Proxy(typeof(PermanentDeleteRequestBuilder), true)]
    public partial interface IPermanentDeleteRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Calendar.Events.Item.SnoozeReminder
{
    [Proxy(typeof(SnoozeReminderRequestBuilder), true)]
    public partial interface ISnoozeReminderRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Calendar.Events.Item.TentativelyAccept
{
    [Proxy(typeof(TentativelyAcceptRequestBuilder), true)]
    public partial interface ITentativelyAcceptRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Calendar.GetSchedule
{
    [Proxy(typeof(GetScheduleRequestBuilder), true)]
    public partial interface IGetScheduleRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Calendar.PermanentDelete
{
    [Proxy(typeof(PermanentDeleteRequestBuilder), true)]
    public partial interface IPermanentDeleteRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.CalendarGroups
{
    [Proxy(typeof(CalendarGroupsRequestBuilder), true)]
    public partial interface ICalendarGroupsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.CalendarGroups.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.CalendarGroups.Item
{
    [Proxy(typeof(CalendarGroupItemRequestBuilder), true)]
    public partial interface ICalendarGroupItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.CalendarGroups.Item.Calendars
{
    [Proxy(typeof(CalendarsRequestBuilder), true)]
    public partial interface ICalendarsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.CalendarGroups.Item.Calendars.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.CalendarGroups.Item.Calendars.Item
{
    [Proxy(typeof(CalendarItemRequestBuilder), true)]
    public partial interface ICalendarItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.CalendarGroups.Item.Calendars.Item.AllowedCalendarSharingRolesWithUser
{
    [Proxy(typeof(AllowedCalendarSharingRolesWithUserRequestBuilder), true)]
    public partial interface IAllowedCalendarSharingRolesWithUserRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.CalendarGroups.Item.Calendars.Item.CalendarPermissions
{
    [Proxy(typeof(CalendarPermissionsRequestBuilder), true)]
    public partial interface ICalendarPermissionsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.CalendarGroups.Item.Calendars.Item.CalendarPermissions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.CalendarGroups.Item.Calendars.Item.CalendarPermissions.Item
{
    [Proxy(typeof(CalendarPermissionItemRequestBuilder), true)]
    public partial interface ICalendarPermissionItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.CalendarGroups.Item.Calendars.Item.CalendarView
{
    [Proxy(typeof(CalendarViewRequestBuilder), true)]
    public partial interface ICalendarViewRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.CalendarGroups.Item.Calendars.Item.CalendarView.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.CalendarGroups.Item.Calendars.Item.Events
{
    [Proxy(typeof(EventsRequestBuilder), true)]
    public partial interface IEventsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.CalendarGroups.Item.Calendars.Item.Events.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.CalendarGroups.Item.Calendars.Item.Events.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.CalendarGroups.Item.Calendars.Item.Events.Item
{
    [Proxy(typeof(EventItemRequestBuilder), true)]
    public partial interface IEventItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.CalendarGroups.Item.Calendars.Item.Events.Item.Accept
{
    [Proxy(typeof(AcceptRequestBuilder), true)]
    public partial interface IAcceptRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.CalendarGroups.Item.Calendars.Item.Events.Item.Attachments
{
    [Proxy(typeof(AttachmentsRequestBuilder), true)]
    public partial interface IAttachmentsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.CalendarGroups.Item.Calendars.Item.Events.Item.Attachments.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.CalendarGroups.Item.Calendars.Item.Events.Item.Attachments.CreateUploadSession
{
    [Proxy(typeof(CreateUploadSessionRequestBuilder), true)]
    public partial interface ICreateUploadSessionRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.CalendarGroups.Item.Calendars.Item.Events.Item.Attachments.Item
{
    [Proxy(typeof(AttachmentItemRequestBuilder), true)]
    public partial interface IAttachmentItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.CalendarGroups.Item.Calendars.Item.Events.Item.Calendar
{
    [Proxy(typeof(CalendarRequestBuilder), true)]
    public partial interface ICalendarRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.CalendarGroups.Item.Calendars.Item.Events.Item.Cancel
{
    [Proxy(typeof(CancelRequestBuilder), true)]
    public partial interface ICancelRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.CalendarGroups.Item.Calendars.Item.Events.Item.Decline
{
    [Proxy(typeof(DeclineRequestBuilder), true)]
    public partial interface IDeclineRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.CalendarGroups.Item.Calendars.Item.Events.Item.DismissReminder
{
    [Proxy(typeof(DismissReminderRequestBuilder), true)]
    public partial interface IDismissReminderRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.CalendarGroups.Item.Calendars.Item.Events.Item.Extensions
{
    [Proxy(typeof(ExtensionsRequestBuilder), true)]
    public partial interface IExtensionsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.CalendarGroups.Item.Calendars.Item.Events.Item.Extensions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.CalendarGroups.Item.Calendars.Item.Events.Item.Extensions.Item
{
    [Proxy(typeof(ExtensionItemRequestBuilder), true)]
    public partial interface IExtensionItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.CalendarGroups.Item.Calendars.Item.Events.Item.Forward
{
    [Proxy(typeof(ForwardRequestBuilder), true)]
    public partial interface IForwardRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.CalendarGroups.Item.Calendars.Item.Events.Item.Instances
{
    [Proxy(typeof(InstancesRequestBuilder), true)]
    public partial interface IInstancesRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.CalendarGroups.Item.Calendars.Item.Events.Item.Instances.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.CalendarGroups.Item.Calendars.Item.Events.Item.PermanentDelete
{
    [Proxy(typeof(PermanentDeleteRequestBuilder), true)]
    public partial interface IPermanentDeleteRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.CalendarGroups.Item.Calendars.Item.Events.Item.SnoozeReminder
{
    [Proxy(typeof(SnoozeReminderRequestBuilder), true)]
    public partial interface ISnoozeReminderRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.CalendarGroups.Item.Calendars.Item.Events.Item.TentativelyAccept
{
    [Proxy(typeof(TentativelyAcceptRequestBuilder), true)]
    public partial interface ITentativelyAcceptRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.CalendarGroups.Item.Calendars.Item.GetSchedule
{
    [Proxy(typeof(GetScheduleRequestBuilder), true)]
    public partial interface IGetScheduleRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.CalendarGroups.Item.Calendars.Item.PermanentDelete
{
    [Proxy(typeof(PermanentDeleteRequestBuilder), true)]
    public partial interface IPermanentDeleteRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Calendars
{
    [Proxy(typeof(CalendarsRequestBuilder), true)]
    public partial interface ICalendarsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Calendars.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Calendars.Item
{
    [Proxy(typeof(CalendarItemRequestBuilder), true)]
    public partial interface ICalendarItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Calendars.Item.AllowedCalendarSharingRolesWithUser
{
    [Proxy(typeof(AllowedCalendarSharingRolesWithUserRequestBuilder), true)]
    public partial interface IAllowedCalendarSharingRolesWithUserRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Calendars.Item.CalendarPermissions
{
    [Proxy(typeof(CalendarPermissionsRequestBuilder), true)]
    public partial interface ICalendarPermissionsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Calendars.Item.CalendarPermissions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Calendars.Item.CalendarPermissions.Item
{
    [Proxy(typeof(CalendarPermissionItemRequestBuilder), true)]
    public partial interface ICalendarPermissionItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Calendars.Item.CalendarView
{
    [Proxy(typeof(CalendarViewRequestBuilder), true)]
    public partial interface ICalendarViewRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Calendars.Item.CalendarView.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Calendars.Item.Events
{
    [Proxy(typeof(EventsRequestBuilder), true)]
    public partial interface IEventsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Calendars.Item.Events.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Calendars.Item.Events.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Calendars.Item.Events.Item
{
    [Proxy(typeof(EventItemRequestBuilder), true)]
    public partial interface IEventItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Calendars.Item.Events.Item.Accept
{
    [Proxy(typeof(AcceptRequestBuilder), true)]
    public partial interface IAcceptRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Calendars.Item.Events.Item.Attachments
{
    [Proxy(typeof(AttachmentsRequestBuilder), true)]
    public partial interface IAttachmentsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Calendars.Item.Events.Item.Attachments.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Calendars.Item.Events.Item.Attachments.CreateUploadSession
{
    [Proxy(typeof(CreateUploadSessionRequestBuilder), true)]
    public partial interface ICreateUploadSessionRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Calendars.Item.Events.Item.Attachments.Item
{
    [Proxy(typeof(AttachmentItemRequestBuilder), true)]
    public partial interface IAttachmentItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Calendars.Item.Events.Item.Calendar
{
    [Proxy(typeof(CalendarRequestBuilder), true)]
    public partial interface ICalendarRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Calendars.Item.Events.Item.Cancel
{
    [Proxy(typeof(CancelRequestBuilder), true)]
    public partial interface ICancelRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Calendars.Item.Events.Item.Decline
{
    [Proxy(typeof(DeclineRequestBuilder), true)]
    public partial interface IDeclineRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Calendars.Item.Events.Item.DismissReminder
{
    [Proxy(typeof(DismissReminderRequestBuilder), true)]
    public partial interface IDismissReminderRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Calendars.Item.Events.Item.Extensions
{
    [Proxy(typeof(ExtensionsRequestBuilder), true)]
    public partial interface IExtensionsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Calendars.Item.Events.Item.Extensions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Calendars.Item.Events.Item.Extensions.Item
{
    [Proxy(typeof(ExtensionItemRequestBuilder), true)]
    public partial interface IExtensionItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Calendars.Item.Events.Item.Forward
{
    [Proxy(typeof(ForwardRequestBuilder), true)]
    public partial interface IForwardRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Calendars.Item.Events.Item.Instances
{
    [Proxy(typeof(InstancesRequestBuilder), true)]
    public partial interface IInstancesRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Calendars.Item.Events.Item.Instances.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Calendars.Item.Events.Item.PermanentDelete
{
    [Proxy(typeof(PermanentDeleteRequestBuilder), true)]
    public partial interface IPermanentDeleteRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Calendars.Item.Events.Item.SnoozeReminder
{
    [Proxy(typeof(SnoozeReminderRequestBuilder), true)]
    public partial interface ISnoozeReminderRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Calendars.Item.Events.Item.TentativelyAccept
{
    [Proxy(typeof(TentativelyAcceptRequestBuilder), true)]
    public partial interface ITentativelyAcceptRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Calendars.Item.GetSchedule
{
    [Proxy(typeof(GetScheduleRequestBuilder), true)]
    public partial interface IGetScheduleRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Calendars.Item.PermanentDelete
{
    [Proxy(typeof(PermanentDeleteRequestBuilder), true)]
    public partial interface IPermanentDeleteRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.CalendarView
{
    [Proxy(typeof(CalendarViewRequestBuilder), true)]
    public partial interface ICalendarViewRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.CalendarView.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.ChangePassword
{
    [Proxy(typeof(ChangePasswordRequestBuilder), true)]
    public partial interface IChangePasswordRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Chats
{
    [Proxy(typeof(ChatsRequestBuilder), true)]
    public partial interface IChatsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Chats.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Chats.GetAllMessages
{
    [Proxy(typeof(GetAllMessagesRequestBuilder), true)]
    public partial interface IGetAllMessagesRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Chats.GetAllRetainedMessages
{
    [Proxy(typeof(GetAllRetainedMessagesRequestBuilder), true)]
    public partial interface IGetAllRetainedMessagesRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Chats.Item
{
    [Proxy(typeof(ChatItemRequestBuilder), true)]
    public partial interface IChatItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Chats.Item.HideForUser
{
    [Proxy(typeof(HideForUserRequestBuilder), true)]
    public partial interface IHideForUserRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Chats.Item.InstalledApps
{
    [Proxy(typeof(InstalledAppsRequestBuilder), true)]
    public partial interface IInstalledAppsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Chats.Item.InstalledApps.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Chats.Item.InstalledApps.Item
{
    [Proxy(typeof(TeamsAppInstallationItemRequestBuilder), true)]
    public partial interface ITeamsAppInstallationItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Chats.Item.InstalledApps.Item.TeamsApp
{
    [Proxy(typeof(TeamsAppRequestBuilder), true)]
    public partial interface ITeamsAppRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Chats.Item.InstalledApps.Item.TeamsAppDefinition
{
    [Proxy(typeof(TeamsAppDefinitionRequestBuilder), true)]
    public partial interface ITeamsAppDefinitionRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Chats.Item.InstalledApps.Item.Upgrade
{
    [Proxy(typeof(UpgradeRequestBuilder), true)]
    public partial interface IUpgradeRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Chats.Item.LastMessagePreview
{
    [Proxy(typeof(LastMessagePreviewRequestBuilder), true)]
    public partial interface ILastMessagePreviewRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Chats.Item.MarkChatReadForUser
{
    [Proxy(typeof(MarkChatReadForUserRequestBuilder), true)]
    public partial interface IMarkChatReadForUserRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Chats.Item.MarkChatUnreadForUser
{
    [Proxy(typeof(MarkChatUnreadForUserRequestBuilder), true)]
    public partial interface IMarkChatUnreadForUserRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Chats.Item.Members
{
    [Proxy(typeof(MembersRequestBuilder), true)]
    public partial interface IMembersRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Chats.Item.Members.Add
{
    [Proxy(typeof(AddRequestBuilder), true)]
    public partial interface IAddRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Chats.Item.Members.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Chats.Item.Members.Item
{
    [Proxy(typeof(ConversationMemberItemRequestBuilder), true)]
    public partial interface IConversationMemberItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Chats.Item.Members.Remove
{
    [Proxy(typeof(RemoveRequestBuilder), true)]
    public partial interface IRemoveRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Chats.Item.Messages
{
    [Proxy(typeof(MessagesRequestBuilder), true)]
    public partial interface IMessagesRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Chats.Item.Messages.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Chats.Item.Messages.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Chats.Item.Messages.Item
{
    [Proxy(typeof(ChatMessageItemRequestBuilder), true)]
    public partial interface IChatMessageItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Chats.Item.Messages.Item.HostedContents
{
    [Proxy(typeof(HostedContentsRequestBuilder), true)]
    public partial interface IHostedContentsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Chats.Item.Messages.Item.HostedContents.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Chats.Item.Messages.Item.HostedContents.Item
{
    [Proxy(typeof(ChatMessageHostedContentItemRequestBuilder), true)]
    public partial interface IChatMessageHostedContentItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Chats.Item.Messages.Item.HostedContents.Item.Value
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Chats.Item.Messages.Item.Replies
{
    [Proxy(typeof(RepliesRequestBuilder), true)]
    public partial interface IRepliesRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Chats.Item.Messages.Item.Replies.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Chats.Item.Messages.Item.Replies.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Chats.Item.Messages.Item.Replies.Item
{
    [Proxy(typeof(ChatMessageItemRequestBuilder), true)]
    public partial interface IChatMessageItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Chats.Item.Messages.Item.Replies.Item.HostedContents
{
    [Proxy(typeof(HostedContentsRequestBuilder), true)]
    public partial interface IHostedContentsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Chats.Item.Messages.Item.Replies.Item.HostedContents.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Chats.Item.Messages.Item.Replies.Item.HostedContents.Item
{
    [Proxy(typeof(ChatMessageHostedContentItemRequestBuilder), true)]
    public partial interface IChatMessageHostedContentItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Chats.Item.Messages.Item.Replies.Item.HostedContents.Item.Value
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Chats.Item.Messages.Item.Replies.Item.SetReaction
{
    [Proxy(typeof(SetReactionRequestBuilder), true)]
    public partial interface ISetReactionRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Chats.Item.Messages.Item.Replies.Item.SoftDelete
{
    [Proxy(typeof(SoftDeleteRequestBuilder), true)]
    public partial interface ISoftDeleteRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Chats.Item.Messages.Item.Replies.Item.UndoSoftDelete
{
    [Proxy(typeof(UndoSoftDeleteRequestBuilder), true)]
    public partial interface IUndoSoftDeleteRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Chats.Item.Messages.Item.Replies.Item.UnsetReaction
{
    [Proxy(typeof(UnsetReactionRequestBuilder), true)]
    public partial interface IUnsetReactionRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Chats.Item.Messages.Item.SetReaction
{
    [Proxy(typeof(SetReactionRequestBuilder), true)]
    public partial interface ISetReactionRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Chats.Item.Messages.Item.SoftDelete
{
    [Proxy(typeof(SoftDeleteRequestBuilder), true)]
    public partial interface ISoftDeleteRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Chats.Item.Messages.Item.UndoSoftDelete
{
    [Proxy(typeof(UndoSoftDeleteRequestBuilder), true)]
    public partial interface IUndoSoftDeleteRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Chats.Item.Messages.Item.UnsetReaction
{
    [Proxy(typeof(UnsetReactionRequestBuilder), true)]
    public partial interface IUnsetReactionRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Chats.Item.PermissionGrants
{
    [Proxy(typeof(PermissionGrantsRequestBuilder), true)]
    public partial interface IPermissionGrantsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Chats.Item.PermissionGrants.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Chats.Item.PermissionGrants.Item
{
    [Proxy(typeof(ResourceSpecificPermissionGrantItemRequestBuilder), true)]
    public partial interface IResourceSpecificPermissionGrantItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Chats.Item.PinnedMessages
{
    [Proxy(typeof(PinnedMessagesRequestBuilder), true)]
    public partial interface IPinnedMessagesRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Chats.Item.PinnedMessages.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Chats.Item.PinnedMessages.Item
{
    [Proxy(typeof(PinnedChatMessageInfoItemRequestBuilder), true)]
    public partial interface IPinnedChatMessageInfoItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Chats.Item.PinnedMessages.Item.Message
{
    [Proxy(typeof(MessageRequestBuilder), true)]
    public partial interface IMessageRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Chats.Item.SendActivityNotification
{
    [Proxy(typeof(SendActivityNotificationRequestBuilder), true)]
    public partial interface ISendActivityNotificationRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Chats.Item.Tabs
{
    [Proxy(typeof(TabsRequestBuilder), true)]
    public partial interface ITabsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Chats.Item.Tabs.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Chats.Item.Tabs.Item
{
    [Proxy(typeof(TeamsTabItemRequestBuilder), true)]
    public partial interface ITeamsTabItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Chats.Item.Tabs.Item.TeamsApp
{
    [Proxy(typeof(TeamsAppRequestBuilder), true)]
    public partial interface ITeamsAppRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Chats.Item.UnhideForUser
{
    [Proxy(typeof(UnhideForUserRequestBuilder), true)]
    public partial interface IUnhideForUserRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.CheckMemberGroups
{
    [Proxy(typeof(CheckMemberGroupsRequestBuilder), true)]
    public partial interface ICheckMemberGroupsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.CheckMemberObjects
{
    [Proxy(typeof(CheckMemberObjectsRequestBuilder), true)]
    public partial interface ICheckMemberObjectsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.CloudClipboard
{
    [Proxy(typeof(CloudClipboardRequestBuilder), true)]
    public partial interface ICloudClipboardRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.CloudClipboard.Items
{
    [Proxy(typeof(ItemsRequestBuilder), true)]
    public partial interface IItemsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.CloudClipboard.Items.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.CloudClipboard.Items.Item
{
    [Proxy(typeof(CloudClipboardItemItemRequestBuilder), true)]
    public partial interface ICloudClipboardItemItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.ContactFolders
{
    [Proxy(typeof(ContactFoldersRequestBuilder), true)]
    public partial interface IContactFoldersRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.ContactFolders.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.ContactFolders.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.ContactFolders.Item
{
    [Proxy(typeof(ContactFolderItemRequestBuilder), true)]
    public partial interface IContactFolderItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.ContactFolders.Item.ChildFolders
{
    [Proxy(typeof(ChildFoldersRequestBuilder), true)]
    public partial interface IChildFoldersRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.ContactFolders.Item.ChildFolders.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.ContactFolders.Item.ChildFolders.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.ContactFolders.Item.ChildFolders.Item
{
    [Proxy(typeof(ContactFolderItemRequestBuilder), true)]
    public partial interface IContactFolderItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.ContactFolders.Item.ChildFolders.Item.Contacts
{
    [Proxy(typeof(ContactsRequestBuilder), true)]
    public partial interface IContactsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.ContactFolders.Item.ChildFolders.Item.Contacts.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.ContactFolders.Item.ChildFolders.Item.Contacts.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.ContactFolders.Item.ChildFolders.Item.Contacts.Item
{
    [Proxy(typeof(ContactItemRequestBuilder), true)]
    public partial interface IContactItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.ContactFolders.Item.ChildFolders.Item.Contacts.Item.Extensions
{
    [Proxy(typeof(ExtensionsRequestBuilder), true)]
    public partial interface IExtensionsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.ContactFolders.Item.ChildFolders.Item.Contacts.Item.Extensions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.ContactFolders.Item.ChildFolders.Item.Contacts.Item.Extensions.Item
{
    [Proxy(typeof(ExtensionItemRequestBuilder), true)]
    public partial interface IExtensionItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.ContactFolders.Item.ChildFolders.Item.Contacts.Item.PermanentDelete
{
    [Proxy(typeof(PermanentDeleteRequestBuilder), true)]
    public partial interface IPermanentDeleteRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.ContactFolders.Item.ChildFolders.Item.Contacts.Item.Photo
{
    [Proxy(typeof(PhotoRequestBuilder), true)]
    public partial interface IPhotoRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.ContactFolders.Item.ChildFolders.Item.Contacts.Item.Photo.Value
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.ContactFolders.Item.ChildFolders.Item.PermanentDelete
{
    [Proxy(typeof(PermanentDeleteRequestBuilder), true)]
    public partial interface IPermanentDeleteRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.ContactFolders.Item.Contacts
{
    [Proxy(typeof(ContactsRequestBuilder), true)]
    public partial interface IContactsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.ContactFolders.Item.Contacts.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.ContactFolders.Item.Contacts.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.ContactFolders.Item.Contacts.Item
{
    [Proxy(typeof(ContactItemRequestBuilder), true)]
    public partial interface IContactItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.ContactFolders.Item.Contacts.Item.Extensions
{
    [Proxy(typeof(ExtensionsRequestBuilder), true)]
    public partial interface IExtensionsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.ContactFolders.Item.Contacts.Item.Extensions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.ContactFolders.Item.Contacts.Item.Extensions.Item
{
    [Proxy(typeof(ExtensionItemRequestBuilder), true)]
    public partial interface IExtensionItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.ContactFolders.Item.Contacts.Item.PermanentDelete
{
    [Proxy(typeof(PermanentDeleteRequestBuilder), true)]
    public partial interface IPermanentDeleteRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.ContactFolders.Item.Contacts.Item.Photo
{
    [Proxy(typeof(PhotoRequestBuilder), true)]
    public partial interface IPhotoRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.ContactFolders.Item.Contacts.Item.Photo.Value
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.ContactFolders.Item.PermanentDelete
{
    [Proxy(typeof(PermanentDeleteRequestBuilder), true)]
    public partial interface IPermanentDeleteRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Contacts
{
    [Proxy(typeof(ContactsRequestBuilder), true)]
    public partial interface IContactsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Contacts.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Contacts.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Contacts.Item
{
    [Proxy(typeof(ContactItemRequestBuilder), true)]
    public partial interface IContactItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Contacts.Item.Extensions
{
    [Proxy(typeof(ExtensionsRequestBuilder), true)]
    public partial interface IExtensionsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Contacts.Item.Extensions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Contacts.Item.Extensions.Item
{
    [Proxy(typeof(ExtensionItemRequestBuilder), true)]
    public partial interface IExtensionItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Contacts.Item.PermanentDelete
{
    [Proxy(typeof(PermanentDeleteRequestBuilder), true)]
    public partial interface IPermanentDeleteRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Contacts.Item.Photo
{
    [Proxy(typeof(PhotoRequestBuilder), true)]
    public partial interface IPhotoRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Contacts.Item.Photo.Value
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.CreatedObjects
{
    [Proxy(typeof(CreatedObjectsRequestBuilder), true)]
    public partial interface ICreatedObjectsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.CreatedObjects.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.CreatedObjects.GraphServicePrincipal
{
    [Proxy(typeof(GraphServicePrincipalRequestBuilder), true)]
    public partial interface IGraphServicePrincipalRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.CreatedObjects.GraphServicePrincipal.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.CreatedObjects.Item
{
    [Proxy(typeof(DirectoryObjectItemRequestBuilder), true)]
    public partial interface IDirectoryObjectItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.CreatedObjects.Item.GraphServicePrincipal
{
    [Proxy(typeof(GraphServicePrincipalRequestBuilder), true)]
    public partial interface IGraphServicePrincipalRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.DataSecurityAndGovernance
{
    [Proxy(typeof(DataSecurityAndGovernanceRequestBuilder), true)]
    public partial interface IDataSecurityAndGovernanceRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.DataSecurityAndGovernance.Activities
{
    [Proxy(typeof(ActivitiesRequestBuilder), true)]
    public partial interface IActivitiesRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.DataSecurityAndGovernance.Activities.ContentActivities
{
    [Proxy(typeof(ContentActivitiesRequestBuilder), true)]
    public partial interface IContentActivitiesRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.DataSecurityAndGovernance.Activities.ContentActivities.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.DataSecurityAndGovernance.Activities.ContentActivities.Item
{
    [Proxy(typeof(ContentActivityItemRequestBuilder), true)]
    public partial interface IContentActivityItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.DataSecurityAndGovernance.ProcessContent
{
    [Proxy(typeof(ProcessContentRequestBuilder), true)]
    public partial interface IProcessContentRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.DataSecurityAndGovernance.ProtectionScopes
{
    [Proxy(typeof(ProtectionScopesRequestBuilder), true)]
    public partial interface IProtectionScopesRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.DataSecurityAndGovernance.ProtectionScopes.Compute
{
    [Proxy(typeof(ComputeRequestBuilder), true)]
    public partial interface IComputeRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.DataSecurityAndGovernance.SensitivityLabels
{
    [Proxy(typeof(SensitivityLabelsRequestBuilder), true)]
    public partial interface ISensitivityLabelsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.DataSecurityAndGovernance.SensitivityLabels.ComputeInheritanceWithLabelIdsWithLocaleWithContentFormats
{
    [Proxy(typeof(ComputeInheritanceWithLabelIdsWithLocaleWithContentFormatsRequestBuilder), true)]
    public partial interface IComputeInheritanceWithLabelIdsWithLocaleWithContentFormatsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.DataSecurityAndGovernance.SensitivityLabels.ComputeRightsAndInheritance
{
    [Proxy(typeof(ComputeRightsAndInheritanceRequestBuilder), true)]
    public partial interface IComputeRightsAndInheritanceRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.DataSecurityAndGovernance.SensitivityLabels.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.DataSecurityAndGovernance.SensitivityLabels.Item
{
    [Proxy(typeof(SensitivityLabelItemRequestBuilder), true)]
    public partial interface ISensitivityLabelItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.DataSecurityAndGovernance.SensitivityLabels.Item.Rights
{
    [Proxy(typeof(RightsRequestBuilder), true)]
    public partial interface IRightsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.DataSecurityAndGovernance.SensitivityLabels.Item.Sublabels
{
    [Proxy(typeof(SublabelsRequestBuilder), true)]
    public partial interface ISublabelsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.DataSecurityAndGovernance.SensitivityLabels.Item.Sublabels.ComputeInheritanceWithLabelIdsWithLocaleWithContentFormats
{
    [Proxy(typeof(ComputeInheritanceWithLabelIdsWithLocaleWithContentFormatsRequestBuilder), true)]
    public partial interface IComputeInheritanceWithLabelIdsWithLocaleWithContentFormatsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.DataSecurityAndGovernance.SensitivityLabels.Item.Sublabels.ComputeRightsAndInheritance
{
    [Proxy(typeof(ComputeRightsAndInheritanceRequestBuilder), true)]
    public partial interface IComputeRightsAndInheritanceRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.DataSecurityAndGovernance.SensitivityLabels.Item.Sublabels.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.DataSecurityAndGovernance.SensitivityLabels.Item.Sublabels.Item
{
    [Proxy(typeof(SensitivityLabelItemRequestBuilder), true)]
    public partial interface ISensitivityLabelItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.DataSecurityAndGovernance.SensitivityLabels.Item.Sublabels.Item.Rights
{
    [Proxy(typeof(RightsRequestBuilder), true)]
    public partial interface IRightsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.DeviceManagementTroubleshootingEvents
{
    [Proxy(typeof(DeviceManagementTroubleshootingEventsRequestBuilder), true)]
    public partial interface IDeviceManagementTroubleshootingEventsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.DeviceManagementTroubleshootingEvents.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.DeviceManagementTroubleshootingEvents.Item
{
    [Proxy(typeof(DeviceManagementTroubleshootingEventItemRequestBuilder), true)]
    public partial interface IDeviceManagementTroubleshootingEventItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.DirectReports
{
    [Proxy(typeof(DirectReportsRequestBuilder), true)]
    public partial interface IDirectReportsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.DirectReports.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.DirectReports.GraphOrgContact
{
    [Proxy(typeof(GraphOrgContactRequestBuilder), true)]
    public partial interface IGraphOrgContactRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.DirectReports.GraphOrgContact.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.DirectReports.GraphUser
{
    [Proxy(typeof(GraphUserRequestBuilder), true)]
    public partial interface IGraphUserRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.DirectReports.GraphUser.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.DirectReports.Item
{
    [Proxy(typeof(DirectoryObjectItemRequestBuilder), true)]
    public partial interface IDirectoryObjectItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.DirectReports.Item.GraphOrgContact
{
    [Proxy(typeof(GraphOrgContactRequestBuilder), true)]
    public partial interface IGraphOrgContactRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.DirectReports.Item.GraphUser
{
    [Proxy(typeof(GraphUserRequestBuilder), true)]
    public partial interface IGraphUserRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Drive
{
    [Proxy(typeof(DriveRequestBuilder), true)]
    public partial interface IDriveRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Drives
{
    [Proxy(typeof(DrivesRequestBuilder), true)]
    public partial interface IDrivesRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Drives.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Drives.Item
{
    [Proxy(typeof(DriveItemRequestBuilder), true)]
    public partial interface IDriveItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.EmployeeExperience
{
    [Proxy(typeof(EmployeeExperienceRequestBuilder), true)]
    public partial interface IEmployeeExperienceRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.EmployeeExperience.LearningCourseActivities
{
    [Proxy(typeof(LearningCourseActivitiesRequestBuilder), true)]
    public partial interface ILearningCourseActivitiesRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.EmployeeExperience.LearningCourseActivities.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.EmployeeExperience.LearningCourseActivities.Item
{
    [Proxy(typeof(LearningCourseActivityItemRequestBuilder), true)]
    public partial interface ILearningCourseActivityItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.EmployeeExperience.LearningCourseActivitiesWithExternalcourseActivityId
{
    [Proxy(typeof(LearningCourseActivitiesWithExternalcourseActivityIdRequestBuilder), true)]
    public partial interface ILearningCourseActivitiesWithExternalcourseActivityIdRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Events
{
    [Proxy(typeof(EventsRequestBuilder), true)]
    public partial interface IEventsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Events.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Events.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Events.Item
{
    [Proxy(typeof(EventItemRequestBuilder), true)]
    public partial interface IEventItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Events.Item.Accept
{
    [Proxy(typeof(AcceptRequestBuilder), true)]
    public partial interface IAcceptRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Events.Item.Attachments
{
    [Proxy(typeof(AttachmentsRequestBuilder), true)]
    public partial interface IAttachmentsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Events.Item.Attachments.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Events.Item.Attachments.CreateUploadSession
{
    [Proxy(typeof(CreateUploadSessionRequestBuilder), true)]
    public partial interface ICreateUploadSessionRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Events.Item.Attachments.Item
{
    [Proxy(typeof(AttachmentItemRequestBuilder), true)]
    public partial interface IAttachmentItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Events.Item.Calendar
{
    [Proxy(typeof(CalendarRequestBuilder), true)]
    public partial interface ICalendarRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Events.Item.Cancel
{
    [Proxy(typeof(CancelRequestBuilder), true)]
    public partial interface ICancelRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Events.Item.Decline
{
    [Proxy(typeof(DeclineRequestBuilder), true)]
    public partial interface IDeclineRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Events.Item.DismissReminder
{
    [Proxy(typeof(DismissReminderRequestBuilder), true)]
    public partial interface IDismissReminderRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Events.Item.Extensions
{
    [Proxy(typeof(ExtensionsRequestBuilder), true)]
    public partial interface IExtensionsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Events.Item.Extensions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Events.Item.Extensions.Item
{
    [Proxy(typeof(ExtensionItemRequestBuilder), true)]
    public partial interface IExtensionItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Events.Item.Forward
{
    [Proxy(typeof(ForwardRequestBuilder), true)]
    public partial interface IForwardRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Events.Item.Instances
{
    [Proxy(typeof(InstancesRequestBuilder), true)]
    public partial interface IInstancesRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Events.Item.Instances.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Events.Item.PermanentDelete
{
    [Proxy(typeof(PermanentDeleteRequestBuilder), true)]
    public partial interface IPermanentDeleteRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Events.Item.SnoozeReminder
{
    [Proxy(typeof(SnoozeReminderRequestBuilder), true)]
    public partial interface ISnoozeReminderRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Events.Item.TentativelyAccept
{
    [Proxy(typeof(TentativelyAcceptRequestBuilder), true)]
    public partial interface ITentativelyAcceptRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.ExportDeviceAndAppManagementData
{
    [Proxy(typeof(ExportDeviceAndAppManagementDataRequestBuilder), true)]
    public partial interface IExportDeviceAndAppManagementDataRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.ExportDeviceAndAppManagementDataWithSkipWithTop
{
    [Proxy(typeof(ExportDeviceAndAppManagementDataWithSkipWithTopRequestBuilder), true)]
    public partial interface IExportDeviceAndAppManagementDataWithSkipWithTopRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.ExportPersonalData
{
    [Proxy(typeof(ExportPersonalDataRequestBuilder), true)]
    public partial interface IExportPersonalDataRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Extensions
{
    [Proxy(typeof(ExtensionsRequestBuilder), true)]
    public partial interface IExtensionsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Extensions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Extensions.Item
{
    [Proxy(typeof(ExtensionItemRequestBuilder), true)]
    public partial interface IExtensionItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.FindMeetingTimes
{
    [Proxy(typeof(FindMeetingTimesRequestBuilder), true)]
    public partial interface IFindMeetingTimesRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.FollowedSites
{
    [Proxy(typeof(FollowedSitesRequestBuilder), true)]
    public partial interface IFollowedSitesRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.FollowedSites.Add
{
    [Proxy(typeof(AddRequestBuilder), true)]
    public partial interface IAddRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.FollowedSites.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.FollowedSites.Item
{
    [Proxy(typeof(SiteItemRequestBuilder), true)]
    public partial interface ISiteItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.FollowedSites.Remove
{
    [Proxy(typeof(RemoveRequestBuilder), true)]
    public partial interface IRemoveRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.GetMailTips
{
    [Proxy(typeof(GetMailTipsRequestBuilder), true)]
    public partial interface IGetMailTipsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.GetManagedAppDiagnosticStatuses
{
    [Proxy(typeof(GetManagedAppDiagnosticStatusesRequestBuilder), true)]
    public partial interface IGetManagedAppDiagnosticStatusesRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.GetManagedAppPolicies
{
    [Proxy(typeof(GetManagedAppPoliciesRequestBuilder), true)]
    public partial interface IGetManagedAppPoliciesRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.GetManagedDevicesWithAppFailures
{
    [Proxy(typeof(GetManagedDevicesWithAppFailuresRequestBuilder), true)]
    public partial interface IGetManagedDevicesWithAppFailuresRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.GetMemberGroups
{
    [Proxy(typeof(GetMemberGroupsRequestBuilder), true)]
    public partial interface IGetMemberGroupsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.GetMemberObjects
{
    [Proxy(typeof(GetMemberObjectsRequestBuilder), true)]
    public partial interface IGetMemberObjectsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.InferenceClassification
{
    [Proxy(typeof(InferenceClassificationRequestBuilder), true)]
    public partial interface IInferenceClassificationRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.InferenceClassification.Overrides
{
    [Proxy(typeof(OverridesRequestBuilder), true)]
    public partial interface IOverridesRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.InferenceClassification.Overrides.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.InferenceClassification.Overrides.Item
{
    [Proxy(typeof(InferenceClassificationOverrideItemRequestBuilder), true)]
    public partial interface IInferenceClassificationOverrideItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Insights
{
    [Proxy(typeof(InsightsRequestBuilder), true)]
    public partial interface IInsightsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Insights.Shared
{
    [Proxy(typeof(SharedRequestBuilder), true)]
    public partial interface ISharedRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Insights.Shared.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Insights.Shared.Item
{
    [Proxy(typeof(SharedInsightItemRequestBuilder), true)]
    public partial interface ISharedInsightItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Insights.Shared.Item.LastSharedMethod
{
    [Proxy(typeof(LastSharedMethodRequestBuilder), true)]
    public partial interface ILastSharedMethodRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Insights.Shared.Item.Resource
{
    [Proxy(typeof(ResourceRequestBuilder), true)]
    public partial interface IResourceRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Insights.Trending
{
    [Proxy(typeof(TrendingRequestBuilder), true)]
    public partial interface ITrendingRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Insights.Trending.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Insights.Trending.Item
{
    [Proxy(typeof(TrendingItemRequestBuilder), true)]
    public partial interface ITrendingItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Insights.Trending.Item.Resource
{
    [Proxy(typeof(ResourceRequestBuilder), true)]
    public partial interface IResourceRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Insights.Used
{
    [Proxy(typeof(UsedRequestBuilder), true)]
    public partial interface IUsedRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Insights.Used.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Insights.Used.Item
{
    [Proxy(typeof(UsedInsightItemRequestBuilder), true)]
    public partial interface IUsedInsightItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Insights.Used.Item.Resource
{
    [Proxy(typeof(ResourceRequestBuilder), true)]
    public partial interface IResourceRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams
{
    [Proxy(typeof(JoinedTeamsRequestBuilder), true)]
    public partial interface IJoinedTeamsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.GetAllMessages
{
    [Proxy(typeof(GetAllMessagesRequestBuilder), true)]
    public partial interface IGetAllMessagesRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item
{
    [Proxy(typeof(TeamItemRequestBuilder), true)]
    public partial interface ITeamItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.AllChannels
{
    [Proxy(typeof(AllChannelsRequestBuilder), true)]
    public partial interface IAllChannelsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.AllChannels.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.AllChannels.Item
{
    [Proxy(typeof(ChannelItemRequestBuilder), true)]
    public partial interface IChannelItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Archive
{
    [Proxy(typeof(ArchiveRequestBuilder), true)]
    public partial interface IArchiveRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Channels
{
    [Proxy(typeof(ChannelsRequestBuilder), true)]
    public partial interface IChannelsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Channels.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Channels.GetAllMessages
{
    [Proxy(typeof(GetAllMessagesRequestBuilder), true)]
    public partial interface IGetAllMessagesRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Channels.GetAllRetainedMessages
{
    [Proxy(typeof(GetAllRetainedMessagesRequestBuilder), true)]
    public partial interface IGetAllRetainedMessagesRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Channels.Item
{
    [Proxy(typeof(ChannelItemRequestBuilder), true)]
    public partial interface IChannelItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Channels.Item.AllMembers
{
    [Proxy(typeof(AllMembersRequestBuilder), true)]
    public partial interface IAllMembersRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Channels.Item.AllMembers.Add
{
    [Proxy(typeof(AddRequestBuilder), true)]
    public partial interface IAddRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Channels.Item.AllMembers.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Channels.Item.AllMembers.Item
{
    [Proxy(typeof(ConversationMemberItemRequestBuilder), true)]
    public partial interface IConversationMemberItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Channels.Item.AllMembers.Remove
{
    [Proxy(typeof(RemoveRequestBuilder), true)]
    public partial interface IRemoveRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Channels.Item.Archive
{
    [Proxy(typeof(ArchiveRequestBuilder), true)]
    public partial interface IArchiveRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Channels.Item.CompleteMigration
{
    [Proxy(typeof(CompleteMigrationRequestBuilder), true)]
    public partial interface ICompleteMigrationRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Channels.Item.DoesUserHaveAccessuserIdUserIdTenantIdTenantIdUserPrincipalNameUserPrincipalName
{
    [Proxy(typeof(DoesUserHaveAccessuserIdUserIdTenantIdTenantIdUserPrincipalNameUserPrincipalNameRequestBuilder), true)]
    public partial interface IDoesUserHaveAccessuserIdUserIdTenantIdTenantIdUserPrincipalNameUserPrincipalNameRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Channels.Item.FilesFolder
{
    [Proxy(typeof(FilesFolderRequestBuilder), true)]
    public partial interface IFilesFolderRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Channels.Item.FilesFolder.Content
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Channels.Item.Members
{
    [Proxy(typeof(MembersRequestBuilder), true)]
    public partial interface IMembersRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Channels.Item.Members.Add
{
    [Proxy(typeof(AddRequestBuilder), true)]
    public partial interface IAddRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Channels.Item.Members.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Channels.Item.Members.Item
{
    [Proxy(typeof(ConversationMemberItemRequestBuilder), true)]
    public partial interface IConversationMemberItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Channels.Item.Members.Remove
{
    [Proxy(typeof(RemoveRequestBuilder), true)]
    public partial interface IRemoveRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Channels.Item.Messages
{
    [Proxy(typeof(MessagesRequestBuilder), true)]
    public partial interface IMessagesRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Channels.Item.Messages.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Channels.Item.Messages.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Channels.Item.Messages.Item
{
    [Proxy(typeof(ChatMessageItemRequestBuilder), true)]
    public partial interface IChatMessageItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Channels.Item.Messages.Item.HostedContents
{
    [Proxy(typeof(HostedContentsRequestBuilder), true)]
    public partial interface IHostedContentsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Channels.Item.Messages.Item.HostedContents.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Channels.Item.Messages.Item.HostedContents.Item
{
    [Proxy(typeof(ChatMessageHostedContentItemRequestBuilder), true)]
    public partial interface IChatMessageHostedContentItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Channels.Item.Messages.Item.HostedContents.Item.Value
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Channels.Item.Messages.Item.Replies
{
    [Proxy(typeof(RepliesRequestBuilder), true)]
    public partial interface IRepliesRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Channels.Item.Messages.Item.Replies.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Channels.Item.Messages.Item.Replies.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Channels.Item.Messages.Item.Replies.Item
{
    [Proxy(typeof(ChatMessageItemRequestBuilder), true)]
    public partial interface IChatMessageItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Channels.Item.Messages.Item.Replies.Item.HostedContents
{
    [Proxy(typeof(HostedContentsRequestBuilder), true)]
    public partial interface IHostedContentsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Channels.Item.Messages.Item.Replies.Item.HostedContents.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Channels.Item.Messages.Item.Replies.Item.HostedContents.Item
{
    [Proxy(typeof(ChatMessageHostedContentItemRequestBuilder), true)]
    public partial interface IChatMessageHostedContentItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Channels.Item.Messages.Item.Replies.Item.HostedContents.Item.Value
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Channels.Item.Messages.Item.Replies.Item.SetReaction
{
    [Proxy(typeof(SetReactionRequestBuilder), true)]
    public partial interface ISetReactionRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Channels.Item.Messages.Item.Replies.Item.SoftDelete
{
    [Proxy(typeof(SoftDeleteRequestBuilder), true)]
    public partial interface ISoftDeleteRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Channels.Item.Messages.Item.Replies.Item.UndoSoftDelete
{
    [Proxy(typeof(UndoSoftDeleteRequestBuilder), true)]
    public partial interface IUndoSoftDeleteRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Channels.Item.Messages.Item.Replies.Item.UnsetReaction
{
    [Proxy(typeof(UnsetReactionRequestBuilder), true)]
    public partial interface IUnsetReactionRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Channels.Item.Messages.Item.SetReaction
{
    [Proxy(typeof(SetReactionRequestBuilder), true)]
    public partial interface ISetReactionRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Channels.Item.Messages.Item.SoftDelete
{
    [Proxy(typeof(SoftDeleteRequestBuilder), true)]
    public partial interface ISoftDeleteRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Channels.Item.Messages.Item.UndoSoftDelete
{
    [Proxy(typeof(UndoSoftDeleteRequestBuilder), true)]
    public partial interface IUndoSoftDeleteRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Channels.Item.Messages.Item.UnsetReaction
{
    [Proxy(typeof(UnsetReactionRequestBuilder), true)]
    public partial interface IUnsetReactionRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Channels.Item.ProvisionEmail
{
    [Proxy(typeof(ProvisionEmailRequestBuilder), true)]
    public partial interface IProvisionEmailRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Channels.Item.RemoveEmail
{
    [Proxy(typeof(RemoveEmailRequestBuilder), true)]
    public partial interface IRemoveEmailRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Channels.Item.SharedWithTeams
{
    [Proxy(typeof(SharedWithTeamsRequestBuilder), true)]
    public partial interface ISharedWithTeamsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Channels.Item.SharedWithTeams.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Channels.Item.SharedWithTeams.Item
{
    [Proxy(typeof(SharedWithChannelTeamInfoItemRequestBuilder), true)]
    public partial interface ISharedWithChannelTeamInfoItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Channels.Item.SharedWithTeams.Item.AllowedMembers
{
    [Proxy(typeof(AllowedMembersRequestBuilder), true)]
    public partial interface IAllowedMembersRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Channels.Item.SharedWithTeams.Item.AllowedMembers.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Channels.Item.SharedWithTeams.Item.AllowedMembers.Item
{
    [Proxy(typeof(ConversationMemberItemRequestBuilder), true)]
    public partial interface IConversationMemberItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Channels.Item.SharedWithTeams.Item.Team
{
    [Proxy(typeof(TeamRequestBuilder), true)]
    public partial interface ITeamRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Channels.Item.Tabs
{
    [Proxy(typeof(TabsRequestBuilder), true)]
    public partial interface ITabsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Channels.Item.Tabs.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Channels.Item.Tabs.Item
{
    [Proxy(typeof(TeamsTabItemRequestBuilder), true)]
    public partial interface ITeamsTabItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Channels.Item.Tabs.Item.TeamsApp
{
    [Proxy(typeof(TeamsAppRequestBuilder), true)]
    public partial interface ITeamsAppRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Channels.Item.Unarchive
{
    [Proxy(typeof(UnarchiveRequestBuilder), true)]
    public partial interface IUnarchiveRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Clone
{
    [Proxy(typeof(CloneRequestBuilder), true)]
    public partial interface ICloneRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.CompleteMigration
{
    [Proxy(typeof(CompleteMigrationRequestBuilder), true)]
    public partial interface ICompleteMigrationRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Group
{
    [Proxy(typeof(GroupRequestBuilder), true)]
    public partial interface IGroupRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Group.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Group.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.IncomingChannels
{
    [Proxy(typeof(IncomingChannelsRequestBuilder), true)]
    public partial interface IIncomingChannelsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.IncomingChannels.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.IncomingChannels.Item
{
    [Proxy(typeof(ChannelItemRequestBuilder), true)]
    public partial interface IChannelItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.InstalledApps
{
    [Proxy(typeof(InstalledAppsRequestBuilder), true)]
    public partial interface IInstalledAppsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.InstalledApps.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.InstalledApps.Item
{
    [Proxy(typeof(TeamsAppInstallationItemRequestBuilder), true)]
    public partial interface ITeamsAppInstallationItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.InstalledApps.Item.TeamsApp
{
    [Proxy(typeof(TeamsAppRequestBuilder), true)]
    public partial interface ITeamsAppRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.InstalledApps.Item.TeamsAppDefinition
{
    [Proxy(typeof(TeamsAppDefinitionRequestBuilder), true)]
    public partial interface ITeamsAppDefinitionRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.InstalledApps.Item.Upgrade
{
    [Proxy(typeof(UpgradeRequestBuilder), true)]
    public partial interface IUpgradeRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Members
{
    [Proxy(typeof(MembersRequestBuilder), true)]
    public partial interface IMembersRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Members.Add
{
    [Proxy(typeof(AddRequestBuilder), true)]
    public partial interface IAddRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Members.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Members.Item
{
    [Proxy(typeof(ConversationMemberItemRequestBuilder), true)]
    public partial interface IConversationMemberItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Members.Remove
{
    [Proxy(typeof(RemoveRequestBuilder), true)]
    public partial interface IRemoveRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Operations
{
    [Proxy(typeof(OperationsRequestBuilder), true)]
    public partial interface IOperationsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Operations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Operations.Item
{
    [Proxy(typeof(TeamsAsyncOperationItemRequestBuilder), true)]
    public partial interface ITeamsAsyncOperationItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.PermissionGrants
{
    [Proxy(typeof(PermissionGrantsRequestBuilder), true)]
    public partial interface IPermissionGrantsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.PermissionGrants.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.PermissionGrants.Item
{
    [Proxy(typeof(ResourceSpecificPermissionGrantItemRequestBuilder), true)]
    public partial interface IResourceSpecificPermissionGrantItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Photo
{
    [Proxy(typeof(PhotoRequestBuilder), true)]
    public partial interface IPhotoRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Photo.Value
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.PrimaryChannel
{
    [Proxy(typeof(PrimaryChannelRequestBuilder), true)]
    public partial interface IPrimaryChannelRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.PrimaryChannel.AllMembers
{
    [Proxy(typeof(AllMembersRequestBuilder), true)]
    public partial interface IAllMembersRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.PrimaryChannel.AllMembers.Add
{
    [Proxy(typeof(AddRequestBuilder), true)]
    public partial interface IAddRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.PrimaryChannel.AllMembers.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.PrimaryChannel.AllMembers.Item
{
    [Proxy(typeof(ConversationMemberItemRequestBuilder), true)]
    public partial interface IConversationMemberItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.PrimaryChannel.AllMembers.Remove
{
    [Proxy(typeof(RemoveRequestBuilder), true)]
    public partial interface IRemoveRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.PrimaryChannel.Archive
{
    [Proxy(typeof(ArchiveRequestBuilder), true)]
    public partial interface IArchiveRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.PrimaryChannel.CompleteMigration
{
    [Proxy(typeof(CompleteMigrationRequestBuilder), true)]
    public partial interface ICompleteMigrationRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.PrimaryChannel.DoesUserHaveAccessuserIdUserIdTenantIdTenantIdUserPrincipalNameUserPrincipalName
{
    [Proxy(typeof(DoesUserHaveAccessuserIdUserIdTenantIdTenantIdUserPrincipalNameUserPrincipalNameRequestBuilder), true)]
    public partial interface IDoesUserHaveAccessuserIdUserIdTenantIdTenantIdUserPrincipalNameUserPrincipalNameRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.PrimaryChannel.FilesFolder
{
    [Proxy(typeof(FilesFolderRequestBuilder), true)]
    public partial interface IFilesFolderRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.PrimaryChannel.FilesFolder.Content
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.PrimaryChannel.Members
{
    [Proxy(typeof(MembersRequestBuilder), true)]
    public partial interface IMembersRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.PrimaryChannel.Members.Add
{
    [Proxy(typeof(AddRequestBuilder), true)]
    public partial interface IAddRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.PrimaryChannel.Members.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.PrimaryChannel.Members.Item
{
    [Proxy(typeof(ConversationMemberItemRequestBuilder), true)]
    public partial interface IConversationMemberItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.PrimaryChannel.Members.Remove
{
    [Proxy(typeof(RemoveRequestBuilder), true)]
    public partial interface IRemoveRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.PrimaryChannel.Messages
{
    [Proxy(typeof(MessagesRequestBuilder), true)]
    public partial interface IMessagesRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.PrimaryChannel.Messages.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.PrimaryChannel.Messages.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.PrimaryChannel.Messages.Item
{
    [Proxy(typeof(ChatMessageItemRequestBuilder), true)]
    public partial interface IChatMessageItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.PrimaryChannel.Messages.Item.HostedContents
{
    [Proxy(typeof(HostedContentsRequestBuilder), true)]
    public partial interface IHostedContentsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.PrimaryChannel.Messages.Item.HostedContents.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.PrimaryChannel.Messages.Item.HostedContents.Item
{
    [Proxy(typeof(ChatMessageHostedContentItemRequestBuilder), true)]
    public partial interface IChatMessageHostedContentItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.PrimaryChannel.Messages.Item.HostedContents.Item.Value
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.PrimaryChannel.Messages.Item.Replies
{
    [Proxy(typeof(RepliesRequestBuilder), true)]
    public partial interface IRepliesRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.PrimaryChannel.Messages.Item.Replies.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.PrimaryChannel.Messages.Item.Replies.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.PrimaryChannel.Messages.Item.Replies.Item
{
    [Proxy(typeof(ChatMessageItemRequestBuilder), true)]
    public partial interface IChatMessageItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.PrimaryChannel.Messages.Item.Replies.Item.HostedContents
{
    [Proxy(typeof(HostedContentsRequestBuilder), true)]
    public partial interface IHostedContentsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.PrimaryChannel.Messages.Item.Replies.Item.HostedContents.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.PrimaryChannel.Messages.Item.Replies.Item.HostedContents.Item
{
    [Proxy(typeof(ChatMessageHostedContentItemRequestBuilder), true)]
    public partial interface IChatMessageHostedContentItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.PrimaryChannel.Messages.Item.Replies.Item.HostedContents.Item.Value
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.PrimaryChannel.Messages.Item.Replies.Item.SetReaction
{
    [Proxy(typeof(SetReactionRequestBuilder), true)]
    public partial interface ISetReactionRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.PrimaryChannel.Messages.Item.Replies.Item.SoftDelete
{
    [Proxy(typeof(SoftDeleteRequestBuilder), true)]
    public partial interface ISoftDeleteRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.PrimaryChannel.Messages.Item.Replies.Item.UndoSoftDelete
{
    [Proxy(typeof(UndoSoftDeleteRequestBuilder), true)]
    public partial interface IUndoSoftDeleteRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.PrimaryChannel.Messages.Item.Replies.Item.UnsetReaction
{
    [Proxy(typeof(UnsetReactionRequestBuilder), true)]
    public partial interface IUnsetReactionRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.PrimaryChannel.Messages.Item.SetReaction
{
    [Proxy(typeof(SetReactionRequestBuilder), true)]
    public partial interface ISetReactionRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.PrimaryChannel.Messages.Item.SoftDelete
{
    [Proxy(typeof(SoftDeleteRequestBuilder), true)]
    public partial interface ISoftDeleteRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.PrimaryChannel.Messages.Item.UndoSoftDelete
{
    [Proxy(typeof(UndoSoftDeleteRequestBuilder), true)]
    public partial interface IUndoSoftDeleteRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.PrimaryChannel.Messages.Item.UnsetReaction
{
    [Proxy(typeof(UnsetReactionRequestBuilder), true)]
    public partial interface IUnsetReactionRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.PrimaryChannel.ProvisionEmail
{
    [Proxy(typeof(ProvisionEmailRequestBuilder), true)]
    public partial interface IProvisionEmailRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.PrimaryChannel.RemoveEmail
{
    [Proxy(typeof(RemoveEmailRequestBuilder), true)]
    public partial interface IRemoveEmailRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.PrimaryChannel.SharedWithTeams
{
    [Proxy(typeof(SharedWithTeamsRequestBuilder), true)]
    public partial interface ISharedWithTeamsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.PrimaryChannel.SharedWithTeams.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.PrimaryChannel.SharedWithTeams.Item
{
    [Proxy(typeof(SharedWithChannelTeamInfoItemRequestBuilder), true)]
    public partial interface ISharedWithChannelTeamInfoItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.PrimaryChannel.SharedWithTeams.Item.AllowedMembers
{
    [Proxy(typeof(AllowedMembersRequestBuilder), true)]
    public partial interface IAllowedMembersRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.PrimaryChannel.SharedWithTeams.Item.AllowedMembers.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.PrimaryChannel.SharedWithTeams.Item.AllowedMembers.Item
{
    [Proxy(typeof(ConversationMemberItemRequestBuilder), true)]
    public partial interface IConversationMemberItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.PrimaryChannel.SharedWithTeams.Item.Team
{
    [Proxy(typeof(TeamRequestBuilder), true)]
    public partial interface ITeamRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.PrimaryChannel.Tabs
{
    [Proxy(typeof(TabsRequestBuilder), true)]
    public partial interface ITabsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.PrimaryChannel.Tabs.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.PrimaryChannel.Tabs.Item
{
    [Proxy(typeof(TeamsTabItemRequestBuilder), true)]
    public partial interface ITeamsTabItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.PrimaryChannel.Tabs.Item.TeamsApp
{
    [Proxy(typeof(TeamsAppRequestBuilder), true)]
    public partial interface ITeamsAppRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.PrimaryChannel.Unarchive
{
    [Proxy(typeof(UnarchiveRequestBuilder), true)]
    public partial interface IUnarchiveRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Schedule
{
    [Proxy(typeof(ScheduleRequestBuilder), true)]
    public partial interface IScheduleRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Schedule.DayNotes
{
    [Proxy(typeof(DayNotesRequestBuilder), true)]
    public partial interface IDayNotesRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Schedule.DayNotes.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Schedule.DayNotes.Item
{
    [Proxy(typeof(DayNoteItemRequestBuilder), true)]
    public partial interface IDayNoteItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Schedule.OfferShiftRequests
{
    [Proxy(typeof(OfferShiftRequestsRequestBuilder), true)]
    public partial interface IOfferShiftRequestsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Schedule.OfferShiftRequests.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Schedule.OfferShiftRequests.Item
{
    [Proxy(typeof(OfferShiftRequestItemRequestBuilder), true)]
    public partial interface IOfferShiftRequestItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Schedule.OpenShiftChangeRequests
{
    [Proxy(typeof(OpenShiftChangeRequestsRequestBuilder), true)]
    public partial interface IOpenShiftChangeRequestsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Schedule.OpenShiftChangeRequests.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Schedule.OpenShiftChangeRequests.Item
{
    [Proxy(typeof(OpenShiftChangeRequestItemRequestBuilder), true)]
    public partial interface IOpenShiftChangeRequestItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Schedule.OpenShifts
{
    [Proxy(typeof(OpenShiftsRequestBuilder), true)]
    public partial interface IOpenShiftsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Schedule.OpenShifts.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Schedule.OpenShifts.Item
{
    [Proxy(typeof(OpenShiftItemRequestBuilder), true)]
    public partial interface IOpenShiftItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Schedule.SchedulingGroups
{
    [Proxy(typeof(SchedulingGroupsRequestBuilder), true)]
    public partial interface ISchedulingGroupsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Schedule.SchedulingGroups.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Schedule.SchedulingGroups.Item
{
    [Proxy(typeof(SchedulingGroupItemRequestBuilder), true)]
    public partial interface ISchedulingGroupItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Schedule.Share
{
    [Proxy(typeof(ShareRequestBuilder), true)]
    public partial interface IShareRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Schedule.Shifts
{
    [Proxy(typeof(ShiftsRequestBuilder), true)]
    public partial interface IShiftsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Schedule.Shifts.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Schedule.Shifts.Item
{
    [Proxy(typeof(ShiftItemRequestBuilder), true)]
    public partial interface IShiftItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Schedule.SwapShiftsChangeRequests
{
    [Proxy(typeof(SwapShiftsChangeRequestsRequestBuilder), true)]
    public partial interface ISwapShiftsChangeRequestsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Schedule.SwapShiftsChangeRequests.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Schedule.SwapShiftsChangeRequests.Item
{
    [Proxy(typeof(SwapShiftsChangeRequestItemRequestBuilder), true)]
    public partial interface ISwapShiftsChangeRequestItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Schedule.TimeCards
{
    [Proxy(typeof(TimeCardsRequestBuilder), true)]
    public partial interface ITimeCardsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Schedule.TimeCards.ClockIn
{
    [Proxy(typeof(ClockInRequestBuilder), true)]
    public partial interface IClockInRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Schedule.TimeCards.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Schedule.TimeCards.Item
{
    [Proxy(typeof(TimeCardItemRequestBuilder), true)]
    public partial interface ITimeCardItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Schedule.TimeCards.Item.ClockOut
{
    [Proxy(typeof(ClockOutRequestBuilder), true)]
    public partial interface IClockOutRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Schedule.TimeCards.Item.Confirm
{
    [Proxy(typeof(ConfirmRequestBuilder), true)]
    public partial interface IConfirmRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Schedule.TimeCards.Item.EndBreak
{
    [Proxy(typeof(EndBreakRequestBuilder), true)]
    public partial interface IEndBreakRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Schedule.TimeCards.Item.StartBreak
{
    [Proxy(typeof(StartBreakRequestBuilder), true)]
    public partial interface IStartBreakRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Schedule.TimeOffReasons
{
    [Proxy(typeof(TimeOffReasonsRequestBuilder), true)]
    public partial interface ITimeOffReasonsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Schedule.TimeOffReasons.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Schedule.TimeOffReasons.Item
{
    [Proxy(typeof(TimeOffReasonItemRequestBuilder), true)]
    public partial interface ITimeOffReasonItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Schedule.TimeOffRequests
{
    [Proxy(typeof(TimeOffRequestsRequestBuilder), true)]
    public partial interface ITimeOffRequestsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Schedule.TimeOffRequests.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Schedule.TimeOffRequests.Item
{
    [Proxy(typeof(TimeOffRequestItemRequestBuilder), true)]
    public partial interface ITimeOffRequestItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Schedule.TimesOff
{
    [Proxy(typeof(TimesOffRequestBuilder), true)]
    public partial interface ITimesOffRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Schedule.TimesOff.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Schedule.TimesOff.Item
{
    [Proxy(typeof(TimeOffItemRequestBuilder), true)]
    public partial interface ITimeOffItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.SendActivityNotification
{
    [Proxy(typeof(SendActivityNotificationRequestBuilder), true)]
    public partial interface ISendActivityNotificationRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Tags
{
    [Proxy(typeof(TagsRequestBuilder), true)]
    public partial interface ITagsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Tags.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Tags.Item
{
    [Proxy(typeof(TeamworkTagItemRequestBuilder), true)]
    public partial interface ITeamworkTagItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Tags.Item.Members
{
    [Proxy(typeof(MembersRequestBuilder), true)]
    public partial interface IMembersRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Tags.Item.Members.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Tags.Item.Members.Item
{
    [Proxy(typeof(TeamworkTagMemberItemRequestBuilder), true)]
    public partial interface ITeamworkTagMemberItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Template
{
    [Proxy(typeof(TemplateRequestBuilder), true)]
    public partial interface ITemplateRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.JoinedTeams.Item.Unarchive
{
    [Proxy(typeof(UnarchiveRequestBuilder), true)]
    public partial interface IUnarchiveRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.LicenseDetails
{
    [Proxy(typeof(LicenseDetailsRequestBuilder), true)]
    public partial interface ILicenseDetailsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.LicenseDetails.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.LicenseDetails.GetTeamsLicensingDetails
{
    [Proxy(typeof(GetTeamsLicensingDetailsRequestBuilder), true)]
    public partial interface IGetTeamsLicensingDetailsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.LicenseDetails.Item
{
    [Proxy(typeof(LicenseDetailsItemRequestBuilder), true)]
    public partial interface ILicenseDetailsItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.MailboxSettings
{
    [Proxy(typeof(MailboxSettingsRequestBuilder), true)]
    public partial interface IMailboxSettingsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.MailFolders
{
    [Proxy(typeof(MailFoldersRequestBuilder), true)]
    public partial interface IMailFoldersRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.MailFolders.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.MailFolders.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.MailFolders.Item
{
    [Proxy(typeof(MailFolderItemRequestBuilder), true)]
    public partial interface IMailFolderItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.MailFolders.Item.ChildFolders
{
    [Proxy(typeof(ChildFoldersRequestBuilder), true)]
    public partial interface IChildFoldersRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.MailFolders.Item.ChildFolders.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.MailFolders.Item.ChildFolders.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.MailFolders.Item.ChildFolders.Item
{
    [Proxy(typeof(MailFolderItemRequestBuilder), true)]
    public partial interface IMailFolderItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.MailFolders.Item.ChildFolders.Item.Copy
{
    [Proxy(typeof(CopyRequestBuilder), true)]
    public partial interface ICopyRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.MailFolders.Item.ChildFolders.Item.MessageRules
{
    [Proxy(typeof(MessageRulesRequestBuilder), true)]
    public partial interface IMessageRulesRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.MailFolders.Item.ChildFolders.Item.MessageRules.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.MailFolders.Item.ChildFolders.Item.MessageRules.Item
{
    [Proxy(typeof(MessageRuleItemRequestBuilder), true)]
    public partial interface IMessageRuleItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.MailFolders.Item.ChildFolders.Item.Messages
{
    [Proxy(typeof(MessagesRequestBuilder), true)]
    public partial interface IMessagesRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.MailFolders.Item.ChildFolders.Item.Messages.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.MailFolders.Item.ChildFolders.Item.Messages.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.MailFolders.Item.ChildFolders.Item.Messages.Item
{
    [Proxy(typeof(MessageItemRequestBuilder), true)]
    public partial interface IMessageItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.MailFolders.Item.ChildFolders.Item.Messages.Item.Attachments
{
    [Proxy(typeof(AttachmentsRequestBuilder), true)]
    public partial interface IAttachmentsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.MailFolders.Item.ChildFolders.Item.Messages.Item.Attachments.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.MailFolders.Item.ChildFolders.Item.Messages.Item.Attachments.CreateUploadSession
{
    [Proxy(typeof(CreateUploadSessionRequestBuilder), true)]
    public partial interface ICreateUploadSessionRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.MailFolders.Item.ChildFolders.Item.Messages.Item.Attachments.Item
{
    [Proxy(typeof(AttachmentItemRequestBuilder), true)]
    public partial interface IAttachmentItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.MailFolders.Item.ChildFolders.Item.Messages.Item.Copy
{
    [Proxy(typeof(CopyRequestBuilder), true)]
    public partial interface ICopyRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.MailFolders.Item.ChildFolders.Item.Messages.Item.CreateForward
{
    [Proxy(typeof(CreateForwardRequestBuilder), true)]
    public partial interface ICreateForwardRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.MailFolders.Item.ChildFolders.Item.Messages.Item.CreateReply
{
    [Proxy(typeof(CreateReplyRequestBuilder), true)]
    public partial interface ICreateReplyRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.MailFolders.Item.ChildFolders.Item.Messages.Item.CreateReplyAll
{
    [Proxy(typeof(CreateReplyAllRequestBuilder), true)]
    public partial interface ICreateReplyAllRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.MailFolders.Item.ChildFolders.Item.Messages.Item.Extensions
{
    [Proxy(typeof(ExtensionsRequestBuilder), true)]
    public partial interface IExtensionsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.MailFolders.Item.ChildFolders.Item.Messages.Item.Extensions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.MailFolders.Item.ChildFolders.Item.Messages.Item.Extensions.Item
{
    [Proxy(typeof(ExtensionItemRequestBuilder), true)]
    public partial interface IExtensionItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.MailFolders.Item.ChildFolders.Item.Messages.Item.Forward
{
    [Proxy(typeof(ForwardRequestBuilder), true)]
    public partial interface IForwardRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.MailFolders.Item.ChildFolders.Item.Messages.Item.Move
{
    [Proxy(typeof(MoveRequestBuilder), true)]
    public partial interface IMoveRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.MailFolders.Item.ChildFolders.Item.Messages.Item.PermanentDelete
{
    [Proxy(typeof(PermanentDeleteRequestBuilder), true)]
    public partial interface IPermanentDeleteRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.MailFolders.Item.ChildFolders.Item.Messages.Item.Reply
{
    [Proxy(typeof(ReplyRequestBuilder), true)]
    public partial interface IReplyRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.MailFolders.Item.ChildFolders.Item.Messages.Item.ReplyAll
{
    [Proxy(typeof(ReplyAllRequestBuilder), true)]
    public partial interface IReplyAllRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.MailFolders.Item.ChildFolders.Item.Messages.Item.Send
{
    [Proxy(typeof(SendRequestBuilder), true)]
    public partial interface ISendRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.MailFolders.Item.ChildFolders.Item.Messages.Item.Value
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.MailFolders.Item.ChildFolders.Item.Move
{
    [Proxy(typeof(MoveRequestBuilder), true)]
    public partial interface IMoveRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.MailFolders.Item.ChildFolders.Item.PermanentDelete
{
    [Proxy(typeof(PermanentDeleteRequestBuilder), true)]
    public partial interface IPermanentDeleteRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.MailFolders.Item.Copy
{
    [Proxy(typeof(CopyRequestBuilder), true)]
    public partial interface ICopyRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.MailFolders.Item.MessageRules
{
    [Proxy(typeof(MessageRulesRequestBuilder), true)]
    public partial interface IMessageRulesRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.MailFolders.Item.MessageRules.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.MailFolders.Item.MessageRules.Item
{
    [Proxy(typeof(MessageRuleItemRequestBuilder), true)]
    public partial interface IMessageRuleItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.MailFolders.Item.Messages
{
    [Proxy(typeof(MessagesRequestBuilder), true)]
    public partial interface IMessagesRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.MailFolders.Item.Messages.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.MailFolders.Item.Messages.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.MailFolders.Item.Messages.Item
{
    [Proxy(typeof(MessageItemRequestBuilder), true)]
    public partial interface IMessageItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.MailFolders.Item.Messages.Item.Attachments
{
    [Proxy(typeof(AttachmentsRequestBuilder), true)]
    public partial interface IAttachmentsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.MailFolders.Item.Messages.Item.Attachments.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.MailFolders.Item.Messages.Item.Attachments.CreateUploadSession
{
    [Proxy(typeof(CreateUploadSessionRequestBuilder), true)]
    public partial interface ICreateUploadSessionRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.MailFolders.Item.Messages.Item.Attachments.Item
{
    [Proxy(typeof(AttachmentItemRequestBuilder), true)]
    public partial interface IAttachmentItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.MailFolders.Item.Messages.Item.Copy
{
    [Proxy(typeof(CopyRequestBuilder), true)]
    public partial interface ICopyRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.MailFolders.Item.Messages.Item.CreateForward
{
    [Proxy(typeof(CreateForwardRequestBuilder), true)]
    public partial interface ICreateForwardRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.MailFolders.Item.Messages.Item.CreateReply
{
    [Proxy(typeof(CreateReplyRequestBuilder), true)]
    public partial interface ICreateReplyRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.MailFolders.Item.Messages.Item.CreateReplyAll
{
    [Proxy(typeof(CreateReplyAllRequestBuilder), true)]
    public partial interface ICreateReplyAllRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.MailFolders.Item.Messages.Item.Extensions
{
    [Proxy(typeof(ExtensionsRequestBuilder), true)]
    public partial interface IExtensionsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.MailFolders.Item.Messages.Item.Extensions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.MailFolders.Item.Messages.Item.Extensions.Item
{
    [Proxy(typeof(ExtensionItemRequestBuilder), true)]
    public partial interface IExtensionItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.MailFolders.Item.Messages.Item.Forward
{
    [Proxy(typeof(ForwardRequestBuilder), true)]
    public partial interface IForwardRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.MailFolders.Item.Messages.Item.Move
{
    [Proxy(typeof(MoveRequestBuilder), true)]
    public partial interface IMoveRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.MailFolders.Item.Messages.Item.PermanentDelete
{
    [Proxy(typeof(PermanentDeleteRequestBuilder), true)]
    public partial interface IPermanentDeleteRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.MailFolders.Item.Messages.Item.Reply
{
    [Proxy(typeof(ReplyRequestBuilder), true)]
    public partial interface IReplyRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.MailFolders.Item.Messages.Item.ReplyAll
{
    [Proxy(typeof(ReplyAllRequestBuilder), true)]
    public partial interface IReplyAllRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.MailFolders.Item.Messages.Item.Send
{
    [Proxy(typeof(SendRequestBuilder), true)]
    public partial interface ISendRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.MailFolders.Item.Messages.Item.Value
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.MailFolders.Item.Move
{
    [Proxy(typeof(MoveRequestBuilder), true)]
    public partial interface IMoveRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.MailFolders.Item.PermanentDelete
{
    [Proxy(typeof(PermanentDeleteRequestBuilder), true)]
    public partial interface IPermanentDeleteRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.ManagedAppRegistrations
{
    [Proxy(typeof(ManagedAppRegistrationsRequestBuilder), true)]
    public partial interface IManagedAppRegistrationsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.ManagedAppRegistrations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.ManagedAppRegistrations.Item
{
    [Proxy(typeof(ManagedAppRegistrationItemRequestBuilder), true)]
    public partial interface IManagedAppRegistrationItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.ManagedDevices
{
    [Proxy(typeof(ManagedDevicesRequestBuilder), true)]
    public partial interface IManagedDevicesRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.ManagedDevices.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.ManagedDevices.Item
{
    [Proxy(typeof(ManagedDeviceItemRequestBuilder), true)]
    public partial interface IManagedDeviceItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.ManagedDevices.Item.BypassActivationLock
{
    [Proxy(typeof(BypassActivationLockRequestBuilder), true)]
    public partial interface IBypassActivationLockRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.ManagedDevices.Item.CleanWindowsDevice
{
    [Proxy(typeof(CleanWindowsDeviceRequestBuilder), true)]
    public partial interface ICleanWindowsDeviceRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.ManagedDevices.Item.DeleteUserFromSharedAppleDevice
{
    [Proxy(typeof(DeleteUserFromSharedAppleDeviceRequestBuilder), true)]
    public partial interface IDeleteUserFromSharedAppleDeviceRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.ManagedDevices.Item.DeviceCategory
{
    [Proxy(typeof(DeviceCategoryRequestBuilder), true)]
    public partial interface IDeviceCategoryRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.ManagedDevices.Item.DeviceCategory.Ref
{
    [Proxy(typeof(RefRequestBuilder), true)]
    public partial interface IRefRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.ManagedDevices.Item.DeviceCompliancePolicyStates
{
    [Proxy(typeof(DeviceCompliancePolicyStatesRequestBuilder), true)]
    public partial interface IDeviceCompliancePolicyStatesRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.ManagedDevices.Item.DeviceCompliancePolicyStates.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.ManagedDevices.Item.DeviceCompliancePolicyStates.Item
{
    [Proxy(typeof(DeviceCompliancePolicyStateItemRequestBuilder), true)]
    public partial interface IDeviceCompliancePolicyStateItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.ManagedDevices.Item.DeviceConfigurationStates
{
    [Proxy(typeof(DeviceConfigurationStatesRequestBuilder), true)]
    public partial interface IDeviceConfigurationStatesRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.ManagedDevices.Item.DeviceConfigurationStates.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.ManagedDevices.Item.DeviceConfigurationStates.Item
{
    [Proxy(typeof(DeviceConfigurationStateItemRequestBuilder), true)]
    public partial interface IDeviceConfigurationStateItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.ManagedDevices.Item.DisableLostMode
{
    [Proxy(typeof(DisableLostModeRequestBuilder), true)]
    public partial interface IDisableLostModeRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.ManagedDevices.Item.LocateDevice
{
    [Proxy(typeof(LocateDeviceRequestBuilder), true)]
    public partial interface ILocateDeviceRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.ManagedDevices.Item.LogCollectionRequests
{
    [Proxy(typeof(LogCollectionRequestsRequestBuilder), true)]
    public partial interface ILogCollectionRequestsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.ManagedDevices.Item.LogCollectionRequests.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.ManagedDevices.Item.LogCollectionRequests.Item
{
    [Proxy(typeof(DeviceLogCollectionResponseItemRequestBuilder), true)]
    public partial interface IDeviceLogCollectionResponseItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.ManagedDevices.Item.LogCollectionRequests.Item.CreateDownloadUrl
{
    [Proxy(typeof(CreateDownloadUrlRequestBuilder), true)]
    public partial interface ICreateDownloadUrlRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.ManagedDevices.Item.LogoutSharedAppleDeviceActiveUser
{
    [Proxy(typeof(LogoutSharedAppleDeviceActiveUserRequestBuilder), true)]
    public partial interface ILogoutSharedAppleDeviceActiveUserRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.ManagedDevices.Item.RebootNow
{
    [Proxy(typeof(RebootNowRequestBuilder), true)]
    public partial interface IRebootNowRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.ManagedDevices.Item.RecoverPasscode
{
    [Proxy(typeof(RecoverPasscodeRequestBuilder), true)]
    public partial interface IRecoverPasscodeRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.ManagedDevices.Item.RemoteLock
{
    [Proxy(typeof(RemoteLockRequestBuilder), true)]
    public partial interface IRemoteLockRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.ManagedDevices.Item.RequestRemoteAssistance
{
    [Proxy(typeof(RequestRemoteAssistanceRequestBuilder), true)]
    public partial interface IRequestRemoteAssistanceRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.ManagedDevices.Item.ResetPasscode
{
    [Proxy(typeof(ResetPasscodeRequestBuilder), true)]
    public partial interface IResetPasscodeRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.ManagedDevices.Item.Retire
{
    [Proxy(typeof(RetireRequestBuilder), true)]
    public partial interface IRetireRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.ManagedDevices.Item.ShutDown
{
    [Proxy(typeof(ShutDownRequestBuilder), true)]
    public partial interface IShutDownRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.ManagedDevices.Item.SyncDevice
{
    [Proxy(typeof(SyncDeviceRequestBuilder), true)]
    public partial interface ISyncDeviceRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.ManagedDevices.Item.UpdateWindowsDeviceAccount
{
    [Proxy(typeof(UpdateWindowsDeviceAccountRequestBuilder), true)]
    public partial interface IUpdateWindowsDeviceAccountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.ManagedDevices.Item.Users
{
    [Proxy(typeof(UsersRequestBuilder), true)]
    public partial interface IUsersRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.ManagedDevices.Item.WindowsDefenderScan
{
    [Proxy(typeof(WindowsDefenderScanRequestBuilder), true)]
    public partial interface IWindowsDefenderScanRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.ManagedDevices.Item.WindowsDefenderUpdateSignatures
{
    [Proxy(typeof(WindowsDefenderUpdateSignaturesRequestBuilder), true)]
    public partial interface IWindowsDefenderUpdateSignaturesRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.ManagedDevices.Item.WindowsProtectionState
{
    [Proxy(typeof(WindowsProtectionStateRequestBuilder), true)]
    public partial interface IWindowsProtectionStateRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.ManagedDevices.Item.WindowsProtectionState.DetectedMalwareState
{
    [Proxy(typeof(DetectedMalwareStateRequestBuilder), true)]
    public partial interface IDetectedMalwareStateRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.ManagedDevices.Item.WindowsProtectionState.DetectedMalwareState.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.ManagedDevices.Item.WindowsProtectionState.DetectedMalwareState.Item
{
    [Proxy(typeof(WindowsDeviceMalwareStateItemRequestBuilder), true)]
    public partial interface IWindowsDeviceMalwareStateItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.ManagedDevices.Item.Wipe
{
    [Proxy(typeof(WipeRequestBuilder), true)]
    public partial interface IWipeRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Manager
{
    [Proxy(typeof(ManagerRequestBuilder), true)]
    public partial interface IManagerRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Manager.Ref
{
    [Proxy(typeof(RefRequestBuilder), true)]
    public partial interface IRefRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.MemberOf
{
    [Proxy(typeof(MemberOfRequestBuilder), true)]
    public partial interface IMemberOfRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.MemberOf.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.MemberOf.GraphAdministrativeUnit
{
    [Proxy(typeof(GraphAdministrativeUnitRequestBuilder), true)]
    public partial interface IGraphAdministrativeUnitRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.MemberOf.GraphAdministrativeUnit.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.MemberOf.GraphDirectoryRole
{
    [Proxy(typeof(GraphDirectoryRoleRequestBuilder), true)]
    public partial interface IGraphDirectoryRoleRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.MemberOf.GraphDirectoryRole.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.MemberOf.GraphGroup
{
    [Proxy(typeof(GraphGroupRequestBuilder), true)]
    public partial interface IGraphGroupRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.MemberOf.GraphGroup.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.MemberOf.Item
{
    [Proxy(typeof(DirectoryObjectItemRequestBuilder), true)]
    public partial interface IDirectoryObjectItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.MemberOf.Item.GraphAdministrativeUnit
{
    [Proxy(typeof(GraphAdministrativeUnitRequestBuilder), true)]
    public partial interface IGraphAdministrativeUnitRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.MemberOf.Item.GraphDirectoryRole
{
    [Proxy(typeof(GraphDirectoryRoleRequestBuilder), true)]
    public partial interface IGraphDirectoryRoleRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.MemberOf.Item.GraphGroup
{
    [Proxy(typeof(GraphGroupRequestBuilder), true)]
    public partial interface IGraphGroupRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Messages
{
    [Proxy(typeof(MessagesRequestBuilder), true)]
    public partial interface IMessagesRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Messages.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Messages.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Messages.Item
{
    [Proxy(typeof(MessageItemRequestBuilder), true)]
    public partial interface IMessageItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Messages.Item.Attachments
{
    [Proxy(typeof(AttachmentsRequestBuilder), true)]
    public partial interface IAttachmentsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Messages.Item.Attachments.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Messages.Item.Attachments.CreateUploadSession
{
    [Proxy(typeof(CreateUploadSessionRequestBuilder), true)]
    public partial interface ICreateUploadSessionRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Messages.Item.Attachments.Item
{
    [Proxy(typeof(AttachmentItemRequestBuilder), true)]
    public partial interface IAttachmentItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Messages.Item.Copy
{
    [Proxy(typeof(CopyRequestBuilder), true)]
    public partial interface ICopyRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Messages.Item.CreateForward
{
    [Proxy(typeof(CreateForwardRequestBuilder), true)]
    public partial interface ICreateForwardRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Messages.Item.CreateReply
{
    [Proxy(typeof(CreateReplyRequestBuilder), true)]
    public partial interface ICreateReplyRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Messages.Item.CreateReplyAll
{
    [Proxy(typeof(CreateReplyAllRequestBuilder), true)]
    public partial interface ICreateReplyAllRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Messages.Item.Extensions
{
    [Proxy(typeof(ExtensionsRequestBuilder), true)]
    public partial interface IExtensionsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Messages.Item.Extensions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Messages.Item.Extensions.Item
{
    [Proxy(typeof(ExtensionItemRequestBuilder), true)]
    public partial interface IExtensionItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Messages.Item.Forward
{
    [Proxy(typeof(ForwardRequestBuilder), true)]
    public partial interface IForwardRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Messages.Item.Move
{
    [Proxy(typeof(MoveRequestBuilder), true)]
    public partial interface IMoveRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Messages.Item.PermanentDelete
{
    [Proxy(typeof(PermanentDeleteRequestBuilder), true)]
    public partial interface IPermanentDeleteRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Messages.Item.Reply
{
    [Proxy(typeof(ReplyRequestBuilder), true)]
    public partial interface IReplyRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Messages.Item.ReplyAll
{
    [Proxy(typeof(ReplyAllRequestBuilder), true)]
    public partial interface IReplyAllRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Messages.Item.Send
{
    [Proxy(typeof(SendRequestBuilder), true)]
    public partial interface ISendRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Messages.Item.Value
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Oauth2PermissionGrants
{
    [Proxy(typeof(Oauth2PermissionGrantsRequestBuilder), true)]
    public partial interface IOauth2PermissionGrantsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Oauth2PermissionGrants.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Oauth2PermissionGrants.Item
{
    [Proxy(typeof(OAuth2PermissionGrantItemRequestBuilder), true)]
    public partial interface IOAuth2PermissionGrantItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote
{
    [Proxy(typeof(OnenoteRequestBuilder), true)]
    public partial interface IOnenoteRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.Notebooks
{
    [Proxy(typeof(NotebooksRequestBuilder), true)]
    public partial interface INotebooksRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.Notebooks.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.Notebooks.GetNotebookFromWebUrl
{
    [Proxy(typeof(GetNotebookFromWebUrlRequestBuilder), true)]
    public partial interface IGetNotebookFromWebUrlRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.Notebooks.GetRecentNotebooksWithIncludePersonalNotebooks
{
    [Proxy(typeof(GetRecentNotebooksWithIncludePersonalNotebooksRequestBuilder), true)]
    public partial interface IGetRecentNotebooksWithIncludePersonalNotebooksRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.Notebooks.Item
{
    [Proxy(typeof(NotebookItemRequestBuilder), true)]
    public partial interface INotebookItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.Notebooks.Item.CopyNotebook
{
    [Proxy(typeof(CopyNotebookRequestBuilder), true)]
    public partial interface ICopyNotebookRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.Notebooks.Item.SectionGroups
{
    [Proxy(typeof(SectionGroupsRequestBuilder), true)]
    public partial interface ISectionGroupsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.Notebooks.Item.SectionGroups.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.Notebooks.Item.SectionGroups.Item
{
    [Proxy(typeof(SectionGroupItemRequestBuilder), true)]
    public partial interface ISectionGroupItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.Notebooks.Item.SectionGroups.Item.ParentNotebook
{
    [Proxy(typeof(ParentNotebookRequestBuilder), true)]
    public partial interface IParentNotebookRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.Notebooks.Item.SectionGroups.Item.ParentSectionGroup
{
    [Proxy(typeof(ParentSectionGroupRequestBuilder), true)]
    public partial interface IParentSectionGroupRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.Notebooks.Item.SectionGroups.Item.SectionGroups
{
    [Proxy(typeof(SectionGroupsRequestBuilder), true)]
    public partial interface ISectionGroupsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.Notebooks.Item.SectionGroups.Item.SectionGroups.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.Notebooks.Item.SectionGroups.Item.SectionGroups.Item
{
    [Proxy(typeof(SectionGroupItemRequestBuilder), true)]
    public partial interface ISectionGroupItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.Notebooks.Item.SectionGroups.Item.Sections
{
    [Proxy(typeof(SectionsRequestBuilder), true)]
    public partial interface ISectionsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.Notebooks.Item.SectionGroups.Item.Sections.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.Notebooks.Item.SectionGroups.Item.Sections.Item
{
    [Proxy(typeof(OnenoteSectionItemRequestBuilder), true)]
    public partial interface IOnenoteSectionItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.Notebooks.Item.SectionGroups.Item.Sections.Item.CopyToNotebook
{
    [Proxy(typeof(CopyToNotebookRequestBuilder), true)]
    public partial interface ICopyToNotebookRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.Notebooks.Item.SectionGroups.Item.Sections.Item.CopyToSectionGroup
{
    [Proxy(typeof(CopyToSectionGroupRequestBuilder), true)]
    public partial interface ICopyToSectionGroupRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.Notebooks.Item.SectionGroups.Item.Sections.Item.Pages
{
    [Proxy(typeof(PagesRequestBuilder), true)]
    public partial interface IPagesRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.Notebooks.Item.SectionGroups.Item.Sections.Item.Pages.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.Notebooks.Item.SectionGroups.Item.Sections.Item.Pages.Item
{
    [Proxy(typeof(OnenotePageItemRequestBuilder), true)]
    public partial interface IOnenotePageItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.Notebooks.Item.SectionGroups.Item.Sections.Item.Pages.Item.Content
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.Notebooks.Item.SectionGroups.Item.Sections.Item.Pages.Item.CopyToSection
{
    [Proxy(typeof(CopyToSectionRequestBuilder), true)]
    public partial interface ICopyToSectionRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.Notebooks.Item.SectionGroups.Item.Sections.Item.Pages.Item.OnenotePatchContent
{
    [Proxy(typeof(OnenotePatchContentRequestBuilder), true)]
    public partial interface IOnenotePatchContentRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.Notebooks.Item.SectionGroups.Item.Sections.Item.Pages.Item.ParentNotebook
{
    [Proxy(typeof(ParentNotebookRequestBuilder), true)]
    public partial interface IParentNotebookRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.Notebooks.Item.SectionGroups.Item.Sections.Item.Pages.Item.ParentSection
{
    [Proxy(typeof(ParentSectionRequestBuilder), true)]
    public partial interface IParentSectionRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.Notebooks.Item.SectionGroups.Item.Sections.Item.Pages.Item.Preview
{
    [Proxy(typeof(PreviewRequestBuilder), true)]
    public partial interface IPreviewRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.Notebooks.Item.SectionGroups.Item.Sections.Item.ParentNotebook
{
    [Proxy(typeof(ParentNotebookRequestBuilder), true)]
    public partial interface IParentNotebookRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.Notebooks.Item.SectionGroups.Item.Sections.Item.ParentSectionGroup
{
    [Proxy(typeof(ParentSectionGroupRequestBuilder), true)]
    public partial interface IParentSectionGroupRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.Notebooks.Item.Sections
{
    [Proxy(typeof(SectionsRequestBuilder), true)]
    public partial interface ISectionsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.Notebooks.Item.Sections.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.Notebooks.Item.Sections.Item
{
    [Proxy(typeof(OnenoteSectionItemRequestBuilder), true)]
    public partial interface IOnenoteSectionItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.Notebooks.Item.Sections.Item.CopyToNotebook
{
    [Proxy(typeof(CopyToNotebookRequestBuilder), true)]
    public partial interface ICopyToNotebookRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.Notebooks.Item.Sections.Item.CopyToSectionGroup
{
    [Proxy(typeof(CopyToSectionGroupRequestBuilder), true)]
    public partial interface ICopyToSectionGroupRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.Notebooks.Item.Sections.Item.Pages
{
    [Proxy(typeof(PagesRequestBuilder), true)]
    public partial interface IPagesRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.Notebooks.Item.Sections.Item.Pages.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.Notebooks.Item.Sections.Item.Pages.Item
{
    [Proxy(typeof(OnenotePageItemRequestBuilder), true)]
    public partial interface IOnenotePageItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.Notebooks.Item.Sections.Item.Pages.Item.Content
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.Notebooks.Item.Sections.Item.Pages.Item.CopyToSection
{
    [Proxy(typeof(CopyToSectionRequestBuilder), true)]
    public partial interface ICopyToSectionRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.Notebooks.Item.Sections.Item.Pages.Item.OnenotePatchContent
{
    [Proxy(typeof(OnenotePatchContentRequestBuilder), true)]
    public partial interface IOnenotePatchContentRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.Notebooks.Item.Sections.Item.Pages.Item.ParentNotebook
{
    [Proxy(typeof(ParentNotebookRequestBuilder), true)]
    public partial interface IParentNotebookRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.Notebooks.Item.Sections.Item.Pages.Item.ParentSection
{
    [Proxy(typeof(ParentSectionRequestBuilder), true)]
    public partial interface IParentSectionRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.Notebooks.Item.Sections.Item.Pages.Item.Preview
{
    [Proxy(typeof(PreviewRequestBuilder), true)]
    public partial interface IPreviewRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.Notebooks.Item.Sections.Item.ParentNotebook
{
    [Proxy(typeof(ParentNotebookRequestBuilder), true)]
    public partial interface IParentNotebookRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.Notebooks.Item.Sections.Item.ParentSectionGroup
{
    [Proxy(typeof(ParentSectionGroupRequestBuilder), true)]
    public partial interface IParentSectionGroupRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.Operations
{
    [Proxy(typeof(OperationsRequestBuilder), true)]
    public partial interface IOperationsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.Operations.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.Operations.Item
{
    [Proxy(typeof(OnenoteOperationItemRequestBuilder), true)]
    public partial interface IOnenoteOperationItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.Pages
{
    [Proxy(typeof(PagesRequestBuilder), true)]
    public partial interface IPagesRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.Pages.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.Pages.Item
{
    [Proxy(typeof(OnenotePageItemRequestBuilder), true)]
    public partial interface IOnenotePageItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.Pages.Item.Content
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.Pages.Item.CopyToSection
{
    [Proxy(typeof(CopyToSectionRequestBuilder), true)]
    public partial interface ICopyToSectionRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.Pages.Item.OnenotePatchContent
{
    [Proxy(typeof(OnenotePatchContentRequestBuilder), true)]
    public partial interface IOnenotePatchContentRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.Pages.Item.ParentNotebook
{
    [Proxy(typeof(ParentNotebookRequestBuilder), true)]
    public partial interface IParentNotebookRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.Pages.Item.ParentSection
{
    [Proxy(typeof(ParentSectionRequestBuilder), true)]
    public partial interface IParentSectionRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.Pages.Item.Preview
{
    [Proxy(typeof(PreviewRequestBuilder), true)]
    public partial interface IPreviewRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.Resources
{
    [Proxy(typeof(ResourcesRequestBuilder), true)]
    public partial interface IResourcesRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.Resources.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.Resources.Item
{
    [Proxy(typeof(OnenoteResourceItemRequestBuilder), true)]
    public partial interface IOnenoteResourceItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.Resources.Item.Content
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.SectionGroups
{
    [Proxy(typeof(SectionGroupsRequestBuilder), true)]
    public partial interface ISectionGroupsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.SectionGroups.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.SectionGroups.Item
{
    [Proxy(typeof(SectionGroupItemRequestBuilder), true)]
    public partial interface ISectionGroupItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.SectionGroups.Item.ParentNotebook
{
    [Proxy(typeof(ParentNotebookRequestBuilder), true)]
    public partial interface IParentNotebookRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.SectionGroups.Item.ParentSectionGroup
{
    [Proxy(typeof(ParentSectionGroupRequestBuilder), true)]
    public partial interface IParentSectionGroupRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.SectionGroups.Item.SectionGroups
{
    [Proxy(typeof(SectionGroupsRequestBuilder), true)]
    public partial interface ISectionGroupsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.SectionGroups.Item.SectionGroups.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.SectionGroups.Item.SectionGroups.Item
{
    [Proxy(typeof(SectionGroupItemRequestBuilder), true)]
    public partial interface ISectionGroupItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.SectionGroups.Item.Sections
{
    [Proxy(typeof(SectionsRequestBuilder), true)]
    public partial interface ISectionsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.SectionGroups.Item.Sections.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.SectionGroups.Item.Sections.Item
{
    [Proxy(typeof(OnenoteSectionItemRequestBuilder), true)]
    public partial interface IOnenoteSectionItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.SectionGroups.Item.Sections.Item.CopyToNotebook
{
    [Proxy(typeof(CopyToNotebookRequestBuilder), true)]
    public partial interface ICopyToNotebookRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.SectionGroups.Item.Sections.Item.CopyToSectionGroup
{
    [Proxy(typeof(CopyToSectionGroupRequestBuilder), true)]
    public partial interface ICopyToSectionGroupRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.SectionGroups.Item.Sections.Item.Pages
{
    [Proxy(typeof(PagesRequestBuilder), true)]
    public partial interface IPagesRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.SectionGroups.Item.Sections.Item.Pages.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.SectionGroups.Item.Sections.Item.Pages.Item
{
    [Proxy(typeof(OnenotePageItemRequestBuilder), true)]
    public partial interface IOnenotePageItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.SectionGroups.Item.Sections.Item.Pages.Item.Content
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.SectionGroups.Item.Sections.Item.Pages.Item.CopyToSection
{
    [Proxy(typeof(CopyToSectionRequestBuilder), true)]
    public partial interface ICopyToSectionRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.SectionGroups.Item.Sections.Item.Pages.Item.OnenotePatchContent
{
    [Proxy(typeof(OnenotePatchContentRequestBuilder), true)]
    public partial interface IOnenotePatchContentRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.SectionGroups.Item.Sections.Item.Pages.Item.ParentNotebook
{
    [Proxy(typeof(ParentNotebookRequestBuilder), true)]
    public partial interface IParentNotebookRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.SectionGroups.Item.Sections.Item.Pages.Item.ParentSection
{
    [Proxy(typeof(ParentSectionRequestBuilder), true)]
    public partial interface IParentSectionRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.SectionGroups.Item.Sections.Item.Pages.Item.Preview
{
    [Proxy(typeof(PreviewRequestBuilder), true)]
    public partial interface IPreviewRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.SectionGroups.Item.Sections.Item.ParentNotebook
{
    [Proxy(typeof(ParentNotebookRequestBuilder), true)]
    public partial interface IParentNotebookRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.SectionGroups.Item.Sections.Item.ParentSectionGroup
{
    [Proxy(typeof(ParentSectionGroupRequestBuilder), true)]
    public partial interface IParentSectionGroupRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.Sections
{
    [Proxy(typeof(SectionsRequestBuilder), true)]
    public partial interface ISectionsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.Sections.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.Sections.Item
{
    [Proxy(typeof(OnenoteSectionItemRequestBuilder), true)]
    public partial interface IOnenoteSectionItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.Sections.Item.CopyToNotebook
{
    [Proxy(typeof(CopyToNotebookRequestBuilder), true)]
    public partial interface ICopyToNotebookRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.Sections.Item.CopyToSectionGroup
{
    [Proxy(typeof(CopyToSectionGroupRequestBuilder), true)]
    public partial interface ICopyToSectionGroupRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.Sections.Item.Pages
{
    [Proxy(typeof(PagesRequestBuilder), true)]
    public partial interface IPagesRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.Sections.Item.Pages.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.Sections.Item.Pages.Item
{
    [Proxy(typeof(OnenotePageItemRequestBuilder), true)]
    public partial interface IOnenotePageItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.Sections.Item.Pages.Item.Content
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.Sections.Item.Pages.Item.CopyToSection
{
    [Proxy(typeof(CopyToSectionRequestBuilder), true)]
    public partial interface ICopyToSectionRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.Sections.Item.Pages.Item.OnenotePatchContent
{
    [Proxy(typeof(OnenotePatchContentRequestBuilder), true)]
    public partial interface IOnenotePatchContentRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.Sections.Item.Pages.Item.ParentNotebook
{
    [Proxy(typeof(ParentNotebookRequestBuilder), true)]
    public partial interface IParentNotebookRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.Sections.Item.Pages.Item.ParentSection
{
    [Proxy(typeof(ParentSectionRequestBuilder), true)]
    public partial interface IParentSectionRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.Sections.Item.Pages.Item.Preview
{
    [Proxy(typeof(PreviewRequestBuilder), true)]
    public partial interface IPreviewRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.Sections.Item.ParentNotebook
{
    [Proxy(typeof(ParentNotebookRequestBuilder), true)]
    public partial interface IParentNotebookRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Onenote.Sections.Item.ParentSectionGroup
{
    [Proxy(typeof(ParentSectionGroupRequestBuilder), true)]
    public partial interface IParentSectionGroupRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.OnlineMeetings
{
    [Proxy(typeof(OnlineMeetingsRequestBuilder), true)]
    public partial interface IOnlineMeetingsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.OnlineMeetings.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.OnlineMeetings.CreateOrGet
{
    [Proxy(typeof(CreateOrGetRequestBuilder), true)]
    public partial interface ICreateOrGetRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.OnlineMeetings.GetAllRecordingsmeetingOrganizerUserIdMeetingOrganizerUserIdWithStartDateTimeWithEndDateTime
{
    [Proxy(typeof(GetAllRecordingsmeetingOrganizerUserIdMeetingOrganizerUserIdWithStartDateTimeWithEndDateTimeRequestBuilder), true)]
    public partial interface IGetAllRecordingsmeetingOrganizerUserIdMeetingOrganizerUserIdWithStartDateTimeWithEndDateTimeRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.OnlineMeetings.GetAllTranscriptsmeetingOrganizerUserIdMeetingOrganizerUserIdWithStartDateTimeWithEndDateTime
{
    [Proxy(typeof(GetAllTranscriptsmeetingOrganizerUserIdMeetingOrganizerUserIdWithStartDateTimeWithEndDateTimeRequestBuilder), true)]
    public partial interface IGetAllTranscriptsmeetingOrganizerUserIdMeetingOrganizerUserIdWithStartDateTimeWithEndDateTimeRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.OnlineMeetings.Item
{
    [Proxy(typeof(OnlineMeetingItemRequestBuilder), true)]
    public partial interface IOnlineMeetingItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.OnlineMeetings.Item.AttendanceReports
{
    [Proxy(typeof(AttendanceReportsRequestBuilder), true)]
    public partial interface IAttendanceReportsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.OnlineMeetings.Item.AttendanceReports.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.OnlineMeetings.Item.AttendanceReports.Item
{
    [Proxy(typeof(MeetingAttendanceReportItemRequestBuilder), true)]
    public partial interface IMeetingAttendanceReportItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.OnlineMeetings.Item.AttendanceReports.Item.AttendanceRecords
{
    [Proxy(typeof(AttendanceRecordsRequestBuilder), true)]
    public partial interface IAttendanceRecordsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.OnlineMeetings.Item.AttendanceReports.Item.AttendanceRecords.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.OnlineMeetings.Item.AttendanceReports.Item.AttendanceRecords.Item
{
    [Proxy(typeof(AttendanceRecordItemRequestBuilder), true)]
    public partial interface IAttendanceRecordItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.OnlineMeetings.Item.AttendeeReport
{
    [Proxy(typeof(AttendeeReportRequestBuilder), true)]
    public partial interface IAttendeeReportRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.OnlineMeetings.Item.GetVirtualAppointmentJoinWebUrl
{
    [Proxy(typeof(GetVirtualAppointmentJoinWebUrlRequestBuilder), true)]
    public partial interface IGetVirtualAppointmentJoinWebUrlRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.OnlineMeetings.Item.Recordings
{
    [Proxy(typeof(RecordingsRequestBuilder), true)]
    public partial interface IRecordingsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.OnlineMeetings.Item.Recordings.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.OnlineMeetings.Item.Recordings.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.OnlineMeetings.Item.Recordings.Item
{
    [Proxy(typeof(CallRecordingItemRequestBuilder), true)]
    public partial interface ICallRecordingItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.OnlineMeetings.Item.Recordings.Item.Content
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.OnlineMeetings.Item.SendVirtualAppointmentReminderSms
{
    [Proxy(typeof(SendVirtualAppointmentReminderSmsRequestBuilder), true)]
    public partial interface ISendVirtualAppointmentReminderSmsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.OnlineMeetings.Item.SendVirtualAppointmentSms
{
    [Proxy(typeof(SendVirtualAppointmentSmsRequestBuilder), true)]
    public partial interface ISendVirtualAppointmentSmsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.OnlineMeetings.Item.Transcripts
{
    [Proxy(typeof(TranscriptsRequestBuilder), true)]
    public partial interface ITranscriptsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.OnlineMeetings.Item.Transcripts.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.OnlineMeetings.Item.Transcripts.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.OnlineMeetings.Item.Transcripts.Item
{
    [Proxy(typeof(CallTranscriptItemRequestBuilder), true)]
    public partial interface ICallTranscriptItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.OnlineMeetings.Item.Transcripts.Item.Content
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.OnlineMeetings.Item.Transcripts.Item.MetadataContent
{
    [Proxy(typeof(MetadataContentRequestBuilder), true)]
    public partial interface IMetadataContentRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Outlook
{
    [Proxy(typeof(OutlookRequestBuilder), true)]
    public partial interface IOutlookRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Outlook.MasterCategories
{
    [Proxy(typeof(MasterCategoriesRequestBuilder), true)]
    public partial interface IMasterCategoriesRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Outlook.MasterCategories.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Outlook.MasterCategories.Item
{
    [Proxy(typeof(OutlookCategoryItemRequestBuilder), true)]
    public partial interface IOutlookCategoryItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Outlook.SupportedLanguages
{
    [Proxy(typeof(SupportedLanguagesRequestBuilder), true)]
    public partial interface ISupportedLanguagesRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Outlook.SupportedTimeZones
{
    [Proxy(typeof(SupportedTimeZonesRequestBuilder), true)]
    public partial interface ISupportedTimeZonesRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Outlook.SupportedTimeZonesWithTimeZoneStandard
{
    [Proxy(typeof(SupportedTimeZonesWithTimeZoneStandardRequestBuilder), true)]
    public partial interface ISupportedTimeZonesWithTimeZoneStandardRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.OwnedDevices
{
    [Proxy(typeof(OwnedDevicesRequestBuilder), true)]
    public partial interface IOwnedDevicesRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.OwnedDevices.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.OwnedDevices.GraphAppRoleAssignment
{
    [Proxy(typeof(GraphAppRoleAssignmentRequestBuilder), true)]
    public partial interface IGraphAppRoleAssignmentRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.OwnedDevices.GraphAppRoleAssignment.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.OwnedDevices.GraphDevice
{
    [Proxy(typeof(GraphDeviceRequestBuilder), true)]
    public partial interface IGraphDeviceRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.OwnedDevices.GraphDevice.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.OwnedDevices.GraphEndpoint
{
    [Proxy(typeof(GraphEndpointRequestBuilder), true)]
    public partial interface IGraphEndpointRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.OwnedDevices.GraphEndpoint.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.OwnedDevices.Item
{
    [Proxy(typeof(DirectoryObjectItemRequestBuilder), true)]
    public partial interface IDirectoryObjectItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.OwnedDevices.Item.GraphAppRoleAssignment
{
    [Proxy(typeof(GraphAppRoleAssignmentRequestBuilder), true)]
    public partial interface IGraphAppRoleAssignmentRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.OwnedDevices.Item.GraphDevice
{
    [Proxy(typeof(GraphDeviceRequestBuilder), true)]
    public partial interface IGraphDeviceRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.OwnedDevices.Item.GraphEndpoint
{
    [Proxy(typeof(GraphEndpointRequestBuilder), true)]
    public partial interface IGraphEndpointRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.OwnedObjects
{
    [Proxy(typeof(OwnedObjectsRequestBuilder), true)]
    public partial interface IOwnedObjectsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.OwnedObjects.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.OwnedObjects.GraphApplication
{
    [Proxy(typeof(GraphApplicationRequestBuilder), true)]
    public partial interface IGraphApplicationRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.OwnedObjects.GraphApplication.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.OwnedObjects.GraphGroup
{
    [Proxy(typeof(GraphGroupRequestBuilder), true)]
    public partial interface IGraphGroupRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.OwnedObjects.GraphGroup.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.OwnedObjects.GraphServicePrincipal
{
    [Proxy(typeof(GraphServicePrincipalRequestBuilder), true)]
    public partial interface IGraphServicePrincipalRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.OwnedObjects.GraphServicePrincipal.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.OwnedObjects.Item
{
    [Proxy(typeof(DirectoryObjectItemRequestBuilder), true)]
    public partial interface IDirectoryObjectItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.OwnedObjects.Item.GraphApplication
{
    [Proxy(typeof(GraphApplicationRequestBuilder), true)]
    public partial interface IGraphApplicationRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.OwnedObjects.Item.GraphGroup
{
    [Proxy(typeof(GraphGroupRequestBuilder), true)]
    public partial interface IGraphGroupRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.OwnedObjects.Item.GraphServicePrincipal
{
    [Proxy(typeof(GraphServicePrincipalRequestBuilder), true)]
    public partial interface IGraphServicePrincipalRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.People
{
    [Proxy(typeof(PeopleRequestBuilder), true)]
    public partial interface IPeopleRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.People.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.People.Item
{
    [Proxy(typeof(PersonItemRequestBuilder), true)]
    public partial interface IPersonItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.PermissionGrants
{
    [Proxy(typeof(PermissionGrantsRequestBuilder), true)]
    public partial interface IPermissionGrantsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.PermissionGrants.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.PermissionGrants.Item
{
    [Proxy(typeof(ResourceSpecificPermissionGrantItemRequestBuilder), true)]
    public partial interface IResourceSpecificPermissionGrantItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Photo
{
    [Proxy(typeof(PhotoRequestBuilder), true)]
    public partial interface IPhotoRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Photo.Value
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Photos
{
    [Proxy(typeof(PhotosRequestBuilder), true)]
    public partial interface IPhotosRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Photos.Item
{
    [Proxy(typeof(ProfilePhotoItemRequestBuilder), true)]
    public partial interface IProfilePhotoItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Photos.Item.Value
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Planner
{
    [Proxy(typeof(PlannerRequestBuilder), true)]
    public partial interface IPlannerRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Planner.Plans
{
    [Proxy(typeof(PlansRequestBuilder), true)]
    public partial interface IPlansRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Planner.Plans.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Planner.Plans.Item
{
    [Proxy(typeof(PlannerPlanItemRequestBuilder), true)]
    public partial interface IPlannerPlanItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Planner.Plans.Item.Buckets
{
    [Proxy(typeof(BucketsRequestBuilder), true)]
    public partial interface IBucketsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Planner.Plans.Item.Buckets.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Planner.Plans.Item.Buckets.Item
{
    [Proxy(typeof(PlannerBucketItemRequestBuilder), true)]
    public partial interface IPlannerBucketItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Planner.Plans.Item.Buckets.Item.Tasks
{
    [Proxy(typeof(TasksRequestBuilder), true)]
    public partial interface ITasksRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Planner.Plans.Item.Buckets.Item.Tasks.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Planner.Plans.Item.Buckets.Item.Tasks.Item
{
    [Proxy(typeof(PlannerTaskItemRequestBuilder), true)]
    public partial interface IPlannerTaskItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Planner.Plans.Item.Buckets.Item.Tasks.Item.AssignedToTaskBoardFormat
{
    [Proxy(typeof(AssignedToTaskBoardFormatRequestBuilder), true)]
    public partial interface IAssignedToTaskBoardFormatRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Planner.Plans.Item.Buckets.Item.Tasks.Item.BucketTaskBoardFormat
{
    [Proxy(typeof(BucketTaskBoardFormatRequestBuilder), true)]
    public partial interface IBucketTaskBoardFormatRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Planner.Plans.Item.Buckets.Item.Tasks.Item.Details
{
    [Proxy(typeof(DetailsRequestBuilder), true)]
    public partial interface IDetailsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Planner.Plans.Item.Buckets.Item.Tasks.Item.ProgressTaskBoardFormat
{
    [Proxy(typeof(ProgressTaskBoardFormatRequestBuilder), true)]
    public partial interface IProgressTaskBoardFormatRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Planner.Plans.Item.Details
{
    [Proxy(typeof(DetailsRequestBuilder), true)]
    public partial interface IDetailsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Planner.Plans.Item.Tasks
{
    [Proxy(typeof(TasksRequestBuilder), true)]
    public partial interface ITasksRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Planner.Plans.Item.Tasks.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Planner.Plans.Item.Tasks.Item
{
    [Proxy(typeof(PlannerTaskItemRequestBuilder), true)]
    public partial interface IPlannerTaskItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Planner.Plans.Item.Tasks.Item.AssignedToTaskBoardFormat
{
    [Proxy(typeof(AssignedToTaskBoardFormatRequestBuilder), true)]
    public partial interface IAssignedToTaskBoardFormatRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Planner.Plans.Item.Tasks.Item.BucketTaskBoardFormat
{
    [Proxy(typeof(BucketTaskBoardFormatRequestBuilder), true)]
    public partial interface IBucketTaskBoardFormatRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Planner.Plans.Item.Tasks.Item.Details
{
    [Proxy(typeof(DetailsRequestBuilder), true)]
    public partial interface IDetailsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Planner.Plans.Item.Tasks.Item.ProgressTaskBoardFormat
{
    [Proxy(typeof(ProgressTaskBoardFormatRequestBuilder), true)]
    public partial interface IProgressTaskBoardFormatRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Planner.Tasks
{
    [Proxy(typeof(TasksRequestBuilder), true)]
    public partial interface ITasksRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Planner.Tasks.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Planner.Tasks.Item
{
    [Proxy(typeof(PlannerTaskItemRequestBuilder), true)]
    public partial interface IPlannerTaskItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Planner.Tasks.Item.AssignedToTaskBoardFormat
{
    [Proxy(typeof(AssignedToTaskBoardFormatRequestBuilder), true)]
    public partial interface IAssignedToTaskBoardFormatRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Planner.Tasks.Item.BucketTaskBoardFormat
{
    [Proxy(typeof(BucketTaskBoardFormatRequestBuilder), true)]
    public partial interface IBucketTaskBoardFormatRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Planner.Tasks.Item.Details
{
    [Proxy(typeof(DetailsRequestBuilder), true)]
    public partial interface IDetailsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Planner.Tasks.Item.ProgressTaskBoardFormat
{
    [Proxy(typeof(ProgressTaskBoardFormatRequestBuilder), true)]
    public partial interface IProgressTaskBoardFormatRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Presence
{
    [Proxy(typeof(PresenceRequestBuilder), true)]
    public partial interface IPresenceRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Presence.ClearPresence
{
    [Proxy(typeof(ClearPresenceRequestBuilder), true)]
    public partial interface IClearPresenceRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Presence.ClearUserPreferredPresence
{
    [Proxy(typeof(ClearUserPreferredPresenceRequestBuilder), true)]
    public partial interface IClearUserPreferredPresenceRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Presence.SetPresence
{
    [Proxy(typeof(SetPresenceRequestBuilder), true)]
    public partial interface ISetPresenceRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Presence.SetStatusMessage
{
    [Proxy(typeof(SetStatusMessageRequestBuilder), true)]
    public partial interface ISetStatusMessageRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Presence.SetUserPreferredPresence
{
    [Proxy(typeof(SetUserPreferredPresenceRequestBuilder), true)]
    public partial interface ISetUserPreferredPresenceRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.RegisteredDevices
{
    [Proxy(typeof(RegisteredDevicesRequestBuilder), true)]
    public partial interface IRegisteredDevicesRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.RegisteredDevices.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.RegisteredDevices.GraphAppRoleAssignment
{
    [Proxy(typeof(GraphAppRoleAssignmentRequestBuilder), true)]
    public partial interface IGraphAppRoleAssignmentRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.RegisteredDevices.GraphAppRoleAssignment.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.RegisteredDevices.GraphDevice
{
    [Proxy(typeof(GraphDeviceRequestBuilder), true)]
    public partial interface IGraphDeviceRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.RegisteredDevices.GraphDevice.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.RegisteredDevices.GraphEndpoint
{
    [Proxy(typeof(GraphEndpointRequestBuilder), true)]
    public partial interface IGraphEndpointRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.RegisteredDevices.GraphEndpoint.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.RegisteredDevices.Item
{
    [Proxy(typeof(DirectoryObjectItemRequestBuilder), true)]
    public partial interface IDirectoryObjectItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.RegisteredDevices.Item.GraphAppRoleAssignment
{
    [Proxy(typeof(GraphAppRoleAssignmentRequestBuilder), true)]
    public partial interface IGraphAppRoleAssignmentRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.RegisteredDevices.Item.GraphDevice
{
    [Proxy(typeof(GraphDeviceRequestBuilder), true)]
    public partial interface IGraphDeviceRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.RegisteredDevices.Item.GraphEndpoint
{
    [Proxy(typeof(GraphEndpointRequestBuilder), true)]
    public partial interface IGraphEndpointRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.ReminderViewWithStartDateTimeWithEndDateTime
{
    [Proxy(typeof(ReminderViewWithStartDateTimeWithEndDateTimeRequestBuilder), true)]
    public partial interface IReminderViewWithStartDateTimeWithEndDateTimeRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.RemoveAllDevicesFromManagement
{
    [Proxy(typeof(RemoveAllDevicesFromManagementRequestBuilder), true)]
    public partial interface IRemoveAllDevicesFromManagementRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.ReprocessLicenseAssignment
{
    [Proxy(typeof(ReprocessLicenseAssignmentRequestBuilder), true)]
    public partial interface IReprocessLicenseAssignmentRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Restore
{
    [Proxy(typeof(RestoreRequestBuilder), true)]
    public partial interface IRestoreRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.RetryServiceProvisioning
{
    [Proxy(typeof(RetryServiceProvisioningRequestBuilder), true)]
    public partial interface IRetryServiceProvisioningRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.RevokeSignInSessions
{
    [Proxy(typeof(RevokeSignInSessionsRequestBuilder), true)]
    public partial interface IRevokeSignInSessionsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.ScopedRoleMemberOf
{
    [Proxy(typeof(ScopedRoleMemberOfRequestBuilder), true)]
    public partial interface IScopedRoleMemberOfRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.ScopedRoleMemberOf.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.ScopedRoleMemberOf.Item
{
    [Proxy(typeof(ScopedRoleMembershipItemRequestBuilder), true)]
    public partial interface IScopedRoleMembershipItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.SendMail
{
    [Proxy(typeof(SendMailRequestBuilder), true)]
    public partial interface ISendMailRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.ServiceProvisioningErrors
{
    [Proxy(typeof(ServiceProvisioningErrorsRequestBuilder), true)]
    public partial interface IServiceProvisioningErrorsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.ServiceProvisioningErrors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Settings
{
    [Proxy(typeof(SettingsRequestBuilder), true)]
    public partial interface ISettingsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Settings.ItemInsights
{
    [Proxy(typeof(ItemInsightsRequestBuilder), true)]
    public partial interface IItemInsightsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Settings.ShiftPreferences
{
    [Proxy(typeof(ShiftPreferencesRequestBuilder), true)]
    public partial interface IShiftPreferencesRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Settings.Storage
{
    [Proxy(typeof(StorageRequestBuilder), true)]
    public partial interface IStorageRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Settings.Storage.Quota
{
    [Proxy(typeof(QuotaRequestBuilder), true)]
    public partial interface IQuotaRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Settings.Storage.Quota.Services
{
    [Proxy(typeof(ServicesRequestBuilder), true)]
    public partial interface IServicesRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Settings.Storage.Quota.Services.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Settings.Storage.Quota.Services.Item
{
    [Proxy(typeof(ServiceStorageQuotaBreakdownItemRequestBuilder), true)]
    public partial interface IServiceStorageQuotaBreakdownItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Settings.Windows
{
    [Proxy(typeof(WindowsRequestBuilder), true)]
    public partial interface IWindowsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Settings.Windows.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Settings.Windows.Item
{
    [Proxy(typeof(WindowsSettingItemRequestBuilder), true)]
    public partial interface IWindowsSettingItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Settings.Windows.Item.Instances
{
    [Proxy(typeof(InstancesRequestBuilder), true)]
    public partial interface IInstancesRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Settings.Windows.Item.Instances.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Settings.Windows.Item.Instances.Item
{
    [Proxy(typeof(WindowsSettingInstanceItemRequestBuilder), true)]
    public partial interface IWindowsSettingInstanceItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Solutions
{
    [Proxy(typeof(SolutionsRequestBuilder), true)]
    public partial interface ISolutionsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Solutions.WorkingTimeSchedule
{
    [Proxy(typeof(WorkingTimeScheduleRequestBuilder), true)]
    public partial interface IWorkingTimeScheduleRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Solutions.WorkingTimeSchedule.EndWorkingTime
{
    [Proxy(typeof(EndWorkingTimeRequestBuilder), true)]
    public partial interface IEndWorkingTimeRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Solutions.WorkingTimeSchedule.StartWorkingTime
{
    [Proxy(typeof(StartWorkingTimeRequestBuilder), true)]
    public partial interface IStartWorkingTimeRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Sponsors
{
    [Proxy(typeof(SponsorsRequestBuilder), true)]
    public partial interface ISponsorsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Sponsors.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Sponsors.Item
{
    [Proxy(typeof(DirectoryObjectItemRequestBuilder), true)]
    public partial interface IDirectoryObjectItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Teamwork
{
    [Proxy(typeof(TeamworkRequestBuilder), true)]
    public partial interface ITeamworkRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Teamwork.AssociatedTeams
{
    [Proxy(typeof(AssociatedTeamsRequestBuilder), true)]
    public partial interface IAssociatedTeamsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Teamwork.AssociatedTeams.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Teamwork.AssociatedTeams.Item
{
    [Proxy(typeof(AssociatedTeamInfoItemRequestBuilder), true)]
    public partial interface IAssociatedTeamInfoItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Teamwork.AssociatedTeams.Item.Team
{
    [Proxy(typeof(TeamRequestBuilder), true)]
    public partial interface ITeamRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Teamwork.InstalledApps
{
    [Proxy(typeof(InstalledAppsRequestBuilder), true)]
    public partial interface IInstalledAppsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Teamwork.InstalledApps.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Teamwork.InstalledApps.Item
{
    [Proxy(typeof(UserScopeTeamsAppInstallationItemRequestBuilder), true)]
    public partial interface IUserScopeTeamsAppInstallationItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Teamwork.InstalledApps.Item.Chat
{
    [Proxy(typeof(ChatRequestBuilder), true)]
    public partial interface IChatRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Teamwork.InstalledApps.Item.TeamsApp
{
    [Proxy(typeof(TeamsAppRequestBuilder), true)]
    public partial interface ITeamsAppRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Teamwork.InstalledApps.Item.TeamsAppDefinition
{
    [Proxy(typeof(TeamsAppDefinitionRequestBuilder), true)]
    public partial interface ITeamsAppDefinitionRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Teamwork.SendActivityNotification
{
    [Proxy(typeof(SendActivityNotificationRequestBuilder), true)]
    public partial interface ISendActivityNotificationRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Todo
{
    [Proxy(typeof(TodoRequestBuilder), true)]
    public partial interface ITodoRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Todo.Lists
{
    [Proxy(typeof(ListsRequestBuilder), true)]
    public partial interface IListsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Todo.Lists.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Todo.Lists.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Todo.Lists.Item
{
    [Proxy(typeof(TodoTaskListItemRequestBuilder), true)]
    public partial interface ITodoTaskListItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Todo.Lists.Item.Extensions
{
    [Proxy(typeof(ExtensionsRequestBuilder), true)]
    public partial interface IExtensionsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Todo.Lists.Item.Extensions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Todo.Lists.Item.Extensions.Item
{
    [Proxy(typeof(ExtensionItemRequestBuilder), true)]
    public partial interface IExtensionItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Todo.Lists.Item.Tasks
{
    [Proxy(typeof(TasksRequestBuilder), true)]
    public partial interface ITasksRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Todo.Lists.Item.Tasks.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Todo.Lists.Item.Tasks.Delta
{
    [Proxy(typeof(DeltaRequestBuilder), true)]
    public partial interface IDeltaRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Todo.Lists.Item.Tasks.Item
{
    [Proxy(typeof(TodoTaskItemRequestBuilder), true)]
    public partial interface ITodoTaskItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Todo.Lists.Item.Tasks.Item.Attachments
{
    [Proxy(typeof(AttachmentsRequestBuilder), true)]
    public partial interface IAttachmentsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Todo.Lists.Item.Tasks.Item.Attachments.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Todo.Lists.Item.Tasks.Item.Attachments.CreateUploadSession
{
    [Proxy(typeof(CreateUploadSessionRequestBuilder), true)]
    public partial interface ICreateUploadSessionRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Todo.Lists.Item.Tasks.Item.Attachments.Item
{
    [Proxy(typeof(AttachmentBaseItemRequestBuilder), true)]
    public partial interface IAttachmentBaseItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Todo.Lists.Item.Tasks.Item.Attachments.Item.Value
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Todo.Lists.Item.Tasks.Item.AttachmentSessions
{
    [Proxy(typeof(AttachmentSessionsRequestBuilder), true)]
    public partial interface IAttachmentSessionsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Todo.Lists.Item.Tasks.Item.AttachmentSessions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Todo.Lists.Item.Tasks.Item.AttachmentSessions.Item
{
    [Proxy(typeof(AttachmentSessionItemRequestBuilder), true)]
    public partial interface IAttachmentSessionItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Todo.Lists.Item.Tasks.Item.AttachmentSessions.Item.Content
{
    [Proxy(typeof(ContentRequestBuilder), true)]
    public partial interface IContentRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Todo.Lists.Item.Tasks.Item.ChecklistItems
{
    [Proxy(typeof(ChecklistItemsRequestBuilder), true)]
    public partial interface IChecklistItemsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Todo.Lists.Item.Tasks.Item.ChecklistItems.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Todo.Lists.Item.Tasks.Item.ChecklistItems.Item
{
    [Proxy(typeof(ChecklistItemItemRequestBuilder), true)]
    public partial interface IChecklistItemItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Todo.Lists.Item.Tasks.Item.Extensions
{
    [Proxy(typeof(ExtensionsRequestBuilder), true)]
    public partial interface IExtensionsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Todo.Lists.Item.Tasks.Item.Extensions.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Todo.Lists.Item.Tasks.Item.Extensions.Item
{
    [Proxy(typeof(ExtensionItemRequestBuilder), true)]
    public partial interface IExtensionItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Todo.Lists.Item.Tasks.Item.LinkedResources
{
    [Proxy(typeof(LinkedResourcesRequestBuilder), true)]
    public partial interface ILinkedResourcesRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Todo.Lists.Item.Tasks.Item.LinkedResources.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.Todo.Lists.Item.Tasks.Item.LinkedResources.Item
{
    [Proxy(typeof(LinkedResourceItemRequestBuilder), true)]
    public partial interface ILinkedResourceItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.TransitiveMemberOf
{
    [Proxy(typeof(TransitiveMemberOfRequestBuilder), true)]
    public partial interface ITransitiveMemberOfRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.TransitiveMemberOf.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.TransitiveMemberOf.GraphAdministrativeUnit
{
    [Proxy(typeof(GraphAdministrativeUnitRequestBuilder), true)]
    public partial interface IGraphAdministrativeUnitRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.TransitiveMemberOf.GraphAdministrativeUnit.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.TransitiveMemberOf.GraphDirectoryRole
{
    [Proxy(typeof(GraphDirectoryRoleRequestBuilder), true)]
    public partial interface IGraphDirectoryRoleRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.TransitiveMemberOf.GraphDirectoryRole.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.TransitiveMemberOf.GraphGroup
{
    [Proxy(typeof(GraphGroupRequestBuilder), true)]
    public partial interface IGraphGroupRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.TransitiveMemberOf.GraphGroup.Count
{
    [Proxy(typeof(CountRequestBuilder), true)]
    public partial interface ICountRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.TransitiveMemberOf.Item
{
    [Proxy(typeof(DirectoryObjectItemRequestBuilder), true)]
    public partial interface IDirectoryObjectItemRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.TransitiveMemberOf.Item.GraphAdministrativeUnit
{
    [Proxy(typeof(GraphAdministrativeUnitRequestBuilder), true)]
    public partial interface IGraphAdministrativeUnitRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.TransitiveMemberOf.Item.GraphDirectoryRole
{
    [Proxy(typeof(GraphDirectoryRoleRequestBuilder), true)]
    public partial interface IGraphDirectoryRoleRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.TransitiveMemberOf.Item.GraphGroup
{
    [Proxy(typeof(GraphGroupRequestBuilder), true)]
    public partial interface IGraphGroupRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.TranslateExchangeIds
{
    [Proxy(typeof(TranslateExchangeIdsRequestBuilder), true)]
    public partial interface ITranslateExchangeIdsRequestBuilder;
}

namespace Microsoft.Graph.Users.Item.WipeManagedAppRegistrationsByDeviceTag
{
    [Proxy(typeof(WipeManagedAppRegistrationsByDeviceTagRequestBuilder), true)]
    public partial interface IWipeManagedAppRegistrationsByDeviceTagRequestBuilder;
}

namespace Microsoft.Graph.Users.ValidateProperties
{
    [Proxy(typeof(ValidatePropertiesRequestBuilder), true)]
    public partial interface IValidatePropertiesRequestBuilder;
}

namespace Microsoft.Graph.UsersWithUserPrincipalName
{
    [Proxy(typeof(UsersWithUserPrincipalNameRequestBuilder), true)]
    public partial interface IUsersWithUserPrincipalNameRequestBuilder;
}

